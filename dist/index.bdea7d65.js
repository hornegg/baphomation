// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2HtCd":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "4a236f9275d0a351";
module.bundle.HMR_BUNDLE_ID = "222e65dabdea7d65";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.
    if (!parents.length) return true;
    return parents.some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"7PGg5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
/* eslint-disable immutable/no-let */ /* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _settings = require("./settings");
var _settingsDefault = parcelHelpers.interopDefault(_settings);
var _choreograph = require("./choreograph");
var _adornedHead = require("./meshes/adornedHead");
var _body = require("./meshes/body");
var _frameCapture = require("./frameCapture");
var _lettering = require("./lettering");
var _main = require("./components/main");
var _effectComposer = require("three/examples/jsm/postprocessing/EffectComposer");
var _getCameraPosition = require("./getCameraPosition");
var _getCameraPositionDefault = parcelHelpers.interopDefault(_getCameraPosition);
var _layers = require("./layers");
var _renderPass = require("three/examples/jsm/postprocessing/RenderPass");
var _shaderPass = require("three/examples/jsm/postprocessing/ShaderPass");
var _shaders = require("./shaders");
var _shadersDefault = parcelHelpers.interopDefault(_shaders);
var _materials = require("./materials");
const hueAdjustments = {
    blue: 128,
    green: 60,
    yellow: 20,
    red: -30
};
const renderWidth = _settingsDefault.default.width * 2;
const renderHeight = _settingsDefault.default.height * 2;
const run = async ()=>{
    const main = _main.createMainComponent({
        head: _adornedHead.createAdornedHead(),
        body: _body.createBody()
    });
    const frameCapture = _frameCapture.createFrameCaptureComponent();
    const scene = new _three.Scene();
    const cameras = [];
    const parentDiv = document.createElement('div');
    parentDiv.style.display = 'none';
    const createRenderPass = (layer)=>{
        const camera = new _three.PerspectiveCamera(75, 1.2, 0.1, 1000);
        camera.layers = new _three.Layers();
        camera.layers.set(layer);
        const pass = new _renderPass.RenderPass(scene, camera);
        cameras.push(camera);
        return pass;
    };
    const createRenderer = ()=>{
        const renderer = new _three.WebGLRenderer({
            alpha: true
        });
        renderer.setSize(renderWidth, renderHeight);
        parentDiv.appendChild(renderer.domElement);
        return renderer;
    };
    const createShaderPass = (fragmentShader)=>{
        const pass = new _shaderPass.ShaderPass(new _three.ShaderMaterial({
            vertexShader: _shadersDefault.default.basicVertexShader,
            fragmentShader,
            side: _three.DoubleSide,
            uniforms: {
                tDiffuse: {
                    value: null
                }
            }
        }));
        return pass;
    };
    const changeHueShader = createShaderPass(_shadersDefault.default.changeHue);
    const detectEdgesShader = createShaderPass(_shadersDefault.default.detectEdges);
    detectEdgesShader.uniforms.outlineColor = new _three.Uniform(new _three.Vector4(0, 0, 0, 1));
    detectEdgesShader.uniforms.radius = new _three.Uniform(0.003);
    detectEdgesShader.uniforms.skipAlpha = new _three.Uniform(_materials.Surface.skip);
    const flamesBehindRenderer = createRenderer();
    const flamesBehindComposer = new _effectComposer.EffectComposer(flamesBehindRenderer);
    flamesBehindComposer.addPass(createRenderPass(_layers.Layer.flamesBehind));
    flamesBehindComposer.addPass(changeHueShader);
    const mainRenderer = createRenderer();
    const mainComposer = new _effectComposer.EffectComposer(mainRenderer);
    mainComposer.addPass(createRenderPass(_layers.Layer.main));
    mainComposer.addPass(detectEdgesShader);
    const flamesInfrontRenderer = createRenderer();
    const flamesInfrontComposer = new _effectComposer.EffectComposer(flamesInfrontRenderer);
    flamesInfrontComposer.addPass(createRenderPass(_layers.Layer.flamesInfront));
    flamesInfrontComposer.addPass(changeHueShader);
    const canvas = document.createElement('canvas');
    canvas.width = _settingsDefault.default.width;
    canvas.height = _settingsDefault.default.height;
    document.body.appendChild(canvas);
    document.body.append(parentDiv);
    const lettering = await _lettering.createLetteringComponent();
    lettering.domElement.style.display = 'none';
    let state = _choreograph.choreographBody(0);
    flamesBehindRenderer.setAnimationLoop(async ()=>{
        const [x, y, z] = _getCameraPositionDefault.default(state.frame).toArray();
        const yAdjust = 0.4;
        cameras.forEach((camera)=>{
            camera.position.set(x, y + yAdjust, z);
            camera.lookAt(0, -0.6 + yAdjust, 0);
        });
        scene.clear();
        scene.add(main(state));
        const watchTowerIndex = Math.floor(state.frame % _settingsDefault.default.cycleLength / _settings.watchTowerLength);
        const watchTowerColor = _settingsDefault.default.watchTowers.color[watchTowerIndex];
        changeHueShader.uniforms.hueAdjustment = new _three.Uniform(hueAdjustments[watchTowerColor] / 255);
        scene.background = new _three.Color('white');
        flamesBehindComposer.render();
        scene.background = null;
        mainComposer.render();
        flamesInfrontComposer.render();
        await lettering.render();
        const context = canvas.getContext('2d');
        context.clearRect(0, 0, canvas.width, canvas.height);
        const drawParams = [
            0,
            0,
            renderWidth,
            renderHeight,
            0,
            0,
            _settingsDefault.default.width,
            _settingsDefault.default.height, 
        ];
        context.drawImage(flamesBehindRenderer.domElement, ...drawParams);
        context.drawImage(mainRenderer.domElement, ...drawParams);
        context.drawImage(flamesInfrontRenderer.domElement, ...drawParams);
        context.drawImage(lettering.domElement, ...drawParams);
        if (_settingsDefault.default.frameCapture) frameCapture({
            startFrame: 1,
            endFrame: _settingsDefault.default.cycleLength + 1,
            filename: 'frames.zip',
            getCanvas: ()=>canvas
        });
        state = _choreograph.choreographBody(state.frame + 1);
    });
};
run();

},{"three":"64dkv","./settings":"6v8AY","./choreograph":"c6zNm","./meshes/adornedHead":"lL7W3","./meshes/body":"AcydV","./frameCapture":"a2Zxh","./lettering":"b2ScT","./components/main":"1gVsV","three/examples/jsm/postprocessing/EffectComposer":"ck46f","./getCameraPosition":"cmnLK","./layers":"igEJN","three/examples/jsm/postprocessing/RenderPass":"4a7v8","three/examples/jsm/postprocessing/ShaderPass":"4bjki","./shaders":"gYhRn","./materials":"htVaV","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"64dkv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ACESFilmicToneMapping", ()=>ACESFilmicToneMapping
);
parcelHelpers.export(exports, "AddEquation", ()=>AddEquation
);
parcelHelpers.export(exports, "AddOperation", ()=>AddOperation
);
parcelHelpers.export(exports, "AdditiveAnimationBlendMode", ()=>AdditiveAnimationBlendMode
);
parcelHelpers.export(exports, "AdditiveBlending", ()=>AdditiveBlending
);
parcelHelpers.export(exports, "AlphaFormat", ()=>AlphaFormat
);
parcelHelpers.export(exports, "AlwaysDepth", ()=>AlwaysDepth
);
parcelHelpers.export(exports, "AlwaysStencilFunc", ()=>AlwaysStencilFunc
);
parcelHelpers.export(exports, "AmbientLight", ()=>AmbientLight
);
parcelHelpers.export(exports, "AmbientLightProbe", ()=>AmbientLightProbe
);
parcelHelpers.export(exports, "AnimationClip", ()=>AnimationClip
);
parcelHelpers.export(exports, "AnimationLoader", ()=>AnimationLoader
);
parcelHelpers.export(exports, "AnimationMixer", ()=>AnimationMixer
);
parcelHelpers.export(exports, "AnimationObjectGroup", ()=>AnimationObjectGroup
);
parcelHelpers.export(exports, "AnimationUtils", ()=>AnimationUtils
);
parcelHelpers.export(exports, "ArcCurve", ()=>ArcCurve
);
parcelHelpers.export(exports, "ArrayCamera", ()=>ArrayCamera
);
parcelHelpers.export(exports, "ArrowHelper", ()=>ArrowHelper
);
parcelHelpers.export(exports, "Audio", ()=>Audio
);
parcelHelpers.export(exports, "AudioAnalyser", ()=>AudioAnalyser
);
parcelHelpers.export(exports, "AudioContext", ()=>AudioContext
);
parcelHelpers.export(exports, "AudioListener", ()=>AudioListener
);
parcelHelpers.export(exports, "AudioLoader", ()=>AudioLoader
);
parcelHelpers.export(exports, "AxesHelper", ()=>AxesHelper
);
parcelHelpers.export(exports, "AxisHelper", ()=>AxisHelper
);
parcelHelpers.export(exports, "BackSide", ()=>BackSide
);
parcelHelpers.export(exports, "BasicDepthPacking", ()=>BasicDepthPacking
);
parcelHelpers.export(exports, "BasicShadowMap", ()=>BasicShadowMap
);
parcelHelpers.export(exports, "BinaryTextureLoader", ()=>BinaryTextureLoader
);
parcelHelpers.export(exports, "Bone", ()=>Bone
);
parcelHelpers.export(exports, "BooleanKeyframeTrack", ()=>BooleanKeyframeTrack
);
parcelHelpers.export(exports, "BoundingBoxHelper", ()=>BoundingBoxHelper
);
parcelHelpers.export(exports, "Box2", ()=>Box2
);
parcelHelpers.export(exports, "Box3", ()=>Box3
);
parcelHelpers.export(exports, "Box3Helper", ()=>Box3Helper
);
parcelHelpers.export(exports, "BoxBufferGeometry", ()=>BoxGeometry
);
parcelHelpers.export(exports, "BoxGeometry", ()=>BoxGeometry
);
parcelHelpers.export(exports, "BoxHelper", ()=>BoxHelper
);
parcelHelpers.export(exports, "BufferAttribute", ()=>BufferAttribute
);
parcelHelpers.export(exports, "BufferGeometry", ()=>BufferGeometry
);
parcelHelpers.export(exports, "BufferGeometryLoader", ()=>BufferGeometryLoader
);
parcelHelpers.export(exports, "ByteType", ()=>ByteType
);
parcelHelpers.export(exports, "Cache", ()=>Cache
);
parcelHelpers.export(exports, "Camera", ()=>Camera
);
parcelHelpers.export(exports, "CameraHelper", ()=>CameraHelper
);
parcelHelpers.export(exports, "CanvasRenderer", ()=>CanvasRenderer
);
parcelHelpers.export(exports, "CanvasTexture", ()=>CanvasTexture
);
parcelHelpers.export(exports, "CatmullRomCurve3", ()=>CatmullRomCurve3
);
parcelHelpers.export(exports, "CineonToneMapping", ()=>CineonToneMapping
);
parcelHelpers.export(exports, "CircleBufferGeometry", ()=>CircleGeometry
);
parcelHelpers.export(exports, "CircleGeometry", ()=>CircleGeometry
);
parcelHelpers.export(exports, "ClampToEdgeWrapping", ()=>ClampToEdgeWrapping
);
parcelHelpers.export(exports, "Clock", ()=>Clock
);
parcelHelpers.export(exports, "Color", ()=>Color
);
parcelHelpers.export(exports, "ColorKeyframeTrack", ()=>ColorKeyframeTrack
);
parcelHelpers.export(exports, "CompressedTexture", ()=>CompressedTexture
);
parcelHelpers.export(exports, "CompressedTextureLoader", ()=>CompressedTextureLoader
);
parcelHelpers.export(exports, "ConeBufferGeometry", ()=>ConeGeometry
);
parcelHelpers.export(exports, "ConeGeometry", ()=>ConeGeometry
);
parcelHelpers.export(exports, "CubeCamera", ()=>CubeCamera
);
parcelHelpers.export(exports, "CubeReflectionMapping", ()=>CubeReflectionMapping
);
parcelHelpers.export(exports, "CubeRefractionMapping", ()=>CubeRefractionMapping
);
parcelHelpers.export(exports, "CubeTexture", ()=>CubeTexture
);
parcelHelpers.export(exports, "CubeTextureLoader", ()=>CubeTextureLoader
);
parcelHelpers.export(exports, "CubeUVReflectionMapping", ()=>CubeUVReflectionMapping
);
parcelHelpers.export(exports, "CubeUVRefractionMapping", ()=>CubeUVRefractionMapping
);
parcelHelpers.export(exports, "CubicBezierCurve", ()=>CubicBezierCurve
);
parcelHelpers.export(exports, "CubicBezierCurve3", ()=>CubicBezierCurve3
);
parcelHelpers.export(exports, "CubicInterpolant", ()=>CubicInterpolant
);
parcelHelpers.export(exports, "CullFaceBack", ()=>CullFaceBack
);
parcelHelpers.export(exports, "CullFaceFront", ()=>CullFaceFront
);
parcelHelpers.export(exports, "CullFaceFrontBack", ()=>CullFaceFrontBack
);
parcelHelpers.export(exports, "CullFaceNone", ()=>CullFaceNone
);
parcelHelpers.export(exports, "Curve", ()=>Curve
);
parcelHelpers.export(exports, "CurvePath", ()=>CurvePath
);
parcelHelpers.export(exports, "CustomBlending", ()=>CustomBlending
);
parcelHelpers.export(exports, "CustomToneMapping", ()=>CustomToneMapping
);
parcelHelpers.export(exports, "CylinderBufferGeometry", ()=>CylinderGeometry
);
parcelHelpers.export(exports, "CylinderGeometry", ()=>CylinderGeometry
);
parcelHelpers.export(exports, "Cylindrical", ()=>Cylindrical
);
parcelHelpers.export(exports, "DataTexture", ()=>DataTexture
);
parcelHelpers.export(exports, "DataTexture2DArray", ()=>DataTexture2DArray
);
parcelHelpers.export(exports, "DataTexture3D", ()=>DataTexture3D
);
parcelHelpers.export(exports, "DataTextureLoader", ()=>DataTextureLoader
);
parcelHelpers.export(exports, "DataUtils", ()=>DataUtils
);
parcelHelpers.export(exports, "DecrementStencilOp", ()=>DecrementStencilOp
);
parcelHelpers.export(exports, "DecrementWrapStencilOp", ()=>DecrementWrapStencilOp
);
parcelHelpers.export(exports, "DefaultLoadingManager", ()=>DefaultLoadingManager
);
parcelHelpers.export(exports, "DepthFormat", ()=>DepthFormat
);
parcelHelpers.export(exports, "DepthStencilFormat", ()=>DepthStencilFormat
);
parcelHelpers.export(exports, "DepthTexture", ()=>DepthTexture
);
parcelHelpers.export(exports, "DirectionalLight", ()=>DirectionalLight
);
parcelHelpers.export(exports, "DirectionalLightHelper", ()=>DirectionalLightHelper
);
parcelHelpers.export(exports, "DiscreteInterpolant", ()=>DiscreteInterpolant
);
parcelHelpers.export(exports, "DodecahedronBufferGeometry", ()=>DodecahedronGeometry
);
parcelHelpers.export(exports, "DodecahedronGeometry", ()=>DodecahedronGeometry
);
parcelHelpers.export(exports, "DoubleSide", ()=>DoubleSide
);
parcelHelpers.export(exports, "DstAlphaFactor", ()=>DstAlphaFactor
);
parcelHelpers.export(exports, "DstColorFactor", ()=>DstColorFactor
);
parcelHelpers.export(exports, "DynamicBufferAttribute", ()=>DynamicBufferAttribute
);
parcelHelpers.export(exports, "DynamicCopyUsage", ()=>DynamicCopyUsage
);
parcelHelpers.export(exports, "DynamicDrawUsage", ()=>DynamicDrawUsage
);
parcelHelpers.export(exports, "DynamicReadUsage", ()=>DynamicReadUsage
);
parcelHelpers.export(exports, "EdgesGeometry", ()=>EdgesGeometry
);
parcelHelpers.export(exports, "EdgesHelper", ()=>EdgesHelper
);
parcelHelpers.export(exports, "EllipseCurve", ()=>EllipseCurve
);
parcelHelpers.export(exports, "EqualDepth", ()=>EqualDepth
);
parcelHelpers.export(exports, "EqualStencilFunc", ()=>EqualStencilFunc
);
parcelHelpers.export(exports, "EquirectangularReflectionMapping", ()=>EquirectangularReflectionMapping
);
parcelHelpers.export(exports, "EquirectangularRefractionMapping", ()=>EquirectangularRefractionMapping
);
parcelHelpers.export(exports, "Euler", ()=>Euler
);
parcelHelpers.export(exports, "EventDispatcher", ()=>EventDispatcher
);
parcelHelpers.export(exports, "ExtrudeBufferGeometry", ()=>ExtrudeGeometry
);
parcelHelpers.export(exports, "ExtrudeGeometry", ()=>ExtrudeGeometry
);
parcelHelpers.export(exports, "FaceColors", ()=>FaceColors
);
parcelHelpers.export(exports, "FileLoader", ()=>FileLoader
);
parcelHelpers.export(exports, "FlatShading", ()=>FlatShading
);
parcelHelpers.export(exports, "Float16BufferAttribute", ()=>Float16BufferAttribute
);
parcelHelpers.export(exports, "Float32Attribute", ()=>Float32Attribute
);
parcelHelpers.export(exports, "Float32BufferAttribute", ()=>Float32BufferAttribute
);
parcelHelpers.export(exports, "Float64Attribute", ()=>Float64Attribute
);
parcelHelpers.export(exports, "Float64BufferAttribute", ()=>Float64BufferAttribute
);
parcelHelpers.export(exports, "FloatType", ()=>FloatType
);
parcelHelpers.export(exports, "Fog", ()=>Fog
);
parcelHelpers.export(exports, "FogExp2", ()=>FogExp2
);
parcelHelpers.export(exports, "Font", ()=>Font
);
parcelHelpers.export(exports, "FontLoader", ()=>FontLoader
);
parcelHelpers.export(exports, "FramebufferTexture", ()=>FramebufferTexture
);
parcelHelpers.export(exports, "FrontSide", ()=>FrontSide
);
parcelHelpers.export(exports, "Frustum", ()=>Frustum
);
parcelHelpers.export(exports, "GLBufferAttribute", ()=>GLBufferAttribute
);
parcelHelpers.export(exports, "GLSL1", ()=>GLSL1
);
parcelHelpers.export(exports, "GLSL3", ()=>GLSL3
);
parcelHelpers.export(exports, "GreaterDepth", ()=>GreaterDepth
);
parcelHelpers.export(exports, "GreaterEqualDepth", ()=>GreaterEqualDepth
);
parcelHelpers.export(exports, "GreaterEqualStencilFunc", ()=>GreaterEqualStencilFunc
);
parcelHelpers.export(exports, "GreaterStencilFunc", ()=>GreaterStencilFunc
);
parcelHelpers.export(exports, "GridHelper", ()=>GridHelper
);
parcelHelpers.export(exports, "Group", ()=>Group
);
parcelHelpers.export(exports, "HalfFloatType", ()=>HalfFloatType
);
parcelHelpers.export(exports, "HemisphereLight", ()=>HemisphereLight
);
parcelHelpers.export(exports, "HemisphereLightHelper", ()=>HemisphereLightHelper
);
parcelHelpers.export(exports, "HemisphereLightProbe", ()=>HemisphereLightProbe
);
parcelHelpers.export(exports, "IcosahedronBufferGeometry", ()=>IcosahedronGeometry
);
parcelHelpers.export(exports, "IcosahedronGeometry", ()=>IcosahedronGeometry
);
parcelHelpers.export(exports, "ImageBitmapLoader", ()=>ImageBitmapLoader
);
parcelHelpers.export(exports, "ImageLoader", ()=>ImageLoader
);
parcelHelpers.export(exports, "ImageUtils", ()=>ImageUtils
);
parcelHelpers.export(exports, "ImmediateRenderObject", ()=>ImmediateRenderObject
);
parcelHelpers.export(exports, "IncrementStencilOp", ()=>IncrementStencilOp
);
parcelHelpers.export(exports, "IncrementWrapStencilOp", ()=>IncrementWrapStencilOp
);
parcelHelpers.export(exports, "InstancedBufferAttribute", ()=>InstancedBufferAttribute
);
parcelHelpers.export(exports, "InstancedBufferGeometry", ()=>InstancedBufferGeometry
);
parcelHelpers.export(exports, "InstancedInterleavedBuffer", ()=>InstancedInterleavedBuffer
);
parcelHelpers.export(exports, "InstancedMesh", ()=>InstancedMesh
);
parcelHelpers.export(exports, "Int16Attribute", ()=>Int16Attribute
);
parcelHelpers.export(exports, "Int16BufferAttribute", ()=>Int16BufferAttribute
);
parcelHelpers.export(exports, "Int32Attribute", ()=>Int32Attribute
);
parcelHelpers.export(exports, "Int32BufferAttribute", ()=>Int32BufferAttribute
);
parcelHelpers.export(exports, "Int8Attribute", ()=>Int8Attribute
);
parcelHelpers.export(exports, "Int8BufferAttribute", ()=>Int8BufferAttribute
);
parcelHelpers.export(exports, "IntType", ()=>IntType
);
parcelHelpers.export(exports, "InterleavedBuffer", ()=>InterleavedBuffer
);
parcelHelpers.export(exports, "InterleavedBufferAttribute", ()=>InterleavedBufferAttribute
);
parcelHelpers.export(exports, "Interpolant", ()=>Interpolant
);
parcelHelpers.export(exports, "InterpolateDiscrete", ()=>InterpolateDiscrete
);
parcelHelpers.export(exports, "InterpolateLinear", ()=>InterpolateLinear
);
parcelHelpers.export(exports, "InterpolateSmooth", ()=>InterpolateSmooth
);
parcelHelpers.export(exports, "InvertStencilOp", ()=>InvertStencilOp
);
parcelHelpers.export(exports, "JSONLoader", ()=>JSONLoader
);
parcelHelpers.export(exports, "KeepStencilOp", ()=>KeepStencilOp
);
parcelHelpers.export(exports, "KeyframeTrack", ()=>KeyframeTrack
);
parcelHelpers.export(exports, "LOD", ()=>LOD
);
parcelHelpers.export(exports, "LatheBufferGeometry", ()=>LatheGeometry
);
parcelHelpers.export(exports, "LatheGeometry", ()=>LatheGeometry
);
parcelHelpers.export(exports, "Layers", ()=>Layers
);
parcelHelpers.export(exports, "LensFlare", ()=>LensFlare
);
parcelHelpers.export(exports, "LessDepth", ()=>LessDepth
);
parcelHelpers.export(exports, "LessEqualDepth", ()=>LessEqualDepth
);
parcelHelpers.export(exports, "LessEqualStencilFunc", ()=>LessEqualStencilFunc
);
parcelHelpers.export(exports, "LessStencilFunc", ()=>LessStencilFunc
);
parcelHelpers.export(exports, "Light", ()=>Light
);
parcelHelpers.export(exports, "LightProbe", ()=>LightProbe
);
parcelHelpers.export(exports, "Line", ()=>Line
);
parcelHelpers.export(exports, "Line3", ()=>Line3
);
parcelHelpers.export(exports, "LineBasicMaterial", ()=>LineBasicMaterial
);
parcelHelpers.export(exports, "LineCurve", ()=>LineCurve
);
parcelHelpers.export(exports, "LineCurve3", ()=>LineCurve3
);
parcelHelpers.export(exports, "LineDashedMaterial", ()=>LineDashedMaterial
);
parcelHelpers.export(exports, "LineLoop", ()=>LineLoop
);
parcelHelpers.export(exports, "LinePieces", ()=>LinePieces
);
parcelHelpers.export(exports, "LineSegments", ()=>LineSegments
);
parcelHelpers.export(exports, "LineStrip", ()=>LineStrip
);
parcelHelpers.export(exports, "LinearEncoding", ()=>LinearEncoding
);
parcelHelpers.export(exports, "LinearFilter", ()=>LinearFilter
);
parcelHelpers.export(exports, "LinearInterpolant", ()=>LinearInterpolant
);
parcelHelpers.export(exports, "LinearMipMapLinearFilter", ()=>LinearMipMapLinearFilter
);
parcelHelpers.export(exports, "LinearMipMapNearestFilter", ()=>LinearMipMapNearestFilter
);
parcelHelpers.export(exports, "LinearMipmapLinearFilter", ()=>LinearMipmapLinearFilter
);
parcelHelpers.export(exports, "LinearMipmapNearestFilter", ()=>LinearMipmapNearestFilter
);
parcelHelpers.export(exports, "LinearToneMapping", ()=>LinearToneMapping
);
parcelHelpers.export(exports, "Loader", ()=>Loader
);
parcelHelpers.export(exports, "LoaderUtils", ()=>LoaderUtils
);
parcelHelpers.export(exports, "LoadingManager", ()=>LoadingManager
);
parcelHelpers.export(exports, "LoopOnce", ()=>LoopOnce
);
parcelHelpers.export(exports, "LoopPingPong", ()=>LoopPingPong
);
parcelHelpers.export(exports, "LoopRepeat", ()=>LoopRepeat
);
parcelHelpers.export(exports, "LuminanceAlphaFormat", ()=>LuminanceAlphaFormat
);
parcelHelpers.export(exports, "LuminanceFormat", ()=>LuminanceFormat
);
parcelHelpers.export(exports, "MOUSE", ()=>MOUSE
);
parcelHelpers.export(exports, "Material", ()=>Material
);
parcelHelpers.export(exports, "MaterialLoader", ()=>MaterialLoader
);
parcelHelpers.export(exports, "Math", ()=>MathUtils
);
parcelHelpers.export(exports, "MathUtils", ()=>MathUtils
);
parcelHelpers.export(exports, "Matrix3", ()=>Matrix3
);
parcelHelpers.export(exports, "Matrix4", ()=>Matrix4
);
parcelHelpers.export(exports, "MaxEquation", ()=>MaxEquation
);
parcelHelpers.export(exports, "Mesh", ()=>Mesh
);
parcelHelpers.export(exports, "MeshBasicMaterial", ()=>MeshBasicMaterial
);
parcelHelpers.export(exports, "MeshDepthMaterial", ()=>MeshDepthMaterial
);
parcelHelpers.export(exports, "MeshDistanceMaterial", ()=>MeshDistanceMaterial
);
parcelHelpers.export(exports, "MeshFaceMaterial", ()=>MeshFaceMaterial
);
parcelHelpers.export(exports, "MeshLambertMaterial", ()=>MeshLambertMaterial
);
parcelHelpers.export(exports, "MeshMatcapMaterial", ()=>MeshMatcapMaterial
);
parcelHelpers.export(exports, "MeshNormalMaterial", ()=>MeshNormalMaterial
);
parcelHelpers.export(exports, "MeshPhongMaterial", ()=>MeshPhongMaterial
);
parcelHelpers.export(exports, "MeshPhysicalMaterial", ()=>MeshPhysicalMaterial
);
parcelHelpers.export(exports, "MeshStandardMaterial", ()=>MeshStandardMaterial
);
parcelHelpers.export(exports, "MeshToonMaterial", ()=>MeshToonMaterial
);
parcelHelpers.export(exports, "MinEquation", ()=>MinEquation
);
parcelHelpers.export(exports, "MirroredRepeatWrapping", ()=>MirroredRepeatWrapping
);
parcelHelpers.export(exports, "MixOperation", ()=>MixOperation
);
parcelHelpers.export(exports, "MultiMaterial", ()=>MultiMaterial
);
parcelHelpers.export(exports, "MultiplyBlending", ()=>MultiplyBlending
);
parcelHelpers.export(exports, "MultiplyOperation", ()=>MultiplyOperation
);
parcelHelpers.export(exports, "NearestFilter", ()=>NearestFilter
);
parcelHelpers.export(exports, "NearestMipMapLinearFilter", ()=>NearestMipMapLinearFilter
);
parcelHelpers.export(exports, "NearestMipMapNearestFilter", ()=>NearestMipMapNearestFilter
);
parcelHelpers.export(exports, "NearestMipmapLinearFilter", ()=>NearestMipmapLinearFilter
);
parcelHelpers.export(exports, "NearestMipmapNearestFilter", ()=>NearestMipmapNearestFilter
);
parcelHelpers.export(exports, "NeverDepth", ()=>NeverDepth
);
parcelHelpers.export(exports, "NeverStencilFunc", ()=>NeverStencilFunc
);
parcelHelpers.export(exports, "NoBlending", ()=>NoBlending
);
parcelHelpers.export(exports, "NoColors", ()=>NoColors
);
parcelHelpers.export(exports, "NoToneMapping", ()=>NoToneMapping
);
parcelHelpers.export(exports, "NormalAnimationBlendMode", ()=>NormalAnimationBlendMode
);
parcelHelpers.export(exports, "NormalBlending", ()=>NormalBlending
);
parcelHelpers.export(exports, "NotEqualDepth", ()=>NotEqualDepth
);
parcelHelpers.export(exports, "NotEqualStencilFunc", ()=>NotEqualStencilFunc
);
parcelHelpers.export(exports, "NumberKeyframeTrack", ()=>NumberKeyframeTrack
);
parcelHelpers.export(exports, "Object3D", ()=>Object3D
);
parcelHelpers.export(exports, "ObjectLoader", ()=>ObjectLoader
);
parcelHelpers.export(exports, "ObjectSpaceNormalMap", ()=>ObjectSpaceNormalMap
);
parcelHelpers.export(exports, "OctahedronBufferGeometry", ()=>OctahedronGeometry
);
parcelHelpers.export(exports, "OctahedronGeometry", ()=>OctahedronGeometry
);
parcelHelpers.export(exports, "OneFactor", ()=>OneFactor
);
parcelHelpers.export(exports, "OneMinusDstAlphaFactor", ()=>OneMinusDstAlphaFactor
);
parcelHelpers.export(exports, "OneMinusDstColorFactor", ()=>OneMinusDstColorFactor
);
parcelHelpers.export(exports, "OneMinusSrcAlphaFactor", ()=>OneMinusSrcAlphaFactor
);
parcelHelpers.export(exports, "OneMinusSrcColorFactor", ()=>OneMinusSrcColorFactor
);
parcelHelpers.export(exports, "OrthographicCamera", ()=>OrthographicCamera
);
parcelHelpers.export(exports, "PCFShadowMap", ()=>PCFShadowMap
);
parcelHelpers.export(exports, "PCFSoftShadowMap", ()=>PCFSoftShadowMap
);
parcelHelpers.export(exports, "PMREMGenerator", ()=>PMREMGenerator
);
parcelHelpers.export(exports, "ParametricGeometry", ()=>ParametricGeometry
);
parcelHelpers.export(exports, "Particle", ()=>Particle
);
parcelHelpers.export(exports, "ParticleBasicMaterial", ()=>ParticleBasicMaterial
);
parcelHelpers.export(exports, "ParticleSystem", ()=>ParticleSystem
);
parcelHelpers.export(exports, "ParticleSystemMaterial", ()=>ParticleSystemMaterial
);
parcelHelpers.export(exports, "Path", ()=>Path
);
parcelHelpers.export(exports, "PerspectiveCamera", ()=>PerspectiveCamera
);
parcelHelpers.export(exports, "Plane", ()=>Plane
);
parcelHelpers.export(exports, "PlaneBufferGeometry", ()=>PlaneGeometry
);
parcelHelpers.export(exports, "PlaneGeometry", ()=>PlaneGeometry
);
parcelHelpers.export(exports, "PlaneHelper", ()=>PlaneHelper
);
parcelHelpers.export(exports, "PointCloud", ()=>PointCloud
);
parcelHelpers.export(exports, "PointCloudMaterial", ()=>PointCloudMaterial
);
parcelHelpers.export(exports, "PointLight", ()=>PointLight
);
parcelHelpers.export(exports, "PointLightHelper", ()=>PointLightHelper
);
parcelHelpers.export(exports, "Points", ()=>Points
);
parcelHelpers.export(exports, "PointsMaterial", ()=>PointsMaterial
);
parcelHelpers.export(exports, "PolarGridHelper", ()=>PolarGridHelper
);
parcelHelpers.export(exports, "PolyhedronBufferGeometry", ()=>PolyhedronGeometry
);
parcelHelpers.export(exports, "PolyhedronGeometry", ()=>PolyhedronGeometry
);
parcelHelpers.export(exports, "PositionalAudio", ()=>PositionalAudio
);
parcelHelpers.export(exports, "PropertyBinding", ()=>PropertyBinding
);
parcelHelpers.export(exports, "PropertyMixer", ()=>PropertyMixer
);
parcelHelpers.export(exports, "QuadraticBezierCurve", ()=>QuadraticBezierCurve
);
parcelHelpers.export(exports, "QuadraticBezierCurve3", ()=>QuadraticBezierCurve3
);
parcelHelpers.export(exports, "Quaternion", ()=>Quaternion
);
parcelHelpers.export(exports, "QuaternionKeyframeTrack", ()=>QuaternionKeyframeTrack
);
parcelHelpers.export(exports, "QuaternionLinearInterpolant", ()=>QuaternionLinearInterpolant
);
parcelHelpers.export(exports, "REVISION", ()=>REVISION
);
parcelHelpers.export(exports, "RGBADepthPacking", ()=>RGBADepthPacking
);
parcelHelpers.export(exports, "RGBAFormat", ()=>RGBAFormat
);
parcelHelpers.export(exports, "RGBAIntegerFormat", ()=>RGBAIntegerFormat
);
parcelHelpers.export(exports, "RGBA_ASTC_10x10_Format", ()=>RGBA_ASTC_10x10_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_10x5_Format", ()=>RGBA_ASTC_10x5_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_10x6_Format", ()=>RGBA_ASTC_10x6_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_10x8_Format", ()=>RGBA_ASTC_10x8_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_12x10_Format", ()=>RGBA_ASTC_12x10_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_12x12_Format", ()=>RGBA_ASTC_12x12_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_4x4_Format", ()=>RGBA_ASTC_4x4_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_5x4_Format", ()=>RGBA_ASTC_5x4_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_5x5_Format", ()=>RGBA_ASTC_5x5_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_6x5_Format", ()=>RGBA_ASTC_6x5_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_6x6_Format", ()=>RGBA_ASTC_6x6_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_8x5_Format", ()=>RGBA_ASTC_8x5_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_8x6_Format", ()=>RGBA_ASTC_8x6_Format
);
parcelHelpers.export(exports, "RGBA_ASTC_8x8_Format", ()=>RGBA_ASTC_8x8_Format
);
parcelHelpers.export(exports, "RGBA_BPTC_Format", ()=>RGBA_BPTC_Format
);
parcelHelpers.export(exports, "RGBA_ETC2_EAC_Format", ()=>RGBA_ETC2_EAC_Format
);
parcelHelpers.export(exports, "RGBA_PVRTC_2BPPV1_Format", ()=>RGBA_PVRTC_2BPPV1_Format
);
parcelHelpers.export(exports, "RGBA_PVRTC_4BPPV1_Format", ()=>RGBA_PVRTC_4BPPV1_Format
);
parcelHelpers.export(exports, "RGBA_S3TC_DXT1_Format", ()=>RGBA_S3TC_DXT1_Format
);
parcelHelpers.export(exports, "RGBA_S3TC_DXT3_Format", ()=>RGBA_S3TC_DXT3_Format
);
parcelHelpers.export(exports, "RGBA_S3TC_DXT5_Format", ()=>RGBA_S3TC_DXT5_Format
);
parcelHelpers.export(exports, "RGBFormat", ()=>RGBFormat
);
parcelHelpers.export(exports, "RGBIntegerFormat", ()=>RGBIntegerFormat
);
parcelHelpers.export(exports, "RGB_ETC1_Format", ()=>RGB_ETC1_Format
);
parcelHelpers.export(exports, "RGB_ETC2_Format", ()=>RGB_ETC2_Format
);
parcelHelpers.export(exports, "RGB_PVRTC_2BPPV1_Format", ()=>RGB_PVRTC_2BPPV1_Format
);
parcelHelpers.export(exports, "RGB_PVRTC_4BPPV1_Format", ()=>RGB_PVRTC_4BPPV1_Format
);
parcelHelpers.export(exports, "RGB_S3TC_DXT1_Format", ()=>RGB_S3TC_DXT1_Format
);
parcelHelpers.export(exports, "RGFormat", ()=>RGFormat
);
parcelHelpers.export(exports, "RGIntegerFormat", ()=>RGIntegerFormat
);
parcelHelpers.export(exports, "RawShaderMaterial", ()=>RawShaderMaterial
);
parcelHelpers.export(exports, "Ray", ()=>Ray
);
parcelHelpers.export(exports, "Raycaster", ()=>Raycaster
);
parcelHelpers.export(exports, "RectAreaLight", ()=>RectAreaLight
);
parcelHelpers.export(exports, "RedFormat", ()=>RedFormat
);
parcelHelpers.export(exports, "RedIntegerFormat", ()=>RedIntegerFormat
);
parcelHelpers.export(exports, "ReinhardToneMapping", ()=>ReinhardToneMapping
);
parcelHelpers.export(exports, "RepeatWrapping", ()=>RepeatWrapping
);
parcelHelpers.export(exports, "ReplaceStencilOp", ()=>ReplaceStencilOp
);
parcelHelpers.export(exports, "ReverseSubtractEquation", ()=>ReverseSubtractEquation
);
parcelHelpers.export(exports, "RingBufferGeometry", ()=>RingGeometry
);
parcelHelpers.export(exports, "RingGeometry", ()=>RingGeometry
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_10x10_Format", ()=>SRGB8_ALPHA8_ASTC_10x10_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_10x5_Format", ()=>SRGB8_ALPHA8_ASTC_10x5_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_10x6_Format", ()=>SRGB8_ALPHA8_ASTC_10x6_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_10x8_Format", ()=>SRGB8_ALPHA8_ASTC_10x8_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_12x10_Format", ()=>SRGB8_ALPHA8_ASTC_12x10_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_12x12_Format", ()=>SRGB8_ALPHA8_ASTC_12x12_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_4x4_Format", ()=>SRGB8_ALPHA8_ASTC_4x4_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_5x4_Format", ()=>SRGB8_ALPHA8_ASTC_5x4_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_5x5_Format", ()=>SRGB8_ALPHA8_ASTC_5x5_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_6x5_Format", ()=>SRGB8_ALPHA8_ASTC_6x5_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_6x6_Format", ()=>SRGB8_ALPHA8_ASTC_6x6_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_8x5_Format", ()=>SRGB8_ALPHA8_ASTC_8x5_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_8x6_Format", ()=>SRGB8_ALPHA8_ASTC_8x6_Format
);
parcelHelpers.export(exports, "SRGB8_ALPHA8_ASTC_8x8_Format", ()=>SRGB8_ALPHA8_ASTC_8x8_Format
);
parcelHelpers.export(exports, "Scene", ()=>Scene
);
parcelHelpers.export(exports, "SceneUtils", ()=>SceneUtils
);
parcelHelpers.export(exports, "ShaderChunk", ()=>ShaderChunk
);
parcelHelpers.export(exports, "ShaderLib", ()=>ShaderLib
);
parcelHelpers.export(exports, "ShaderMaterial", ()=>ShaderMaterial
);
parcelHelpers.export(exports, "ShadowMaterial", ()=>ShadowMaterial
);
parcelHelpers.export(exports, "Shape", ()=>Shape
);
parcelHelpers.export(exports, "ShapeBufferGeometry", ()=>ShapeGeometry
);
parcelHelpers.export(exports, "ShapeGeometry", ()=>ShapeGeometry
);
parcelHelpers.export(exports, "ShapePath", ()=>ShapePath
);
parcelHelpers.export(exports, "ShapeUtils", ()=>ShapeUtils
);
parcelHelpers.export(exports, "ShortType", ()=>ShortType
);
parcelHelpers.export(exports, "Skeleton", ()=>Skeleton
);
parcelHelpers.export(exports, "SkeletonHelper", ()=>SkeletonHelper
);
parcelHelpers.export(exports, "SkinnedMesh", ()=>SkinnedMesh
);
parcelHelpers.export(exports, "SmoothShading", ()=>SmoothShading
);
parcelHelpers.export(exports, "Sphere", ()=>Sphere
);
parcelHelpers.export(exports, "SphereBufferGeometry", ()=>SphereGeometry
);
parcelHelpers.export(exports, "SphereGeometry", ()=>SphereGeometry
);
parcelHelpers.export(exports, "Spherical", ()=>Spherical
);
parcelHelpers.export(exports, "SphericalHarmonics3", ()=>SphericalHarmonics3
);
parcelHelpers.export(exports, "SplineCurve", ()=>SplineCurve
);
parcelHelpers.export(exports, "SpotLight", ()=>SpotLight
);
parcelHelpers.export(exports, "SpotLightHelper", ()=>SpotLightHelper
);
parcelHelpers.export(exports, "Sprite", ()=>Sprite
);
parcelHelpers.export(exports, "SpriteMaterial", ()=>SpriteMaterial
);
parcelHelpers.export(exports, "SrcAlphaFactor", ()=>SrcAlphaFactor
);
parcelHelpers.export(exports, "SrcAlphaSaturateFactor", ()=>SrcAlphaSaturateFactor
);
parcelHelpers.export(exports, "SrcColorFactor", ()=>SrcColorFactor
);
parcelHelpers.export(exports, "StaticCopyUsage", ()=>StaticCopyUsage
);
parcelHelpers.export(exports, "StaticDrawUsage", ()=>StaticDrawUsage
);
parcelHelpers.export(exports, "StaticReadUsage", ()=>StaticReadUsage
);
parcelHelpers.export(exports, "StereoCamera", ()=>StereoCamera
);
parcelHelpers.export(exports, "StreamCopyUsage", ()=>StreamCopyUsage
);
parcelHelpers.export(exports, "StreamDrawUsage", ()=>StreamDrawUsage
);
parcelHelpers.export(exports, "StreamReadUsage", ()=>StreamReadUsage
);
parcelHelpers.export(exports, "StringKeyframeTrack", ()=>StringKeyframeTrack
);
parcelHelpers.export(exports, "SubtractEquation", ()=>SubtractEquation
);
parcelHelpers.export(exports, "SubtractiveBlending", ()=>SubtractiveBlending
);
parcelHelpers.export(exports, "TOUCH", ()=>TOUCH
);
parcelHelpers.export(exports, "TangentSpaceNormalMap", ()=>TangentSpaceNormalMap
);
parcelHelpers.export(exports, "TetrahedronBufferGeometry", ()=>TetrahedronGeometry
);
parcelHelpers.export(exports, "TetrahedronGeometry", ()=>TetrahedronGeometry
);
parcelHelpers.export(exports, "TextGeometry", ()=>TextGeometry
);
parcelHelpers.export(exports, "Texture", ()=>Texture
);
parcelHelpers.export(exports, "TextureLoader", ()=>TextureLoader
);
parcelHelpers.export(exports, "TorusBufferGeometry", ()=>TorusGeometry
);
parcelHelpers.export(exports, "TorusGeometry", ()=>TorusGeometry
);
parcelHelpers.export(exports, "TorusKnotBufferGeometry", ()=>TorusKnotGeometry
);
parcelHelpers.export(exports, "TorusKnotGeometry", ()=>TorusKnotGeometry
);
parcelHelpers.export(exports, "Triangle", ()=>Triangle
);
parcelHelpers.export(exports, "TriangleFanDrawMode", ()=>TriangleFanDrawMode
);
parcelHelpers.export(exports, "TriangleStripDrawMode", ()=>TriangleStripDrawMode
);
parcelHelpers.export(exports, "TrianglesDrawMode", ()=>TrianglesDrawMode
);
parcelHelpers.export(exports, "TubeBufferGeometry", ()=>TubeGeometry
);
parcelHelpers.export(exports, "TubeGeometry", ()=>TubeGeometry
);
parcelHelpers.export(exports, "UVMapping", ()=>UVMapping
);
parcelHelpers.export(exports, "Uint16Attribute", ()=>Uint16Attribute
);
parcelHelpers.export(exports, "Uint16BufferAttribute", ()=>Uint16BufferAttribute
);
parcelHelpers.export(exports, "Uint32Attribute", ()=>Uint32Attribute
);
parcelHelpers.export(exports, "Uint32BufferAttribute", ()=>Uint32BufferAttribute
);
parcelHelpers.export(exports, "Uint8Attribute", ()=>Uint8Attribute
);
parcelHelpers.export(exports, "Uint8BufferAttribute", ()=>Uint8BufferAttribute
);
parcelHelpers.export(exports, "Uint8ClampedAttribute", ()=>Uint8ClampedAttribute
);
parcelHelpers.export(exports, "Uint8ClampedBufferAttribute", ()=>Uint8ClampedBufferAttribute
);
parcelHelpers.export(exports, "Uniform", ()=>Uniform
);
parcelHelpers.export(exports, "UniformsLib", ()=>UniformsLib
);
parcelHelpers.export(exports, "UniformsUtils", ()=>UniformsUtils
);
parcelHelpers.export(exports, "UnsignedByteType", ()=>UnsignedByteType
);
parcelHelpers.export(exports, "UnsignedInt248Type", ()=>UnsignedInt248Type
);
parcelHelpers.export(exports, "UnsignedIntType", ()=>UnsignedIntType
);
parcelHelpers.export(exports, "UnsignedShort4444Type", ()=>UnsignedShort4444Type
);
parcelHelpers.export(exports, "UnsignedShort5551Type", ()=>UnsignedShort5551Type
);
parcelHelpers.export(exports, "UnsignedShort565Type", ()=>UnsignedShort565Type
);
parcelHelpers.export(exports, "UnsignedShortType", ()=>UnsignedShortType
);
parcelHelpers.export(exports, "VSMShadowMap", ()=>VSMShadowMap
);
parcelHelpers.export(exports, "Vector2", ()=>Vector2
);
parcelHelpers.export(exports, "Vector3", ()=>Vector3
);
parcelHelpers.export(exports, "Vector4", ()=>Vector4
);
parcelHelpers.export(exports, "VectorKeyframeTrack", ()=>VectorKeyframeTrack
);
parcelHelpers.export(exports, "Vertex", ()=>Vertex
);
parcelHelpers.export(exports, "VertexColors", ()=>VertexColors
);
parcelHelpers.export(exports, "VideoTexture", ()=>VideoTexture
);
parcelHelpers.export(exports, "WebGL1Renderer", ()=>WebGL1Renderer
);
parcelHelpers.export(exports, "WebGLCubeRenderTarget", ()=>WebGLCubeRenderTarget
);
parcelHelpers.export(exports, "WebGLMultipleRenderTargets", ()=>WebGLMultipleRenderTargets
);
parcelHelpers.export(exports, "WebGLMultisampleRenderTarget", ()=>WebGLMultisampleRenderTarget
);
parcelHelpers.export(exports, "WebGLRenderTarget", ()=>WebGLRenderTarget
);
parcelHelpers.export(exports, "WebGLRenderTargetCube", ()=>WebGLRenderTargetCube
);
parcelHelpers.export(exports, "WebGLRenderer", ()=>WebGLRenderer
);
parcelHelpers.export(exports, "WebGLUtils", ()=>WebGLUtils
);
parcelHelpers.export(exports, "WireframeGeometry", ()=>WireframeGeometry
);
parcelHelpers.export(exports, "WireframeHelper", ()=>WireframeHelper
);
parcelHelpers.export(exports, "WrapAroundEnding", ()=>WrapAroundEnding
);
parcelHelpers.export(exports, "XHRLoader", ()=>XHRLoader
);
parcelHelpers.export(exports, "ZeroCurvatureEnding", ()=>ZeroCurvatureEnding
);
parcelHelpers.export(exports, "ZeroFactor", ()=>ZeroFactor
);
parcelHelpers.export(exports, "ZeroSlopeEnding", ()=>ZeroSlopeEnding
);
parcelHelpers.export(exports, "ZeroStencilOp", ()=>ZeroStencilOp
);
parcelHelpers.export(exports, "sRGBEncoding", ()=>sRGBEncoding
);
/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */ const REVISION = '136';
const MOUSE = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
};
const TOUCH = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
};
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const CullFaceFrontBack = 3;
const BasicShadowMap = 0;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const FlatShading = 1;
const SmoothShading = 2;
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;
const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const CubeUVRefractionMapping = 307;
const RepeatWrapping = 1000;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipMapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const NearestMipMapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipMapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const LinearMipMapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedShort565Type = 1019;
const UnsignedInt248Type = 1020;
const AlphaFormat = 1021;
const RGBFormat = 1022;
const RGBAFormat = 1023;
const LuminanceFormat = 1024;
const LuminanceAlphaFormat = 1025;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBIntegerFormat = 1032;
const RGBAIntegerFormat = 1033;
const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
const SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
const SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
const SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
const SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
const SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
const SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
const SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
const SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
const SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
const SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
const SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
const SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
const SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
const LoopOnce = 2200;
const LoopRepeat = 2201;
const LoopPingPong = 2202;
const InterpolateDiscrete = 2300;
const InterpolateLinear = 2301;
const InterpolateSmooth = 2302;
const ZeroCurvatureEnding = 2400;
const ZeroSlopeEnding = 2401;
const WrapAroundEnding = 2402;
const NormalAnimationBlendMode = 2500;
const AdditiveAnimationBlendMode = 2501;
const TrianglesDrawMode = 0;
const TriangleStripDrawMode = 1;
const TriangleFanDrawMode = 2;
const LinearEncoding = 3000;
const sRGBEncoding = 3001;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;
const ZeroStencilOp = 0;
const KeepStencilOp = 7680;
const ReplaceStencilOp = 7681;
const IncrementStencilOp = 7682;
const DecrementStencilOp = 7683;
const IncrementWrapStencilOp = 34055;
const DecrementWrapStencilOp = 34056;
const InvertStencilOp = 5386;
const NeverStencilFunc = 512;
const LessStencilFunc = 513;
const EqualStencilFunc = 514;
const LessEqualStencilFunc = 515;
const GreaterStencilFunc = 516;
const NotEqualStencilFunc = 517;
const GreaterEqualStencilFunc = 518;
const AlwaysStencilFunc = 519;
const StaticDrawUsage = 35044;
const DynamicDrawUsage = 35048;
const StreamDrawUsage = 35040;
const StaticReadUsage = 35045;
const DynamicReadUsage = 35049;
const StreamReadUsage = 35041;
const StaticCopyUsage = 35046;
const DynamicCopyUsage = 35050;
const StreamCopyUsage = 35042;
const GLSL1 = '100';
const GLSL3 = '300 es';
/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */ class EventDispatcher {
    addEventListener(type5, listener) {
        if (this._listeners === undefined) this._listeners = {
        };
        const listeners = this._listeners;
        if (listeners[type5] === undefined) listeners[type5] = [];
        if (listeners[type5].indexOf(listener) === -1) listeners[type5].push(listener);
    }
    hasEventListener(type1, listener1) {
        if (this._listeners === undefined) return false;
        const listeners = this._listeners;
        return listeners[type1] !== undefined && listeners[type1].indexOf(listener1) !== -1;
    }
    removeEventListener(type2, listener2) {
        if (this._listeners === undefined) return;
        const listeners = this._listeners;
        const listenerArray = listeners[type2];
        if (listenerArray !== undefined) {
            const index = listenerArray.indexOf(listener2);
            if (index !== -1) listenerArray.splice(index, 1);
        }
    }
    dispatchEvent(event1) {
        if (this._listeners === undefined) return;
        const listeners = this._listeners;
        const listenerArray = listeners[event1.type];
        if (listenerArray !== undefined) {
            event1.target = this;
            // Make a copy, in case listeners are removed while iterating.
            const array = listenerArray.slice(0);
            for(let i = 0, l = array.length; i < l; i++)array[i].call(this, event1);
            event1.target = null;
        }
    }
}
const _lut = [];
for(let i1 = 0; i1 < 256; i1++)_lut[i1] = (i1 < 16 ? '0' : '') + i1.toString(16);
let _seed = 1234567;
const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;
// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + '-' + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + '-' + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + '-' + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + '-' + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    // .toUpperCase() here flattens concatenated strings to save heap memory space.
    return uuid.toUpperCase();
}
function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
// compute euclidian modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo(n, m) {
    return (n % m + m) % m;
}
// Linear mapping from range <a1, a2> to range <b1, b2>
function mapLinear(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
}
// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function inverseLerp(x, y, value) {
    if (x !== y) return (value - x) / (y - x);
    else return 0;
}
// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp(x, y, t) {
    return (1 - t) * x + t * y;
}
// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function damp(x, y, lambda, dt) {
    return lerp(x, y, 1 - Math.exp(-lambda * dt));
}
// https://www.desmos.com/calculator/vcsjnyz7x4
function pingpong(x, length = 1) {
    return length - Math.abs(euclideanModulo(x, length * 2) - length);
}
// http://en.wikipedia.org/wiki/Smoothstep
function smoothstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
}
function smootherstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
}
// Random integer from <low, high> interval
function randInt(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
}
// Random float from <low, high> interval
function randFloat(low, high) {
    return low + Math.random() * (high - low);
}
// Random float from <-range/2, range/2> interval
function randFloatSpread(range) {
    return range * (0.5 - Math.random());
}
// Deterministic pseudo-random float in the interval [ 0, 1 ]
function seededRandom(s) {
    if (s !== undefined) _seed = s % 2147483647;
    // Park-Miller algorithm
    _seed = _seed * 16807 % 2147483647;
    return (_seed - 1) / 2147483646;
}
function degToRad(degrees) {
    return degrees * DEG2RAD;
}
function radToDeg(radians) {
    return radians * RAD2DEG;
}
function isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
}
function ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function setQuaternionFromProperEuler(q, a, b, c, order) {
    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
    // rotations are applied to the axes in the order specified by 'order'
    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
    // angles are in radians
    const cos = Math.cos;
    const sin = Math.sin;
    const c2 = cos(b / 2);
    const s2 = sin(b / 2);
    const c13 = cos((a + c) / 2);
    const s13 = sin((a + c) / 2);
    const c1_3 = cos((a - c) / 2);
    const s1_3 = sin((a - c) / 2);
    const c3_1 = cos((c - a) / 2);
    const s3_1 = sin((c - a) / 2);
    switch(order){
        case 'XYX':
            q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
            break;
        case 'YZY':
            q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
            break;
        case 'ZXZ':
            q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
            break;
        case 'XZX':
            q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
            break;
        case 'YXY':
            q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
            break;
        case 'ZYZ':
            q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
            break;
        default:
            console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);
    }
}
var MathUtils = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    DEG2RAD: DEG2RAD,
    RAD2DEG: RAD2DEG,
    generateUUID: generateUUID,
    clamp: clamp,
    euclideanModulo: euclideanModulo,
    mapLinear: mapLinear,
    inverseLerp: inverseLerp,
    lerp: lerp,
    damp: damp,
    pingpong: pingpong,
    smoothstep: smoothstep,
    smootherstep: smootherstep,
    randInt: randInt,
    randFloat: randFloat,
    randFloatSpread: randFloatSpread,
    seededRandom: seededRandom,
    degToRad: degToRad,
    radToDeg: radToDeg,
    isPowerOfTwo: isPowerOfTwo,
    ceilPowerOfTwo: ceilPowerOfTwo,
    floorPowerOfTwo: floorPowerOfTwo,
    setQuaternionFromProperEuler: setQuaternionFromProperEuler
});
class Vector2 {
    constructor(x23 = 0, y24 = 0){
        this.x = x23;
        this.y = y24;
    }
    get width() {
        return this.x;
    }
    set width(value24) {
        this.x = value24;
    }
    get height() {
        return this.y;
    }
    set height(value1) {
        this.y = value1;
    }
    set(x1, y1) {
        this.x = x1;
        this.y = y1;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        return this;
    }
    setX(x2) {
        this.x = x2;
        return this;
    }
    setY(y2) {
        this.y = y2;
        return this;
    }
    setComponent(index25, value2) {
        switch(index25){
            case 0:
                this.x = value2;
                break;
            case 1:
                this.y = value2;
                break;
            default:
                throw new Error('index is out of range: ' + index25);
        }
        return this;
    }
    getComponent(index1) {
        switch(index1){
            case 0:
                return this.x;
            case 1:
                return this.y;
            default:
                throw new Error('index is out of range: ' + index1);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y);
    }
    copy(v47) {
        this.x = v47.x;
        this.y = v47.y;
        return this;
    }
    add(v1, w15) {
        if (w15 !== undefined) {
            console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
            return this.addVectors(v1, w15);
        }
        this.x += v1.x;
        this.y += v1.y;
        return this;
    }
    addScalar(s16) {
        this.x += s16;
        this.y += s16;
        return this;
    }
    addVectors(a18, b20) {
        this.x = a18.x + b20.x;
        this.y = a18.y + b20.y;
        return this;
    }
    addScaledVector(v2, s1) {
        this.x += v2.x * s1;
        this.y += v2.y * s1;
        return this;
    }
    sub(v3, w1) {
        if (w1 !== undefined) {
            console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
            return this.subVectors(v3, w1);
        }
        this.x -= v3.x;
        this.y -= v3.y;
        return this;
    }
    subScalar(s2) {
        this.x -= s2;
        this.y -= s2;
        return this;
    }
    subVectors(a1, b1) {
        this.x = a1.x - b1.x;
        this.y = a1.y - b1.y;
        return this;
    }
    multiply(v4) {
        this.x *= v4.x;
        this.y *= v4.y;
        return this;
    }
    multiplyScalar(scalar1) {
        this.x *= scalar1;
        this.y *= scalar1;
        return this;
    }
    divide(v5) {
        this.x /= v5.x;
        this.y /= v5.y;
        return this;
    }
    divideScalar(scalar2) {
        return this.multiplyScalar(1 / scalar2);
    }
    applyMatrix3(m32) {
        const x = this.x, y = this.y;
        const e = m32.elements;
        this.x = e[0] * x + e[3] * y + e[6];
        this.y = e[1] * x + e[4] * y + e[7];
        return this;
    }
    min(v6) {
        this.x = Math.min(this.x, v6.x);
        this.y = Math.min(this.y, v6.y);
        return this;
    }
    max(v7) {
        this.x = Math.max(this.x, v7.x);
        this.y = Math.max(this.y, v7.y);
        return this;
    }
    clamp(min8, max2) {
        // assumes min < max, componentwise
        this.x = Math.max(min8.x, Math.min(max2.x, this.x));
        this.y = Math.max(min8.y, Math.min(max2.y, this.y));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        return this;
    }
    clampLength(min1, max1) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min1, Math.min(max1, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
    }
    roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
    }
    dot(v8) {
        return this.x * v8.x + this.y * v8.y;
    }
    cross(v9) {
        return this.x * v9.y - this.y * v9.x;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    angle() {
        // computes the angle in radians with respect to the positive x-axis
        const angle = Math.atan2(-this.y, -this.x) + Math.PI;
        return angle;
    }
    distanceTo(v10) {
        return Math.sqrt(this.distanceToSquared(v10));
    }
    distanceToSquared(v11) {
        const dx = this.x - v11.x, dy = this.y - v11.y;
        return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v12) {
        return Math.abs(this.x - v12.x) + Math.abs(this.y - v12.y);
    }
    setLength(length3) {
        return this.normalize().multiplyScalar(length3);
    }
    lerp(v13, alpha9) {
        this.x += (v13.x - this.x) * alpha9;
        this.y += (v13.y - this.y) * alpha9;
        return this;
    }
    lerpVectors(v112, v211, alpha1) {
        this.x = v112.x + (v211.x - v112.x) * alpha1;
        this.y = v112.y + (v211.y - v112.y) * alpha1;
        return this;
    }
    equals(v14) {
        return v14.x === this.x && v14.y === this.y;
    }
    fromArray(array4, offset23 = 0) {
        this.x = array4[offset23];
        this.y = array4[offset23 + 1];
        return this;
    }
    toArray(array1 = [], offset1 = 0) {
        array1[offset1] = this.x;
        array1[offset1 + 1] = this.y;
        return array1;
    }
    fromBufferAttribute(attribute9, index2, offset2) {
        if (offset2 !== undefined) console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');
        this.x = attribute9.getX(index2);
        this.y = attribute9.getY(index2);
        return this;
    }
    rotateAround(center4, angle) {
        const c = Math.cos(angle), s = Math.sin(angle);
        const x = this.x - center4.x;
        const y = this.y - center4.y;
        this.x = x * c - y * s + center4.x;
        this.y = x * s + y * c + center4.y;
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
    }
}
Vector2.prototype.isVector2 = true;
class Matrix3 {
    constructor(){
        this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        if (arguments.length > 0) console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
        const te = this.elements;
        te[0] = n11;
        te[1] = n21;
        te[2] = n31;
        te[3] = n12;
        te[4] = n22;
        te[5] = n32;
        te[6] = n13;
        te[7] = n23;
        te[8] = n33;
        return this;
    }
    identity() {
        this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
        return this;
    }
    copy(m1) {
        const te = this.elements;
        const me = m1.elements;
        te[0] = me[0];
        te[1] = me[1];
        te[2] = me[2];
        te[3] = me[3];
        te[4] = me[4];
        te[5] = me[5];
        te[6] = me[6];
        te[7] = me[7];
        te[8] = me[8];
        return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrix3Column(this, 0);
        yAxis.setFromMatrix3Column(this, 1);
        zAxis.setFromMatrix3Column(this, 2);
        return this;
    }
    setFromMatrix4(m2) {
        const me = m2.elements;
        this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
        return this;
    }
    multiply(m3) {
        return this.multiplyMatrices(this, m3);
    }
    premultiply(m4) {
        return this.multiplyMatrices(m4, this);
    }
    multiplyMatrices(a2, b2) {
        const ae = a2.elements;
        const be = b2.elements;
        const te = this.elements;
        const a11 = ae[0], a12 = ae[3], a13 = ae[6];
        const a21 = ae[1], a22 = ae[4], a23 = ae[7];
        const a31 = ae[2], a32 = ae[5], a33 = ae[8];
        const b11 = be[0], b12 = be[3], b13 = be[6];
        const b21 = be[1], b22 = be[4], b23 = be[7];
        const b31 = be[2], b32 = be[5], b33 = be[8];
        te[0] = a11 * b11 + a12 * b21 + a13 * b31;
        te[3] = a11 * b12 + a12 * b22 + a13 * b32;
        te[6] = a11 * b13 + a12 * b23 + a13 * b33;
        te[1] = a21 * b11 + a22 * b21 + a23 * b31;
        te[4] = a21 * b12 + a22 * b22 + a23 * b32;
        te[7] = a21 * b13 + a22 * b23 + a23 * b33;
        te[2] = a31 * b11 + a32 * b21 + a33 * b31;
        te[5] = a31 * b12 + a32 * b22 + a33 * b32;
        te[8] = a31 * b13 + a32 * b23 + a33 * b33;
        return this;
    }
    multiplyScalar(s3) {
        const te = this.elements;
        te[0] *= s3;
        te[3] *= s3;
        te[6] *= s3;
        te[1] *= s3;
        te[4] *= s3;
        te[7] *= s3;
        te[2] *= s3;
        te[5] *= s3;
        te[8] *= s3;
        return this;
    }
    determinant() {
        const te = this.elements;
        const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
    invert() {
        const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te[0] = t11 * detInv;
        te[1] = (n31 * n23 - n33 * n21) * detInv;
        te[2] = (n32 * n21 - n31 * n22) * detInv;
        te[3] = t12 * detInv;
        te[4] = (n33 * n11 - n31 * n13) * detInv;
        te[5] = (n31 * n12 - n32 * n11) * detInv;
        te[6] = t13 * detInv;
        te[7] = (n21 * n13 - n23 * n11) * detInv;
        te[8] = (n22 * n11 - n21 * n12) * detInv;
        return this;
    }
    transpose() {
        let tmp;
        const m = this.elements;
        tmp = m[1];
        m[1] = m[3];
        m[3] = tmp;
        tmp = m[2];
        m[2] = m[6];
        m[6] = tmp;
        tmp = m[5];
        m[5] = m[7];
        m[7] = tmp;
        return this;
    }
    getNormalMatrix(matrix43) {
        return this.setFromMatrix4(matrix43).invert().transpose();
    }
    transposeIntoArray(r1) {
        const m = this.elements;
        r1[0] = m[0];
        r1[1] = m[3];
        r1[2] = m[6];
        r1[3] = m[1];
        r1[4] = m[4];
        r1[5] = m[7];
        r1[6] = m[2];
        r1[7] = m[5];
        r1[8] = m[8];
        return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx1, cy1) {
        const c = Math.cos(rotation);
        const s = Math.sin(rotation);
        this.set(sx * c, sx * s, -sx * (c * cx1 + s * cy1) + cx1 + tx, -sy * s, sy * c, -sy * (-s * cx1 + c * cy1) + cy1 + ty, 0, 0, 1);
        return this;
    }
    scale(sx1, sy1) {
        const te = this.elements;
        te[0] *= sx1;
        te[3] *= sx1;
        te[6] *= sx1;
        te[1] *= sy1;
        te[4] *= sy1;
        te[7] *= sy1;
        return this;
    }
    rotate(theta6) {
        const c = Math.cos(theta6);
        const s = Math.sin(theta6);
        const te = this.elements;
        const a11 = te[0], a12 = te[3], a13 = te[6];
        const a21 = te[1], a22 = te[4], a23 = te[7];
        te[0] = c * a11 + s * a21;
        te[3] = c * a12 + s * a22;
        te[6] = c * a13 + s * a23;
        te[1] = -s * a11 + c * a21;
        te[4] = -s * a12 + c * a22;
        te[7] = -s * a13 + c * a23;
        return this;
    }
    translate(tx1, ty1) {
        const te = this.elements;
        te[0] += tx1 * te[2];
        te[3] += tx1 * te[5];
        te[6] += tx1 * te[8];
        te[1] += ty1 * te[2];
        te[4] += ty1 * te[5];
        te[7] += ty1 * te[8];
        return this;
    }
    equals(matrix10) {
        const te = this.elements;
        const me = matrix10.elements;
        for(let i = 0; i < 9; i++){
            if (te[i] !== me[i]) return false;
        }
        return true;
    }
    fromArray(array2, offset3 = 0) {
        for(let i = 0; i < 9; i++)this.elements[i] = array2[i + offset3];
        return this;
    }
    toArray(array3 = [], offset4 = 0) {
        const te = this.elements;
        array3[offset4] = te[0];
        array3[offset4 + 1] = te[1];
        array3[offset4 + 2] = te[2];
        array3[offset4 + 3] = te[3];
        array3[offset4 + 4] = te[4];
        array3[offset4 + 5] = te[5];
        array3[offset4 + 6] = te[6];
        array3[offset4 + 7] = te[7];
        array3[offset4 + 8] = te[8];
        return array3;
    }
    clone() {
        return new this.constructor().fromArray(this.elements);
    }
}
Matrix3.prototype.isMatrix3 = true;
function arrayMax(array) {
    if (array.length === 0) return -Infinity;
    let max = array[0];
    for(let i = 1, l = array.length; i < l; ++i)if (array[i] > max) max = array[i];
    return max;
}
const TYPED_ARRAYS = {
    Int8Array: Int8Array,
    Uint8Array: Uint8Array,
    Uint8ClampedArray: Uint8ClampedArray,
    Int16Array: Int16Array,
    Uint16Array: Uint16Array,
    Int32Array: Int32Array,
    Uint32Array: Uint32Array,
    Float32Array: Float32Array,
    Float64Array: Float64Array
};
function getTypedArray(type, buffer) {
    return new TYPED_ARRAYS[type](buffer);
}
function createElementNS(name) {
    return document.createElementNS('http://www.w3.org/1999/xhtml', name);
}
let _canvas1;
class ImageUtils {
    static getDataURL(image2) {
        if (/^data:/i.test(image2.src)) return image2.src;
        if (typeof HTMLCanvasElement == 'undefined') return image2.src;
        let canvas;
        if (image2 instanceof HTMLCanvasElement) canvas = image2;
        else {
            if (_canvas1 === undefined) _canvas1 = createElementNS('canvas');
            _canvas1.width = image2.width;
            _canvas1.height = image2.height;
            const context = _canvas1.getContext('2d');
            if (image2 instanceof ImageData) context.putImageData(image2, 0, 0);
            else context.drawImage(image2, 0, 0, image2.width, image2.height);
            canvas = _canvas1;
        }
        if (canvas.width > 2048 || canvas.height > 2048) {
            console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image2);
            return canvas.toDataURL('image/jpeg', 0.6);
        } else return canvas.toDataURL('image/png');
    }
}
let textureId = 0;
class Texture extends EventDispatcher {
    constructor(image1 = Texture.DEFAULT_IMAGE, mapping2 = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type3 = UnsignedByteType, anisotropy = 1, encoding2 = LinearEncoding){
        super();
        Object.defineProperty(this, 'id', {
            value: textureId++
        });
        this.uuid = generateUUID();
        this.name = '';
        this.image = image1;
        this.mipmaps = [];
        this.mapping = mapping2;
        this.wrapS = wrapS;
        this.wrapT = wrapT;
        this.magFilter = magFilter;
        this.minFilter = minFilter;
        this.anisotropy = anisotropy;
        this.format = format;
        this.internalFormat = null;
        this.type = type3;
        this.offset = new Vector2(0, 0);
        this.repeat = new Vector2(1, 1);
        this.center = new Vector2(0, 0);
        this.rotation = 0;
        this.matrixAutoUpdate = true;
        this.matrix = new Matrix3();
        this.generateMipmaps = true;
        this.premultiplyAlpha = false;
        this.flipY = true;
        this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
        // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
        //
        // Also changing the encoding after already used by a Material will not automatically make the Material
        // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
        this.encoding = encoding2;
        this.userData = {
        };
        this.version = 0;
        this.onUpdate = null;
        this.isRenderTargetTexture = false;
    }
    updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.name = source.name;
        this.image = source.image;
        this.mipmaps = source.mipmaps.slice(0);
        this.mapping = source.mapping;
        this.wrapS = source.wrapS;
        this.wrapT = source.wrapT;
        this.magFilter = source.magFilter;
        this.minFilter = source.minFilter;
        this.anisotropy = source.anisotropy;
        this.format = source.format;
        this.internalFormat = source.internalFormat;
        this.type = source.type;
        this.offset.copy(source.offset);
        this.repeat.copy(source.repeat);
        this.center.copy(source.center);
        this.rotation = source.rotation;
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrix.copy(source.matrix);
        this.generateMipmaps = source.generateMipmaps;
        this.premultiplyAlpha = source.premultiplyAlpha;
        this.flipY = source.flipY;
        this.unpackAlignment = source.unpackAlignment;
        this.encoding = source.encoding;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        return this;
    }
    toJSON(meta) {
        const isRootObject = meta === undefined || typeof meta === 'string';
        if (!isRootObject && meta.textures[this.uuid] !== undefined) return meta.textures[this.uuid];
        const output = {
            metadata: {
                version: 4.5,
                type: 'Texture',
                generator: 'Texture.toJSON'
            },
            uuid: this.uuid,
            name: this.name,
            mapping: this.mapping,
            repeat: [
                this.repeat.x,
                this.repeat.y
            ],
            offset: [
                this.offset.x,
                this.offset.y
            ],
            center: [
                this.center.x,
                this.center.y
            ],
            rotation: this.rotation,
            wrap: [
                this.wrapS,
                this.wrapT
            ],
            format: this.format,
            type: this.type,
            encoding: this.encoding,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
        };
        if (this.image !== undefined) {
            // TODO: Move to THREE.Image
            const image = this.image;
            if (image.uuid === undefined) image.uuid = generateUUID(); // UGH
            if (!isRootObject && meta.images[image.uuid] === undefined) {
                let url;
                if (Array.isArray(image)) {
                    // process array of images e.g. CubeTexture
                    url = [];
                    for(let i = 0, l = image.length; i < l; i++)// check cube texture with data textures
                    if (image[i].isDataTexture) url.push(serializeImage(image[i].image));
                    else url.push(serializeImage(image[i]));
                } else // process single image
                url = serializeImage(image);
                meta.images[image.uuid] = {
                    uuid: image.uuid,
                    url: url
                };
            }
            output.image = image.uuid;
        }
        if (JSON.stringify(this.userData) !== '{}') output.userData = this.userData;
        if (!isRootObject) meta.textures[this.uuid] = output;
        return output;
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
    transformUv(uv4) {
        if (this.mapping !== UVMapping) return uv4;
        uv4.applyMatrix3(this.matrix);
        if (uv4.x < 0 || uv4.x > 1) switch(this.wrapS){
            case RepeatWrapping:
                uv4.x = uv4.x - Math.floor(uv4.x);
                break;
            case ClampToEdgeWrapping:
                uv4.x = uv4.x < 0 ? 0 : 1;
                break;
            case MirroredRepeatWrapping:
                if (Math.abs(Math.floor(uv4.x) % 2) === 1) uv4.x = Math.ceil(uv4.x) - uv4.x;
                else uv4.x = uv4.x - Math.floor(uv4.x);
                break;
        }
        if (uv4.y < 0 || uv4.y > 1) switch(this.wrapT){
            case RepeatWrapping:
                uv4.y = uv4.y - Math.floor(uv4.y);
                break;
            case ClampToEdgeWrapping:
                uv4.y = uv4.y < 0 ? 0 : 1;
                break;
            case MirroredRepeatWrapping:
                if (Math.abs(Math.floor(uv4.y) % 2) === 1) uv4.y = Math.ceil(uv4.y) - uv4.y;
                else uv4.y = uv4.y - Math.floor(uv4.y);
                break;
        }
        if (this.flipY) uv4.y = 1 - uv4.y;
        return uv4;
    }
    set needsUpdate(value3) {
        if (value3 === true) this.version++;
    }
}
Texture.DEFAULT_IMAGE = undefined;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.prototype.isTexture = true;
function serializeImage(image) {
    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) // default images
    return ImageUtils.getDataURL(image);
    else {
        if (image.data) // images of DataTexture
        return {
            data: Array.prototype.slice.call(image.data),
            width: image.width,
            height: image.height,
            type: image.data.constructor.name
        };
        else {
            console.warn('THREE.Texture: Unable to serialize Texture.');
            return {
            };
        }
    }
}
class Vector4 {
    constructor(x3 = 0, y3 = 0, z20 = 0, w2 = 1){
        this.x = x3;
        this.y = y3;
        this.z = z20;
        this.w = w2;
    }
    get width() {
        return this.z;
    }
    set width(value4) {
        this.z = value4;
    }
    get height() {
        return this.w;
    }
    set height(value5) {
        this.w = value5;
    }
    set(x4, y4, z1, w3) {
        this.x = x4;
        this.y = y4;
        this.z = z1;
        this.w = w3;
        return this;
    }
    setScalar(scalar3) {
        this.x = scalar3;
        this.y = scalar3;
        this.z = scalar3;
        this.w = scalar3;
        return this;
    }
    setX(x5) {
        this.x = x5;
        return this;
    }
    setY(y5) {
        this.y = y5;
        return this;
    }
    setZ(z2) {
        this.z = z2;
        return this;
    }
    setW(w4) {
        this.w = w4;
        return this;
    }
    setComponent(index3, value6) {
        switch(index3){
            case 0:
                this.x = value6;
                break;
            case 1:
                this.y = value6;
                break;
            case 2:
                this.z = value6;
                break;
            case 3:
                this.w = value6;
                break;
            default:
                throw new Error('index is out of range: ' + index3);
        }
        return this;
    }
    getComponent(index4) {
        switch(index4){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            case 3:
                return this.w;
            default:
                throw new Error('index is out of range: ' + index4);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v15) {
        this.x = v15.x;
        this.y = v15.y;
        this.z = v15.z;
        this.w = v15.w !== undefined ? v15.w : 1;
        return this;
    }
    add(v16, w5) {
        if (w5 !== undefined) {
            console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
            return this.addVectors(v16, w5);
        }
        this.x += v16.x;
        this.y += v16.y;
        this.z += v16.z;
        this.w += v16.w;
        return this;
    }
    addScalar(s4) {
        this.x += s4;
        this.y += s4;
        this.z += s4;
        this.w += s4;
        return this;
    }
    addVectors(a3, b3) {
        this.x = a3.x + b3.x;
        this.y = a3.y + b3.y;
        this.z = a3.z + b3.z;
        this.w = a3.w + b3.w;
        return this;
    }
    addScaledVector(v17, s5) {
        this.x += v17.x * s5;
        this.y += v17.y * s5;
        this.z += v17.z * s5;
        this.w += v17.w * s5;
        return this;
    }
    sub(v18, w6) {
        if (w6 !== undefined) {
            console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
            return this.subVectors(v18, w6);
        }
        this.x -= v18.x;
        this.y -= v18.y;
        this.z -= v18.z;
        this.w -= v18.w;
        return this;
    }
    subScalar(s6) {
        this.x -= s6;
        this.y -= s6;
        this.z -= s6;
        this.w -= s6;
        return this;
    }
    subVectors(a4, b4) {
        this.x = a4.x - b4.x;
        this.y = a4.y - b4.y;
        this.z = a4.z - b4.z;
        this.w = a4.w - b4.w;
        return this;
    }
    multiply(v19) {
        this.x *= v19.x;
        this.y *= v19.y;
        this.z *= v19.z;
        this.w *= v19.w;
        return this;
    }
    multiplyScalar(scalar4) {
        this.x *= scalar4;
        this.y *= scalar4;
        this.z *= scalar4;
        this.w *= scalar4;
        return this;
    }
    applyMatrix4(m5) {
        const x = this.x, y = this.y, z = this.z, w = this.w;
        const e = m5.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
        this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
        this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
        this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
        return this;
    }
    divideScalar(scalar5) {
        return this.multiplyScalar(1 / scalar5);
    }
    setAxisAngleFromQuaternion(q10) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
        // q is assumed to be normalized
        this.w = 2 * Math.acos(q10.w);
        const s = Math.sqrt(1 - q10.w * q10.w);
        if (s < 0.0001) {
            this.x = 1;
            this.y = 0;
            this.z = 0;
        } else {
            this.x = q10.x / s;
            this.y = q10.y / s;
            this.z = q10.z / s;
        }
        return this;
    }
    setAxisAngleFromRotationMatrix(m6) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        let angle, x, y, z; // variables for result
        const epsilon = 0.01, epsilon2 = 0.1, te = m6.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
        if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
            // singularity found
            // first check for identity matrix which must have +1 for all terms
            // in leading diagonal and zero in other terms
            if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
                // this singularity is identity matrix so angle = 0
                this.set(1, 0, 0, 0);
                return this; // zero angle, arbitrary axis
            }
            // otherwise this singularity is angle = 180
            angle = Math.PI;
            const xx = (m11 + 1) / 2;
            const yy = (m22 + 1) / 2;
            const zz = (m33 + 1) / 2;
            const xy = (m12 + m21) / 4;
            const xz = (m13 + m31) / 4;
            const yz = (m23 + m32) / 4;
            if (xx > yy && xx > zz) {
                // m11 is the largest diagonal term
                if (xx < epsilon) {
                    x = 0;
                    y = 0.707106781;
                    z = 0.707106781;
                } else {
                    x = Math.sqrt(xx);
                    y = xy / x;
                    z = xz / x;
                }
            } else if (yy > zz) {
                // m22 is the largest diagonal term
                if (yy < epsilon) {
                    x = 0.707106781;
                    y = 0;
                    z = 0.707106781;
                } else {
                    y = Math.sqrt(yy);
                    x = xy / y;
                    z = yz / y;
                }
            } else // m33 is the largest diagonal term so base result on this
            if (zz < epsilon) {
                x = 0.707106781;
                y = 0.707106781;
                z = 0;
            } else {
                z = Math.sqrt(zz);
                x = xz / z;
                y = yz / z;
            }
            this.set(x, y, z, angle);
            return this; // return 180 deg rotation
        }
        // as we have reached here there are no singularities so we can handle normally
        let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize
        if (Math.abs(s) < 0.001) s = 1;
        // prevent divide by zero, should not happen if matrix is orthogonal and should be
        // caught by singularity test above, but I've left it in just in case
        this.x = (m32 - m23) / s;
        this.y = (m13 - m31) / s;
        this.z = (m21 - m12) / s;
        this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
        return this;
    }
    min(v20) {
        this.x = Math.min(this.x, v20.x);
        this.y = Math.min(this.y, v20.y);
        this.z = Math.min(this.z, v20.z);
        this.w = Math.min(this.w, v20.w);
        return this;
    }
    max(v21) {
        this.x = Math.max(this.x, v21.x);
        this.y = Math.max(this.y, v21.y);
        this.z = Math.max(this.z, v21.z);
        this.w = Math.max(this.w, v21.w);
        return this;
    }
    clamp(min2, max8) {
        // assumes min < max, componentwise
        this.x = Math.max(min2.x, Math.min(max8.x, this.x));
        this.y = Math.max(min2.y, Math.min(max8.y, this.y));
        this.z = Math.max(min2.z, Math.min(max8.z, this.z));
        this.w = Math.max(min2.w, Math.min(max8.w, this.w));
        return this;
    }
    clampScalar(minVal1, maxVal1) {
        this.x = Math.max(minVal1, Math.min(maxVal1, this.x));
        this.y = Math.max(minVal1, Math.min(maxVal1, this.y));
        this.z = Math.max(minVal1, Math.min(maxVal1, this.z));
        this.w = Math.max(minVal1, Math.min(maxVal1, this.w));
        return this;
    }
    clampLength(min3, max3) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min3, Math.min(max3, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        this.w = Math.floor(this.w);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        this.w = Math.ceil(this.w);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        this.w = Math.round(this.w);
        return this;
    }
    roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
        this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
    }
    dot(v22) {
        return this.x * v22.x + this.y * v22.y + this.z * v22.z + this.w * v22.w;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(length1) {
        return this.normalize().multiplyScalar(length1);
    }
    lerp(v23, alpha2) {
        this.x += (v23.x - this.x) * alpha2;
        this.y += (v23.y - this.y) * alpha2;
        this.z += (v23.z - this.z) * alpha2;
        this.w += (v23.w - this.w) * alpha2;
        return this;
    }
    lerpVectors(v110, v24, alpha3) {
        this.x = v110.x + (v24.x - v110.x) * alpha3;
        this.y = v110.y + (v24.y - v110.y) * alpha3;
        this.z = v110.z + (v24.z - v110.z) * alpha3;
        this.w = v110.w + (v24.w - v110.w) * alpha3;
        return this;
    }
    equals(v25) {
        return v25.x === this.x && v25.y === this.y && v25.z === this.z && v25.w === this.w;
    }
    fromArray(array29, offset5 = 0) {
        this.x = array29[offset5];
        this.y = array29[offset5 + 1];
        this.z = array29[offset5 + 2];
        this.w = array29[offset5 + 3];
        return this;
    }
    toArray(array5 = [], offset6 = 0) {
        array5[offset6] = this.x;
        array5[offset6 + 1] = this.y;
        array5[offset6 + 2] = this.z;
        array5[offset6 + 3] = this.w;
        return array5;
    }
    fromBufferAttribute(attribute1, index5, offset7) {
        if (offset7 !== undefined) console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');
        this.x = attribute1.getX(index5);
        this.y = attribute1.getY(index5);
        this.z = attribute1.getZ(index5);
        this.w = attribute1.getW(index5);
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        this.w = Math.random();
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
        yield this.w;
    }
}
Vector4.prototype.isVector4 = true;
/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/ class WebGLRenderTarget extends EventDispatcher {
    constructor(width6, height6, options4 = {
    }){
        super();
        this.width = width6;
        this.height = height6;
        this.depth = 1;
        this.scissor = new Vector4(0, 0, width6, height6);
        this.scissorTest = false;
        this.viewport = new Vector4(0, 0, width6, height6);
        this.texture = new Texture(undefined, options4.mapping, options4.wrapS, options4.wrapT, options4.magFilter, options4.minFilter, options4.format, options4.type, options4.anisotropy, options4.encoding);
        this.texture.isRenderTargetTexture = true;
        this.texture.image = {
            width: width6,
            height: height6,
            depth: 1
        };
        this.texture.generateMipmaps = options4.generateMipmaps !== undefined ? options4.generateMipmaps : false;
        this.texture.internalFormat = options4.internalFormat !== undefined ? options4.internalFormat : null;
        this.texture.minFilter = options4.minFilter !== undefined ? options4.minFilter : LinearFilter;
        this.depthBuffer = options4.depthBuffer !== undefined ? options4.depthBuffer : true;
        this.stencilBuffer = options4.stencilBuffer !== undefined ? options4.stencilBuffer : false;
        this.depthTexture = options4.depthTexture !== undefined ? options4.depthTexture : null;
    }
    setTexture(texture2) {
        texture2.image = {
            width: this.width,
            height: this.height,
            depth: this.depth
        };
        this.texture = texture2;
    }
    setSize(width1, height1, depth3 = 1) {
        if (this.width !== width1 || this.height !== height1 || this.depth !== depth3) {
            this.width = width1;
            this.height = height1;
            this.depth = depth3;
            this.texture.image.width = width1;
            this.texture.image.height = height1;
            this.texture.image.depth = depth3;
            this.dispose();
        }
        this.viewport.set(0, 0, width1, height1);
        this.scissor.set(0, 0, width1, height1);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source1) {
        this.width = source1.width;
        this.height = source1.height;
        this.depth = source1.depth;
        this.viewport.copy(source1.viewport);
        this.texture = source1.texture.clone();
        this.texture.image = {
            ...this.texture.image
        }; // See #20328.
        this.depthBuffer = source1.depthBuffer;
        this.stencilBuffer = source1.stencilBuffer;
        this.depthTexture = source1.depthTexture;
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
}
WebGLRenderTarget.prototype.isWebGLRenderTarget = true;
class WebGLMultipleRenderTargets extends WebGLRenderTarget {
    constructor(width2, height2, count3){
        super(width2, height2);
        const texture = this.texture;
        this.texture = [];
        for(let i = 0; i < count3; i++)this.texture[i] = texture.clone();
    }
    setSize(width3, height3, depth1 = 1) {
        if (this.width !== width3 || this.height !== height3 || this.depth !== depth1) {
            this.width = width3;
            this.height = height3;
            this.depth = depth1;
            for(let i = 0, il = this.texture.length; i < il; i++){
                this.texture[i].image.width = width3;
                this.texture[i].image.height = height3;
                this.texture[i].image.depth = depth1;
            }
            this.dispose();
        }
        this.viewport.set(0, 0, width3, height3);
        this.scissor.set(0, 0, width3, height3);
        return this;
    }
    copy(source2) {
        this.dispose();
        this.width = source2.width;
        this.height = source2.height;
        this.depth = source2.depth;
        this.viewport.set(0, 0, this.width, this.height);
        this.scissor.set(0, 0, this.width, this.height);
        this.depthBuffer = source2.depthBuffer;
        this.stencilBuffer = source2.stencilBuffer;
        this.depthTexture = source2.depthTexture;
        this.texture.length = 0;
        for(let i = 0, il = source2.texture.length; i < il; i++)this.texture[i] = source2.texture[i].clone();
        return this;
    }
}
WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;
class WebGLMultisampleRenderTarget extends WebGLRenderTarget {
    constructor(width4, height4, options1 = {
    }){
        super(width4, height4, options1);
        this.samples = 4;
        this.ignoreDepthForMultisampleCopy = options1.ignoreDepth !== undefined ? options1.ignoreDepth : true;
        this.useRenderToTexture = options1.useRenderToTexture !== undefined ? options1.useRenderToTexture : false;
        this.useRenderbuffer = this.useRenderToTexture === false;
    }
    copy(source3) {
        super.copy.call(this, source3);
        this.samples = source3.samples;
        this.useRenderToTexture = source3.useRenderToTexture;
        this.useRenderbuffer = source3.useRenderbuffer;
        return this;
    }
}
WebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;
class Quaternion {
    constructor(x6 = 0, y6 = 0, z3 = 0, w7 = 1){
        this._x = x6;
        this._y = y6;
        this._z = z3;
        this._w = w7;
    }
    static slerp(qa, qb, qm, t6) {
        console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');
        return qm.slerpQuaternions(qa, qb, t6);
    }
    static slerpFlat(dst2, dstOffset2, src0, srcOffset0, src1, srcOffset1, t1) {
        // fuzz-free, array-based Quaternion SLERP operation
        let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
        if (t1 === 0) {
            dst2[dstOffset2 + 0] = x0;
            dst2[dstOffset2 + 1] = y0;
            dst2[dstOffset2 + 2] = z0;
            dst2[dstOffset2 + 3] = w0;
            return;
        }
        if (t1 === 1) {
            dst2[dstOffset2 + 0] = x1;
            dst2[dstOffset2 + 1] = y1;
            dst2[dstOffset2 + 2] = z1;
            dst2[dstOffset2 + 3] = w1;
            return;
        }
        if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
            let s = 1 - t1;
            const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
            // Skip the Slerp for tiny steps to avoid numeric problems:
            if (sqrSin > Number.EPSILON) {
                const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
                s = Math.sin(s * len) / sin;
                t1 = Math.sin(t1 * len) / sin;
            }
            const tDir = t1 * dir;
            x0 = x0 * s + x1 * tDir;
            y0 = y0 * s + y1 * tDir;
            z0 = z0 * s + z1 * tDir;
            w0 = w0 * s + w1 * tDir;
            // Normalize in case we just did a lerp:
            if (s === 1 - t1) {
                const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
                x0 *= f;
                y0 *= f;
                z0 *= f;
                w0 *= f;
            }
        }
        dst2[dstOffset2] = x0;
        dst2[dstOffset2 + 1] = y0;
        dst2[dstOffset2 + 2] = z0;
        dst2[dstOffset2 + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst1, dstOffset1, src01, srcOffset01, src11, srcOffset11) {
        const x0 = src01[srcOffset01];
        const y0 = src01[srcOffset01 + 1];
        const z0 = src01[srcOffset01 + 2];
        const w0 = src01[srcOffset01 + 3];
        const x1 = src11[srcOffset11];
        const y1 = src11[srcOffset11 + 1];
        const z1 = src11[srcOffset11 + 2];
        const w1 = src11[srcOffset11 + 3];
        dst1[dstOffset1] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
        dst1[dstOffset1 + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
        dst1[dstOffset1 + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
        dst1[dstOffset1 + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
        return dst1;
    }
    get x() {
        return this._x;
    }
    set x(value7) {
        this._x = value7;
        this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(value8) {
        this._y = value8;
        this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(value9) {
        this._z = value9;
        this._onChangeCallback();
    }
    get w() {
        return this._w;
    }
    set w(value10) {
        this._w = value10;
        this._onChangeCallback();
    }
    set(x7, y7, z4, w8) {
        this._x = x7;
        this._y = y7;
        this._z = z4;
        this._w = w8;
        this._onChangeCallback();
        return this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
        this._x = quaternion.x;
        this._y = quaternion.y;
        this._z = quaternion.z;
        this._w = quaternion.w;
        this._onChangeCallback();
        return this;
    }
    setFromEuler(euler, update3) {
        if (!(euler && euler.isEuler)) throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');
        const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
        // http://www.mathworks.com/matlabcentral/fileexchange/
        // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
        //	content/SpinCalc.m
        const cos = Math.cos;
        const sin = Math.sin;
        const c1 = cos(x / 2);
        const c2 = cos(y / 2);
        const c3 = cos(z / 2);
        const s1 = sin(x / 2);
        const s2 = sin(y / 2);
        const s3 = sin(z / 2);
        switch(order){
            case 'XYZ':
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case 'YXZ':
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case 'ZXY':
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case 'ZYX':
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case 'YZX':
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case 'XZY':
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            default:
                console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);
        }
        if (update3 !== false) this._onChangeCallback();
        return this;
    }
    setFromAxisAngle(axis7, angle1) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
        // assumes axis is normalized
        const halfAngle = angle1 / 2, s = Math.sin(halfAngle);
        this._x = axis7.x * s;
        this._y = axis7.y * s;
        this._z = axis7.z * s;
        this._w = Math.cos(halfAngle);
        this._onChangeCallback();
        return this;
    }
    setFromRotationMatrix(m7) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        const te = m7.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
        if (trace > 0) {
            const s = 0.5 / Math.sqrt(trace + 1);
            this._w = 0.25 / s;
            this._x = (m32 - m23) * s;
            this._y = (m13 - m31) * s;
            this._z = (m21 - m12) * s;
        } else if (m11 > m22 && m11 > m33) {
            const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
            this._w = (m32 - m23) / s;
            this._x = 0.25 * s;
            this._y = (m12 + m21) / s;
            this._z = (m13 + m31) / s;
        } else if (m22 > m33) {
            const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
            this._w = (m13 - m31) / s;
            this._x = (m12 + m21) / s;
            this._y = 0.25 * s;
            this._z = (m23 + m32) / s;
        } else {
            const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
            this._w = (m21 - m12) / s;
            this._x = (m13 + m31) / s;
            this._y = (m23 + m32) / s;
            this._z = 0.25 * s;
        }
        this._onChangeCallback();
        return this;
    }
    setFromUnitVectors(vFrom, vTo) {
        // assumes direction vectors vFrom and vTo are normalized
        let r = vFrom.dot(vTo) + 1;
        if (r < Number.EPSILON) {
            // vFrom and vTo point in opposite directions
            r = 0;
            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
                this._x = -vFrom.y;
                this._y = vFrom.x;
                this._z = 0;
                this._w = r;
            } else {
                this._x = 0;
                this._y = -vFrom.z;
                this._z = vFrom.y;
                this._w = r;
            }
        } else {
            // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
            this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
            this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
            this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
            this._w = r;
        }
        return this.normalize();
    }
    angleTo(q1) {
        return 2 * Math.acos(Math.abs(clamp(this.dot(q1), -1, 1)));
    }
    rotateTowards(q2, step) {
        const angle = this.angleTo(q2);
        if (angle === 0) return this;
        const t = Math.min(1, step / angle);
        this.slerp(q2, t);
        return this;
    }
    identity() {
        return this.set(0, 0, 0, 1);
    }
    invert() {
        // quaternion is assumed to have unit length
        return this.conjugate();
    }
    conjugate() {
        this._x *= -1;
        this._y *= -1;
        this._z *= -1;
        this._onChangeCallback();
        return this;
    }
    dot(v26) {
        return this._x * v26._x + this._y * v26._y + this._z * v26._z + this._w * v26._w;
    }
    lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
        let l = this.length();
        if (l === 0) {
            this._x = 0;
            this._y = 0;
            this._z = 0;
            this._w = 1;
        } else {
            l = 1 / l;
            this._x = this._x * l;
            this._y = this._y * l;
            this._z = this._z * l;
            this._w = this._w * l;
        }
        this._onChangeCallback();
        return this;
    }
    multiply(q3, p5) {
        if (p5 !== undefined) {
            console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');
            return this.multiplyQuaternions(q3, p5);
        }
        return this.multiplyQuaternions(this, q3);
    }
    premultiply(q4) {
        return this.multiplyQuaternions(q4, this);
    }
    multiplyQuaternions(a5, b5) {
        // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
        const qax = a5._x, qay = a5._y, qaz = a5._z, qaw = a5._w;
        const qbx = b5._x, qby = b5._y, qbz = b5._z, qbw = b5._w;
        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
        this._onChangeCallback();
        return this;
    }
    slerp(qb1, t2) {
        if (t2 === 0) return this;
        if (t2 === 1) return this.copy(qb1);
        const x = this._x, y = this._y, z = this._z, w = this._w;
        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
        let cosHalfTheta = w * qb1._w + x * qb1._x + y * qb1._y + z * qb1._z;
        if (cosHalfTheta < 0) {
            this._w = -qb1._w;
            this._x = -qb1._x;
            this._y = -qb1._y;
            this._z = -qb1._z;
            cosHalfTheta = -cosHalfTheta;
        } else this.copy(qb1);
        if (cosHalfTheta >= 1) {
            this._w = w;
            this._x = x;
            this._y = y;
            this._z = z;
            return this;
        }
        const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
        if (sqrSinHalfTheta <= Number.EPSILON) {
            const s = 1 - t2;
            this._w = s * w + t2 * this._w;
            this._x = s * x + t2 * this._x;
            this._y = s * y + t2 * this._y;
            this._z = s * z + t2 * this._z;
            this.normalize();
            this._onChangeCallback();
            return this;
        }
        const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
        const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
        const ratioA = Math.sin((1 - t2) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t2 * halfTheta) / sinHalfTheta;
        this._w = w * ratioA + this._w * ratioB;
        this._x = x * ratioA + this._x * ratioB;
        this._y = y * ratioA + this._y * ratioB;
        this._z = z * ratioA + this._z * ratioB;
        this._onChangeCallback();
        return this;
    }
    slerpQuaternions(qa1, qb2, t3) {
        this.copy(qa1).slerp(qb2, t3);
    }
    random() {
        // Derived from http://planning.cs.uiuc.edu/node198.html
        // Note, this source uses w, x, y, z ordering,
        // so we swap the order below.
        const u1 = Math.random();
        const sqrt1u1 = Math.sqrt(1 - u1);
        const sqrtu1 = Math.sqrt(u1);
        const u2 = 2 * Math.PI * Math.random();
        const u3 = 2 * Math.PI * Math.random();
        return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
    }
    equals(quaternion1) {
        return quaternion1._x === this._x && quaternion1._y === this._y && quaternion1._z === this._z && quaternion1._w === this._w;
    }
    fromArray(array6, offset8 = 0) {
        this._x = array6[offset8];
        this._y = array6[offset8 + 1];
        this._z = array6[offset8 + 2];
        this._w = array6[offset8 + 3];
        this._onChangeCallback();
        return this;
    }
    toArray(array7 = [], offset9 = 0) {
        array7[offset9] = this._x;
        array7[offset9 + 1] = this._y;
        array7[offset9 + 2] = this._z;
        array7[offset9 + 3] = this._w;
        return array7;
    }
    fromBufferAttribute(attribute2, index6) {
        this._x = attribute2.getX(index6);
        this._y = attribute2.getY(index6);
        this._z = attribute2.getZ(index6);
        this._w = attribute2.getW(index6);
        return this;
    }
    _onChange(callback6) {
        this._onChangeCallback = callback6;
        return this;
    }
    _onChangeCallback() {
    }
}
Quaternion.prototype.isQuaternion = true;
class Vector3 {
    constructor(x8 = 0, y8 = 0, z5 = 0){
        this.x = x8;
        this.y = y8;
        this.z = z5;
    }
    set(x9, y9, z6) {
        if (z6 === undefined) z6 = this.z; // sprite.scale.set(x,y)
        this.x = x9;
        this.y = y9;
        this.z = z6;
        return this;
    }
    setScalar(scalar6) {
        this.x = scalar6;
        this.y = scalar6;
        this.z = scalar6;
        return this;
    }
    setX(x10) {
        this.x = x10;
        return this;
    }
    setY(y10) {
        this.y = y10;
        return this;
    }
    setZ(z7) {
        this.z = z7;
        return this;
    }
    setComponent(index7, value11) {
        switch(index7){
            case 0:
                this.x = value11;
                break;
            case 1:
                this.y = value11;
                break;
            case 2:
                this.z = value11;
                break;
            default:
                throw new Error('index is out of range: ' + index7);
        }
        return this;
    }
    getComponent(index8) {
        switch(index8){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            default:
                throw new Error('index is out of range: ' + index8);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z);
    }
    copy(v27) {
        this.x = v27.x;
        this.y = v27.y;
        this.z = v27.z;
        return this;
    }
    add(v28, w9) {
        if (w9 !== undefined) {
            console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
            return this.addVectors(v28, w9);
        }
        this.x += v28.x;
        this.y += v28.y;
        this.z += v28.z;
        return this;
    }
    addScalar(s7) {
        this.x += s7;
        this.y += s7;
        this.z += s7;
        return this;
    }
    addVectors(a6, b6) {
        this.x = a6.x + b6.x;
        this.y = a6.y + b6.y;
        this.z = a6.z + b6.z;
        return this;
    }
    addScaledVector(v29, s8) {
        this.x += v29.x * s8;
        this.y += v29.y * s8;
        this.z += v29.z * s8;
        return this;
    }
    sub(v30, w10) {
        if (w10 !== undefined) {
            console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
            return this.subVectors(v30, w10);
        }
        this.x -= v30.x;
        this.y -= v30.y;
        this.z -= v30.z;
        return this;
    }
    subScalar(s9) {
        this.x -= s9;
        this.y -= s9;
        this.z -= s9;
        return this;
    }
    subVectors(a7, b7) {
        this.x = a7.x - b7.x;
        this.y = a7.y - b7.y;
        this.z = a7.z - b7.z;
        return this;
    }
    multiply(v31, w11) {
        if (w11 !== undefined) {
            console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
            return this.multiplyVectors(v31, w11);
        }
        this.x *= v31.x;
        this.y *= v31.y;
        this.z *= v31.z;
        return this;
    }
    multiplyScalar(scalar7) {
        this.x *= scalar7;
        this.y *= scalar7;
        this.z *= scalar7;
        return this;
    }
    multiplyVectors(a8, b8) {
        this.x = a8.x * b8.x;
        this.y = a8.y * b8.y;
        this.z = a8.z * b8.z;
        return this;
    }
    applyEuler(euler1) {
        if (!(euler1 && euler1.isEuler)) console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');
        return this.applyQuaternion(_quaternion$4.setFromEuler(euler1));
    }
    applyAxisAngle(axis1, angle2) {
        return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis1, angle2));
    }
    applyMatrix3(m8) {
        const x = this.x, y = this.y, z = this.z;
        const e = m8.elements;
        this.x = e[0] * x + e[3] * y + e[6] * z;
        this.y = e[1] * x + e[4] * y + e[7] * z;
        this.z = e[2] * x + e[5] * y + e[8] * z;
        return this;
    }
    applyNormalMatrix(m9) {
        return this.applyMatrix3(m9).normalize();
    }
    applyMatrix4(m10) {
        const x = this.x, y = this.y, z = this.z;
        const e = m10.elements;
        const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
        this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
        this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
        this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
        return this;
    }
    applyQuaternion(q5) {
        const x = this.x, y = this.y, z = this.z;
        const qx = q5.x, qy = q5.y, qz = q5.z, qw = q5.w;
        // calculate quat * vector
        const ix = qw * x + qy * z - qz * y;
        const iy = qw * y + qz * x - qx * z;
        const iz = qw * z + qx * y - qy * x;
        const iw = -qx * x - qy * y - qz * z;
        // calculate result * inverse quat
        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        return this;
    }
    project(camera2) {
        return this.applyMatrix4(camera2.matrixWorldInverse).applyMatrix4(camera2.projectionMatrix);
    }
    unproject(camera1) {
        return this.applyMatrix4(camera1.projectionMatrixInverse).applyMatrix4(camera1.matrixWorld);
    }
    transformDirection(m11) {
        // input: THREE.Matrix4 affine matrix
        // vector interpreted as a direction
        const x = this.x, y = this.y, z = this.z;
        const e = m11.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z;
        this.y = e[1] * x + e[5] * y + e[9] * z;
        this.z = e[2] * x + e[6] * y + e[10] * z;
        return this.normalize();
    }
    divide(v32) {
        this.x /= v32.x;
        this.y /= v32.y;
        this.z /= v32.z;
        return this;
    }
    divideScalar(scalar8) {
        return this.multiplyScalar(1 / scalar8);
    }
    min(v33) {
        this.x = Math.min(this.x, v33.x);
        this.y = Math.min(this.y, v33.y);
        this.z = Math.min(this.z, v33.z);
        return this;
    }
    max(v34) {
        this.x = Math.max(this.x, v34.x);
        this.y = Math.max(this.y, v34.y);
        this.z = Math.max(this.z, v34.z);
        return this;
    }
    clamp(min4, max4) {
        // assumes min < max, componentwise
        this.x = Math.max(min4.x, Math.min(max4.x, this.x));
        this.y = Math.max(min4.y, Math.min(max4.y, this.y));
        this.z = Math.max(min4.z, Math.min(max4.z, this.z));
        return this;
    }
    clampScalar(minVal2, maxVal2) {
        this.x = Math.max(minVal2, Math.min(maxVal2, this.x));
        this.y = Math.max(minVal2, Math.min(maxVal2, this.y));
        this.z = Math.max(minVal2, Math.min(maxVal2, this.z));
        return this;
    }
    clampLength(min5, max5) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min5, Math.min(max5, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        return this;
    }
    roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    }
    dot(v35) {
        return this.x * v35.x + this.y * v35.y + this.z * v35.z;
    }
    // TODO lengthSquared?
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(length2) {
        return this.normalize().multiplyScalar(length2);
    }
    lerp(v36, alpha4) {
        this.x += (v36.x - this.x) * alpha4;
        this.y += (v36.y - this.y) * alpha4;
        this.z += (v36.z - this.z) * alpha4;
        return this;
    }
    lerpVectors(v111, v210, alpha5) {
        this.x = v111.x + (v210.x - v111.x) * alpha5;
        this.y = v111.y + (v210.y - v111.y) * alpha5;
        this.z = v111.z + (v210.z - v111.z) * alpha5;
        return this;
    }
    cross(v37, w12) {
        if (w12 !== undefined) {
            console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
            return this.crossVectors(v37, w12);
        }
        return this.crossVectors(this, v37);
    }
    crossVectors(a9, b9) {
        const ax = a9.x, ay = a9.y, az = a9.z;
        const bx = b9.x, by = b9.y, bz = b9.z;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
    }
    projectOnVector(v38) {
        const denominator = v38.lengthSq();
        if (denominator === 0) return this.set(0, 0, 0);
        const scalar = v38.dot(this) / denominator;
        return this.copy(v38).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
        _vector$c.copy(this).projectOnVector(planeNormal);
        return this.sub(_vector$c);
    }
    reflect(normal4) {
        // reflect incident vector off plane orthogonal to normal
        // normal is assumed to have unit length
        return this.sub(_vector$c.copy(normal4).multiplyScalar(2 * this.dot(normal4)));
    }
    angleTo(v39) {
        const denominator = Math.sqrt(this.lengthSq() * v39.lengthSq());
        if (denominator === 0) return Math.PI / 2;
        const theta = this.dot(v39) / denominator;
        // clamp, to handle numerical problems
        return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v40) {
        return Math.sqrt(this.distanceToSquared(v40));
    }
    distanceToSquared(v41) {
        const dx = this.x - v41.x, dy = this.y - v41.y, dz = this.z - v41.z;
        return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v42) {
        return Math.abs(this.x - v42.x) + Math.abs(this.y - v42.y) + Math.abs(this.z - v42.z);
    }
    setFromSpherical(s10) {
        return this.setFromSphericalCoords(s10.radius, s10.phi, s10.theta);
    }
    setFromSphericalCoords(radius5, phi, theta1) {
        const sinPhiRadius = Math.sin(phi) * radius5;
        this.x = sinPhiRadius * Math.sin(theta1);
        this.y = Math.cos(phi) * radius5;
        this.z = sinPhiRadius * Math.cos(theta1);
        return this;
    }
    setFromCylindrical(c8) {
        return this.setFromCylindricalCoords(c8.radius, c8.theta, c8.y);
    }
    setFromCylindricalCoords(radius1, theta2, y11) {
        this.x = radius1 * Math.sin(theta2);
        this.y = y11;
        this.z = radius1 * Math.cos(theta2);
        return this;
    }
    setFromMatrixPosition(m12) {
        const e = m12.elements;
        this.x = e[12];
        this.y = e[13];
        this.z = e[14];
        return this;
    }
    setFromMatrixScale(m13) {
        const sx = this.setFromMatrixColumn(m13, 0).length();
        const sy = this.setFromMatrixColumn(m13, 1).length();
        const sz = this.setFromMatrixColumn(m13, 2).length();
        this.x = sx;
        this.y = sy;
        this.z = sz;
        return this;
    }
    setFromMatrixColumn(m14, index9) {
        return this.fromArray(m14.elements, index9 * 4);
    }
    setFromMatrix3Column(m15, index10) {
        return this.fromArray(m15.elements, index10 * 3);
    }
    equals(v43) {
        return v43.x === this.x && v43.y === this.y && v43.z === this.z;
    }
    fromArray(array8, offset10 = 0) {
        this.x = array8[offset10];
        this.y = array8[offset10 + 1];
        this.z = array8[offset10 + 2];
        return this;
    }
    toArray(array9 = [], offset11 = 0) {
        array9[offset11] = this.x;
        array9[offset11 + 1] = this.y;
        array9[offset11 + 2] = this.z;
        return array9;
    }
    fromBufferAttribute(attribute3, index11, offset12) {
        if (offset12 !== undefined) console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');
        this.x = attribute3.getX(index11);
        this.y = attribute3.getY(index11);
        this.z = attribute3.getZ(index11);
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        return this;
    }
    randomDirection() {
        // Derived from https://mathworld.wolfram.com/SpherePointPicking.html
        const u = (Math.random() - 0.5) * 2;
        const t = Math.random() * Math.PI * 2;
        const f = Math.sqrt(1 - u ** 2);
        this.x = f * Math.cos(t);
        this.y = f * Math.sin(t);
        this.z = u;
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
    }
}
Vector3.prototype.isVector3 = true;
const _vector$c = /*@__PURE__*/ new Vector3();
const _quaternion$4 = /*@__PURE__*/ new Quaternion();
class Box3 {
    constructor(min6 = new Vector3(Infinity, Infinity, Infinity), max6 = new Vector3(-Infinity, -Infinity, -Infinity)){
        this.min = min6;
        this.max = max6;
    }
    set(min7, max7) {
        this.min.copy(min7);
        this.max.copy(max7);
        return this;
    }
    setFromArray(array10) {
        let minX = Infinity;
        let minY = Infinity;
        let minZ = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        let maxZ = -Infinity;
        for(let i = 0, l = array10.length; i < l; i += 3){
            const x = array10[i];
            const y = array10[i + 1];
            const z = array10[i + 2];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (z < minZ) minZ = z;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
            if (z > maxZ) maxZ = z;
        }
        this.min.set(minX, minY, minZ);
        this.max.set(maxX, maxY, maxZ);
        return this;
    }
    setFromBufferAttribute(attribute4) {
        let minX = Infinity;
        let minY = Infinity;
        let minZ = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        let maxZ = -Infinity;
        for(let i = 0, l = attribute4.count; i < l; i++){
            const x = attribute4.getX(i);
            const y = attribute4.getY(i);
            const z = attribute4.getZ(i);
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (z < minZ) minZ = z;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
            if (z > maxZ) maxZ = z;
        }
        this.min.set(minX, minY, minZ);
        this.max.set(maxX, maxY, maxZ);
        return this;
    }
    setFromPoints(points9) {
        this.makeEmpty();
        for(let i = 0, il = points9.length; i < il; i++)this.expandByPoint(points9[i]);
        return this;
    }
    setFromCenterAndSize(center1, size2) {
        const halfSize = _vector$b.copy(size2).multiplyScalar(0.5);
        this.min.copy(center1).sub(halfSize);
        this.max.copy(center1).add(halfSize);
        return this;
    }
    setFromObject(object5) {
        this.makeEmpty();
        return this.expandByObject(object5);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(box19) {
        this.min.copy(box19.min);
        this.max.copy(box19.max);
        return this;
    }
    makeEmpty() {
        this.min.x = this.min.y = this.min.z = Infinity;
        this.max.x = this.max.y = this.max.z = -Infinity;
        return this;
    }
    isEmpty() {
        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target32) {
        return this.isEmpty() ? target32.set(0, 0, 0) : target32.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target1) {
        return this.isEmpty() ? target1.set(0, 0, 0) : target1.subVectors(this.max, this.min);
    }
    expandByPoint(point18) {
        this.min.min(point18);
        this.max.max(point18);
        return this;
    }
    expandByVector(vector4) {
        this.min.sub(vector4);
        this.max.add(vector4);
        return this;
    }
    expandByScalar(scalar9) {
        this.min.addScalar(-scalar9);
        this.max.addScalar(scalar9);
        return this;
    }
    expandByObject(object1) {
        // Computes the world-axis-aligned bounding box of an object (including its children),
        // accounting for both the object's, and children's, world transforms
        object1.updateWorldMatrix(false, false);
        const geometry = object1.geometry;
        if (geometry !== undefined) {
            if (geometry.boundingBox === null) geometry.computeBoundingBox();
            _box$3.copy(geometry.boundingBox);
            _box$3.applyMatrix4(object1.matrixWorld);
            this.union(_box$3);
        }
        const children = object1.children;
        for(let i = 0, l = children.length; i < l; i++)this.expandByObject(children[i]);
        return this;
    }
    containsPoint(point1) {
        return point1.x < this.min.x || point1.x > this.max.x || point1.y < this.min.y || point1.y > this.max.y || point1.z < this.min.z || point1.z > this.max.z ? false : true;
    }
    containsBox(box1) {
        return this.min.x <= box1.min.x && box1.max.x <= this.max.x && this.min.y <= box1.min.y && box1.max.y <= this.max.y && this.min.z <= box1.min.z && box1.max.z <= this.max.z;
    }
    getParameter(point2, target2) {
        // This can potentially have a divide by zero if the box
        // has a size dimension of 0.
        return target2.set((point2.x - this.min.x) / (this.max.x - this.min.x), (point2.y - this.min.y) / (this.max.y - this.min.y), (point2.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(box2) {
        // using 6 splitting planes to rule out intersections.
        return box2.max.x < this.min.x || box2.min.x > this.max.x || box2.max.y < this.min.y || box2.min.y > this.max.y || box2.max.z < this.min.z || box2.min.z > this.max.z ? false : true;
    }
    intersectsSphere(sphere10) {
        // Find the point on the AABB closest to the sphere center.
        this.clampPoint(sphere10.center, _vector$b);
        // If that point is inside the sphere, the AABB and sphere intersect.
        return _vector$b.distanceToSquared(sphere10.center) <= sphere10.radius * sphere10.radius;
    }
    intersectsPlane(plane7) {
        // We compute the minimum and maximum dot product values. If those values
        // are on the same side (back or front) of the plane, then there is no intersection.
        let min, max;
        if (plane7.normal.x > 0) {
            min = plane7.normal.x * this.min.x;
            max = plane7.normal.x * this.max.x;
        } else {
            min = plane7.normal.x * this.max.x;
            max = plane7.normal.x * this.min.x;
        }
        if (plane7.normal.y > 0) {
            min += plane7.normal.y * this.min.y;
            max += plane7.normal.y * this.max.y;
        } else {
            min += plane7.normal.y * this.max.y;
            max += plane7.normal.y * this.min.y;
        }
        if (plane7.normal.z > 0) {
            min += plane7.normal.z * this.min.z;
            max += plane7.normal.z * this.max.z;
        } else {
            min += plane7.normal.z * this.max.z;
            max += plane7.normal.z * this.min.z;
        }
        return min <= -plane7.constant && max >= -plane7.constant;
    }
    intersectsTriangle(triangle) {
        if (this.isEmpty()) return false;
        // compute box center and extents
        this.getCenter(_center);
        _extents.subVectors(this.max, _center);
        // translate triangle to aabb origin
        _v0$2.subVectors(triangle.a, _center);
        _v1$7.subVectors(triangle.b, _center);
        _v2$3.subVectors(triangle.c, _center);
        // compute edge vectors for triangle
        _f0.subVectors(_v1$7, _v0$2);
        _f1.subVectors(_v2$3, _v1$7);
        _f2.subVectors(_v0$2, _v2$3);
        // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
        // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
        // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
        let axes = [
            0,
            -_f0.z,
            _f0.y,
            0,
            -_f1.z,
            _f1.y,
            0,
            -_f2.z,
            _f2.y,
            _f0.z,
            0,
            -_f0.x,
            _f1.z,
            0,
            -_f1.x,
            _f2.z,
            0,
            -_f2.x,
            -_f0.y,
            _f0.x,
            0,
            -_f1.y,
            _f1.x,
            0,
            -_f2.y,
            _f2.x,
            0
        ];
        if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) return false;
        // test 3 face normals from the aabb
        axes = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) return false;
        // finally testing the face normal of the triangle
        // use already existing triangle edge vectors here
        _triangleNormal.crossVectors(_f0, _f1);
        axes = [
            _triangleNormal.x,
            _triangleNormal.y,
            _triangleNormal.z
        ];
        return satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);
    }
    clampPoint(point3, target3) {
        return target3.copy(point3).clamp(this.min, this.max);
    }
    distanceToPoint(point4) {
        const clampedPoint = _vector$b.copy(point4).clamp(this.min, this.max);
        return clampedPoint.sub(point4).length();
    }
    getBoundingSphere(target4) {
        this.getCenter(target4.center);
        target4.radius = this.getSize(_vector$b).length() * 0.5;
        return target4;
    }
    intersect(box3) {
        this.min.max(box3.min);
        this.max.min(box3.max);
        // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
        if (this.isEmpty()) this.makeEmpty();
        return this;
    }
    union(box4) {
        this.min.min(box4.min);
        this.max.max(box4.max);
        return this;
    }
    applyMatrix4(matrix1) {
        // transform of empty box is an empty box.
        if (this.isEmpty()) return this;
        // NOTE: I am using a binary pattern to specify all 2^3 combinations below
        _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix1); // 000
        _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix1); // 001
        _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix1); // 010
        _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix1); // 011
        _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix1); // 100
        _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix1); // 101
        _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix1); // 110
        _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix1); // 111
        this.setFromPoints(_points);
        return this;
    }
    translate(offset13) {
        this.min.add(offset13);
        this.max.add(offset13);
        return this;
    }
    equals(box5) {
        return box5.min.equals(this.min) && box5.max.equals(this.max);
    }
}
Box3.prototype.isBox3 = true;
const _points = [
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3(),
    /*@__PURE__*/ new Vector3()
];
const _vector$b = /*@__PURE__*/ new Vector3();
const _box$3 = /*@__PURE__*/ new Box3();
// triangle centered vertices
const _v0$2 = /*@__PURE__*/ new Vector3();
const _v1$7 = /*@__PURE__*/ new Vector3();
const _v2$3 = /*@__PURE__*/ new Vector3();
// triangle edge vectors
const _f0 = /*@__PURE__*/ new Vector3();
const _f1 = /*@__PURE__*/ new Vector3();
const _f2 = /*@__PURE__*/ new Vector3();
const _center = /*@__PURE__*/ new Vector3();
const _extents = /*@__PURE__*/ new Vector3();
const _triangleNormal = /*@__PURE__*/ new Vector3();
const _testAxis = /*@__PURE__*/ new Vector3();
function satForAxes(axes, v0, v1, v2, extents) {
    for(let i = 0, j = axes.length - 3; i <= j; i += 3){
        _testAxis.fromArray(axes, i);
        // project the aabb onto the seperating axis
        const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
        // project all 3 vertices of the triangle onto the seperating axis
        const p0 = v0.dot(_testAxis);
        const p1 = v1.dot(_testAxis);
        const p2 = v2.dot(_testAxis);
        // actual test, basically see if either of the most extreme of the triangle points intersects r
        if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) // points of the projected triangle are outside the projected half-length of the aabb
        // the axis is seperating and we can exit
        return false;
    }
    return true;
}
const _box$2 = /*@__PURE__*/ new Box3();
const _v1$6 = /*@__PURE__*/ new Vector3();
const _toFarthestPoint = /*@__PURE__*/ new Vector3();
const _toPoint = /*@__PURE__*/ new Vector3();
class Sphere {
    constructor(center2 = new Vector3(), radius2 = -1){
        this.center = center2;
        this.radius = radius2;
    }
    set(center3, radius3) {
        this.center.copy(center3);
        this.radius = radius3;
        return this;
    }
    setFromPoints(points1, optionalCenter) {
        const center = this.center;
        if (optionalCenter !== undefined) center.copy(optionalCenter);
        else _box$2.setFromPoints(points1).getCenter(center);
        let maxRadiusSq = 0;
        for(let i = 0, il = points1.length; i < il; i++)maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points1[i]));
        this.radius = Math.sqrt(maxRadiusSq);
        return this;
    }
    copy(sphere1) {
        this.center.copy(sphere1.center);
        this.radius = sphere1.radius;
        return this;
    }
    isEmpty() {
        return this.radius < 0;
    }
    makeEmpty() {
        this.center.set(0, 0, 0);
        this.radius = -1;
        return this;
    }
    containsPoint(point5) {
        return point5.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point6) {
        return point6.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere2) {
        const radiusSum = this.radius + sphere2.radius;
        return sphere2.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box6) {
        return box6.intersectsSphere(this);
    }
    intersectsPlane(plane1) {
        return Math.abs(plane1.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point7, target5) {
        const deltaLengthSq = this.center.distanceToSquared(point7);
        target5.copy(point7);
        if (deltaLengthSq > this.radius * this.radius) {
            target5.sub(this.center).normalize();
            target5.multiplyScalar(this.radius).add(this.center);
        }
        return target5;
    }
    getBoundingBox(target6) {
        if (this.isEmpty()) {
            // Empty sphere produces empty bounding box
            target6.makeEmpty();
            return target6;
        }
        target6.set(this.center, this.center);
        target6.expandByScalar(this.radius);
        return target6;
    }
    applyMatrix4(matrix2) {
        this.center.applyMatrix4(matrix2);
        this.radius = this.radius * matrix2.getMaxScaleOnAxis();
        return this;
    }
    translate(offset14) {
        this.center.add(offset14);
        return this;
    }
    expandByPoint(point8) {
        // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
        _toPoint.subVectors(point8, this.center);
        const lengthSq = _toPoint.lengthSq();
        if (lengthSq > this.radius * this.radius) {
            const length = Math.sqrt(lengthSq);
            const missingRadiusHalf = (length - this.radius) * 0.5;
            // Nudge this sphere towards the target point. Add half the missing distance to radius,
            // and the other half to position. This gives a tighter enclosure, instead of if
            // the whole missing distance were just added to radius.
            this.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));
            this.radius += missingRadiusHalf;
        }
        return this;
    }
    union(sphere3) {
        // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
        // To enclose another sphere into this sphere, we only need to enclose two points:
        // 1) Enclose the farthest point on the other sphere into this sphere.
        // 2) Enclose the opposite point of the farthest point into this sphere.
        if (this.center.equals(sphere3.center) === true) _toFarthestPoint.set(0, 0, 1).multiplyScalar(sphere3.radius);
        else _toFarthestPoint.subVectors(sphere3.center, this.center).normalize().multiplyScalar(sphere3.radius);
        this.expandByPoint(_v1$6.copy(sphere3.center).add(_toFarthestPoint));
        this.expandByPoint(_v1$6.copy(sphere3.center).sub(_toFarthestPoint));
        return this;
    }
    equals(sphere4) {
        return sphere4.center.equals(this.center) && sphere4.radius === this.radius;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const _vector$a = /*@__PURE__*/ new Vector3();
const _segCenter = /*@__PURE__*/ new Vector3();
const _segDir = /*@__PURE__*/ new Vector3();
const _diff = /*@__PURE__*/ new Vector3();
const _edge1 = /*@__PURE__*/ new Vector3();
const _edge2 = /*@__PURE__*/ new Vector3();
const _normal$1 = /*@__PURE__*/ new Vector3();
class Ray {
    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)){
        this.origin = origin;
        this.direction = direction;
    }
    set(origin1, direction1) {
        this.origin.copy(origin1);
        this.direction.copy(direction1);
        return this;
    }
    copy(ray2) {
        this.origin.copy(ray2.origin);
        this.direction.copy(ray2.direction);
        return this;
    }
    at(t4, target7) {
        return target7.copy(this.direction).multiplyScalar(t4).add(this.origin);
    }
    lookAt(v44) {
        this.direction.copy(v44).sub(this.origin).normalize();
        return this;
    }
    recast(t5) {
        this.origin.copy(this.at(t5, _vector$a));
        return this;
    }
    closestPointToPoint(point9, target8) {
        target8.subVectors(point9, this.origin);
        const directionDistance = target8.dot(this.direction);
        if (directionDistance < 0) return target8.copy(this.origin);
        return target8.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
    }
    distanceToPoint(point10) {
        return Math.sqrt(this.distanceSqToPoint(point10));
    }
    distanceSqToPoint(point11) {
        const directionDistance = _vector$a.subVectors(point11, this.origin).dot(this.direction);
        // point behind the ray
        if (directionDistance < 0) return this.origin.distanceToSquared(point11);
        _vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
        return _vector$a.distanceToSquared(point11);
    }
    distanceSqToSegment(v01, v113, optionalPointOnRay, optionalPointOnSegment) {
        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
        // It returns the min distance between the ray and the segment
        // defined by v0 and v1
        // It can also set two optional targets :
        // - The closest point on the ray
        // - The closest point on the segment
        _segCenter.copy(v01).add(v113).multiplyScalar(0.5);
        _segDir.copy(v113).sub(v01).normalize();
        _diff.copy(this.origin).sub(_segCenter);
        const segExtent = v01.distanceTo(v113) * 0.5;
        const a01 = -this.direction.dot(_segDir);
        const b0 = _diff.dot(this.direction);
        const b1 = -_diff.dot(_segDir);
        const c = _diff.lengthSq();
        const det = Math.abs(1 - a01 * a01);
        let s0, s1, sqrDist, extDet;
        if (det > 0) {
            // The ray and segment are not parallel.
            s0 = a01 * b1 - b0;
            s1 = a01 * b0 - b1;
            extDet = segExtent * det;
            if (s0 >= 0) {
                if (s1 >= -extDet) {
                    if (s1 <= extDet) {
                        // region 0
                        // Minimum at interior points of ray and segment.
                        const invDet = 1 / det;
                        s0 *= invDet;
                        s1 *= invDet;
                        sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
                    } else {
                        // region 1
                        s1 = segExtent;
                        s0 = Math.max(0, -(a01 * s1 + b0));
                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                    }
                } else {
                    // region 5
                    s1 = -segExtent;
                    s0 = Math.max(0, -(a01 * s1 + b0));
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
            } else {
                if (s1 <= -extDet) {
                    // region 4
                    s0 = Math.max(0, -(-a01 * segExtent + b0));
                    s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                } else if (s1 <= extDet) {
                    // region 3
                    s0 = 0;
                    s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = s1 * (s1 + 2 * b1) + c;
                } else {
                    // region 2
                    s0 = Math.max(0, -(a01 * segExtent + b0));
                    s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
            }
        } else {
            // Ray and segment are parallel.
            s1 = a01 > 0 ? -segExtent : segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
        if (optionalPointOnRay) optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
        if (optionalPointOnSegment) optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
        return sqrDist;
    }
    intersectSphere(sphere5, target9) {
        _vector$a.subVectors(sphere5.center, this.origin);
        const tca = _vector$a.dot(this.direction);
        const d2 = _vector$a.dot(_vector$a) - tca * tca;
        const radius2 = sphere5.radius * sphere5.radius;
        if (d2 > radius2) return null;
        const thc = Math.sqrt(radius2 - d2);
        // t0 = first intersect point - entrance on front of sphere
        const t0 = tca - thc;
        // t1 = second intersect point - exit point on back of sphere
        const t1 = tca + thc;
        // test to see if both t0 and t1 are behind the ray - if so, return null
        if (t0 < 0 && t1 < 0) return null;
        // test to see if t0 is behind the ray:
        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
        // in order to always return an intersect point that is in front of the ray.
        if (t0 < 0) return this.at(t1, target9);
        // else t0 is in front of the ray, so return the first collision point scaled by t0
        return this.at(t0, target9);
    }
    intersectsSphere(sphere6) {
        return this.distanceSqToPoint(sphere6.center) <= sphere6.radius * sphere6.radius;
    }
    distanceToPlane(plane2) {
        const denominator = plane2.normal.dot(this.direction);
        if (denominator === 0) {
            // line is coplanar, return origin
            if (plane2.distanceToPoint(this.origin) === 0) return 0;
            // Null is preferable to undefined since undefined means.... it is undefined
            return null;
        }
        const t = -(this.origin.dot(plane2.normal) + plane2.constant) / denominator;
        // Return if the ray never intersects the plane
        return t >= 0 ? t : null;
    }
    intersectPlane(plane3, target10) {
        const t = this.distanceToPlane(plane3);
        if (t === null) return null;
        return this.at(t, target10);
    }
    intersectsPlane(plane4) {
        // check if the ray lies on the plane first
        const distToPoint = plane4.distanceToPoint(this.origin);
        if (distToPoint === 0) return true;
        const denominator = plane4.normal.dot(this.direction);
        if (denominator * distToPoint < 0) return true;
        // ray origin is behind the plane (and is pointing behind it)
        return false;
    }
    intersectBox(box7, target11) {
        let tmin, tmax, tymin, tymax, tzmin, tzmax;
        const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
        const origin = this.origin;
        if (invdirx >= 0) {
            tmin = (box7.min.x - origin.x) * invdirx;
            tmax = (box7.max.x - origin.x) * invdirx;
        } else {
            tmin = (box7.max.x - origin.x) * invdirx;
            tmax = (box7.min.x - origin.x) * invdirx;
        }
        if (invdiry >= 0) {
            tymin = (box7.min.y - origin.y) * invdiry;
            tymax = (box7.max.y - origin.y) * invdiry;
        } else {
            tymin = (box7.max.y - origin.y) * invdiry;
            tymax = (box7.min.y - origin.y) * invdiry;
        }
        if (tmin > tymax || tymin > tmax) return null;
        // These lines also handle the case where tmin or tmax is NaN
        // (result of 0 * Infinity). x !== x returns true if x is NaN
        if (tymin > tmin || tmin !== tmin) tmin = tymin;
        if (tymax < tmax || tmax !== tmax) tmax = tymax;
        if (invdirz >= 0) {
            tzmin = (box7.min.z - origin.z) * invdirz;
            tzmax = (box7.max.z - origin.z) * invdirz;
        } else {
            tzmin = (box7.max.z - origin.z) * invdirz;
            tzmax = (box7.min.z - origin.z) * invdirz;
        }
        if (tmin > tzmax || tzmin > tmax) return null;
        if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
        if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
        //return point closest to the ray (positive side)
        if (tmax < 0) return null;
        return this.at(tmin >= 0 ? tmin : tmax, target11);
    }
    intersectsBox(box8) {
        return this.intersectBox(box8, _vector$a) !== null;
    }
    intersectTriangle(a10, b10, c1, backfaceCulling, target12) {
        // Compute the offset origin, edges, and normal.
        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
        _edge1.subVectors(b10, a10);
        _edge2.subVectors(c1, a10);
        _normal$1.crossVectors(_edge1, _edge2);
        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
        let DdN = this.direction.dot(_normal$1);
        let sign;
        if (DdN > 0) {
            if (backfaceCulling) return null;
            sign = 1;
        } else if (DdN < 0) {
            sign = -1;
            DdN = -DdN;
        } else return null;
        _diff.subVectors(this.origin, a10);
        const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
        // b1 < 0, no intersection
        if (DdQxE2 < 0) return null;
        const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
        // b2 < 0, no intersection
        if (DdE1xQ < 0) return null;
        // b1+b2 > 1, no intersection
        if (DdQxE2 + DdE1xQ > DdN) return null;
        // Line intersects triangle, check if ray does.
        const QdN = -sign * _diff.dot(_normal$1);
        // t < 0, no intersection
        if (QdN < 0) return null;
        // Ray intersects triangle.
        return this.at(QdN / DdN, target12);
    }
    applyMatrix4(matrix41) {
        this.origin.applyMatrix4(matrix41);
        this.direction.transformDirection(matrix41);
        return this;
    }
    equals(ray1) {
        return ray1.origin.equals(this.origin) && ray1.direction.equals(this.direction);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
class Matrix4 {
    constructor(){
        this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ];
        if (arguments.length > 0) console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');
    }
    set(n111, n121, n131, n14, n211, n221, n231, n24, n311, n321, n331, n34, n41, n42, n43, n44) {
        const te = this.elements;
        te[0] = n111;
        te[4] = n121;
        te[8] = n131;
        te[12] = n14;
        te[1] = n211;
        te[5] = n221;
        te[9] = n231;
        te[13] = n24;
        te[2] = n311;
        te[6] = n321;
        te[10] = n331;
        te[14] = n34;
        te[3] = n41;
        te[7] = n42;
        te[11] = n43;
        te[15] = n44;
        return this;
    }
    identity() {
        this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    }
    clone() {
        return new Matrix4().fromArray(this.elements);
    }
    copy(m16) {
        const te = this.elements;
        const me = m16.elements;
        te[0] = me[0];
        te[1] = me[1];
        te[2] = me[2];
        te[3] = me[3];
        te[4] = me[4];
        te[5] = me[5];
        te[6] = me[6];
        te[7] = me[7];
        te[8] = me[8];
        te[9] = me[9];
        te[10] = me[10];
        te[11] = me[11];
        te[12] = me[12];
        te[13] = me[13];
        te[14] = me[14];
        te[15] = me[15];
        return this;
    }
    copyPosition(m17) {
        const te = this.elements, me = m17.elements;
        te[12] = me[12];
        te[13] = me[13];
        te[14] = me[14];
        return this;
    }
    setFromMatrix3(m18) {
        const me = m18.elements;
        this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
        return this;
    }
    extractBasis(xAxis1, yAxis1, zAxis1) {
        xAxis1.setFromMatrixColumn(this, 0);
        yAxis1.setFromMatrixColumn(this, 1);
        zAxis1.setFromMatrixColumn(this, 2);
        return this;
    }
    makeBasis(xAxis2, yAxis2, zAxis2) {
        this.set(xAxis2.x, yAxis2.x, zAxis2.x, 0, xAxis2.y, yAxis2.y, zAxis2.y, 0, xAxis2.z, yAxis2.z, zAxis2.z, 0, 0, 0, 0, 1);
        return this;
    }
    extractRotation(m19) {
        // this method does not support reflection matrices
        const te = this.elements;
        const me = m19.elements;
        const scaleX = 1 / _v1$5.setFromMatrixColumn(m19, 0).length();
        const scaleY = 1 / _v1$5.setFromMatrixColumn(m19, 1).length();
        const scaleZ = 1 / _v1$5.setFromMatrixColumn(m19, 2).length();
        te[0] = me[0] * scaleX;
        te[1] = me[1] * scaleX;
        te[2] = me[2] * scaleX;
        te[3] = 0;
        te[4] = me[4] * scaleY;
        te[5] = me[5] * scaleY;
        te[6] = me[6] * scaleY;
        te[7] = 0;
        te[8] = me[8] * scaleZ;
        te[9] = me[9] * scaleZ;
        te[10] = me[10] * scaleZ;
        te[11] = 0;
        te[12] = 0;
        te[13] = 0;
        te[14] = 0;
        te[15] = 1;
        return this;
    }
    makeRotationFromEuler(euler2) {
        if (!(euler2 && euler2.isEuler)) console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');
        const te = this.elements;
        const x = euler2.x, y = euler2.y, z = euler2.z;
        const a = Math.cos(x), b = Math.sin(x);
        const c = Math.cos(y), d = Math.sin(y);
        const e = Math.cos(z), f = Math.sin(z);
        if (euler2.order === 'XYZ') {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = -c * f;
            te[8] = d;
            te[1] = af + be * d;
            te[5] = ae - bf * d;
            te[9] = -b * c;
            te[2] = bf - ae * d;
            te[6] = be + af * d;
            te[10] = a * c;
        } else if (euler2.order === 'YXZ') {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce + df * b;
            te[4] = de * b - cf;
            te[8] = a * d;
            te[1] = a * f;
            te[5] = a * e;
            te[9] = -b;
            te[2] = cf * b - de;
            te[6] = df + ce * b;
            te[10] = a * c;
        } else if (euler2.order === 'ZXY') {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce - df * b;
            te[4] = -a * f;
            te[8] = de + cf * b;
            te[1] = cf + de * b;
            te[5] = a * e;
            te[9] = df - ce * b;
            te[2] = -a * d;
            te[6] = b;
            te[10] = a * c;
        } else if (euler2.order === 'ZYX') {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = be * d - af;
            te[8] = ae * d + bf;
            te[1] = c * f;
            te[5] = bf * d + ae;
            te[9] = af * d - be;
            te[2] = -d;
            te[6] = b * c;
            te[10] = a * c;
        } else if (euler2.order === 'YZX') {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = bd - ac * f;
            te[8] = bc * f + ad;
            te[1] = f;
            te[5] = a * e;
            te[9] = -b * e;
            te[2] = -d * e;
            te[6] = ad * f + bc;
            te[10] = ac - bd * f;
        } else if (euler2.order === 'XZY') {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = -f;
            te[8] = d * e;
            te[1] = ac * f + bd;
            te[5] = a * e;
            te[9] = ad * f - bc;
            te[2] = bc * f - ad;
            te[6] = b * e;
            te[10] = bd * f + ac;
        }
        // bottom row
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;
        // last column
        te[12] = 0;
        te[13] = 0;
        te[14] = 0;
        te[15] = 1;
        return this;
    }
    makeRotationFromQuaternion(q6) {
        return this.compose(_zero, q6, _one);
    }
    lookAt(eye, target13, up) {
        const te = this.elements;
        _z.subVectors(eye, target13);
        if (_z.lengthSq() === 0) // eye and target are in the same position
        _z.z = 1;
        _z.normalize();
        _x.crossVectors(up, _z);
        if (_x.lengthSq() === 0) {
            // up and z are parallel
            if (Math.abs(up.z) === 1) _z.x += 0.0001;
            else _z.z += 0.0001;
            _z.normalize();
            _x.crossVectors(up, _z);
        }
        _x.normalize();
        _y.crossVectors(_z, _x);
        te[0] = _x.x;
        te[4] = _y.x;
        te[8] = _z.x;
        te[1] = _x.y;
        te[5] = _y.y;
        te[9] = _z.y;
        te[2] = _x.z;
        te[6] = _y.z;
        te[10] = _z.z;
        return this;
    }
    multiply(m20, n1) {
        if (n1 !== undefined) {
            console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
            return this.multiplyMatrices(m20, n1);
        }
        return this.multiplyMatrices(this, m20);
    }
    premultiply(m21) {
        return this.multiplyMatrices(m21, this);
    }
    multiplyMatrices(a11, b11) {
        const ae = a11.elements;
        const be = b11.elements;
        const te = this.elements;
        const a111 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
        const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
        const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
        const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
        const b111 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
        const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
        const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
        const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
        te[0] = a111 * b111 + a12 * b21 + a13 * b31 + a14 * b41;
        te[4] = a111 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
        te[8] = a111 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
        te[12] = a111 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
        te[1] = a21 * b111 + a22 * b21 + a23 * b31 + a24 * b41;
        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
        te[2] = a31 * b111 + a32 * b21 + a33 * b31 + a34 * b41;
        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
        te[3] = a41 * b111 + a42 * b21 + a43 * b31 + a44 * b41;
        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
        return this;
    }
    multiplyScalar(s11) {
        const te = this.elements;
        te[0] *= s11;
        te[4] *= s11;
        te[8] *= s11;
        te[12] *= s11;
        te[1] *= s11;
        te[5] *= s11;
        te[9] *= s11;
        te[13] *= s11;
        te[2] *= s11;
        te[6] *= s11;
        te[10] *= s11;
        te[14] *= s11;
        te[3] *= s11;
        te[7] *= s11;
        te[11] *= s11;
        te[15] *= s11;
        return this;
    }
    determinant() {
        const te = this.elements;
        const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
        const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
        const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
        const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
        //TODO: make this more efficient
        //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
        return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
        const te = this.elements;
        let tmp;
        tmp = te[1];
        te[1] = te[4];
        te[4] = tmp;
        tmp = te[2];
        te[2] = te[8];
        te[8] = tmp;
        tmp = te[6];
        te[6] = te[9];
        te[9] = tmp;
        tmp = te[3];
        te[3] = te[12];
        te[12] = tmp;
        tmp = te[7];
        te[7] = te[13];
        te[13] = tmp;
        tmp = te[11];
        te[11] = te[14];
        te[14] = tmp;
        return this;
    }
    setPosition(x11, y12, z8) {
        const te = this.elements;
        if (x11.isVector3) {
            te[12] = x11.x;
            te[13] = x11.y;
            te[14] = x11.z;
        } else {
            te[12] = x11;
            te[13] = y12;
            te[14] = z8;
        }
        return this;
    }
    invert() {
        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
        const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
        const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te[0] = t11 * detInv;
        te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
        te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
        te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
        te[4] = t12 * detInv;
        te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
        te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
        te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
        te[8] = t13 * detInv;
        te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
        te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
        te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
        te[12] = t14 * detInv;
        te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
        te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
        te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
        return this;
    }
    scale(v45) {
        const te = this.elements;
        const x = v45.x, y = v45.y, z = v45.z;
        te[0] *= x;
        te[4] *= y;
        te[8] *= z;
        te[1] *= x;
        te[5] *= y;
        te[9] *= z;
        te[2] *= x;
        te[6] *= y;
        te[10] *= z;
        te[3] *= x;
        te[7] *= y;
        te[11] *= z;
        return this;
    }
    getMaxScaleOnAxis() {
        const te = this.elements;
        const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
        const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
        const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x12, y13, z9) {
        this.set(1, 0, 0, x12, 0, 1, 0, y13, 0, 0, 1, z9, 0, 0, 0, 1);
        return this;
    }
    makeRotationX(theta3) {
        const c = Math.cos(theta3), s = Math.sin(theta3);
        this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationY(theta4) {
        const c = Math.cos(theta4), s = Math.sin(theta4);
        this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationZ(theta5) {
        const c = Math.cos(theta5), s = Math.sin(theta5);
        this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationAxis(axis2, angle3) {
        // Based on http://www.gamedev.net/reference/articles/article1199.asp
        const c = Math.cos(angle3);
        const s = Math.sin(angle3);
        const t = 1 - c;
        const x = axis2.x, y = axis2.y, z = axis2.z;
        const tx = t * x, ty = t * y;
        this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
        return this;
    }
    makeScale(x13, y14, z10) {
        this.set(x13, 0, 0, 0, 0, y14, 0, 0, 0, 0, z10, 0, 0, 0, 0, 1);
        return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
        this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
        return this;
    }
    compose(position2, quaternion2, scale2) {
        const te = this.elements;
        const x = quaternion2._x, y = quaternion2._y, z = quaternion2._z, w = quaternion2._w;
        const x2 = x + x, y2 = y + y, z2 = z + z;
        const xx = x * x2, xy = x * y2, xz = x * z2;
        const yy = y * y2, yz = y * z2, zz = z * z2;
        const wx = w * x2, wy = w * y2, wz = w * z2;
        const sx = scale2.x, sy = scale2.y, sz = scale2.z;
        te[0] = (1 - (yy + zz)) * sx;
        te[1] = (xy + wz) * sx;
        te[2] = (xz - wy) * sx;
        te[3] = 0;
        te[4] = (xy - wz) * sy;
        te[5] = (1 - (xx + zz)) * sy;
        te[6] = (yz + wx) * sy;
        te[7] = 0;
        te[8] = (xz + wy) * sz;
        te[9] = (yz - wx) * sz;
        te[10] = (1 - (xx + yy)) * sz;
        te[11] = 0;
        te[12] = position2.x;
        te[13] = position2.y;
        te[14] = position2.z;
        te[15] = 1;
        return this;
    }
    decompose(position1, quaternion3, scale1) {
        const te = this.elements;
        let sx = _v1$5.set(te[0], te[1], te[2]).length();
        const sy = _v1$5.set(te[4], te[5], te[6]).length();
        const sz = _v1$5.set(te[8], te[9], te[10]).length();
        // if determine is negative, we need to invert one scale
        const det = this.determinant();
        if (det < 0) sx = -sx;
        position1.x = te[12];
        position1.y = te[13];
        position1.z = te[14];
        // scale the rotation part
        _m1$2.copy(this);
        const invSX = 1 / sx;
        const invSY = 1 / sy;
        const invSZ = 1 / sz;
        _m1$2.elements[0] *= invSX;
        _m1$2.elements[1] *= invSX;
        _m1$2.elements[2] *= invSX;
        _m1$2.elements[4] *= invSY;
        _m1$2.elements[5] *= invSY;
        _m1$2.elements[6] *= invSY;
        _m1$2.elements[8] *= invSZ;
        _m1$2.elements[9] *= invSZ;
        _m1$2.elements[10] *= invSZ;
        quaternion3.setFromRotationMatrix(_m1$2);
        scale1.x = sx;
        scale1.y = sy;
        scale1.z = sz;
        return this;
    }
    makePerspective(left3, right3, top3, bottom3, near7, far7) {
        if (far7 === undefined) console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');
        const te = this.elements;
        const x = 2 * near7 / (right3 - left3);
        const y = 2 * near7 / (top3 - bottom3);
        const a = (right3 + left3) / (right3 - left3);
        const b = (top3 + bottom3) / (top3 - bottom3);
        const c = -(far7 + near7) / (far7 - near7);
        const d = -2 * far7 * near7 / (far7 - near7);
        te[0] = x;
        te[4] = 0;
        te[8] = a;
        te[12] = 0;
        te[1] = 0;
        te[5] = y;
        te[9] = b;
        te[13] = 0;
        te[2] = 0;
        te[6] = 0;
        te[10] = c;
        te[14] = d;
        te[3] = 0;
        te[7] = 0;
        te[11] = -1;
        te[15] = 0;
        return this;
    }
    makeOrthographic(left1, right1, top1, bottom1, near1, far1) {
        const te = this.elements;
        const w = 1 / (right1 - left1);
        const h = 1 / (top1 - bottom1);
        const p = 1 / (far1 - near1);
        const x = (right1 + left1) * w;
        const y = (top1 + bottom1) * h;
        const z = (far1 + near1) * p;
        te[0] = 2 * w;
        te[4] = 0;
        te[8] = 0;
        te[12] = -x;
        te[1] = 0;
        te[5] = 2 * h;
        te[9] = 0;
        te[13] = -y;
        te[2] = 0;
        te[6] = 0;
        te[10] = -2 * p;
        te[14] = -z;
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;
        te[15] = 1;
        return this;
    }
    equals(matrix3) {
        const te = this.elements;
        const me = matrix3.elements;
        for(let i = 0; i < 16; i++){
            if (te[i] !== me[i]) return false;
        }
        return true;
    }
    fromArray(array11, offset15 = 0) {
        for(let i = 0; i < 16; i++)this.elements[i] = array11[i + offset15];
        return this;
    }
    toArray(array12 = [], offset16 = 0) {
        const te = this.elements;
        array12[offset16] = te[0];
        array12[offset16 + 1] = te[1];
        array12[offset16 + 2] = te[2];
        array12[offset16 + 3] = te[3];
        array12[offset16 + 4] = te[4];
        array12[offset16 + 5] = te[5];
        array12[offset16 + 6] = te[6];
        array12[offset16 + 7] = te[7];
        array12[offset16 + 8] = te[8];
        array12[offset16 + 9] = te[9];
        array12[offset16 + 10] = te[10];
        array12[offset16 + 11] = te[11];
        array12[offset16 + 12] = te[12];
        array12[offset16 + 13] = te[13];
        array12[offset16 + 14] = te[14];
        array12[offset16 + 15] = te[15];
        return array12;
    }
}
Matrix4.prototype.isMatrix4 = true;
const _v1$5 = /*@__PURE__*/ new Vector3();
const _m1$2 = /*@__PURE__*/ new Matrix4();
const _zero = /*@__PURE__*/ new Vector3(0, 0, 0);
const _one = /*@__PURE__*/ new Vector3(1, 1, 1);
const _x = /*@__PURE__*/ new Vector3();
const _y = /*@__PURE__*/ new Vector3();
const _z = /*@__PURE__*/ new Vector3();
const _matrix$1 = /*@__PURE__*/ new Matrix4();
const _quaternion$3 = /*@__PURE__*/ new Quaternion();
class Euler {
    constructor(x14 = 0, y15 = 0, z11 = 0, order5 = Euler.DefaultOrder){
        this._x = x14;
        this._y = y15;
        this._z = z11;
        this._order = order5;
    }
    get x() {
        return this._x;
    }
    set x(value12) {
        this._x = value12;
        this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(value13) {
        this._y = value13;
        this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(value14) {
        this._z = value14;
        this._onChangeCallback();
    }
    get order() {
        return this._order;
    }
    set order(value15) {
        this._order = value15;
        this._onChangeCallback();
    }
    set(x15, y16, z12, order1 = this._order) {
        this._x = x15;
        this._y = y16;
        this._z = z12;
        this._order = order1;
        this._onChangeCallback();
        return this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler3) {
        this._x = euler3._x;
        this._y = euler3._y;
        this._z = euler3._z;
        this._order = euler3._order;
        this._onChangeCallback();
        return this;
    }
    setFromRotationMatrix(m22, order2 = this._order, update1 = true) {
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        const te = m22.elements;
        const m11 = te[0], m12 = te[4], m13 = te[8];
        const m21 = te[1], m221 = te[5], m23 = te[9];
        const m31 = te[2], m32 = te[6], m33 = te[10];
        switch(order2){
            case 'XYZ':
                this._y = Math.asin(clamp(m13, -1, 1));
                if (Math.abs(m13) < 0.9999999) {
                    this._x = Math.atan2(-m23, m33);
                    this._z = Math.atan2(-m12, m11);
                } else {
                    this._x = Math.atan2(m32, m221);
                    this._z = 0;
                }
                break;
            case 'YXZ':
                this._x = Math.asin(-clamp(m23, -1, 1));
                if (Math.abs(m23) < 0.9999999) {
                    this._y = Math.atan2(m13, m33);
                    this._z = Math.atan2(m21, m221);
                } else {
                    this._y = Math.atan2(-m31, m11);
                    this._z = 0;
                }
                break;
            case 'ZXY':
                this._x = Math.asin(clamp(m32, -1, 1));
                if (Math.abs(m32) < 0.9999999) {
                    this._y = Math.atan2(-m31, m33);
                    this._z = Math.atan2(-m12, m221);
                } else {
                    this._y = 0;
                    this._z = Math.atan2(m21, m11);
                }
                break;
            case 'ZYX':
                this._y = Math.asin(-clamp(m31, -1, 1));
                if (Math.abs(m31) < 0.9999999) {
                    this._x = Math.atan2(m32, m33);
                    this._z = Math.atan2(m21, m11);
                } else {
                    this._x = 0;
                    this._z = Math.atan2(-m12, m221);
                }
                break;
            case 'YZX':
                this._z = Math.asin(clamp(m21, -1, 1));
                if (Math.abs(m21) < 0.9999999) {
                    this._x = Math.atan2(-m23, m221);
                    this._y = Math.atan2(-m31, m11);
                } else {
                    this._x = 0;
                    this._y = Math.atan2(m13, m33);
                }
                break;
            case 'XZY':
                this._z = Math.asin(-clamp(m12, -1, 1));
                if (Math.abs(m12) < 0.9999999) {
                    this._x = Math.atan2(m32, m221);
                    this._y = Math.atan2(m13, m11);
                } else {
                    this._x = Math.atan2(-m23, m33);
                    this._y = 0;
                }
                break;
            default:
                console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order2);
        }
        this._order = order2;
        if (update1 === true) this._onChangeCallback();
        return this;
    }
    setFromQuaternion(q7, order3, update2) {
        _matrix$1.makeRotationFromQuaternion(q7);
        return this.setFromRotationMatrix(_matrix$1, order3, update2);
    }
    setFromVector3(v46, order4 = this._order) {
        return this.set(v46.x, v46.y, v46.z, order4);
    }
    reorder(newOrder) {
        // WARNING: this discards revolution information -bhouston
        _quaternion$3.setFromEuler(this);
        return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    equals(euler4) {
        return euler4._x === this._x && euler4._y === this._y && euler4._z === this._z && euler4._order === this._order;
    }
    fromArray(array13) {
        this._x = array13[0];
        this._y = array13[1];
        this._z = array13[2];
        if (array13[3] !== undefined) this._order = array13[3];
        this._onChangeCallback();
        return this;
    }
    toArray(array14 = [], offset17 = 0) {
        array14[offset17] = this._x;
        array14[offset17 + 1] = this._y;
        array14[offset17 + 2] = this._z;
        array14[offset17 + 3] = this._order;
        return array14;
    }
    toVector3(optionalResult) {
        if (optionalResult) return optionalResult.set(this._x, this._y, this._z);
        else return new Vector3(this._x, this._y, this._z);
    }
    _onChange(callback1) {
        this._onChangeCallback = callback1;
        return this;
    }
    _onChangeCallback() {
    }
}
Euler.prototype.isEuler = true;
Euler.DefaultOrder = 'XYZ';
Euler.RotationOrders = [
    'XYZ',
    'YZX',
    'ZXY',
    'XZY',
    'YXZ',
    'ZYX'
];
class Layers {
    constructor(){
        this.mask = 1;
    }
    set(channel) {
        this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel1) {
        this.mask |= 1 << channel1 | 0;
    }
    enableAll() {
        this.mask = -1;
    }
    toggle(channel2) {
        this.mask ^= 1 << channel2 | 0;
    }
    disable(channel3) {
        this.mask &= ~(1 << channel3 | 0);
    }
    disableAll() {
        this.mask = 0;
    }
    test(layers) {
        return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel4) {
        return (this.mask & (1 << channel4 | 0)) !== 0;
    }
}
let _object3DId = 0;
const _v1$4 = /*@__PURE__*/ new Vector3();
const _q1 = /*@__PURE__*/ new Quaternion();
const _m1$1 = /*@__PURE__*/ new Matrix4();
const _target = /*@__PURE__*/ new Vector3();
const _position$3 = /*@__PURE__*/ new Vector3();
const _scale$2 = /*@__PURE__*/ new Vector3();
const _quaternion$2 = /*@__PURE__*/ new Quaternion();
const _xAxis = /*@__PURE__*/ new Vector3(1, 0, 0);
const _yAxis = /*@__PURE__*/ new Vector3(0, 1, 0);
const _zAxis = /*@__PURE__*/ new Vector3(0, 0, 1);
const _addedEvent = {
    type: 'added'
};
const _removedEvent = {
    type: 'removed'
};
class Object3D extends EventDispatcher {
    constructor(){
        super();
        Object.defineProperty(this, 'id', {
            value: _object3DId++
        });
        this.uuid = generateUUID();
        this.name = '';
        this.type = 'Object3D';
        this.parent = null;
        this.children = [];
        this.up = Object3D.DefaultUp.clone();
        const position = new Vector3();
        const rotation = new Euler();
        const quaternion = new Quaternion();
        const scale = new Vector3(1, 1, 1);
        function onRotationChange() {
            quaternion.setFromEuler(rotation, false);
        }
        function onQuaternionChange() {
            rotation.setFromQuaternion(quaternion, undefined, false);
        }
        rotation._onChange(onRotationChange);
        quaternion._onChange(onQuaternionChange);
        Object.defineProperties(this, {
            position: {
                configurable: true,
                enumerable: true,
                value: position
            },
            rotation: {
                configurable: true,
                enumerable: true,
                value: rotation
            },
            quaternion: {
                configurable: true,
                enumerable: true,
                value: quaternion
            },
            scale: {
                configurable: true,
                enumerable: true,
                value: scale
            },
            modelViewMatrix: {
                value: new Matrix4()
            },
            normalMatrix: {
                value: new Matrix3()
            }
        });
        this.matrix = new Matrix4();
        this.matrixWorld = new Matrix4();
        this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
        this.matrixWorldNeedsUpdate = false;
        this.layers = new Layers();
        this.visible = true;
        this.castShadow = false;
        this.receiveShadow = false;
        this.frustumCulled = true;
        this.renderOrder = 0;
        this.animations = [];
        this.userData = {
        };
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(matrix5) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        this.matrix.premultiply(matrix5);
        this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q8) {
        this.quaternion.premultiply(q8);
        return this;
    }
    setRotationFromAxisAngle(axis3, angle4) {
        // assumes axis is normalized
        this.quaternion.setFromAxisAngle(axis3, angle4);
    }
    setRotationFromEuler(euler5) {
        this.quaternion.setFromEuler(euler5, true);
    }
    setRotationFromMatrix(m23) {
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        this.quaternion.setFromRotationMatrix(m23);
    }
    setRotationFromQuaternion(q9) {
        // assumes q is normalized
        this.quaternion.copy(q9);
    }
    rotateOnAxis(axis4, angle5) {
        // rotate object on axis in object space
        // axis is assumed to be normalized
        _q1.setFromAxisAngle(axis4, angle5);
        this.quaternion.multiply(_q1);
        return this;
    }
    rotateOnWorldAxis(axis5, angle6) {
        // rotate object on axis in world space
        // axis is assumed to be normalized
        // method assumes no rotated parent
        _q1.setFromAxisAngle(axis5, angle6);
        this.quaternion.premultiply(_q1);
        return this;
    }
    rotateX(angle7) {
        return this.rotateOnAxis(_xAxis, angle7);
    }
    rotateY(angle8) {
        return this.rotateOnAxis(_yAxis, angle8);
    }
    rotateZ(angle9) {
        return this.rotateOnAxis(_zAxis, angle9);
    }
    translateOnAxis(axis6, distance4) {
        // translate object by distance along axis in object space
        // axis is assumed to be normalized
        _v1$4.copy(axis6).applyQuaternion(this.quaternion);
        this.position.add(_v1$4.multiplyScalar(distance4));
        return this;
    }
    translateX(distance1) {
        return this.translateOnAxis(_xAxis, distance1);
    }
    translateY(distance2) {
        return this.translateOnAxis(_yAxis, distance2);
    }
    translateZ(distance3) {
        return this.translateOnAxis(_zAxis, distance3);
    }
    localToWorld(vector1) {
        return vector1.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector2) {
        return vector2.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x16, y17, z13) {
        // This method does not support objects having non-uniformly-scaled parent(s)
        if (x16.isVector3) _target.copy(x16);
        else _target.set(x16, y17, z13);
        const parent = this.parent;
        this.updateWorldMatrix(true, false);
        _position$3.setFromMatrixPosition(this.matrixWorld);
        if (this.isCamera || this.isLight) _m1$1.lookAt(_position$3, _target, this.up);
        else _m1$1.lookAt(_target, _position$3, this.up);
        this.quaternion.setFromRotationMatrix(_m1$1);
        if (parent) {
            _m1$1.extractRotation(parent.matrixWorld);
            _q1.setFromRotationMatrix(_m1$1);
            this.quaternion.premultiply(_q1.invert());
        }
    }
    add(object2) {
        if (arguments.length > 1) {
            for(let i = 0; i < arguments.length; i++)this.add(arguments[i]);
            return this;
        }
        if (object2 === this) {
            console.error('THREE.Object3D.add: object can\'t be added as a child of itself.', object2);
            return this;
        }
        if (object2 && object2.isObject3D) {
            if (object2.parent !== null) object2.parent.remove(object2);
            object2.parent = this;
            this.children.push(object2);
            object2.dispatchEvent(_addedEvent);
        } else console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object2);
        return this;
    }
    remove(object3) {
        if (arguments.length > 1) {
            for(let i = 0; i < arguments.length; i++)this.remove(arguments[i]);
            return this;
        }
        const index = this.children.indexOf(object3);
        if (index !== -1) {
            object3.parent = null;
            this.children.splice(index, 1);
            object3.dispatchEvent(_removedEvent);
        }
        return this;
    }
    removeFromParent() {
        const parent = this.parent;
        if (parent !== null) parent.remove(this);
        return this;
    }
    clear() {
        for(let i = 0; i < this.children.length; i++){
            const object = this.children[i];
            object.parent = null;
            object.dispatchEvent(_removedEvent);
        }
        this.children.length = 0;
        return this;
    }
    attach(object4) {
        // adds object as a child of this, while maintaining the object's world transform
        // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
        this.updateWorldMatrix(true, false);
        _m1$1.copy(this.matrixWorld).invert();
        if (object4.parent !== null) {
            object4.parent.updateWorldMatrix(true, false);
            _m1$1.multiply(object4.parent.matrixWorld);
        }
        object4.applyMatrix4(_m1$1);
        this.add(object4);
        object4.updateWorldMatrix(false, true);
        return this;
    }
    getObjectById(id1) {
        return this.getObjectByProperty('id', id1);
    }
    getObjectByName(name8) {
        return this.getObjectByProperty('name', name8);
    }
    getObjectByProperty(name1, value16) {
        if (this[name1] === value16) return this;
        for(let i = 0, l = this.children.length; i < l; i++){
            const child = this.children[i];
            const object = child.getObjectByProperty(name1, value16);
            if (object !== undefined) return object;
        }
        return undefined;
    }
    getWorldPosition(target14) {
        this.updateWorldMatrix(true, false);
        return target14.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target15) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose(_position$3, target15, _scale$2);
        return target15;
    }
    getWorldScale(target16) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose(_position$3, _quaternion$2, target16);
        return target16;
    }
    getWorldDirection(target17) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target17.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {
    }
    traverse(callback2) {
        callback2(this);
        const children = this.children;
        for(let i = 0, l = children.length; i < l; i++)children[i].traverse(callback2);
    }
    traverseVisible(callback3) {
        if (this.visible === false) return;
        callback3(this);
        const children = this.children;
        for(let i = 0, l = children.length; i < l; i++)children[i].traverseVisible(callback3);
    }
    traverseAncestors(callback4) {
        const parent = this.parent;
        if (parent !== null) {
            callback4(parent);
            parent.traverseAncestors(callback4);
        }
    }
    updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale);
        this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.matrixWorldNeedsUpdate || force) {
            if (this.parent === null) this.matrixWorld.copy(this.matrix);
            else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
            this.matrixWorldNeedsUpdate = false;
            force = true;
        }
        // update children
        const children = this.children;
        for(let i = 0, l = children.length; i < l; i++)children[i].updateMatrixWorld(force);
    }
    updateWorldMatrix(updateParents, updateChildren) {
        const parent = this.parent;
        if (updateParents === true && parent !== null) parent.updateWorldMatrix(true, false);
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.parent === null) this.matrixWorld.copy(this.matrix);
        else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        // update children
        if (updateChildren === true) {
            const children = this.children;
            for(let i = 0, l = children.length; i < l; i++)children[i].updateWorldMatrix(false, true);
        }
    }
    toJSON(meta1) {
        // meta is a string when called from JSON.stringify
        const isRootObject = meta1 === undefined || typeof meta1 === 'string';
        const output = {
        };
        // meta is a hash used to collect geometries, materials.
        // not providing it implies that this is the root object
        // being serialized.
        if (isRootObject) {
            // initialize meta obj
            meta1 = {
                geometries: {
                },
                materials: {
                },
                textures: {
                },
                images: {
                },
                shapes: {
                },
                skeletons: {
                },
                animations: {
                }
            };
            output.metadata = {
                version: 4.5,
                type: 'Object',
                generator: 'Object3D.toJSON'
            };
        }
        // standard Object3D serialization
        const object = {
        };
        object.uuid = this.uuid;
        object.type = this.type;
        if (this.name !== '') object.name = this.name;
        if (this.castShadow === true) object.castShadow = true;
        if (this.receiveShadow === true) object.receiveShadow = true;
        if (this.visible === false) object.visible = false;
        if (this.frustumCulled === false) object.frustumCulled = false;
        if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
        if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;
        object.layers = this.layers.mask;
        object.matrix = this.matrix.toArray();
        if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
        // object specific properties
        if (this.isInstancedMesh) {
            object.type = 'InstancedMesh';
            object.count = this.count;
            object.instanceMatrix = this.instanceMatrix.toJSON();
            if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
        }
        //
        function serialize(library, element) {
            if (library[element.uuid] === undefined) library[element.uuid] = element.toJSON(meta1);
            return element.uuid;
        }
        if (this.isScene) {
            if (this.background) {
                if (this.background.isColor) object.background = this.background.toJSON();
                else if (this.background.isTexture) object.background = this.background.toJSON(meta1).uuid;
            }
            if (this.environment && this.environment.isTexture) object.environment = this.environment.toJSON(meta1).uuid;
        } else if (this.isMesh || this.isLine || this.isPoints) {
            object.geometry = serialize(meta1.geometries, this.geometry);
            const parameters = this.geometry.parameters;
            if (parameters !== undefined && parameters.shapes !== undefined) {
                const shapes = parameters.shapes;
                if (Array.isArray(shapes)) for(let i = 0, l = shapes.length; i < l; i++){
                    const shape = shapes[i];
                    serialize(meta1.shapes, shape);
                }
                else serialize(meta1.shapes, shapes);
            }
        }
        if (this.isSkinnedMesh) {
            object.bindMode = this.bindMode;
            object.bindMatrix = this.bindMatrix.toArray();
            if (this.skeleton !== undefined) {
                serialize(meta1.skeletons, this.skeleton);
                object.skeleton = this.skeleton.uuid;
            }
        }
        if (this.material !== undefined) {
            if (Array.isArray(this.material)) {
                const uuids = [];
                for(let i = 0, l = this.material.length; i < l; i++)uuids.push(serialize(meta1.materials, this.material[i]));
                object.material = uuids;
            } else object.material = serialize(meta1.materials, this.material);
        }
        //
        if (this.children.length > 0) {
            object.children = [];
            for(let i = 0; i < this.children.length; i++)object.children.push(this.children[i].toJSON(meta1).object);
        }
        //
        if (this.animations.length > 0) {
            object.animations = [];
            for(let i = 0; i < this.animations.length; i++){
                const animation = this.animations[i];
                object.animations.push(serialize(meta1.animations, animation));
            }
        }
        if (isRootObject) {
            const geometries = extractFromCache(meta1.geometries);
            const materials = extractFromCache(meta1.materials);
            const textures = extractFromCache(meta1.textures);
            const images = extractFromCache(meta1.images);
            const shapes = extractFromCache(meta1.shapes);
            const skeletons = extractFromCache(meta1.skeletons);
            const animations = extractFromCache(meta1.animations);
            if (geometries.length > 0) output.geometries = geometries;
            if (materials.length > 0) output.materials = materials;
            if (textures.length > 0) output.textures = textures;
            if (images.length > 0) output.images = images;
            if (shapes.length > 0) output.shapes = shapes;
            if (skeletons.length > 0) output.skeletons = skeletons;
            if (animations.length > 0) output.animations = animations;
        }
        output.object = object;
        // extract data from the cache hash
        // remove metadata on each item
        // and return as array
        function extractFromCache(cache) {
            const values = [];
            for(const key in cache){
                const data = cache[key];
                delete data.metadata;
                values.push(data);
            }
            return values;
        }
        return output;
    }
    clone(recursive8) {
        return new this.constructor().copy(this, recursive8);
    }
    copy(source4, recursive1 = true) {
        this.name = source4.name;
        this.up.copy(source4.up);
        this.position.copy(source4.position);
        this.rotation.order = source4.rotation.order;
        this.quaternion.copy(source4.quaternion);
        this.scale.copy(source4.scale);
        this.matrix.copy(source4.matrix);
        this.matrixWorld.copy(source4.matrixWorld);
        this.matrixAutoUpdate = source4.matrixAutoUpdate;
        this.matrixWorldNeedsUpdate = source4.matrixWorldNeedsUpdate;
        this.layers.mask = source4.layers.mask;
        this.visible = source4.visible;
        this.castShadow = source4.castShadow;
        this.receiveShadow = source4.receiveShadow;
        this.frustumCulled = source4.frustumCulled;
        this.renderOrder = source4.renderOrder;
        this.userData = JSON.parse(JSON.stringify(source4.userData));
        if (recursive1 === true) for(let i = 0; i < source4.children.length; i++){
            const child = source4.children[i];
            this.add(child.clone());
        }
        return this;
    }
}
Object3D.DefaultUp = new Vector3(0, 1, 0);
Object3D.DefaultMatrixAutoUpdate = true;
Object3D.prototype.isObject3D = true;
const _v0$1 = /*@__PURE__*/ new Vector3();
const _v1$3 = /*@__PURE__*/ new Vector3();
const _v2$2 = /*@__PURE__*/ new Vector3();
const _v3$1 = /*@__PURE__*/ new Vector3();
const _vab = /*@__PURE__*/ new Vector3();
const _vac = /*@__PURE__*/ new Vector3();
const _vbc = /*@__PURE__*/ new Vector3();
const _vap = /*@__PURE__*/ new Vector3();
const _vbp = /*@__PURE__*/ new Vector3();
const _vcp = /*@__PURE__*/ new Vector3();
class Triangle {
    constructor(a12 = new Vector3(), b12 = new Vector3(), c2 = new Vector3()){
        this.a = a12;
        this.b = b12;
        this.c = c2;
    }
    static getNormal(a13, b13, c3, target18) {
        target18.subVectors(c3, b13);
        _v0$1.subVectors(a13, b13);
        target18.cross(_v0$1);
        const targetLengthSq = target18.lengthSq();
        if (targetLengthSq > 0) return target18.multiplyScalar(1 / Math.sqrt(targetLengthSq));
        return target18.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point12, a14, b14, c4, target19) {
        _v0$1.subVectors(c4, a14);
        _v1$3.subVectors(b14, a14);
        _v2$2.subVectors(point12, a14);
        const dot00 = _v0$1.dot(_v0$1);
        const dot01 = _v0$1.dot(_v1$3);
        const dot02 = _v0$1.dot(_v2$2);
        const dot11 = _v1$3.dot(_v1$3);
        const dot12 = _v1$3.dot(_v2$2);
        const denom = dot00 * dot11 - dot01 * dot01;
        // collinear or singular triangle
        if (denom === 0) // arbitrary location outside of triangle?
        // not sure if this is the best idea, maybe should be returning undefined
        return target19.set(-2, -1, -1);
        const invDenom = 1 / denom;
        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        // barycentric coordinates must always sum to 1
        return target19.set(1 - u - v, v, u);
    }
    static containsPoint(point13, a15, b15, c5) {
        this.getBarycoord(point13, a15, b15, c5, _v3$1);
        return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
    }
    static getUV(point14, p13, p23, p33, uv12, uv22, uv3, target20) {
        this.getBarycoord(point14, p13, p23, p33, _v3$1);
        target20.set(0, 0);
        target20.addScaledVector(uv12, _v3$1.x);
        target20.addScaledVector(uv22, _v3$1.y);
        target20.addScaledVector(uv3, _v3$1.z);
        return target20;
    }
    static isFrontFacing(a16, b16, c6, direction2) {
        _v0$1.subVectors(c6, b16);
        _v1$3.subVectors(a16, b16);
        // strictly front facing
        return _v0$1.cross(_v1$3).dot(direction2) < 0 ? true : false;
    }
    set(a17, b17, c7) {
        this.a.copy(a17);
        this.b.copy(b17);
        this.c.copy(c7);
        return this;
    }
    setFromPointsAndIndices(points2, i0, i1, i2) {
        this.a.copy(points2[i0]);
        this.b.copy(points2[i1]);
        this.c.copy(points2[i2]);
        return this;
    }
    setFromAttributeAndIndices(attribute5, i01, i11, i21) {
        this.a.fromBufferAttribute(attribute5, i01);
        this.b.fromBufferAttribute(attribute5, i11);
        this.c.fromBufferAttribute(attribute5, i21);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(triangle1) {
        this.a.copy(triangle1.a);
        this.b.copy(triangle1.b);
        this.c.copy(triangle1.c);
        return this;
    }
    getArea() {
        _v0$1.subVectors(this.c, this.b);
        _v1$3.subVectors(this.a, this.b);
        return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target21) {
        return target21.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target22) {
        return Triangle.getNormal(this.a, this.b, this.c, target22);
    }
    getPlane(target23) {
        return target23.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point15, target24) {
        return Triangle.getBarycoord(point15, this.a, this.b, this.c, target24);
    }
    getUV(point16, uv11, uv21, uv31, target25) {
        return Triangle.getUV(point16, this.a, this.b, this.c, uv11, uv21, uv31, target25);
    }
    containsPoint(point17) {
        return Triangle.containsPoint(point17, this.a, this.b, this.c);
    }
    isFrontFacing(direction3) {
        return Triangle.isFrontFacing(this.a, this.b, this.c, direction3);
    }
    intersectsBox(box9) {
        return box9.intersectsTriangle(this);
    }
    closestPointToPoint(p4, target26) {
        const a = this.a, b = this.b, c = this.c;
        let v, w;
        // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
        // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
        // under the accompanying license; see chapter 5.1.5 for detailed explanation.
        // basically, we're distinguishing which of the voronoi regions of the triangle
        // the point lies in with the minimum amount of redundant computation.
        _vab.subVectors(b, a);
        _vac.subVectors(c, a);
        _vap.subVectors(p4, a);
        const d1 = _vab.dot(_vap);
        const d2 = _vac.dot(_vap);
        if (d1 <= 0 && d2 <= 0) // vertex region of A; barycentric coords (1, 0, 0)
        return target26.copy(a);
        _vbp.subVectors(p4, b);
        const d3 = _vab.dot(_vbp);
        const d4 = _vac.dot(_vbp);
        if (d3 >= 0 && d4 <= d3) // vertex region of B; barycentric coords (0, 1, 0)
        return target26.copy(b);
        const vc = d1 * d4 - d3 * d2;
        if (vc <= 0 && d1 >= 0 && d3 <= 0) {
            v = d1 / (d1 - d3);
            // edge region of AB; barycentric coords (1-v, v, 0)
            return target26.copy(a).addScaledVector(_vab, v);
        }
        _vcp.subVectors(p4, c);
        const d5 = _vab.dot(_vcp);
        const d6 = _vac.dot(_vcp);
        if (d6 >= 0 && d5 <= d6) // vertex region of C; barycentric coords (0, 0, 1)
        return target26.copy(c);
        const vb = d5 * d2 - d1 * d6;
        if (vb <= 0 && d2 >= 0 && d6 <= 0) {
            w = d2 / (d2 - d6);
            // edge region of AC; barycentric coords (1-w, 0, w)
            return target26.copy(a).addScaledVector(_vac, w);
        }
        const va = d3 * d6 - d5 * d4;
        if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
            _vbc.subVectors(c, b);
            w = (d4 - d3) / (d4 - d3 + (d5 - d6));
            // edge region of BC; barycentric coords (0, 1-w, w)
            return target26.copy(b).addScaledVector(_vbc, w); // edge region of BC
        }
        // face region
        const denom = 1 / (va + vb + vc);
        // u = va * denom
        v = vb * denom;
        w = vc * denom;
        return target26.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle2) {
        return triangle2.a.equals(this.a) && triangle2.b.equals(this.b) && triangle2.c.equals(this.c);
    }
}
let materialId = 0;
class Material extends EventDispatcher {
    constructor(){
        super();
        Object.defineProperty(this, 'id', {
            value: materialId++
        });
        this.uuid = generateUUID();
        this.name = '';
        this.type = 'Material';
        this.fog = true;
        this.blending = NormalBlending;
        this.side = FrontSide;
        this.vertexColors = false;
        this.opacity = 1;
        this.format = RGBAFormat;
        this.transparent = false;
        this.blendSrc = SrcAlphaFactor;
        this.blendDst = OneMinusSrcAlphaFactor;
        this.blendEquation = AddEquation;
        this.blendSrcAlpha = null;
        this.blendDstAlpha = null;
        this.blendEquationAlpha = null;
        this.depthFunc = LessEqualDepth;
        this.depthTest = true;
        this.depthWrite = true;
        this.stencilWriteMask = 255;
        this.stencilFunc = AlwaysStencilFunc;
        this.stencilRef = 0;
        this.stencilFuncMask = 255;
        this.stencilFail = KeepStencilOp;
        this.stencilZFail = KeepStencilOp;
        this.stencilZPass = KeepStencilOp;
        this.stencilWrite = false;
        this.clippingPlanes = null;
        this.clipIntersection = false;
        this.clipShadows = false;
        this.shadowSide = null;
        this.colorWrite = true;
        this.precision = null; // override the renderer's default precision for this material
        this.polygonOffset = false;
        this.polygonOffsetFactor = 0;
        this.polygonOffsetUnits = 0;
        this.dithering = false;
        this.alphaToCoverage = false;
        this.premultipliedAlpha = false;
        this.visible = true;
        this.toneMapped = true;
        this.userData = {
        };
        this.version = 0;
        this._alphaTest = 0;
    }
    get alphaTest() {
        return this._alphaTest;
    }
    set alphaTest(value17) {
        if (this._alphaTest > 0 !== value17 > 0) this.version++;
        this._alphaTest = value17;
    }
    onBuild() {
    }
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
        return this.onBeforeCompile.toString();
    }
    setValues(values1) {
        if (values1 === undefined) return;
        for(const key in values1){
            const newValue = values1[key];
            if (newValue === undefined) {
                console.warn('THREE.Material: \'' + key + '\' parameter is undefined.');
                continue;
            }
            // for backward compatability if shading is set in the constructor
            if (key === 'shading') {
                console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
                this.flatShading = newValue === FlatShading ? true : false;
                continue;
            }
            const currentValue = this[key];
            if (currentValue === undefined) {
                console.warn('THREE.' + this.type + ': \'' + key + '\' is not a property of this material.');
                continue;
            }
            if (currentValue && currentValue.isColor) currentValue.set(newValue);
            else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) currentValue.copy(newValue);
            else this[key] = newValue;
        }
    }
    toJSON(meta2) {
        const isRoot = meta2 === undefined || typeof meta2 === 'string';
        if (isRoot) meta2 = {
            textures: {
            },
            images: {
            }
        };
        const data1 = {
            metadata: {
                version: 4.5,
                type: 'Material',
                generator: 'Material.toJSON'
            }
        };
        // standard Material serialization
        data1.uuid = this.uuid;
        data1.type = this.type;
        if (this.name !== '') data1.name = this.name;
        if (this.color && this.color.isColor) data1.color = this.color.getHex();
        if (this.roughness !== undefined) data1.roughness = this.roughness;
        if (this.metalness !== undefined) data1.metalness = this.metalness;
        if (this.sheen !== undefined) data1.sheen = this.sheen;
        if (this.sheenColor && this.sheenColor.isColor) data1.sheenColor = this.sheenColor.getHex();
        if (this.sheenRoughness !== undefined) data1.sheenRoughness = this.sheenRoughness;
        if (this.emissive && this.emissive.isColor) data1.emissive = this.emissive.getHex();
        if (this.emissiveIntensity && this.emissiveIntensity !== 1) data1.emissiveIntensity = this.emissiveIntensity;
        if (this.specular && this.specular.isColor) data1.specular = this.specular.getHex();
        if (this.specularIntensity !== undefined) data1.specularIntensity = this.specularIntensity;
        if (this.specularColor && this.specularColor.isColor) data1.specularColor = this.specularColor.getHex();
        if (this.shininess !== undefined) data1.shininess = this.shininess;
        if (this.clearcoat !== undefined) data1.clearcoat = this.clearcoat;
        if (this.clearcoatRoughness !== undefined) data1.clearcoatRoughness = this.clearcoatRoughness;
        if (this.clearcoatMap && this.clearcoatMap.isTexture) data1.clearcoatMap = this.clearcoatMap.toJSON(meta2).uuid;
        if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) data1.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta2).uuid;
        if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
            data1.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta2).uuid;
            data1.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
        }
        if (this.map && this.map.isTexture) data1.map = this.map.toJSON(meta2).uuid;
        if (this.matcap && this.matcap.isTexture) data1.matcap = this.matcap.toJSON(meta2).uuid;
        if (this.alphaMap && this.alphaMap.isTexture) data1.alphaMap = this.alphaMap.toJSON(meta2).uuid;
        if (this.lightMap && this.lightMap.isTexture) {
            data1.lightMap = this.lightMap.toJSON(meta2).uuid;
            data1.lightMapIntensity = this.lightMapIntensity;
        }
        if (this.aoMap && this.aoMap.isTexture) {
            data1.aoMap = this.aoMap.toJSON(meta2).uuid;
            data1.aoMapIntensity = this.aoMapIntensity;
        }
        if (this.bumpMap && this.bumpMap.isTexture) {
            data1.bumpMap = this.bumpMap.toJSON(meta2).uuid;
            data1.bumpScale = this.bumpScale;
        }
        if (this.normalMap && this.normalMap.isTexture) {
            data1.normalMap = this.normalMap.toJSON(meta2).uuid;
            data1.normalMapType = this.normalMapType;
            data1.normalScale = this.normalScale.toArray();
        }
        if (this.displacementMap && this.displacementMap.isTexture) {
            data1.displacementMap = this.displacementMap.toJSON(meta2).uuid;
            data1.displacementScale = this.displacementScale;
            data1.displacementBias = this.displacementBias;
        }
        if (this.roughnessMap && this.roughnessMap.isTexture) data1.roughnessMap = this.roughnessMap.toJSON(meta2).uuid;
        if (this.metalnessMap && this.metalnessMap.isTexture) data1.metalnessMap = this.metalnessMap.toJSON(meta2).uuid;
        if (this.emissiveMap && this.emissiveMap.isTexture) data1.emissiveMap = this.emissiveMap.toJSON(meta2).uuid;
        if (this.specularMap && this.specularMap.isTexture) data1.specularMap = this.specularMap.toJSON(meta2).uuid;
        if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data1.specularIntensityMap = this.specularIntensityMap.toJSON(meta2).uuid;
        if (this.specularColorMap && this.specularColorMap.isTexture) data1.specularColorMap = this.specularColorMap.toJSON(meta2).uuid;
        if (this.envMap && this.envMap.isTexture) {
            data1.envMap = this.envMap.toJSON(meta2).uuid;
            if (this.combine !== undefined) data1.combine = this.combine;
        }
        if (this.envMapIntensity !== undefined) data1.envMapIntensity = this.envMapIntensity;
        if (this.reflectivity !== undefined) data1.reflectivity = this.reflectivity;
        if (this.refractionRatio !== undefined) data1.refractionRatio = this.refractionRatio;
        if (this.gradientMap && this.gradientMap.isTexture) data1.gradientMap = this.gradientMap.toJSON(meta2).uuid;
        if (this.transmission !== undefined) data1.transmission = this.transmission;
        if (this.transmissionMap && this.transmissionMap.isTexture) data1.transmissionMap = this.transmissionMap.toJSON(meta2).uuid;
        if (this.thickness !== undefined) data1.thickness = this.thickness;
        if (this.thicknessMap && this.thicknessMap.isTexture) data1.thicknessMap = this.thicknessMap.toJSON(meta2).uuid;
        if (this.attenuationDistance !== undefined) data1.attenuationDistance = this.attenuationDistance;
        if (this.attenuationColor !== undefined) data1.attenuationColor = this.attenuationColor.getHex();
        if (this.size !== undefined) data1.size = this.size;
        if (this.shadowSide !== null) data1.shadowSide = this.shadowSide;
        if (this.sizeAttenuation !== undefined) data1.sizeAttenuation = this.sizeAttenuation;
        if (this.blending !== NormalBlending) data1.blending = this.blending;
        if (this.side !== FrontSide) data1.side = this.side;
        if (this.vertexColors) data1.vertexColors = true;
        if (this.opacity < 1) data1.opacity = this.opacity;
        if (this.format !== RGBAFormat) data1.format = this.format;
        if (this.transparent === true) data1.transparent = this.transparent;
        data1.depthFunc = this.depthFunc;
        data1.depthTest = this.depthTest;
        data1.depthWrite = this.depthWrite;
        data1.colorWrite = this.colorWrite;
        data1.stencilWrite = this.stencilWrite;
        data1.stencilWriteMask = this.stencilWriteMask;
        data1.stencilFunc = this.stencilFunc;
        data1.stencilRef = this.stencilRef;
        data1.stencilFuncMask = this.stencilFuncMask;
        data1.stencilFail = this.stencilFail;
        data1.stencilZFail = this.stencilZFail;
        data1.stencilZPass = this.stencilZPass;
        // rotation (SpriteMaterial)
        if (this.rotation && this.rotation !== 0) data1.rotation = this.rotation;
        if (this.polygonOffset === true) data1.polygonOffset = true;
        if (this.polygonOffsetFactor !== 0) data1.polygonOffsetFactor = this.polygonOffsetFactor;
        if (this.polygonOffsetUnits !== 0) data1.polygonOffsetUnits = this.polygonOffsetUnits;
        if (this.linewidth && this.linewidth !== 1) data1.linewidth = this.linewidth;
        if (this.dashSize !== undefined) data1.dashSize = this.dashSize;
        if (this.gapSize !== undefined) data1.gapSize = this.gapSize;
        if (this.scale !== undefined) data1.scale = this.scale;
        if (this.dithering === true) data1.dithering = true;
        if (this.alphaTest > 0) data1.alphaTest = this.alphaTest;
        if (this.alphaToCoverage === true) data1.alphaToCoverage = this.alphaToCoverage;
        if (this.premultipliedAlpha === true) data1.premultipliedAlpha = this.premultipliedAlpha;
        if (this.wireframe === true) data1.wireframe = this.wireframe;
        if (this.wireframeLinewidth > 1) data1.wireframeLinewidth = this.wireframeLinewidth;
        if (this.wireframeLinecap !== 'round') data1.wireframeLinecap = this.wireframeLinecap;
        if (this.wireframeLinejoin !== 'round') data1.wireframeLinejoin = this.wireframeLinejoin;
        if (this.flatShading === true) data1.flatShading = this.flatShading;
        if (this.visible === false) data1.visible = false;
        if (this.toneMapped === false) data1.toneMapped = false;
        if (JSON.stringify(this.userData) !== '{}') data1.userData = this.userData;
        // TODO: Copied from Object3D.toJSON
        function extractFromCache(cache) {
            const values = [];
            for(const key in cache){
                const data = cache[key];
                delete data.metadata;
                values.push(data);
            }
            return values;
        }
        if (isRoot) {
            const textures = extractFromCache(meta2.textures);
            const images = extractFromCache(meta2.images);
            if (textures.length > 0) data1.textures = textures;
            if (images.length > 0) data1.images = images;
        }
        return data1;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source5) {
        this.name = source5.name;
        this.fog = source5.fog;
        this.blending = source5.blending;
        this.side = source5.side;
        this.vertexColors = source5.vertexColors;
        this.opacity = source5.opacity;
        this.format = source5.format;
        this.transparent = source5.transparent;
        this.blendSrc = source5.blendSrc;
        this.blendDst = source5.blendDst;
        this.blendEquation = source5.blendEquation;
        this.blendSrcAlpha = source5.blendSrcAlpha;
        this.blendDstAlpha = source5.blendDstAlpha;
        this.blendEquationAlpha = source5.blendEquationAlpha;
        this.depthFunc = source5.depthFunc;
        this.depthTest = source5.depthTest;
        this.depthWrite = source5.depthWrite;
        this.stencilWriteMask = source5.stencilWriteMask;
        this.stencilFunc = source5.stencilFunc;
        this.stencilRef = source5.stencilRef;
        this.stencilFuncMask = source5.stencilFuncMask;
        this.stencilFail = source5.stencilFail;
        this.stencilZFail = source5.stencilZFail;
        this.stencilZPass = source5.stencilZPass;
        this.stencilWrite = source5.stencilWrite;
        const srcPlanes = source5.clippingPlanes;
        let dstPlanes = null;
        if (srcPlanes !== null) {
            const n = srcPlanes.length;
            dstPlanes = new Array(n);
            for(let i = 0; i !== n; ++i)dstPlanes[i] = srcPlanes[i].clone();
        }
        this.clippingPlanes = dstPlanes;
        this.clipIntersection = source5.clipIntersection;
        this.clipShadows = source5.clipShadows;
        this.shadowSide = source5.shadowSide;
        this.colorWrite = source5.colorWrite;
        this.precision = source5.precision;
        this.polygonOffset = source5.polygonOffset;
        this.polygonOffsetFactor = source5.polygonOffsetFactor;
        this.polygonOffsetUnits = source5.polygonOffsetUnits;
        this.dithering = source5.dithering;
        this.alphaTest = source5.alphaTest;
        this.alphaToCoverage = source5.alphaToCoverage;
        this.premultipliedAlpha = source5.premultipliedAlpha;
        this.visible = source5.visible;
        this.toneMapped = source5.toneMapped;
        this.userData = JSON.parse(JSON.stringify(source5.userData));
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
    set needsUpdate(value18) {
        if (value18 === true) this.version++;
    }
}
Material.prototype.isMaterial = true;
const _colorKeywords = {
    'aliceblue': 15792383,
    'antiquewhite': 16444375,
    'aqua': 65535,
    'aquamarine': 8388564,
    'azure': 15794175,
    'beige': 16119260,
    'bisque': 16770244,
    'black': 0,
    'blanchedalmond': 16772045,
    'blue': 255,
    'blueviolet': 9055202,
    'brown': 10824234,
    'burlywood': 14596231,
    'cadetblue': 6266528,
    'chartreuse': 8388352,
    'chocolate': 13789470,
    'coral': 16744272,
    'cornflowerblue': 6591981,
    'cornsilk': 16775388,
    'crimson': 14423100,
    'cyan': 65535,
    'darkblue': 139,
    'darkcyan': 35723,
    'darkgoldenrod': 12092939,
    'darkgray': 11119017,
    'darkgreen': 25600,
    'darkgrey': 11119017,
    'darkkhaki': 12433259,
    'darkmagenta': 9109643,
    'darkolivegreen': 5597999,
    'darkorange': 16747520,
    'darkorchid': 10040012,
    'darkred': 9109504,
    'darksalmon': 15308410,
    'darkseagreen': 9419919,
    'darkslateblue': 4734347,
    'darkslategray': 3100495,
    'darkslategrey': 3100495,
    'darkturquoise': 52945,
    'darkviolet': 9699539,
    'deeppink': 16716947,
    'deepskyblue': 49151,
    'dimgray': 6908265,
    'dimgrey': 6908265,
    'dodgerblue': 2003199,
    'firebrick': 11674146,
    'floralwhite': 16775920,
    'forestgreen': 2263842,
    'fuchsia': 16711935,
    'gainsboro': 14474460,
    'ghostwhite': 16316671,
    'gold': 16766720,
    'goldenrod': 14329120,
    'gray': 8421504,
    'green': 32768,
    'greenyellow': 11403055,
    'grey': 8421504,
    'honeydew': 15794160,
    'hotpink': 16738740,
    'indianred': 13458524,
    'indigo': 4915330,
    'ivory': 16777200,
    'khaki': 15787660,
    'lavender': 15132410,
    'lavenderblush': 16773365,
    'lawngreen': 8190976,
    'lemonchiffon': 16775885,
    'lightblue': 11393254,
    'lightcoral': 15761536,
    'lightcyan': 14745599,
    'lightgoldenrodyellow': 16448210,
    'lightgray': 13882323,
    'lightgreen': 9498256,
    'lightgrey': 13882323,
    'lightpink': 16758465,
    'lightsalmon': 16752762,
    'lightseagreen': 2142890,
    'lightskyblue': 8900346,
    'lightslategray': 7833753,
    'lightslategrey': 7833753,
    'lightsteelblue': 11584734,
    'lightyellow': 16777184,
    'lime': 65280,
    'limegreen': 3329330,
    'linen': 16445670,
    'magenta': 16711935,
    'maroon': 8388608,
    'mediumaquamarine': 6737322,
    'mediumblue': 205,
    'mediumorchid': 12211667,
    'mediumpurple': 9662683,
    'mediumseagreen': 3978097,
    'mediumslateblue': 8087790,
    'mediumspringgreen': 64154,
    'mediumturquoise': 4772300,
    'mediumvioletred': 13047173,
    'midnightblue': 1644912,
    'mintcream': 16121850,
    'mistyrose': 16770273,
    'moccasin': 16770229,
    'navajowhite': 16768685,
    'navy': 128,
    'oldlace': 16643558,
    'olive': 8421376,
    'olivedrab': 7048739,
    'orange': 16753920,
    'orangered': 16729344,
    'orchid': 14315734,
    'palegoldenrod': 15657130,
    'palegreen': 10025880,
    'paleturquoise': 11529966,
    'palevioletred': 14381203,
    'papayawhip': 16773077,
    'peachpuff': 16767673,
    'peru': 13468991,
    'pink': 16761035,
    'plum': 14524637,
    'powderblue': 11591910,
    'purple': 8388736,
    'rebeccapurple': 6697881,
    'red': 16711680,
    'rosybrown': 12357519,
    'royalblue': 4286945,
    'saddlebrown': 9127187,
    'salmon': 16416882,
    'sandybrown': 16032864,
    'seagreen': 3050327,
    'seashell': 16774638,
    'sienna': 10506797,
    'silver': 12632256,
    'skyblue': 8900331,
    'slateblue': 6970061,
    'slategray': 7372944,
    'slategrey': 7372944,
    'snow': 16775930,
    'springgreen': 65407,
    'steelblue': 4620980,
    'tan': 13808780,
    'teal': 32896,
    'thistle': 14204888,
    'tomato': 16737095,
    'turquoise': 4251856,
    'violet': 15631086,
    'wheat': 16113331,
    'white': 16777215,
    'whitesmoke': 16119285,
    'yellow': 16776960,
    'yellowgreen': 10145074
};
const _hslA = {
    h: 0,
    s: 0,
    l: 0
};
const _hslB = {
    h: 0,
    s: 0,
    l: 0
};
function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 0.5) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
}
function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}
function LinearToSRGB(c) {
    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
}
class Color {
    constructor(r3, g2, b18){
        if (g2 === undefined && b18 === undefined) // r is THREE.Color, hex or string
        return this.set(r3);
        return this.setRGB(r3, g2, b18);
    }
    set(value19) {
        if (value19 && value19.isColor) this.copy(value19);
        else if (typeof value19 === 'number') this.setHex(value19);
        else if (typeof value19 === 'string') this.setStyle(value19);
        return this;
    }
    setScalar(scalar10) {
        this.r = scalar10;
        this.g = scalar10;
        this.b = scalar10;
        return this;
    }
    setHex(hex2) {
        hex2 = Math.floor(hex2);
        this.r = (hex2 >> 16 & 255) / 255;
        this.g = (hex2 >> 8 & 255) / 255;
        this.b = (hex2 & 255) / 255;
        return this;
    }
    setRGB(r2, g1, b19) {
        this.r = r2;
        this.g = g1;
        this.b = b19;
        return this;
    }
    setHSL(h3, s12, l4) {
        // h,s,l ranges are in 0.0 - 1.0
        h3 = euclideanModulo(h3, 1);
        s12 = clamp(s12, 0, 1);
        l4 = clamp(l4, 0, 1);
        if (s12 === 0) this.r = this.g = this.b = l4;
        else {
            const p = l4 <= 0.5 ? l4 * (1 + s12) : l4 + s12 - l4 * s12;
            const q = 2 * l4 - p;
            this.r = hue2rgb(q, p, h3 + 1 / 3);
            this.g = hue2rgb(q, p, h3);
            this.b = hue2rgb(q, p, h3 - 1 / 3);
        }
        return this;
    }
    setStyle(style) {
        function handleAlpha(string) {
            if (string === undefined) return;
            if (parseFloat(string) < 1) console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');
        }
        let m;
        if (m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
            // rgb / hsl
            let color;
            const name = m[1];
            const components = m[2];
            switch(name){
                case 'rgb':
                case 'rgba':
                    if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // rgb(255,0,0) rgba(255,0,0,0.5)
                        this.r = Math.min(255, parseInt(color[1], 10)) / 255;
                        this.g = Math.min(255, parseInt(color[2], 10)) / 255;
                        this.b = Math.min(255, parseInt(color[3], 10)) / 255;
                        handleAlpha(color[4]);
                        return this;
                    }
                    if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
                        this.r = Math.min(100, parseInt(color[1], 10)) / 100;
                        this.g = Math.min(100, parseInt(color[2], 10)) / 100;
                        this.b = Math.min(100, parseInt(color[3], 10)) / 100;
                        handleAlpha(color[4]);
                        return this;
                    }
                    break;
                case 'hsl':
                case 'hsla':
                    if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
                        const h = parseFloat(color[1]) / 360;
                        const s = parseInt(color[2], 10) / 100;
                        const l = parseInt(color[3], 10) / 100;
                        handleAlpha(color[4]);
                        return this.setHSL(h, s, l);
                    }
                    break;
            }
        } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
            // hex color
            const hex = m[1];
            const size = hex.length;
            if (size === 3) {
                // #ff0
                this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
                this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
                this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
                return this;
            } else if (size === 6) {
                // #ff0000
                this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
                this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
                this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
                return this;
            }
        }
        if (style && style.length > 0) return this.setColorName(style);
        return this;
    }
    setColorName(style1) {
        // color keywords
        const hex = _colorKeywords[style1.toLowerCase()];
        if (hex !== undefined) // red
        this.setHex(hex);
        else // unknown color
        console.warn('THREE.Color: Unknown color ' + style1);
        return this;
    }
    clone() {
        return new this.constructor(this.r, this.g, this.b);
    }
    copy(color9) {
        this.r = color9.r;
        this.g = color9.g;
        this.b = color9.b;
        return this;
    }
    copySRGBToLinear(color1) {
        this.r = SRGBToLinear(color1.r);
        this.g = SRGBToLinear(color1.g);
        this.b = SRGBToLinear(color1.b);
        return this;
    }
    copyLinearToSRGB(color2) {
        this.r = LinearToSRGB(color2.r);
        this.g = LinearToSRGB(color2.g);
        this.b = LinearToSRGB(color2.b);
        return this;
    }
    convertSRGBToLinear() {
        this.copySRGBToLinear(this);
        return this;
    }
    convertLinearToSRGB() {
        this.copyLinearToSRGB(this);
        return this;
    }
    getHex() {
        return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
    }
    getHexString() {
        return ('000000' + this.getHex().toString(16)).slice(-6);
    }
    getHSL(target27) {
        // h,s,l ranges are in 0.0 - 1.0
        const r = this.r, g = this.g, b = this.b;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let hue, saturation;
        const lightness = (min + max) / 2;
        if (min === max) {
            hue = 0;
            saturation = 0;
        } else {
            const delta = max - min;
            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
            switch(max){
                case r:
                    hue = (g - b) / delta + (g < b ? 6 : 0);
                    break;
                case g:
                    hue = (b - r) / delta + 2;
                    break;
                case b:
                    hue = (r - g) / delta + 4;
                    break;
            }
            hue /= 6;
        }
        target27.h = hue;
        target27.s = saturation;
        target27.l = lightness;
        return target27;
    }
    getStyle() {
        return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';
    }
    offsetHSL(h1, s13, l1) {
        this.getHSL(_hslA);
        _hslA.h += h1;
        _hslA.s += s13;
        _hslA.l += l1;
        this.setHSL(_hslA.h, _hslA.s, _hslA.l);
        return this;
    }
    add(color3) {
        this.r += color3.r;
        this.g += color3.g;
        this.b += color3.b;
        return this;
    }
    addColors(color1, color2) {
        this.r = color1.r + color2.r;
        this.g = color1.g + color2.g;
        this.b = color1.b + color2.b;
        return this;
    }
    addScalar(s14) {
        this.r += s14;
        this.g += s14;
        this.b += s14;
        return this;
    }
    sub(color4) {
        this.r = Math.max(0, this.r - color4.r);
        this.g = Math.max(0, this.g - color4.g);
        this.b = Math.max(0, this.b - color4.b);
        return this;
    }
    multiply(color5) {
        this.r *= color5.r;
        this.g *= color5.g;
        this.b *= color5.b;
        return this;
    }
    multiplyScalar(s15) {
        this.r *= s15;
        this.g *= s15;
        this.b *= s15;
        return this;
    }
    lerp(color6, alpha6) {
        this.r += (color6.r - this.r) * alpha6;
        this.g += (color6.g - this.g) * alpha6;
        this.b += (color6.b - this.b) * alpha6;
        return this;
    }
    lerpColors(color11, color21, alpha7) {
        this.r = color11.r + (color21.r - color11.r) * alpha7;
        this.g = color11.g + (color21.g - color11.g) * alpha7;
        this.b = color11.b + (color21.b - color11.b) * alpha7;
        return this;
    }
    lerpHSL(color7, alpha8) {
        this.getHSL(_hslA);
        color7.getHSL(_hslB);
        const h = lerp(_hslA.h, _hslB.h, alpha8);
        const s = lerp(_hslA.s, _hslB.s, alpha8);
        const l = lerp(_hslA.l, _hslB.l, alpha8);
        this.setHSL(h, s, l);
        return this;
    }
    equals(c9) {
        return c9.r === this.r && c9.g === this.g && c9.b === this.b;
    }
    fromArray(array15, offset18 = 0) {
        this.r = array15[offset18];
        this.g = array15[offset18 + 1];
        this.b = array15[offset18 + 2];
        return this;
    }
    toArray(array16 = [], offset19 = 0) {
        array16[offset19] = this.r;
        array16[offset19 + 1] = this.g;
        array16[offset19 + 2] = this.b;
        return array16;
    }
    fromBufferAttribute(attribute6, index12) {
        this.r = attribute6.getX(index12);
        this.g = attribute6.getY(index12);
        this.b = attribute6.getZ(index12);
        if (attribute6.normalized === true) {
            // assuming Uint8Array
            this.r /= 255;
            this.g /= 255;
            this.b /= 255;
        }
        return this;
    }
    toJSON() {
        return this.getHex();
    }
}
Color.NAMES = _colorKeywords;
Color.prototype.isColor = true;
Color.prototype.r = 1;
Color.prototype.g = 1;
Color.prototype.b = 1;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 * }
 */ class MeshBasicMaterial extends Material {
    constructor(parameters2){
        super();
        this.type = 'MeshBasicMaterial';
        this.color = new Color(16777215); // emissive
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.setValues(parameters2);
    }
    copy(source6) {
        super.copy(source6);
        this.color.copy(source6.color);
        this.map = source6.map;
        this.lightMap = source6.lightMap;
        this.lightMapIntensity = source6.lightMapIntensity;
        this.aoMap = source6.aoMap;
        this.aoMapIntensity = source6.aoMapIntensity;
        this.specularMap = source6.specularMap;
        this.alphaMap = source6.alphaMap;
        this.envMap = source6.envMap;
        this.combine = source6.combine;
        this.reflectivity = source6.reflectivity;
        this.refractionRatio = source6.refractionRatio;
        this.wireframe = source6.wireframe;
        this.wireframeLinewidth = source6.wireframeLinewidth;
        this.wireframeLinecap = source6.wireframeLinecap;
        this.wireframeLinejoin = source6.wireframeLinejoin;
        return this;
    }
}
MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
const _vector$9 = /*@__PURE__*/ new Vector3();
const _vector2$1 = /*@__PURE__*/ new Vector2();
class BufferAttribute {
    constructor(array17, itemSize11, normalized11){
        if (Array.isArray(array17)) throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
        this.name = '';
        this.array = array17;
        this.itemSize = itemSize11;
        this.count = array17 !== undefined ? array17.length / itemSize11 : 0;
        this.normalized = normalized11 === true;
        this.usage = StaticDrawUsage;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(value20) {
        if (value20 === true) this.version++;
    }
    setUsage(value21) {
        this.usage = value21;
        return this;
    }
    copy(source7) {
        this.name = source7.name;
        this.array = new source7.array.constructor(source7.array);
        this.itemSize = source7.itemSize;
        this.count = source7.count;
        this.normalized = source7.normalized;
        this.usage = source7.usage;
        return this;
    }
    copyAt(index1, attribute7, index2) {
        index1 *= this.itemSize;
        index2 *= attribute7.itemSize;
        for(let i = 0, l = this.itemSize; i < l; i++)this.array[index1 + i] = attribute7.array[index2 + i];
        return this;
    }
    copyArray(array18) {
        this.array.set(array18);
        return this;
    }
    copyColorsArray(colors) {
        const array = this.array;
        let offset = 0;
        for(let i = 0, l = colors.length; i < l; i++){
            let color = colors[i];
            if (color === undefined) {
                console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);
                color = new Color();
            }
            array[offset++] = color.r;
            array[offset++] = color.g;
            array[offset++] = color.b;
        }
        return this;
    }
    copyVector2sArray(vectors) {
        const array = this.array;
        let offset = 0;
        for(let i = 0, l = vectors.length; i < l; i++){
            let vector = vectors[i];
            if (vector === undefined) {
                console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);
                vector = new Vector2();
            }
            array[offset++] = vector.x;
            array[offset++] = vector.y;
        }
        return this;
    }
    copyVector3sArray(vectors1) {
        const array = this.array;
        let offset = 0;
        for(let i = 0, l = vectors1.length; i < l; i++){
            let vector = vectors1[i];
            if (vector === undefined) {
                console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);
                vector = new Vector3();
            }
            array[offset++] = vector.x;
            array[offset++] = vector.y;
            array[offset++] = vector.z;
        }
        return this;
    }
    copyVector4sArray(vectors2) {
        const array = this.array;
        let offset = 0;
        for(let i = 0, l = vectors2.length; i < l; i++){
            let vector = vectors2[i];
            if (vector === undefined) {
                console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);
                vector = new Vector4();
            }
            array[offset++] = vector.x;
            array[offset++] = vector.y;
            array[offset++] = vector.z;
            array[offset++] = vector.w;
        }
        return this;
    }
    applyMatrix3(m24) {
        if (this.itemSize === 2) for(let i = 0, l = this.count; i < l; i++){
            _vector2$1.fromBufferAttribute(this, i);
            _vector2$1.applyMatrix3(m24);
            this.setXY(i, _vector2$1.x, _vector2$1.y);
        }
        else if (this.itemSize === 3) for(let i3 = 0, l2 = this.count; i3 < l2; i3++){
            _vector$9.fromBufferAttribute(this, i3);
            _vector$9.applyMatrix3(m24);
            this.setXYZ(i3, _vector$9.x, _vector$9.y, _vector$9.z);
        }
        return this;
    }
    applyMatrix4(m25) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$9.x = this.getX(i);
            _vector$9.y = this.getY(i);
            _vector$9.z = this.getZ(i);
            _vector$9.applyMatrix4(m25);
            this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
        }
        return this;
    }
    applyNormalMatrix(m26) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$9.x = this.getX(i);
            _vector$9.y = this.getY(i);
            _vector$9.z = this.getZ(i);
            _vector$9.applyNormalMatrix(m26);
            this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
        }
        return this;
    }
    transformDirection(m27) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$9.x = this.getX(i);
            _vector$9.y = this.getY(i);
            _vector$9.z = this.getZ(i);
            _vector$9.transformDirection(m27);
            this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
        }
        return this;
    }
    set(value22, offset20 = 0) {
        this.array.set(value22, offset20);
        return this;
    }
    getX(index13) {
        return this.array[index13 * this.itemSize];
    }
    setX(index14, x17) {
        this.array[index14 * this.itemSize] = x17;
        return this;
    }
    getY(index15) {
        return this.array[index15 * this.itemSize + 1];
    }
    setY(index16, y18) {
        this.array[index16 * this.itemSize + 1] = y18;
        return this;
    }
    getZ(index17) {
        return this.array[index17 * this.itemSize + 2];
    }
    setZ(index18, z14) {
        this.array[index18 * this.itemSize + 2] = z14;
        return this;
    }
    getW(index19) {
        return this.array[index19 * this.itemSize + 3];
    }
    setW(index20, w13) {
        this.array[index20 * this.itemSize + 3] = w13;
        return this;
    }
    setXY(index21, x18, y19) {
        index21 *= this.itemSize;
        this.array[index21 + 0] = x18;
        this.array[index21 + 1] = y19;
        return this;
    }
    setXYZ(index22, x19, y20, z15) {
        index22 *= this.itemSize;
        this.array[index22 + 0] = x19;
        this.array[index22 + 1] = y20;
        this.array[index22 + 2] = z15;
        return this;
    }
    setXYZW(index23, x20, y21, z16, w14) {
        index23 *= this.itemSize;
        this.array[index23 + 0] = x20;
        this.array[index23 + 1] = y21;
        this.array[index23 + 2] = z16;
        this.array[index23 + 3] = w14;
        return this;
    }
    onUpload(callback5) {
        this.onUploadCallback = callback5;
        return this;
    }
    clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
        const data = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.prototype.slice.call(this.array),
            normalized: this.normalized
        };
        if (this.name !== '') data.name = this.name;
        if (this.usage !== StaticDrawUsage) data.usage = this.usage;
        if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
        return data;
    }
}
BufferAttribute.prototype.isBufferAttribute = true;
//
class Int8BufferAttribute extends BufferAttribute {
    constructor(array19, itemSize1, normalized1){
        super(new Int8Array(array19), itemSize1, normalized1);
    }
}
class Uint8BufferAttribute extends BufferAttribute {
    constructor(array20, itemSize2, normalized2){
        super(new Uint8Array(array20), itemSize2, normalized2);
    }
}
class Uint8ClampedBufferAttribute extends BufferAttribute {
    constructor(array21, itemSize3, normalized3){
        super(new Uint8ClampedArray(array21), itemSize3, normalized3);
    }
}
class Int16BufferAttribute extends BufferAttribute {
    constructor(array22, itemSize4, normalized4){
        super(new Int16Array(array22), itemSize4, normalized4);
    }
}
class Uint16BufferAttribute extends BufferAttribute {
    constructor(array23, itemSize5, normalized5){
        super(new Uint16Array(array23), itemSize5, normalized5);
    }
}
class Int32BufferAttribute extends BufferAttribute {
    constructor(array24, itemSize6, normalized6){
        super(new Int32Array(array24), itemSize6, normalized6);
    }
}
class Uint32BufferAttribute extends BufferAttribute {
    constructor(array25, itemSize7, normalized7){
        super(new Uint32Array(array25), itemSize7, normalized7);
    }
}
class Float16BufferAttribute extends BufferAttribute {
    constructor(array26, itemSize8, normalized8){
        super(new Uint16Array(array26), itemSize8, normalized8);
    }
}
Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;
class Float32BufferAttribute extends BufferAttribute {
    constructor(array27, itemSize9, normalized9){
        super(new Float32Array(array27), itemSize9, normalized9);
    }
}
class Float64BufferAttribute extends BufferAttribute {
    constructor(array28, itemSize10, normalized10){
        super(new Float64Array(array28), itemSize10, normalized10);
    }
}
let _id$1 = 0;
const _m1 = /*@__PURE__*/ new Matrix4();
const _obj = /*@__PURE__*/ new Object3D();
const _offset = /*@__PURE__*/ new Vector3();
const _box$1 = /*@__PURE__*/ new Box3();
const _boxMorphTargets = /*@__PURE__*/ new Box3();
const _vector$8 = /*@__PURE__*/ new Vector3();
class BufferGeometry extends EventDispatcher {
    constructor(){
        super();
        Object.defineProperty(this, 'id', {
            value: _id$1++
        });
        this.uuid = generateUUID();
        this.name = '';
        this.type = 'BufferGeometry';
        this.index = null;
        this.attributes = {
        };
        this.morphAttributes = {
        };
        this.morphTargetsRelative = false;
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        this.drawRange = {
            start: 0,
            count: Infinity
        };
        this.userData = {
        };
    }
    getIndex() {
        return this.index;
    }
    setIndex(index24) {
        if (Array.isArray(index24)) this.index = new (arrayMax(index24) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index24, 1);
        else this.index = index24;
        return this;
    }
    getAttribute(name2) {
        return this.attributes[name2];
    }
    setAttribute(name3, attribute8) {
        this.attributes[name3] = attribute8;
        return this;
    }
    deleteAttribute(name4) {
        delete this.attributes[name4];
        return this;
    }
    hasAttribute(name5) {
        return this.attributes[name5] !== undefined;
    }
    addGroup(start2, count1, materialIndex1 = 0) {
        this.groups.push({
            start: start2,
            count: count1,
            materialIndex: materialIndex1
        });
    }
    clearGroups() {
        this.groups = [];
    }
    setDrawRange(start1, count2) {
        this.drawRange.start = start1;
        this.drawRange.count = count2;
    }
    applyMatrix4(matrix6) {
        const position = this.attributes.position;
        if (position !== undefined) {
            position.applyMatrix4(matrix6);
            position.needsUpdate = true;
        }
        const normal = this.attributes.normal;
        if (normal !== undefined) {
            const normalMatrix = new Matrix3().getNormalMatrix(matrix6);
            normal.applyNormalMatrix(normalMatrix);
            normal.needsUpdate = true;
        }
        const tangent = this.attributes.tangent;
        if (tangent !== undefined) {
            tangent.transformDirection(matrix6);
            tangent.needsUpdate = true;
        }
        if (this.boundingBox !== null) this.computeBoundingBox();
        if (this.boundingSphere !== null) this.computeBoundingSphere();
        return this;
    }
    applyQuaternion(q11) {
        _m1.makeRotationFromQuaternion(q11);
        this.applyMatrix4(_m1);
        return this;
    }
    rotateX(angle10) {
        // rotate geometry around world x-axis
        _m1.makeRotationX(angle10);
        this.applyMatrix4(_m1);
        return this;
    }
    rotateY(angle11) {
        // rotate geometry around world y-axis
        _m1.makeRotationY(angle11);
        this.applyMatrix4(_m1);
        return this;
    }
    rotateZ(angle12) {
        // rotate geometry around world z-axis
        _m1.makeRotationZ(angle12);
        this.applyMatrix4(_m1);
        return this;
    }
    translate(x21, y22, z17) {
        // translate geometry
        _m1.makeTranslation(x21, y22, z17);
        this.applyMatrix4(_m1);
        return this;
    }
    scale(x22, y23, z18) {
        // scale geometry
        _m1.makeScale(x22, y23, z18);
        this.applyMatrix4(_m1);
        return this;
    }
    lookAt(vector3) {
        _obj.lookAt(vector3);
        _obj.updateMatrix();
        this.applyMatrix4(_obj.matrix);
        return this;
    }
    center() {
        this.computeBoundingBox();
        this.boundingBox.getCenter(_offset).negate();
        this.translate(_offset.x, _offset.y, _offset.z);
        return this;
    }
    setFromPoints(points3) {
        const position = [];
        for(let i = 0, l = points3.length; i < l; i++){
            const point = points3[i];
            position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute('position', new Float32BufferAttribute(position, 3));
        return this;
    }
    computeBoundingBox() {
        if (this.boundingBox === null) this.boundingBox = new Box3();
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(Infinity, Infinity, Infinity));
            return;
        }
        if (position !== undefined) {
            this.boundingBox.setFromBufferAttribute(position);
            // process morph attributes if present
            if (morphAttributesPosition) for(let i = 0, il = morphAttributesPosition.length; i < il; i++){
                const morphAttribute = morphAttributesPosition[i];
                _box$1.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                    _vector$8.addVectors(this.boundingBox.min, _box$1.min);
                    this.boundingBox.expandByPoint(_vector$8);
                    _vector$8.addVectors(this.boundingBox.max, _box$1.max);
                    this.boundingBox.expandByPoint(_vector$8);
                } else {
                    this.boundingBox.expandByPoint(_box$1.min);
                    this.boundingBox.expandByPoint(_box$1.max);
                }
            }
        } else this.boundingBox.makeEmpty();
        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
    computeBoundingSphere() {
        if (this.boundingSphere === null) this.boundingSphere = new Sphere();
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingSphere.set(new Vector3(), Infinity);
            return;
        }
        if (position) {
            // first, find the center of the bounding sphere
            const center = this.boundingSphere.center;
            _box$1.setFromBufferAttribute(position);
            // process morph attributes if present
            if (morphAttributesPosition) for(let i = 0, il = morphAttributesPosition.length; i < il; i++){
                const morphAttribute = morphAttributesPosition[i];
                _boxMorphTargets.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                    _vector$8.addVectors(_box$1.min, _boxMorphTargets.min);
                    _box$1.expandByPoint(_vector$8);
                    _vector$8.addVectors(_box$1.max, _boxMorphTargets.max);
                    _box$1.expandByPoint(_vector$8);
                } else {
                    _box$1.expandByPoint(_boxMorphTargets.min);
                    _box$1.expandByPoint(_boxMorphTargets.max);
                }
            }
            _box$1.getCenter(center);
            // second, try to find a boundingSphere with a radius smaller than the
            // boundingSphere of the boundingBox: sqrt(3) smaller in the best case
            let maxRadiusSq = 0;
            for(let i4 = 0, il1 = position.count; i4 < il1; i4++){
                _vector$8.fromBufferAttribute(position, i4);
                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
            }
            // process morph attributes if present
            if (morphAttributesPosition) for(let i5 = 0, il2 = morphAttributesPosition.length; i5 < il2; i5++){
                const morphAttribute = morphAttributesPosition[i5];
                const morphTargetsRelative = this.morphTargetsRelative;
                for(let j = 0, jl = morphAttribute.count; j < jl; j++){
                    _vector$8.fromBufferAttribute(morphAttribute, j);
                    if (morphTargetsRelative) {
                        _offset.fromBufferAttribute(position, j);
                        _vector$8.add(_offset);
                    }
                    maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
                }
            }
            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
            if (isNaN(this.boundingSphere.radius)) console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
    }
    computeTangents() {
        const index = this.index;
        const attributes = this.attributes;
        // based on http://www.terathon.com/code/tangent.html
        // (per vertex tangents)
        if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
            console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');
            return;
        }
        const indices = index.array;
        const positions = attributes.position.array;
        const normals = attributes.normal.array;
        const uvs = attributes.uv.array;
        const nVertices = positions.length / 3;
        if (attributes.tangent === undefined) this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));
        const tangents = attributes.tangent.array;
        const tan1 = [], tan2 = [];
        for(let i = 0; i < nVertices; i++){
            tan1[i] = new Vector3();
            tan2[i] = new Vector3();
        }
        const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
        function handleTriangle(a, b, c) {
            vA.fromArray(positions, a * 3);
            vB.fromArray(positions, b * 3);
            vC.fromArray(positions, c * 3);
            uvA.fromArray(uvs, a * 2);
            uvB.fromArray(uvs, b * 2);
            uvC.fromArray(uvs, c * 2);
            vB.sub(vA);
            vC.sub(vA);
            uvB.sub(uvA);
            uvC.sub(uvA);
            const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
            // silently ignore degenerate uv triangles having coincident or colinear vertices
            if (!isFinite(r)) return;
            sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
            tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
            tan1[a].add(sdir);
            tan1[b].add(sdir);
            tan1[c].add(sdir);
            tan2[a].add(tdir);
            tan2[b].add(tdir);
            tan2[c].add(tdir);
        }
        let groups = this.groups;
        if (groups.length === 0) groups = [
            {
                start: 0,
                count: indices.length
            }
        ];
        for(let i6 = 0, il = groups.length; i6 < il; ++i6){
            const group = groups[i6];
            const start = group.start;
            const count = group.count;
            for(let j = start, jl = start + count; j < jl; j += 3)handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
        }
        const tmp = new Vector3(), tmp2 = new Vector3();
        const n = new Vector3(), n2 = new Vector3();
        function handleVertex(v) {
            n.fromArray(normals, v * 3);
            n2.copy(n);
            const t = tan1[v];
            // Gram-Schmidt orthogonalize
            tmp.copy(t);
            tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
            // Calculate handedness
            tmp2.crossVectors(n2, t);
            const test = tmp2.dot(tan2[v]);
            const w = test < 0 ? -1 : 1;
            tangents[v * 4] = tmp.x;
            tangents[v * 4 + 1] = tmp.y;
            tangents[v * 4 + 2] = tmp.z;
            tangents[v * 4 + 3] = w;
        }
        for(let i7 = 0, il3 = groups.length; i7 < il3; ++i7){
            const group = groups[i7];
            const start = group.start;
            const count = group.count;
            for(let j = start, jl = start + count; j < jl; j += 3){
                handleVertex(indices[j + 0]);
                handleVertex(indices[j + 1]);
                handleVertex(indices[j + 2]);
            }
        }
    }
    computeVertexNormals() {
        const index = this.index;
        const positionAttribute = this.getAttribute('position');
        if (positionAttribute !== undefined) {
            let normalAttribute = this.getAttribute('normal');
            if (normalAttribute === undefined) {
                normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
                this.setAttribute('normal', normalAttribute);
            } else // reset existing normals to zero
            for(let i = 0, il = normalAttribute.count; i < il; i++)normalAttribute.setXYZ(i, 0, 0, 0);
            const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
            const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
            const cb = new Vector3(), ab = new Vector3();
            // indexed elements
            if (index) for(let i8 = 0, il4 = index.count; i8 < il4; i8 += 3){
                const vA = index.getX(i8 + 0);
                const vB = index.getX(i8 + 1);
                const vC = index.getX(i8 + 2);
                pA.fromBufferAttribute(positionAttribute, vA);
                pB.fromBufferAttribute(positionAttribute, vB);
                pC.fromBufferAttribute(positionAttribute, vC);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                nA.fromBufferAttribute(normalAttribute, vA);
                nB.fromBufferAttribute(normalAttribute, vB);
                nC.fromBufferAttribute(normalAttribute, vC);
                nA.add(cb);
                nB.add(cb);
                nC.add(cb);
                normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
                normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
                normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
            }
            else // non-indexed elements (unconnected triangle soup)
            for(let i9 = 0, il5 = positionAttribute.count; i9 < il5; i9 += 3){
                pA.fromBufferAttribute(positionAttribute, i9 + 0);
                pB.fromBufferAttribute(positionAttribute, i9 + 1);
                pC.fromBufferAttribute(positionAttribute, i9 + 2);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                normalAttribute.setXYZ(i9 + 0, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i9 + 1, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i9 + 2, cb.x, cb.y, cb.z);
            }
            this.normalizeNormals();
            normalAttribute.needsUpdate = true;
        }
    }
    merge(geometry2, offset21) {
        if (!(geometry2 && geometry2.isBufferGeometry)) {
            console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry2);
            return;
        }
        if (offset21 === undefined) {
            offset21 = 0;
            console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.");
        }
        const attributes = this.attributes;
        for(const key in attributes){
            if (geometry2.attributes[key] === undefined) continue;
            const attribute1 = attributes[key];
            const attributeArray1 = attribute1.array;
            const attribute2 = geometry2.attributes[key];
            const attributeArray2 = attribute2.array;
            const attributeOffset = attribute2.itemSize * offset21;
            const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);
            for(let i = 0, j = attributeOffset; i < length; i++, j++)attributeArray1[j] = attributeArray2[i];
        }
        return this;
    }
    normalizeNormals() {
        const normals = this.attributes.normal;
        for(let i = 0, il = normals.count; i < il; i++){
            _vector$8.fromBufferAttribute(normals, i);
            _vector$8.normalize();
            normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
    }
    toNonIndexed() {
        function convertBufferAttribute(attribute, indices) {
            const array = attribute.array;
            const itemSize = attribute.itemSize;
            const normalized = attribute.normalized;
            const array2 = new array.constructor(indices.length * itemSize);
            let index = 0, index2 = 0;
            for(let i = 0, l = indices.length; i < l; i++){
                if (attribute.isInterleavedBufferAttribute) index = indices[i] * attribute.data.stride + attribute.offset;
                else index = indices[i] * itemSize;
                for(let j = 0; j < itemSize; j++)array2[index2++] = array[index++];
            }
            return new BufferAttribute(array2, itemSize, normalized);
        }
        //
        if (this.index === null) {
            console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');
            return this;
        }
        const geometry2 = new BufferGeometry();
        const indices1 = this.index.array;
        const attributes = this.attributes;
        // attributes
        for(const name in attributes){
            const attribute = attributes[name];
            const newAttribute = convertBufferAttribute(attribute, indices1);
            geometry2.setAttribute(name, newAttribute);
        }
        // morph attributes
        const morphAttributes = this.morphAttributes;
        for(const name6 in morphAttributes){
            const morphArray = [];
            const morphAttribute = morphAttributes[name6]; // morphAttribute: array of Float32BufferAttributes
            for(let i = 0, il = morphAttribute.length; i < il; i++){
                const attribute = morphAttribute[i];
                const newAttribute = convertBufferAttribute(attribute, indices1);
                morphArray.push(newAttribute);
            }
            geometry2.morphAttributes[name6] = morphArray;
        }
        geometry2.morphTargetsRelative = this.morphTargetsRelative;
        // groups
        const groups = this.groups;
        for(let i10 = 0, l3 = groups.length; i10 < l3; i10++){
            const group = groups[i10];
            geometry2.addGroup(group.start, group.count, group.materialIndex);
        }
        return geometry2;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.5,
                type: 'BufferGeometry',
                generator: 'BufferGeometry.toJSON'
            }
        };
        // standard BufferGeometry serialization
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== '') data.name = this.name;
        if (Object.keys(this.userData).length > 0) data.userData = this.userData;
        if (this.parameters !== undefined) {
            const parameters = this.parameters;
            for(const key in parameters)if (parameters[key] !== undefined) data[key] = parameters[key];
            return data;
        }
        // for simplicity the code assumes attributes are not shared across geometries, see #15811
        data.data = {
            attributes: {
            }
        };
        const index = this.index;
        if (index !== null) data.data.index = {
            type: index.array.constructor.name,
            array: Array.prototype.slice.call(index.array)
        };
        const attributes = this.attributes;
        for(const key in attributes){
            const attribute = attributes[key];
            data.data.attributes[key] = attribute.toJSON(data.data);
        }
        const morphAttributes = {
        };
        let hasMorphAttributes = false;
        for(const key1 in this.morphAttributes){
            const attributeArray = this.morphAttributes[key1];
            const array = [];
            for(let i = 0, il = attributeArray.length; i < il; i++){
                const attribute = attributeArray[i];
                array.push(attribute.toJSON(data.data));
            }
            if (array.length > 0) {
                morphAttributes[key1] = array;
                hasMorphAttributes = true;
            }
        }
        if (hasMorphAttributes) {
            data.data.morphAttributes = morphAttributes;
            data.data.morphTargetsRelative = this.morphTargetsRelative;
        }
        const groups = this.groups;
        if (groups.length > 0) data.data.groups = JSON.parse(JSON.stringify(groups));
        const boundingSphere = this.boundingSphere;
        if (boundingSphere !== null) data.data.boundingSphere = {
            center: boundingSphere.center.toArray(),
            radius: boundingSphere.radius
        };
        return data;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source8) {
        // reset
        this.index = null;
        this.attributes = {
        };
        this.morphAttributes = {
        };
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        // used for storing cloned, shared data
        const data = {
        };
        // name
        this.name = source8.name;
        // index
        const index = source8.index;
        if (index !== null) this.setIndex(index.clone(data));
        // attributes
        const attributes = source8.attributes;
        for(const name in attributes){
            const attribute = attributes[name];
            this.setAttribute(name, attribute.clone(data));
        }
        // morph attributes
        const morphAttributes = source8.morphAttributes;
        for(const name7 in morphAttributes){
            const array = [];
            const morphAttribute = morphAttributes[name7]; // morphAttribute: array of Float32BufferAttributes
            for(let i = 0, l = morphAttribute.length; i < l; i++)array.push(morphAttribute[i].clone(data));
            this.morphAttributes[name7] = array;
        }
        this.morphTargetsRelative = source8.morphTargetsRelative;
        // groups
        const groups = source8.groups;
        for(let i = 0, l = groups.length; i < l; i++){
            const group = groups[i];
            this.addGroup(group.start, group.count, group.materialIndex);
        }
        // bounding box
        const boundingBox = source8.boundingBox;
        if (boundingBox !== null) this.boundingBox = boundingBox.clone();
        // bounding sphere
        const boundingSphere = source8.boundingSphere;
        if (boundingSphere !== null) this.boundingSphere = boundingSphere.clone();
        // draw range
        this.drawRange.start = source8.drawRange.start;
        this.drawRange.count = source8.drawRange.count;
        // user data
        this.userData = source8.userData;
        // geometry generator parameters
        if (source8.parameters !== undefined) this.parameters = Object.assign({
        }, source8.parameters);
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
}
BufferGeometry.prototype.isBufferGeometry = true;
const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();
const _ray$2 = /*@__PURE__*/ new Ray();
const _sphere$3 = /*@__PURE__*/ new Sphere();
const _vA$1 = /*@__PURE__*/ new Vector3();
const _vB$1 = /*@__PURE__*/ new Vector3();
const _vC$1 = /*@__PURE__*/ new Vector3();
const _tempA = /*@__PURE__*/ new Vector3();
const _tempB = /*@__PURE__*/ new Vector3();
const _tempC = /*@__PURE__*/ new Vector3();
const _morphA = /*@__PURE__*/ new Vector3();
const _morphB = /*@__PURE__*/ new Vector3();
const _morphC = /*@__PURE__*/ new Vector3();
const _uvA$1 = /*@__PURE__*/ new Vector2();
const _uvB$1 = /*@__PURE__*/ new Vector2();
const _uvC$1 = /*@__PURE__*/ new Vector2();
const _intersectionPoint = /*@__PURE__*/ new Vector3();
const _intersectionPointWorld = /*@__PURE__*/ new Vector3();
class Mesh extends Object3D {
    constructor(geometry1 = new BufferGeometry(), material1 = new MeshBasicMaterial()){
        super();
        this.type = 'Mesh';
        this.geometry = geometry1;
        this.material = material1;
        this.updateMorphTargets();
    }
    copy(source9) {
        super.copy(source9);
        if (source9.morphTargetInfluences !== undefined) this.morphTargetInfluences = source9.morphTargetInfluences.slice();
        if (source9.morphTargetDictionary !== undefined) this.morphTargetDictionary = Object.assign({
        }, source9.morphTargetDictionary);
        this.material = source9.material;
        this.geometry = source9.geometry;
        return this;
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            const morphAttributes = geometry.morphAttributes;
            const keys = Object.keys(morphAttributes);
            if (keys.length > 0) {
                const morphAttribute = morphAttributes[keys[0]];
                if (morphAttribute !== undefined) {
                    this.morphTargetInfluences = [];
                    this.morphTargetDictionary = {
                    };
                    for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                        const name = morphAttribute[m].name || String(m);
                        this.morphTargetInfluences.push(0);
                        this.morphTargetDictionary[name] = m;
                    }
                }
            }
        } else {
            const morphTargets = geometry.morphTargets;
            if (morphTargets !== undefined && morphTargets.length > 0) console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
        }
    }
    raycast(raycaster1, intersects1) {
        const geometry = this.geometry;
        const material = this.material;
        const matrixWorld = this.matrixWorld;
        if (material === undefined) return;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere$3.copy(geometry.boundingSphere);
        _sphere$3.applyMatrix4(matrixWorld);
        if (raycaster1.ray.intersectsSphere(_sphere$3) === false) return;
        //
        _inverseMatrix$2.copy(matrixWorld).invert();
        _ray$2.copy(raycaster1.ray).applyMatrix4(_inverseMatrix$2);
        // Check boundingBox before continuing
        if (geometry.boundingBox !== null) {
            if (_ray$2.intersectsBox(geometry.boundingBox) === false) return;
        }
        let intersection;
        if (geometry.isBufferGeometry) {
            const index = geometry.index;
            const position = geometry.attributes.position;
            const morphPosition = geometry.morphAttributes.position;
            const morphTargetsRelative = geometry.morphTargetsRelative;
            const uv = geometry.attributes.uv;
            const uv2 = geometry.attributes.uv2;
            const groups = geometry.groups;
            const drawRange = geometry.drawRange;
            if (index !== null) {
                // indexed buffer geometry
                if (Array.isArray(material)) for(let i = 0, il = groups.length; i < il; i++){
                    const group = groups[i];
                    const groupMaterial = material[group.materialIndex];
                    const start = Math.max(group.start, drawRange.start);
                    const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                    for(let j = start, jl = end; j < jl; j += 3){
                        const a = index.getX(j);
                        const b = index.getX(j + 1);
                        const c = index.getX(j + 2);
                        intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster1, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                        if (intersection) {
                            intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics
                            intersection.face.materialIndex = group.materialIndex;
                            intersects1.push(intersection);
                        }
                    }
                }
                else {
                    const start = Math.max(0, drawRange.start);
                    const end = Math.min(index.count, drawRange.start + drawRange.count);
                    for(let i = start, il = end; i < il; i += 3){
                        const a = index.getX(i);
                        const b = index.getX(i + 1);
                        const c = index.getX(i + 2);
                        intersection = checkBufferGeometryIntersection(this, material, raycaster1, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                        if (intersection) {
                            intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics
                            intersects1.push(intersection);
                        }
                    }
                }
            } else if (position !== undefined) {
                // non-indexed buffer geometry
                if (Array.isArray(material)) for(let i = 0, il = groups.length; i < il; i++){
                    const group = groups[i];
                    const groupMaterial = material[group.materialIndex];
                    const start = Math.max(group.start, drawRange.start);
                    const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                    for(let j = start, jl = end; j < jl; j += 3){
                        const a = j;
                        const b = j + 1;
                        const c = j + 2;
                        intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster1, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                        if (intersection) {
                            intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics
                            intersection.face.materialIndex = group.materialIndex;
                            intersects1.push(intersection);
                        }
                    }
                }
                else {
                    const start = Math.max(0, drawRange.start);
                    const end = Math.min(position.count, drawRange.start + drawRange.count);
                    for(let i = start, il = end; i < il; i += 3){
                        const a = i;
                        const b = i + 1;
                        const c = i + 2;
                        intersection = checkBufferGeometryIntersection(this, material, raycaster1, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                        if (intersection) {
                            intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics
                            intersects1.push(intersection);
                        }
                    }
                }
            }
        } else if (geometry.isGeometry) console.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
    }
}
Mesh.prototype.isMesh = true;
function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    else intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
    if (intersect === null) return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far) return null;
    return {
        distance: distance,
        point: _intersectionPointWorld.clone(),
        object: object
    };
}
function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
    _vA$1.fromBufferAttribute(position, a);
    _vB$1.fromBufferAttribute(position, b);
    _vC$1.fromBufferAttribute(position, c);
    const morphInfluences = object.morphTargetInfluences;
    if (morphPosition && morphInfluences) {
        _morphA.set(0, 0, 0);
        _morphB.set(0, 0, 0);
        _morphC.set(0, 0, 0);
        for(let i = 0, il = morphPosition.length; i < il; i++){
            const influence = morphInfluences[i];
            const morphAttribute = morphPosition[i];
            if (influence === 0) continue;
            _tempA.fromBufferAttribute(morphAttribute, a);
            _tempB.fromBufferAttribute(morphAttribute, b);
            _tempC.fromBufferAttribute(morphAttribute, c);
            if (morphTargetsRelative) {
                _morphA.addScaledVector(_tempA, influence);
                _morphB.addScaledVector(_tempB, influence);
                _morphC.addScaledVector(_tempC, influence);
            } else {
                _morphA.addScaledVector(_tempA.sub(_vA$1), influence);
                _morphB.addScaledVector(_tempB.sub(_vB$1), influence);
                _morphC.addScaledVector(_tempC.sub(_vC$1), influence);
            }
        }
        _vA$1.add(_morphA);
        _vB$1.add(_morphB);
        _vC$1.add(_morphC);
    }
    if (object.isSkinnedMesh) {
        object.boneTransform(a, _vA$1);
        object.boneTransform(b, _vB$1);
        object.boneTransform(c, _vC$1);
    }
    const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
        if (uv) {
            _uvA$1.fromBufferAttribute(uv, a);
            _uvB$1.fromBufferAttribute(uv, b);
            _uvC$1.fromBufferAttribute(uv, c);
            intersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
        }
        if (uv2) {
            _uvA$1.fromBufferAttribute(uv2, a);
            _uvB$1.fromBufferAttribute(uv2, b);
            _uvC$1.fromBufferAttribute(uv2, c);
            intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
        }
        const face = {
            a: a,
            b: b,
            c: c,
            normal: new Vector3(),
            materialIndex: 0
        };
        Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
        intersection.face = face;
    }
    return intersection;
}
class BoxGeometry extends BufferGeometry {
    constructor(width5 = 1, height5 = 1, depth2 = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1){
        super();
        this.type = 'BoxGeometry';
        this.parameters = {
            width: width5,
            height: height5,
            depth: depth2,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            depthSegments: depthSegments
        };
        const scope = this;
        // segments
        widthSegments = Math.floor(widthSegments);
        heightSegments = Math.floor(heightSegments);
        depthSegments = Math.floor(depthSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let numberOfVertices = 0;
        let groupStart = 0;
        // build each side of the box geometry
        buildPlane('z', 'y', 'x', -1, -1, depth2, height5, width5, depthSegments, heightSegments, 0); // px
        buildPlane('z', 'y', 'x', 1, -1, depth2, height5, -width5, depthSegments, heightSegments, 1); // nx
        buildPlane('x', 'z', 'y', 1, 1, width5, depth2, height5, widthSegments, depthSegments, 2); // py
        buildPlane('x', 'z', 'y', 1, -1, width5, depth2, -height5, widthSegments, depthSegments, 3); // ny
        buildPlane('x', 'y', 'z', 1, -1, width5, height5, depth2, widthSegments, heightSegments, 4); // pz
        buildPlane('x', 'y', 'z', -1, -1, width5, height5, -depth2, widthSegments, heightSegments, 5); // nz
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
        function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
            const segmentWidth = width / gridX;
            const segmentHeight = height / gridY;
            const widthHalf = width / 2;
            const heightHalf = height / 2;
            const depthHalf = depth / 2;
            const gridX1 = gridX + 1;
            const gridY1 = gridY + 1;
            let vertexCounter = 0;
            let groupCount = 0;
            const vector = new Vector3();
            // generate vertices, normals and uvs
            for(let iy = 0; iy < gridY1; iy++){
                const y = iy * segmentHeight - heightHalf;
                for(let ix = 0; ix < gridX1; ix++){
                    const x = ix * segmentWidth - widthHalf;
                    // set values to correct vector component
                    vector[u] = x * udir;
                    vector[v] = y * vdir;
                    vector[w] = depthHalf;
                    // now apply vector to vertex buffer
                    vertices.push(vector.x, vector.y, vector.z);
                    // set values to correct vector component
                    vector[u] = 0;
                    vector[v] = 0;
                    vector[w] = depth > 0 ? 1 : -1;
                    // now apply vector to normal buffer
                    normals.push(vector.x, vector.y, vector.z);
                    // uvs
                    uvs.push(ix / gridX);
                    uvs.push(1 - iy / gridY);
                    // counters
                    vertexCounter += 1;
                }
            }
            // indices
            // 1. you need three indices to draw a single face
            // 2. a single segment consists of two faces
            // 3. so we need to generate six (2*3) indices per segment
            for(let iy1 = 0; iy1 < gridY; iy1++)for(let ix = 0; ix < gridX; ix++){
                const a = numberOfVertices + ix + gridX1 * iy1;
                const b = numberOfVertices + ix + gridX1 * (iy1 + 1);
                const c = numberOfVertices + (ix + 1) + gridX1 * (iy1 + 1);
                const d = numberOfVertices + (ix + 1) + gridX1 * iy1;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // increase counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, materialIndex);
            // calculate new start value for groups
            groupStart += groupCount;
            // update total number of vertices
            numberOfVertices += vertexCounter;
        }
    }
    static fromJSON(data2) {
        return new BoxGeometry(data2.width, data2.height, data2.depth, data2.widthSegments, data2.heightSegments, data2.depthSegments);
    }
}
/**
 * Uniform Utilities
 */ function cloneUniforms(src) {
    const dst = {
    };
    for(const u in src){
        dst[u] = {
        };
        for(const p in src[u]){
            const property = src[u][p];
            if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) dst[u][p] = property.clone();
            else if (Array.isArray(property)) dst[u][p] = property.slice();
            else dst[u][p] = property;
        }
    }
    return dst;
}
function mergeUniforms(uniforms) {
    const merged = {
    };
    for(let u = 0; u < uniforms.length; u++){
        const tmp = cloneUniforms(uniforms[u]);
        for(const p in tmp)merged[p] = tmp[p];
    }
    return merged;
}
// Legacy
const UniformsUtils = {
    clone: cloneUniforms,
    merge: mergeUniforms
};
var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
/**
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>
 * }
 */ class ShaderMaterial extends Material {
    constructor(parameters1){
        super();
        this.type = 'ShaderMaterial';
        this.defines = {
        };
        this.uniforms = {
        };
        this.vertexShader = default_vertex;
        this.fragmentShader = default_fragment;
        this.linewidth = 1;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.fog = false; // set to use scene fog
        this.lights = false; // set to use scene lights
        this.clipping = false; // set to use user-defined clipping planes
        this.extensions = {
            derivatives: false,
            fragDepth: false,
            drawBuffers: false,
            shaderTextureLOD: false // set to use shader texture LOD
        };
        // When rendered geometry doesn't include these attributes but the material does,
        // use these default values in WebGL. This avoids errors when buffer data is missing.
        this.defaultAttributeValues = {
            'color': [
                1,
                1,
                1
            ],
            'uv': [
                0,
                0
            ],
            'uv2': [
                0,
                0
            ]
        };
        this.index0AttributeName = undefined;
        this.uniformsNeedUpdate = false;
        this.glslVersion = null;
        if (parameters1 !== undefined) {
            if (parameters1.attributes !== undefined) console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');
            this.setValues(parameters1);
        }
    }
    copy(source10) {
        super.copy(source10);
        this.fragmentShader = source10.fragmentShader;
        this.vertexShader = source10.vertexShader;
        this.uniforms = cloneUniforms(source10.uniforms);
        this.defines = Object.assign({
        }, source10.defines);
        this.wireframe = source10.wireframe;
        this.wireframeLinewidth = source10.wireframeLinewidth;
        this.lights = source10.lights;
        this.clipping = source10.clipping;
        this.extensions = Object.assign({
        }, source10.extensions);
        this.glslVersion = source10.glslVersion;
        return this;
    }
    toJSON(meta3) {
        const data = super.toJSON(meta3);
        data.glslVersion = this.glslVersion;
        data.uniforms = {
        };
        for(const name in this.uniforms){
            const uniform = this.uniforms[name];
            const value = uniform.value;
            if (value && value.isTexture) data.uniforms[name] = {
                type: 't',
                value: value.toJSON(meta3).uuid
            };
            else if (value && value.isColor) data.uniforms[name] = {
                type: 'c',
                value: value.getHex()
            };
            else if (value && value.isVector2) data.uniforms[name] = {
                type: 'v2',
                value: value.toArray()
            };
            else if (value && value.isVector3) data.uniforms[name] = {
                type: 'v3',
                value: value.toArray()
            };
            else if (value && value.isVector4) data.uniforms[name] = {
                type: 'v4',
                value: value.toArray()
            };
            else if (value && value.isMatrix3) data.uniforms[name] = {
                type: 'm3',
                value: value.toArray()
            };
            else if (value && value.isMatrix4) data.uniforms[name] = {
                type: 'm4',
                value: value.toArray()
            };
            else data.uniforms[name] = {
                value: value
            };
        }
        if (Object.keys(this.defines).length > 0) data.defines = this.defines;
        data.vertexShader = this.vertexShader;
        data.fragmentShader = this.fragmentShader;
        const extensions = {
        };
        for(const key in this.extensions)if (this.extensions[key] === true) extensions[key] = true;
        if (Object.keys(extensions).length > 0) data.extensions = extensions;
        return data;
    }
}
ShaderMaterial.prototype.isShaderMaterial = true;
class Camera extends Object3D {
    constructor(){
        super();
        this.type = 'Camera';
        this.matrixWorldInverse = new Matrix4();
        this.projectionMatrix = new Matrix4();
        this.projectionMatrixInverse = new Matrix4();
    }
    copy(source11, recursive2) {
        super.copy(source11, recursive2);
        this.matrixWorldInverse.copy(source11.matrixWorldInverse);
        this.projectionMatrix.copy(source11.projectionMatrix);
        this.projectionMatrixInverse.copy(source11.projectionMatrixInverse);
        return this;
    }
    getWorldDirection(target28) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target28.set(-e[8], -e[9], -e[10]).normalize();
    }
    updateMatrixWorld(force1) {
        super.updateMatrixWorld(force1);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents1, updateChildren1) {
        super.updateWorldMatrix(updateParents1, updateChildren1);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
Camera.prototype.isCamera = true;
class PerspectiveCamera extends Camera {
    constructor(fov1 = 50, aspect1 = 1, near2 = 0.1, far2 = 2000){
        super();
        this.type = 'PerspectiveCamera';
        this.fov = fov1;
        this.zoom = 1;
        this.near = near2;
        this.far = far2;
        this.focus = 10;
        this.aspect = aspect1;
        this.view = null;
        this.filmGauge = 35; // width of the film (default in millimeters)
        this.filmOffset = 0; // horizontal film offset (same unit as gauge)
        this.updateProjectionMatrix();
    }
    copy(source12, recursive3) {
        super.copy(source12, recursive3);
        this.fov = source12.fov;
        this.zoom = source12.zoom;
        this.near = source12.near;
        this.far = source12.far;
        this.focus = source12.focus;
        this.aspect = source12.aspect;
        this.view = source12.view === null ? null : Object.assign({
        }, source12.view);
        this.filmGauge = source12.filmGauge;
        this.filmOffset = source12.filmOffset;
        return this;
    }
    /**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */ setFocalLength(focalLength1) {
        /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */ const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength1;
        this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
        this.updateProjectionMatrix();
    }
    /**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */ getFocalLength() {
        const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
        return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    getEffectiveFOV() {
        return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
        // film not completely covered in portrait format (aspect < 1)
        return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
        // film not completely covered in landscape format (aspect > 1)
        return this.filmGauge / Math.max(this.aspect, 1);
    }
    /**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */ setViewOffset(fullWidth, fullHeight, x26, y27, width9, height9) {
        this.aspect = fullWidth / fullHeight;
        if (this.view === null) this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        };
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x26;
        this.view.offsetY = y27;
        this.view.width = width9;
        this.view.height = height9;
        this.updateProjectionMatrix();
    }
    clearViewOffset() {
        if (this.view !== null) this.view.enabled = false;
        this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        const near = this.near;
        let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
        let height = 2 * top;
        let width = this.aspect * height;
        let left = -0.5 * width;
        const view = this.view;
        if (this.view !== null && this.view.enabled) {
            const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
            left += view.offsetX * width / fullWidth;
            top -= view.offsetY * height / fullHeight;
            width *= view.width / fullWidth;
            height *= view.height / fullHeight;
        }
        const skew = this.filmOffset;
        if (skew !== 0) left += near * skew / this.getFilmWidth();
        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta4) {
        const data = super.toJSON(meta4);
        data.object.fov = this.fov;
        data.object.zoom = this.zoom;
        data.object.near = this.near;
        data.object.far = this.far;
        data.object.focus = this.focus;
        data.object.aspect = this.aspect;
        if (this.view !== null) data.object.view = Object.assign({
        }, this.view);
        data.object.filmGauge = this.filmGauge;
        data.object.filmOffset = this.filmOffset;
        return data;
    }
}
PerspectiveCamera.prototype.isPerspectiveCamera = true;
const fov = 90, aspect = 1;
class CubeCamera extends Object3D {
    constructor(near3, far3, renderTarget1){
        super();
        this.type = 'CubeCamera';
        if (renderTarget1.isWebGLCubeRenderTarget !== true) {
            console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');
            return;
        }
        this.renderTarget = renderTarget1;
        const cameraPX = new PerspectiveCamera(fov, aspect, near3, far3);
        cameraPX.layers = this.layers;
        cameraPX.up.set(0, -1, 0);
        cameraPX.lookAt(new Vector3(1, 0, 0));
        this.add(cameraPX);
        const cameraNX = new PerspectiveCamera(fov, aspect, near3, far3);
        cameraNX.layers = this.layers;
        cameraNX.up.set(0, -1, 0);
        cameraNX.lookAt(new Vector3(-1, 0, 0));
        this.add(cameraNX);
        const cameraPY = new PerspectiveCamera(fov, aspect, near3, far3);
        cameraPY.layers = this.layers;
        cameraPY.up.set(0, 0, 1);
        cameraPY.lookAt(new Vector3(0, 1, 0));
        this.add(cameraPY);
        const cameraNY = new PerspectiveCamera(fov, aspect, near3, far3);
        cameraNY.layers = this.layers;
        cameraNY.up.set(0, 0, -1);
        cameraNY.lookAt(new Vector3(0, -1, 0));
        this.add(cameraNY);
        const cameraPZ = new PerspectiveCamera(fov, aspect, near3, far3);
        cameraPZ.layers = this.layers;
        cameraPZ.up.set(0, -1, 0);
        cameraPZ.lookAt(new Vector3(0, 0, 1));
        this.add(cameraPZ);
        const cameraNZ = new PerspectiveCamera(fov, aspect, near3, far3);
        cameraNZ.layers = this.layers;
        cameraNZ.up.set(0, -1, 0);
        cameraNZ.lookAt(new Vector3(0, 0, -1));
        this.add(cameraNZ);
    }
    update(renderer3, scene1) {
        if (this.parent === null) this.updateMatrixWorld();
        const renderTarget = this.renderTarget;
        const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
        const currentXrEnabled = renderer3.xr.enabled;
        const currentRenderTarget = renderer3.getRenderTarget();
        renderer3.xr.enabled = false;
        const generateMipmaps = renderTarget.texture.generateMipmaps;
        renderTarget.texture.generateMipmaps = false;
        renderer3.setRenderTarget(renderTarget, 0);
        renderer3.render(scene1, cameraPX);
        renderer3.setRenderTarget(renderTarget, 1);
        renderer3.render(scene1, cameraNX);
        renderer3.setRenderTarget(renderTarget, 2);
        renderer3.render(scene1, cameraPY);
        renderer3.setRenderTarget(renderTarget, 3);
        renderer3.render(scene1, cameraNY);
        renderer3.setRenderTarget(renderTarget, 4);
        renderer3.render(scene1, cameraPZ);
        renderTarget.texture.generateMipmaps = generateMipmaps;
        renderer3.setRenderTarget(renderTarget, 5);
        renderer3.render(scene1, cameraNZ);
        renderer3.setRenderTarget(currentRenderTarget);
        renderer3.xr.enabled = currentXrEnabled;
    }
}
class CubeTexture extends Texture {
    constructor(images, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type4, anisotropy1, encoding1){
        images = images !== undefined ? images : [];
        mapping1 = mapping1 !== undefined ? mapping1 : CubeReflectionMapping;
        super(images, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type4, anisotropy1, encoding1);
        this.flipY = false;
    }
    get images() {
        return this.image;
    }
    set images(value23) {
        this.image = value23;
    }
}
CubeTexture.prototype.isCubeTexture = true;
class WebGLCubeRenderTarget extends WebGLRenderTarget {
    constructor(size1, options2, dummy){
        if (Number.isInteger(options2)) {
            console.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');
            options2 = dummy;
        }
        super(size1, size1, options2);
        options2 = options2 || {
        };
        // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
        // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
        // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
        // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
        // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
        // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
        this.texture = new CubeTexture(undefined, options2.mapping, options2.wrapS, options2.wrapT, options2.magFilter, options2.minFilter, options2.format, options2.type, options2.anisotropy, options2.encoding);
        this.texture.isRenderTargetTexture = true;
        this.texture.generateMipmaps = options2.generateMipmaps !== undefined ? options2.generateMipmaps : false;
        this.texture.minFilter = options2.minFilter !== undefined ? options2.minFilter : LinearFilter;
        this.texture._needsFlipEnvMap = false;
    }
    fromEquirectangularTexture(renderer1, texture1) {
        this.texture.type = texture1.type;
        this.texture.format = RGBAFormat; // see #18859
        this.texture.encoding = texture1.encoding;
        this.texture.generateMipmaps = texture1.generateMipmaps;
        this.texture.minFilter = texture1.minFilter;
        this.texture.magFilter = texture1.magFilter;
        const shader = {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: /* glsl */ `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
            fragmentShader: /* glsl */ `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        };
        const geometry = new BoxGeometry(5, 5, 5);
        const material = new ShaderMaterial({
            name: 'CubemapFromEquirect',
            uniforms: cloneUniforms(shader.uniforms),
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            side: BackSide,
            blending: NoBlending
        });
        material.uniforms.tEquirect.value = texture1;
        const mesh = new Mesh(geometry, material);
        const currentMinFilter = texture1.minFilter;
        // Avoid blurred poles
        if (texture1.minFilter === LinearMipmapLinearFilter) texture1.minFilter = LinearFilter;
        const camera = new CubeCamera(1, 10, this);
        camera.update(renderer1, mesh);
        texture1.minFilter = currentMinFilter;
        mesh.geometry.dispose();
        mesh.material.dispose();
        return this;
    }
    clear(renderer2, color8, depth6, stencil1) {
        const currentRenderTarget = renderer2.getRenderTarget();
        for(let i = 0; i < 6; i++){
            renderer2.setRenderTarget(this, i);
            renderer2.clear(color8, depth6, stencil1);
        }
        renderer2.setRenderTarget(currentRenderTarget);
    }
}
WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;
const _vector1 = /*@__PURE__*/ new Vector3();
const _vector2 = /*@__PURE__*/ new Vector3();
const _normalMatrix = /*@__PURE__*/ new Matrix3();
class Plane {
    constructor(normal1 = new Vector3(1, 0, 0), constant = 0){
        // normal is assumed to be normalized
        this.normal = normal1;
        this.constant = constant;
    }
    set(normal2, constant1) {
        this.normal.copy(normal2);
        this.constant = constant1;
        return this;
    }
    setComponents(x24, y25, z19, w) {
        this.normal.set(x24, y25, z19);
        this.constant = w;
        return this;
    }
    setFromNormalAndCoplanarPoint(normal3, point22) {
        this.normal.copy(normal3);
        this.constant = -point22.dot(this.normal);
        return this;
    }
    setFromCoplanarPoints(a19, b21, c10) {
        const normal = _vector1.subVectors(c10, b21).cross(_vector2.subVectors(a19, b21)).normalize();
        // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
        this.setFromNormalAndCoplanarPoint(normal, a19);
        return this;
    }
    copy(plane5) {
        this.normal.copy(plane5.normal);
        this.constant = plane5.constant;
        return this;
    }
    normalize() {
        // Note: will lead to a divide by zero if the plane is invalid.
        const inverseNormalLength = 1 / this.normal.length();
        this.normal.multiplyScalar(inverseNormalLength);
        this.constant *= inverseNormalLength;
        return this;
    }
    negate() {
        this.constant *= -1;
        this.normal.negate();
        return this;
    }
    distanceToPoint(point19) {
        return this.normal.dot(point19) + this.constant;
    }
    distanceToSphere(sphere7) {
        return this.distanceToPoint(sphere7.center) - sphere7.radius;
    }
    projectPoint(point20, target29) {
        return target29.copy(this.normal).multiplyScalar(-this.distanceToPoint(point20)).add(point20);
    }
    intersectLine(line4, target30) {
        const direction = line4.delta(_vector1);
        const denominator = this.normal.dot(direction);
        if (denominator === 0) {
            // line is coplanar, return origin
            if (this.distanceToPoint(line4.start) === 0) return target30.copy(line4.start);
            // Unsure if this is the correct method to handle this case.
            return null;
        }
        const t = -(line4.start.dot(this.normal) + this.constant) / denominator;
        if (t < 0 || t > 1) return null;
        return target30.copy(direction).multiplyScalar(t).add(line4.start);
    }
    intersectsLine(line1) {
        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
        const startSign = this.distanceToPoint(line1.start);
        const endSign = this.distanceToPoint(line1.end);
        return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box10) {
        return box10.intersectsPlane(this);
    }
    intersectsSphere(sphere8) {
        return sphere8.intersectsPlane(this);
    }
    coplanarPoint(target31) {
        return target31.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix7, optionalNormalMatrix) {
        const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix7);
        const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix7);
        const normal = this.normal.applyMatrix3(normalMatrix).normalize();
        this.constant = -referencePoint.dot(normal);
        return this;
    }
    translate(offset22) {
        this.constant -= offset22.dot(this.normal);
        return this;
    }
    equals(plane6) {
        return plane6.normal.equals(this.normal) && plane6.constant === this.constant;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
Plane.prototype.isPlane = true;
const _sphere$2 = /*@__PURE__*/ new Sphere();
const _vector$7 = /*@__PURE__*/ new Vector3();
class Frustum {
    constructor(p02 = new Plane(), p11 = new Plane(), p21 = new Plane(), p31 = new Plane(), p4 = new Plane(), p5 = new Plane()){
        this.planes = [
            p02,
            p11,
            p21,
            p31,
            p4,
            p5
        ];
    }
    set(p01, p12, p22, p32, p41, p51) {
        const planes = this.planes;
        planes[0].copy(p01);
        planes[1].copy(p12);
        planes[2].copy(p22);
        planes[3].copy(p32);
        planes[4].copy(p41);
        planes[5].copy(p51);
        return this;
    }
    copy(frustum) {
        const planes = this.planes;
        for(let i = 0; i < 6; i++)planes[i].copy(frustum.planes[i]);
        return this;
    }
    setFromProjectionMatrix(m28) {
        const planes = this.planes;
        const me = m28.elements;
        const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
        const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
        const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
        const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
        planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
        planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
        planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
        planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
        planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
        planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
        return this;
    }
    intersectsObject(object6) {
        const geometry = object6.geometry;
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere$2.copy(geometry.boundingSphere).applyMatrix4(object6.matrixWorld);
        return this.intersectsSphere(_sphere$2);
    }
    intersectsSprite(sprite) {
        _sphere$2.center.set(0, 0, 0);
        _sphere$2.radius = 0.7071067811865476;
        _sphere$2.applyMatrix4(sprite.matrixWorld);
        return this.intersectsSphere(_sphere$2);
    }
    intersectsSphere(sphere9) {
        const planes = this.planes;
        const center = sphere9.center;
        const negRadius = -sphere9.radius;
        for(let i = 0; i < 6; i++){
            const distance = planes[i].distanceToPoint(center);
            if (distance < negRadius) return false;
        }
        return true;
    }
    intersectsBox(box11) {
        const planes = this.planes;
        for(let i = 0; i < 6; i++){
            const plane = planes[i];
            // corner at max distance
            _vector$7.x = plane.normal.x > 0 ? box11.max.x : box11.min.x;
            _vector$7.y = plane.normal.y > 0 ? box11.max.y : box11.min.y;
            _vector$7.z = plane.normal.z > 0 ? box11.max.z : box11.min.z;
            if (plane.distanceToPoint(_vector$7) < 0) return false;
        }
        return true;
    }
    containsPoint(point21) {
        const planes = this.planes;
        for(let i = 0; i < 6; i++){
            if (planes[i].distanceToPoint(point21) < 0) return false;
        }
        return true;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
function WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
        animationLoop(time, frame);
        requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
        start: function() {
            if (isAnimating === true) return;
            if (animationLoop === null) return;
            requestId = context.requestAnimationFrame(onAnimationFrame);
            isAnimating = true;
        },
        stop: function() {
            context.cancelAnimationFrame(requestId);
            isAnimating = false;
        },
        setAnimationLoop: function(callback) {
            animationLoop = callback;
        },
        setContext: function(value) {
            context = value;
        }
    };
}
function WebGLAttributes(gl, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    const buffers = new WeakMap();
    function createBuffer(attribute, bufferType) {
        const array = attribute.array;
        const usage = attribute.usage;
        const buffer = gl.createBuffer();
        gl.bindBuffer(bufferType, buffer);
        gl.bufferData(bufferType, array, usage);
        attribute.onUploadCallback();
        let type = 5126;
        if (array instanceof Float32Array) type = 5126;
        else if (array instanceof Float64Array) console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');
        else if (array instanceof Uint16Array) {
            if (attribute.isFloat16BufferAttribute) {
                if (isWebGL2) type = 5131;
                else console.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');
            } else type = 5123;
        } else if (array instanceof Int16Array) type = 5122;
        else if (array instanceof Uint32Array) type = 5125;
        else if (array instanceof Int32Array) type = 5124;
        else if (array instanceof Int8Array) type = 5120;
        else if (array instanceof Uint8Array) type = 5121;
        else if (array instanceof Uint8ClampedArray) type = 5121;
        return {
            buffer: buffer,
            type: type,
            bytesPerElement: array.BYTES_PER_ELEMENT,
            version: attribute.version
        };
    }
    function updateBuffer(buffer, attribute, bufferType) {
        const array = attribute.array;
        const updateRange = attribute.updateRange;
        gl.bindBuffer(bufferType, buffer);
        if (updateRange.count === -1) // Not using update ranges
        gl.bufferSubData(bufferType, 0, array);
        else {
            if (isWebGL2) gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
            else gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
            updateRange.count = -1; // reset range
        }
    }
    //
    function get(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        return buffers.get(attribute);
    }
    function remove(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data) {
            gl.deleteBuffer(data.buffer);
            buffers.delete(attribute);
        }
    }
    function update(attribute, bufferType) {
        if (attribute.isGLBufferAttribute) {
            const cached = buffers.get(attribute);
            if (!cached || cached.version < attribute.version) buffers.set(attribute, {
                buffer: attribute.buffer,
                type: attribute.type,
                bytesPerElement: attribute.elementSize,
                version: attribute.version
            });
            return;
        }
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data === undefined) buffers.set(attribute, createBuffer(attribute, bufferType));
        else if (data.version < attribute.version) {
            updateBuffer(data.buffer, attribute, bufferType);
            data.version = attribute.version;
        }
    }
    return {
        get: get,
        remove: remove,
        update: update
    };
}
class PlaneGeometry extends BufferGeometry {
    constructor(width7 = 1, height7 = 1, widthSegments1 = 1, heightSegments1 = 1){
        super();
        this.type = 'PlaneGeometry';
        this.parameters = {
            width: width7,
            height: height7,
            widthSegments: widthSegments1,
            heightSegments: heightSegments1
        };
        const width_half = width7 / 2;
        const height_half = height7 / 2;
        const gridX = Math.floor(widthSegments1);
        const gridY = Math.floor(heightSegments1);
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        const segment_width = width7 / gridX;
        const segment_height = height7 / gridY;
        //
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        for(let iy = 0; iy < gridY1; iy++){
            const y = iy * segment_height - height_half;
            for(let ix = 0; ix < gridX1; ix++){
                const x = ix * segment_width - width_half;
                vertices.push(x, -y, 0);
                normals.push(0, 0, 1);
                uvs.push(ix / gridX);
                uvs.push(1 - iy / gridY);
            }
        }
        for(let iy2 = 0; iy2 < gridY; iy2++)for(let ix = 0; ix < gridX; ix++){
            const a = ix + gridX1 * iy2;
            const b = ix + gridX1 * (iy2 + 1);
            const c = ix + 1 + gridX1 * (iy2 + 1);
            const d = ix + 1 + gridX1 * iy2;
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
    }
    static fromJSON(data3) {
        return new PlaneGeometry(data3.width, data3.height, data3.widthSegments, data3.heightSegments);
    }
}
var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
var alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";
var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";
var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";
var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
var begin_vertex = "vec3 transformed = vec3( position );";
var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
var bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";
var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";
var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";
var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";
var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";
var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";
var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";
var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";
var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\treturn texture2D( envMap, uv ).rgb;\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";
var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";
var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";
var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";
var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";
var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";
var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";
var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";
var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";
var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";
var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";
var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";
var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";
var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";
var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";
var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";
var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";
var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";
var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";
var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";
var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";
var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";
var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";
var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";
var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";
var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";
var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";
var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";
var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( float roughness, float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n\t\tvec3 attenuationColor, float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";
var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";
var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";
var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";
var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";
const vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
const fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
const fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";
const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";
const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const vertex$9 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
const fragment$9 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";
const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
const ShaderChunk = {
    alphamap_fragment: alphamap_fragment,
    alphamap_pars_fragment: alphamap_pars_fragment,
    alphatest_fragment: alphatest_fragment,
    alphatest_pars_fragment: alphatest_pars_fragment,
    aomap_fragment: aomap_fragment,
    aomap_pars_fragment: aomap_pars_fragment,
    begin_vertex: begin_vertex,
    beginnormal_vertex: beginnormal_vertex,
    bsdfs: bsdfs,
    bumpmap_pars_fragment: bumpmap_pars_fragment,
    clipping_planes_fragment: clipping_planes_fragment,
    clipping_planes_pars_fragment: clipping_planes_pars_fragment,
    clipping_planes_pars_vertex: clipping_planes_pars_vertex,
    clipping_planes_vertex: clipping_planes_vertex,
    color_fragment: color_fragment,
    color_pars_fragment: color_pars_fragment,
    color_pars_vertex: color_pars_vertex,
    color_vertex: color_vertex,
    common: common,
    cube_uv_reflection_fragment: cube_uv_reflection_fragment,
    defaultnormal_vertex: defaultnormal_vertex,
    displacementmap_pars_vertex: displacementmap_pars_vertex,
    displacementmap_vertex: displacementmap_vertex,
    emissivemap_fragment: emissivemap_fragment,
    emissivemap_pars_fragment: emissivemap_pars_fragment,
    encodings_fragment: encodings_fragment,
    encodings_pars_fragment: encodings_pars_fragment,
    envmap_fragment: envmap_fragment,
    envmap_common_pars_fragment: envmap_common_pars_fragment,
    envmap_pars_fragment: envmap_pars_fragment,
    envmap_pars_vertex: envmap_pars_vertex,
    envmap_physical_pars_fragment: envmap_physical_pars_fragment,
    envmap_vertex: envmap_vertex,
    fog_vertex: fog_vertex,
    fog_pars_vertex: fog_pars_vertex,
    fog_fragment: fog_fragment,
    fog_pars_fragment: fog_pars_fragment,
    gradientmap_pars_fragment: gradientmap_pars_fragment,
    lightmap_fragment: lightmap_fragment,
    lightmap_pars_fragment: lightmap_pars_fragment,
    lights_lambert_vertex: lights_lambert_vertex,
    lights_pars_begin: lights_pars_begin,
    lights_toon_fragment: lights_toon_fragment,
    lights_toon_pars_fragment: lights_toon_pars_fragment,
    lights_phong_fragment: lights_phong_fragment,
    lights_phong_pars_fragment: lights_phong_pars_fragment,
    lights_physical_fragment: lights_physical_fragment,
    lights_physical_pars_fragment: lights_physical_pars_fragment,
    lights_fragment_begin: lights_fragment_begin,
    lights_fragment_maps: lights_fragment_maps,
    lights_fragment_end: lights_fragment_end,
    logdepthbuf_fragment: logdepthbuf_fragment,
    logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
    logdepthbuf_vertex: logdepthbuf_vertex,
    map_fragment: map_fragment,
    map_pars_fragment: map_pars_fragment,
    map_particle_fragment: map_particle_fragment,
    map_particle_pars_fragment: map_particle_pars_fragment,
    metalnessmap_fragment: metalnessmap_fragment,
    metalnessmap_pars_fragment: metalnessmap_pars_fragment,
    morphnormal_vertex: morphnormal_vertex,
    morphtarget_pars_vertex: morphtarget_pars_vertex,
    morphtarget_vertex: morphtarget_vertex,
    normal_fragment_begin: normal_fragment_begin,
    normal_fragment_maps: normal_fragment_maps,
    normal_pars_fragment: normal_pars_fragment,
    normal_pars_vertex: normal_pars_vertex,
    normal_vertex: normal_vertex,
    normalmap_pars_fragment: normalmap_pars_fragment,
    clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment: clearcoat_pars_fragment,
    output_fragment: output_fragment,
    packing: packing,
    premultiplied_alpha_fragment: premultiplied_alpha_fragment,
    project_vertex: project_vertex,
    dithering_fragment: dithering_fragment,
    dithering_pars_fragment: dithering_pars_fragment,
    roughnessmap_fragment: roughnessmap_fragment,
    roughnessmap_pars_fragment: roughnessmap_pars_fragment,
    shadowmap_pars_fragment: shadowmap_pars_fragment,
    shadowmap_pars_vertex: shadowmap_pars_vertex,
    shadowmap_vertex: shadowmap_vertex,
    shadowmask_pars_fragment: shadowmask_pars_fragment,
    skinbase_vertex: skinbase_vertex,
    skinning_pars_vertex: skinning_pars_vertex,
    skinning_vertex: skinning_vertex,
    skinnormal_vertex: skinnormal_vertex,
    specularmap_fragment: specularmap_fragment,
    specularmap_pars_fragment: specularmap_pars_fragment,
    tonemapping_fragment: tonemapping_fragment,
    tonemapping_pars_fragment: tonemapping_pars_fragment,
    transmission_fragment: transmission_fragment,
    transmission_pars_fragment: transmission_pars_fragment,
    uv_pars_fragment: uv_pars_fragment,
    uv_pars_vertex: uv_pars_vertex,
    uv_vertex: uv_vertex,
    uv2_pars_fragment: uv2_pars_fragment,
    uv2_pars_vertex: uv2_pars_vertex,
    uv2_vertex: uv2_vertex,
    worldpos_vertex: worldpos_vertex,
    background_vert: vertex$g,
    background_frag: fragment$g,
    cube_vert: vertex$f,
    cube_frag: fragment$f,
    depth_vert: vertex$e,
    depth_frag: fragment$e,
    distanceRGBA_vert: vertex$d,
    distanceRGBA_frag: fragment$d,
    equirect_vert: vertex$c,
    equirect_frag: fragment$c,
    linedashed_vert: vertex$b,
    linedashed_frag: fragment$b,
    meshbasic_vert: vertex$a,
    meshbasic_frag: fragment$a,
    meshlambert_vert: vertex$9,
    meshlambert_frag: fragment$9,
    meshmatcap_vert: vertex$8,
    meshmatcap_frag: fragment$8,
    meshnormal_vert: vertex$7,
    meshnormal_frag: fragment$7,
    meshphong_vert: vertex$6,
    meshphong_frag: fragment$6,
    meshphysical_vert: vertex$5,
    meshphysical_frag: fragment$5,
    meshtoon_vert: vertex$4,
    meshtoon_frag: fragment$4,
    points_vert: vertex$3,
    points_frag: fragment$3,
    shadow_vert: vertex$2,
    shadow_frag: fragment$2,
    sprite_vert: vertex$1,
    sprite_frag: fragment$1
};
/**
 * Uniforms library for shared webgl shaders
 */ const UniformsLib = {
    common: {
        diffuse: {
            value: new Color(16777215)
        },
        opacity: {
            value: 1
        },
        map: {
            value: null
        },
        uvTransform: {
            value: new Matrix3()
        },
        uv2Transform: {
            value: new Matrix3()
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        }
    },
    specularmap: {
        specularMap: {
            value: null
        }
    },
    envmap: {
        envMap: {
            value: null
        },
        flipEnvMap: {
            value: -1
        },
        reflectivity: {
            value: 1
        },
        ior: {
            value: 1.5
        },
        refractionRatio: {
            value: 0.98
        }
    },
    aomap: {
        aoMap: {
            value: null
        },
        aoMapIntensity: {
            value: 1
        }
    },
    lightmap: {
        lightMap: {
            value: null
        },
        lightMapIntensity: {
            value: 1
        }
    },
    emissivemap: {
        emissiveMap: {
            value: null
        }
    },
    bumpmap: {
        bumpMap: {
            value: null
        },
        bumpScale: {
            value: 1
        }
    },
    normalmap: {
        normalMap: {
            value: null
        },
        normalScale: {
            value: new Vector2(1, 1)
        }
    },
    displacementmap: {
        displacementMap: {
            value: null
        },
        displacementScale: {
            value: 1
        },
        displacementBias: {
            value: 0
        }
    },
    roughnessmap: {
        roughnessMap: {
            value: null
        }
    },
    metalnessmap: {
        metalnessMap: {
            value: null
        }
    },
    gradientmap: {
        gradientMap: {
            value: null
        }
    },
    fog: {
        fogDensity: {
            value: 0.00025
        },
        fogNear: {
            value: 1
        },
        fogFar: {
            value: 2000
        },
        fogColor: {
            value: new Color(16777215)
        }
    },
    lights: {
        ambientLightColor: {
            value: []
        },
        lightProbe: {
            value: []
        },
        directionalLights: {
            value: [],
            properties: {
                direction: {
                },
                color: {
                }
            }
        },
        directionalLightShadows: {
            value: [],
            properties: {
                shadowBias: {
                },
                shadowNormalBias: {
                },
                shadowRadius: {
                },
                shadowMapSize: {
                }
            }
        },
        directionalShadowMap: {
            value: []
        },
        directionalShadowMatrix: {
            value: []
        },
        spotLights: {
            value: [],
            properties: {
                color: {
                },
                position: {
                },
                direction: {
                },
                distance: {
                },
                coneCos: {
                },
                penumbraCos: {
                },
                decay: {
                }
            }
        },
        spotLightShadows: {
            value: [],
            properties: {
                shadowBias: {
                },
                shadowNormalBias: {
                },
                shadowRadius: {
                },
                shadowMapSize: {
                }
            }
        },
        spotShadowMap: {
            value: []
        },
        spotShadowMatrix: {
            value: []
        },
        pointLights: {
            value: [],
            properties: {
                color: {
                },
                position: {
                },
                decay: {
                },
                distance: {
                }
            }
        },
        pointLightShadows: {
            value: [],
            properties: {
                shadowBias: {
                },
                shadowNormalBias: {
                },
                shadowRadius: {
                },
                shadowMapSize: {
                },
                shadowCameraNear: {
                },
                shadowCameraFar: {
                }
            }
        },
        pointShadowMap: {
            value: []
        },
        pointShadowMatrix: {
            value: []
        },
        hemisphereLights: {
            value: [],
            properties: {
                direction: {
                },
                skyColor: {
                },
                groundColor: {
                }
            }
        },
        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
        rectAreaLights: {
            value: [],
            properties: {
                color: {
                },
                position: {
                },
                width: {
                },
                height: {
                }
            }
        },
        ltc_1: {
            value: null
        },
        ltc_2: {
            value: null
        }
    },
    points: {
        diffuse: {
            value: new Color(16777215)
        },
        opacity: {
            value: 1
        },
        size: {
            value: 1
        },
        scale: {
            value: 1
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new Matrix3()
        }
    },
    sprite: {
        diffuse: {
            value: new Color(16777215)
        },
        opacity: {
            value: 1
        },
        center: {
            value: new Vector2(0.5, 0.5)
        },
        rotation: {
            value: 0
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new Matrix3()
        }
    }
};
const ShaderLib = {
    basic: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.specularmap,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.meshbasic_vert,
        fragmentShader: ShaderChunk.meshbasic_frag
    },
    lambert: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.specularmap,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
                emissive: {
                    value: new Color(0)
                }
            }
        ]),
        vertexShader: ShaderChunk.meshlambert_vert,
        fragmentShader: ShaderChunk.meshlambert_frag
    },
    phong: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.specularmap,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
                emissive: {
                    value: new Color(0)
                },
                specular: {
                    value: new Color(1118481)
                },
                shininess: {
                    value: 30
                }
            }
        ]),
        vertexShader: ShaderChunk.meshphong_vert,
        fragmentShader: ShaderChunk.meshphong_frag
    },
    standard: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.envmap,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.roughnessmap,
            UniformsLib.metalnessmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
                emissive: {
                    value: new Color(0)
                },
                roughness: {
                    value: 1
                },
                metalness: {
                    value: 0
                },
                envMapIntensity: {
                    value: 1
                } // temporary
            }
        ]),
        vertexShader: ShaderChunk.meshphysical_vert,
        fragmentShader: ShaderChunk.meshphysical_frag
    },
    toon: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.aomap,
            UniformsLib.lightmap,
            UniformsLib.emissivemap,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.gradientmap,
            UniformsLib.fog,
            UniformsLib.lights,
            {
                emissive: {
                    value: new Color(0)
                }
            }
        ]),
        vertexShader: ShaderChunk.meshtoon_vert,
        fragmentShader: ShaderChunk.meshtoon_frag
    },
    matcap: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            UniformsLib.fog,
            {
                matcap: {
                    value: null
                }
            }
        ]),
        vertexShader: ShaderChunk.meshmatcap_vert,
        fragmentShader: ShaderChunk.meshmatcap_frag
    },
    points: {
        uniforms: mergeUniforms([
            UniformsLib.points,
            UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.points_vert,
        fragmentShader: ShaderChunk.points_frag
    },
    dashed: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.fog,
            {
                scale: {
                    value: 1
                },
                dashSize: {
                    value: 1
                },
                totalSize: {
                    value: 2
                }
            }
        ]),
        vertexShader: ShaderChunk.linedashed_vert,
        fragmentShader: ShaderChunk.linedashed_frag
    },
    depth: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.displacementmap
        ]),
        vertexShader: ShaderChunk.depth_vert,
        fragmentShader: ShaderChunk.depth_frag
    },
    normal: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.bumpmap,
            UniformsLib.normalmap,
            UniformsLib.displacementmap,
            {
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: ShaderChunk.meshnormal_vert,
        fragmentShader: ShaderChunk.meshnormal_frag
    },
    sprite: {
        uniforms: mergeUniforms([
            UniformsLib.sprite,
            UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.sprite_vert,
        fragmentShader: ShaderChunk.sprite_frag
    },
    background: {
        uniforms: {
            uvTransform: {
                value: new Matrix3()
            },
            t2D: {
                value: null
            }
        },
        vertexShader: ShaderChunk.background_vert,
        fragmentShader: ShaderChunk.background_frag
    },
    /* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */ cube: {
        uniforms: mergeUniforms([
            UniformsLib.envmap,
            {
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: ShaderChunk.cube_vert,
        fragmentShader: ShaderChunk.cube_frag
    },
    equirect: {
        uniforms: {
            tEquirect: {
                value: null
            }
        },
        vertexShader: ShaderChunk.equirect_vert,
        fragmentShader: ShaderChunk.equirect_frag
    },
    distanceRGBA: {
        uniforms: mergeUniforms([
            UniformsLib.common,
            UniformsLib.displacementmap,
            {
                referencePosition: {
                    value: new Vector3()
                },
                nearDistance: {
                    value: 1
                },
                farDistance: {
                    value: 1000
                }
            }
        ]),
        vertexShader: ShaderChunk.distanceRGBA_vert,
        fragmentShader: ShaderChunk.distanceRGBA_frag
    },
    shadow: {
        uniforms: mergeUniforms([
            UniformsLib.lights,
            UniformsLib.fog,
            {
                color: {
                    value: new Color(0)
                },
                opacity: {
                    value: 1
                }
            }, 
        ]),
        vertexShader: ShaderChunk.shadow_vert,
        fragmentShader: ShaderChunk.shadow_frag
    }
};
ShaderLib.physical = {
    uniforms: mergeUniforms([
        ShaderLib.standard.uniforms,
        {
            clearcoat: {
                value: 0
            },
            clearcoatMap: {
                value: null
            },
            clearcoatRoughness: {
                value: 0
            },
            clearcoatRoughnessMap: {
                value: null
            },
            clearcoatNormalScale: {
                value: new Vector2(1, 1)
            },
            clearcoatNormalMap: {
                value: null
            },
            sheen: {
                value: 0
            },
            sheenColor: {
                value: new Color(0)
            },
            sheenColorMap: {
                value: null
            },
            sheenRoughness: {
                value: 0
            },
            sheenRoughnessMap: {
                value: null
            },
            transmission: {
                value: 0
            },
            transmissionMap: {
                value: null
            },
            transmissionSamplerSize: {
                value: new Vector2()
            },
            transmissionSamplerMap: {
                value: null
            },
            thickness: {
                value: 0
            },
            thicknessMap: {
                value: null
            },
            attenuationDistance: {
                value: 0
            },
            attenuationColor: {
                value: new Color(0)
            },
            specularIntensity: {
                value: 0
            },
            specularIntensityMap: {
                value: null
            },
            specularColor: {
                value: new Color(1, 1, 1)
            },
            specularColorMap: {
                value: null
            }
        }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
};
function WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {
    const clearColor = new Color(0);
    let clearAlpha = 0;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function render(renderList, scene) {
        let forceClear = false;
        let background = scene.isScene === true ? scene.background : null;
        if (background && background.isTexture) background = cubemaps.get(background);
        // Ignore background in AR
        // TODO: Reconsider this.
        const xr = renderer.xr;
        const session = xr.getSession && xr.getSession();
        if (session && session.environmentBlendMode === 'additive') background = null;
        if (background === null) setClear(clearColor, clearAlpha);
        else if (background && background.isColor) {
            setClear(background, 1);
            forceClear = true;
        }
        if (renderer.autoClear || forceClear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
        if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
            if (boxMesh === undefined) {
                boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({
                    name: 'BackgroundCubeMaterial',
                    uniforms: cloneUniforms(ShaderLib.cube.uniforms),
                    vertexShader: ShaderLib.cube.vertexShader,
                    fragmentShader: ShaderLib.cube.fragmentShader,
                    side: BackSide,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                boxMesh.geometry.deleteAttribute('normal');
                boxMesh.geometry.deleteAttribute('uv');
                boxMesh.onBeforeRender = function(renderer, scene, camera) {
                    this.matrixWorld.copyPosition(camera.matrixWorld);
                };
                // enable code injection for non-built-in material
                Object.defineProperty(boxMesh.material, 'envMap', {
                    get: function() {
                        return this.uniforms.envMap.value;
                    }
                });
                objects.update(boxMesh);
            }
            boxMesh.material.uniforms.envMap.value = background;
            boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                boxMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            // push to the pre-sorted opaque render list
            renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
        } else if (background && background.isTexture) {
            if (planeMesh === undefined) {
                planeMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({
                    name: 'BackgroundMaterial',
                    uniforms: cloneUniforms(ShaderLib.background.uniforms),
                    vertexShader: ShaderLib.background.vertexShader,
                    fragmentShader: ShaderLib.background.fragmentShader,
                    side: FrontSide,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                planeMesh.geometry.deleteAttribute('normal');
                // enable code injection for non-built-in material
                Object.defineProperty(planeMesh.material, 'map', {
                    get: function() {
                        return this.uniforms.t2D.value;
                    }
                });
                objects.update(planeMesh);
            }
            planeMesh.material.uniforms.t2D.value = background;
            if (background.matrixAutoUpdate === true) background.updateMatrix();
            planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                planeMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            // push to the pre-sorted opaque render list
            renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
        }
    }
    function setClear(color, alpha) {
        state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
    }
    return {
        getClearColor: function() {
            return clearColor;
        },
        setClearColor: function(color, alpha = 1) {
            clearColor.set(color);
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        getClearAlpha: function() {
            return clearAlpha;
        },
        setClearAlpha: function(alpha) {
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        render: render
    };
}
function WebGLBindingStates(gl, extensions, attributes1, capabilities) {
    const maxVertexAttributes = gl.getParameter(34921);
    const extension1 = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');
    const vaoAvailable = capabilities.isWebGL2 || extension1 !== null;
    const bindingStates = {
    };
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    function setup(object, material, program, geometry, index) {
        let updateBuffers = false;
        if (vaoAvailable) {
            const state = getBindingState(geometry, program, material);
            if (currentState !== state) {
                currentState = state;
                bindVertexArrayObject(currentState.object);
            }
            updateBuffers = needsUpdate(geometry, index);
            if (updateBuffers) saveCache(geometry, index);
        } else {
            const wireframe = material.wireframe === true;
            if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
                currentState.geometry = geometry.id;
                currentState.program = program.id;
                currentState.wireframe = wireframe;
                updateBuffers = true;
            }
        }
        if (object.isInstancedMesh === true) updateBuffers = true;
        if (index !== null) attributes1.update(index, 34963);
        if (updateBuffers) {
            setupVertexAttributes(object, material, program, geometry);
            if (index !== null) gl.bindBuffer(34963, attributes1.get(index).buffer);
        }
    }
    function createVertexArrayObject() {
        if (capabilities.isWebGL2) return gl.createVertexArray();
        return extension1.createVertexArrayOES();
    }
    function bindVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
        return extension1.bindVertexArrayOES(vao);
    }
    function deleteVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
        return extension1.deleteVertexArrayOES(vao);
    }
    function getBindingState(geometry, program, material) {
        const wireframe = material.wireframe === true;
        let programMap = bindingStates[geometry.id];
        if (programMap === undefined) {
            programMap = {
            };
            bindingStates[geometry.id] = programMap;
        }
        let stateMap = programMap[program.id];
        if (stateMap === undefined) {
            stateMap = {
            };
            programMap[program.id] = stateMap;
        }
        let state = stateMap[wireframe];
        if (state === undefined) {
            state = createBindingState(createVertexArrayObject());
            stateMap[wireframe] = state;
        }
        return state;
    }
    function createBindingState(vao) {
        const newAttributes = [];
        const enabledAttributes = [];
        const attributeDivisors = [];
        for(let i = 0; i < maxVertexAttributes; i++){
            newAttributes[i] = 0;
            enabledAttributes[i] = 0;
            attributeDivisors[i] = 0;
        }
        return {
            // for backward compatibility on non-VAO support browser
            geometry: null,
            program: null,
            wireframe: false,
            newAttributes: newAttributes,
            enabledAttributes: enabledAttributes,
            attributeDivisors: attributeDivisors,
            object: vao,
            attributes: {
            },
            index: null
        };
    }
    function needsUpdate(geometry, index) {
        const cachedAttributes = currentState.attributes;
        const geometryAttributes = geometry.attributes;
        let attributesNum = 0;
        for(const key in geometryAttributes){
            const cachedAttribute = cachedAttributes[key];
            const geometryAttribute = geometryAttributes[key];
            if (cachedAttribute === undefined) return true;
            if (cachedAttribute.attribute !== geometryAttribute) return true;
            if (cachedAttribute.data !== geometryAttribute.data) return true;
            attributesNum++;
        }
        if (currentState.attributesNum !== attributesNum) return true;
        if (currentState.index !== index) return true;
        return false;
    }
    function saveCache(geometry, index) {
        const cache = {
        };
        const attributes = geometry.attributes;
        let attributesNum = 0;
        for(const key in attributes){
            const attribute = attributes[key];
            const data = {
            };
            data.attribute = attribute;
            if (attribute.data) data.data = attribute.data;
            cache[key] = data;
            attributesNum++;
        }
        currentState.attributes = cache;
        currentState.attributesNum = attributesNum;
        currentState.index = index;
    }
    function initAttributes() {
        const newAttributes = currentState.newAttributes;
        for(let i = 0, il = newAttributes.length; i < il; i++)newAttributes[i] = 0;
    }
    function enableAttribute(attribute) {
        enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        const attributeDivisors = currentState.attributeDivisors;
        newAttributes[attribute] = 1;
        if (enabledAttributes[attribute] === 0) {
            gl.enableVertexAttribArray(attribute);
            enabledAttributes[attribute] = 1;
        }
        if (attributeDivisors[attribute] !== meshPerAttribute) {
            const extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');
            extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);
            attributeDivisors[attribute] = meshPerAttribute;
        }
    }
    function disableUnusedAttributes() {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        for(let i = 0, il = enabledAttributes.length; i < il; i++)if (enabledAttributes[i] !== newAttributes[i]) {
            gl.disableVertexAttribArray(i);
            enabledAttributes[i] = 0;
        }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset) {
        if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) gl.vertexAttribIPointer(index, size, type, stride, offset);
        else gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
    function setupVertexAttributes(object, material, program, geometry) {
        if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
            if (extensions.get('ANGLE_instanced_arrays') === null) return;
        }
        initAttributes();
        const geometryAttributes = geometry.attributes;
        const programAttributes = program.getAttributes();
        const materialDefaultAttributeValues = material.defaultAttributeValues;
        for(const name in programAttributes){
            const programAttribute = programAttributes[name];
            if (programAttribute.location >= 0) {
                let geometryAttribute = geometryAttributes[name];
                if (geometryAttribute === undefined) {
                    if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
                    if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;
                }
                if (geometryAttribute !== undefined) {
                    const normalized = geometryAttribute.normalized;
                    const size = geometryAttribute.itemSize;
                    const attribute = attributes1.get(geometryAttribute);
                    // TODO Attribute may not be available on context restore
                    if (attribute === undefined) continue;
                    const buffer = attribute.buffer;
                    const type = attribute.type;
                    const bytesPerElement = attribute.bytesPerElement;
                    if (geometryAttribute.isInterleavedBufferAttribute) {
                        const data = geometryAttribute.data;
                        const stride = data.stride;
                        const offset = geometryAttribute.offset;
                        if (data && data.isInstancedInterleavedBuffer) {
                            for(let i = 0; i < programAttribute.locationSize; i++)enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                        } else for(let i = 0; i < programAttribute.locationSize; i++)enableAttribute(programAttribute.location + i);
                        gl.bindBuffer(34962, buffer);
                        for(let i12 = 0; i12 < programAttribute.locationSize; i12++)vertexAttribPointer(programAttribute.location + i12, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i12) * bytesPerElement);
                    } else {
                        if (geometryAttribute.isInstancedBufferAttribute) {
                            for(let i = 0; i < programAttribute.locationSize; i++)enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                        } else for(let i = 0; i < programAttribute.locationSize; i++)enableAttribute(programAttribute.location + i);
                        gl.bindBuffer(34962, buffer);
                        for(let i13 = 0; i13 < programAttribute.locationSize; i13++)vertexAttribPointer(programAttribute.location + i13, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i13 * bytesPerElement);
                    }
                } else if (materialDefaultAttributeValues !== undefined) {
                    const value = materialDefaultAttributeValues[name];
                    if (value !== undefined) switch(value.length){
                        case 2:
                            gl.vertexAttrib2fv(programAttribute.location, value);
                            break;
                        case 3:
                            gl.vertexAttrib3fv(programAttribute.location, value);
                            break;
                        case 4:
                            gl.vertexAttrib4fv(programAttribute.location, value);
                            break;
                        default:
                            gl.vertexAttrib1fv(programAttribute.location, value);
                    }
                }
            }
        }
        disableUnusedAttributes();
    }
    function dispose() {
        reset();
        for(const geometryId in bindingStates){
            const programMap = bindingStates[geometryId];
            for(const programId in programMap){
                const stateMap = programMap[programId];
                for(const wireframe in stateMap){
                    deleteVertexArrayObject(stateMap[wireframe].object);
                    delete stateMap[wireframe];
                }
                delete programMap[programId];
            }
            delete bindingStates[geometryId];
        }
    }
    function releaseStatesOfGeometry(geometry) {
        if (bindingStates[geometry.id] === undefined) return;
        const programMap = bindingStates[geometry.id];
        for(const programId in programMap){
            const stateMap = programMap[programId];
            for(const wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[programId];
        }
        delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
        for(const geometryId in bindingStates){
            const programMap = bindingStates[geometryId];
            if (programMap[program.id] === undefined) continue;
            const stateMap = programMap[program.id];
            for(const wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[program.id];
        }
    }
    function reset() {
        resetDefaultState();
        if (currentState === defaultState) return;
        currentState = defaultState;
        bindVertexArrayObject(currentState.object);
    }
    // for backward-compatilibity
    function resetDefaultState() {
        defaultState.geometry = null;
        defaultState.program = null;
        defaultState.wireframe = false;
    }
    return {
        setup: setup,
        reset: reset,
        resetDefaultState: resetDefaultState,
        dispose: dispose,
        releaseStatesOfGeometry: releaseStatesOfGeometry,
        releaseStatesOfProgram: releaseStatesOfProgram,
        initAttributes: initAttributes,
        enableAttribute: enableAttribute,
        disableUnusedAttributes: disableUnusedAttributes
    };
}
function WebGLBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
        mode = value;
    }
    function render(start, count) {
        gl.drawArrays(mode, start, count);
        info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        let extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = 'drawArraysInstanced';
        } else {
            extension = extensions.get('ANGLE_instanced_arrays');
            methodName = 'drawArraysInstancedANGLE';
            if (extension === null) {
                console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
                return;
            }
        }
        extension[methodName](mode, start, count, primcount);
        info.update(count, mode, primcount);
    }
    //
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
}
function WebGLCapabilities(gl, extensions, parameters) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
        if (maxAnisotropy !== undefined) return maxAnisotropy;
        if (extensions.has('EXT_texture_filter_anisotropic') === true) {
            const extension = extensions.get('EXT_texture_filter_anisotropic');
            maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else maxAnisotropy = 0;
        return maxAnisotropy;
    }
    function getMaxPrecision(precision) {
        if (precision === 'highp') {
            if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) return 'highp';
            precision = 'mediump';
        }
        if (precision === 'mediump') {
            if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) return 'mediump';
        }
        return 'lowp';
    }
    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;
    let precision1 = parameters.precision !== undefined ? parameters.precision : 'highp';
    const maxPrecision = getMaxPrecision(precision1);
    if (maxPrecision !== precision1) {
        console.warn('THREE.WebGLRenderer:', precision1, 'not supported, using', maxPrecision, 'instead.');
        precision1 = maxPrecision;
    }
    const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const maxTextures = gl.getParameter(34930);
    const maxVertexTextures = gl.getParameter(35660);
    const maxTextureSize = gl.getParameter(3379);
    const maxCubemapSize = gl.getParameter(34076);
    const maxAttributes = gl.getParameter(34921);
    const maxVertexUniforms = gl.getParameter(36347);
    const maxVaryings = gl.getParameter(36348);
    const maxFragmentUniforms = gl.getParameter(36349);
    const vertexTextures = maxVertexTextures > 0;
    const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');
    const floatVertexTextures = vertexTextures && floatFragmentTextures;
    const maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
    return {
        isWebGL2: isWebGL2,
        drawBuffers: drawBuffers,
        getMaxAnisotropy: getMaxAnisotropy,
        getMaxPrecision: getMaxPrecision,
        precision: precision1,
        logarithmicDepthBuffer: logarithmicDepthBuffer,
        maxTextures: maxTextures,
        maxVertexTextures: maxVertexTextures,
        maxTextureSize: maxTextureSize,
        maxCubemapSize: maxCubemapSize,
        maxAttributes: maxAttributes,
        maxVertexUniforms: maxVertexUniforms,
        maxVaryings: maxVaryings,
        maxFragmentUniforms: maxFragmentUniforms,
        vertexTextures: vertexTextures,
        floatFragmentTextures: floatFragmentTextures,
        floatVertexTextures: floatVertexTextures,
        maxSamples: maxSamples
    };
}
function WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = {
        value: null,
        needsUpdate: false
    };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping, camera) {
        const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
        // run another frame in order to reset the state:
        numGlobalPlanes !== 0 || localClippingEnabled;
        localClippingEnabled = enableLocalClipping;
        globalState = projectPlanes(planes, camera, 0);
        numGlobalPlanes = planes.length;
        return enabled;
    };
    this.beginShadows = function() {
        renderingShadows = true;
        projectPlanes(null);
    };
    this.endShadows = function() {
        renderingShadows = false;
        resetGlobalState();
    };
    this.setState = function(material, camera, useCache) {
        const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
        const materialProperties = properties.get(material);
        if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
            // there's no local clipping
            if (renderingShadows) // there's no global clipping
            projectPlanes(null);
            else resetGlobalState();
        } else {
            const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
            let dstArray = materialProperties.clippingState || null;
            uniform.value = dstArray; // ensure unique state
            dstArray = projectPlanes(planes, camera, lGlobal, useCache);
            for(let i = 0; i !== lGlobal; ++i)dstArray[i] = globalState[i];
            materialProperties.clippingState = dstArray;
            this.numIntersection = clipIntersection ? this.numPlanes : 0;
            this.numPlanes += nGlobal;
        }
    };
    function resetGlobalState() {
        if (uniform.value !== globalState) {
            uniform.value = globalState;
            uniform.needsUpdate = numGlobalPlanes > 0;
        }
        scope.numPlanes = numGlobalPlanes;
        scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera, dstOffset, skipTransform) {
        const nPlanes = planes !== null ? planes.length : 0;
        let dstArray = null;
        if (nPlanes !== 0) {
            dstArray = uniform.value;
            if (skipTransform !== true || dstArray === null) {
                const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
                viewNormalMatrix.getNormalMatrix(viewMatrix);
                if (dstArray === null || dstArray.length < flatSize) dstArray = new Float32Array(flatSize);
                for(let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4){
                    plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
                    plane.normal.toArray(dstArray, i4);
                    dstArray[i4 + 3] = plane.constant;
                }
            }
            uniform.value = dstArray;
            uniform.needsUpdate = true;
        }
        scope.numPlanes = nPlanes;
        scope.numIntersection = 0;
        return dstArray;
    }
}
function WebGLCubeMaps(renderer) {
    let cubemaps = new WeakMap();
    function mapTextureMapping(texture, mapping) {
        if (mapping === EquirectangularReflectionMapping) texture.mapping = CubeReflectionMapping;
        else if (mapping === EquirectangularRefractionMapping) texture.mapping = CubeRefractionMapping;
        return texture;
    }
    function get(texture) {
        if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
            const mapping = texture.mapping;
            if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
                if (cubemaps.has(texture)) {
                    const cubemap = cubemaps.get(texture).texture;
                    return mapTextureMapping(cubemap, texture.mapping);
                } else {
                    const image = texture.image;
                    if (image && image.height > 0) {
                        const currentRenderTarget = renderer.getRenderTarget();
                        const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
                        renderTarget.fromEquirectangularTexture(renderer, texture);
                        cubemaps.set(texture, renderTarget);
                        renderer.setRenderTarget(currentRenderTarget);
                        texture.addEventListener('dispose', onTextureDispose);
                        return mapTextureMapping(renderTarget.texture, texture.mapping);
                    } else // image not yet ready. try the conversion next frame
                    return null;
                }
            }
        }
        return texture;
    }
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener('dispose', onTextureDispose);
        const cubemap = cubemaps.get(texture);
        if (cubemap !== undefined) {
            cubemaps.delete(texture);
            cubemap.dispose();
        }
    }
    function dispose() {
        cubemaps = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
class OrthographicCamera extends Camera {
    constructor(left2 = -1, right2 = 1, top2 = 1, bottom2 = -1, near4 = 0.1, far4 = 2000){
        super();
        this.type = 'OrthographicCamera';
        this.zoom = 1;
        this.view = null;
        this.left = left2;
        this.right = right2;
        this.top = top2;
        this.bottom = bottom2;
        this.near = near4;
        this.far = far4;
        this.updateProjectionMatrix();
    }
    copy(source13, recursive4) {
        super.copy(source13, recursive4);
        this.left = source13.left;
        this.right = source13.right;
        this.top = source13.top;
        this.bottom = source13.bottom;
        this.near = source13.near;
        this.far = source13.far;
        this.zoom = source13.zoom;
        this.view = source13.view === null ? null : Object.assign({
        }, source13.view);
        return this;
    }
    setViewOffset(fullWidth1, fullHeight1, x25, y26, width8, height8) {
        if (this.view === null) this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        };
        this.view.enabled = true;
        this.view.fullWidth = fullWidth1;
        this.view.fullHeight = fullHeight1;
        this.view.offsetX = x25;
        this.view.offsetY = y26;
        this.view.width = width8;
        this.view.height = height8;
        this.updateProjectionMatrix();
    }
    clearViewOffset() {
        if (this.view !== null) this.view.enabled = false;
        this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        const dx = (this.right - this.left) / (2 * this.zoom);
        const dy = (this.top - this.bottom) / (2 * this.zoom);
        const cx = (this.right + this.left) / 2;
        const cy = (this.top + this.bottom) / 2;
        let left = cx - dx;
        let right = cx + dx;
        let top = cy + dy;
        let bottom = cy - dy;
        if (this.view !== null && this.view.enabled) {
            const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
            const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            left += scaleW * this.view.offsetX;
            right = left + scaleW * this.view.width;
            top -= scaleH * this.view.offsetY;
            bottom = top - scaleH * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta5) {
        const data = super.toJSON(meta5);
        data.object.zoom = this.zoom;
        data.object.left = this.left;
        data.object.right = this.right;
        data.object.top = this.top;
        data.object.bottom = this.bottom;
        data.object.near = this.near;
        data.object.far = this.far;
        if (this.view !== null) data.object.view = Object.assign({
        }, this.view);
        return data;
    }
}
OrthographicCamera.prototype.isOrthographicCamera = true;
class RawShaderMaterial extends ShaderMaterial {
    constructor(parameters3){
        super(parameters3);
        this.type = 'RawShaderMaterial';
    }
}
RawShaderMaterial.prototype.isRawShaderMaterial = true;
const LOD_MIN = 4;
const LOD_MAX = 8;
const SIZE_MAX = Math.pow(2, LOD_MAX);
// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
const EXTRA_LOD_SIGMA = [
    0.125,
    0.215,
    0.35,
    0.446,
    0.526,
    0.582
];
const TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
const MAX_SAMPLES = 20;
const ENCODINGS = {
    [LinearEncoding]: 0,
    [sRGBEncoding]: 1
};
const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
const { _lodPlanes: _lodPlanes1 , _sizeLods: _sizeLods1 , _sigmas: _sigmas1  } = /*@__PURE__*/ _createPlanes();
const _clearColor = /*@__PURE__*/ new Color();
let _oldTarget = null;
// Golden Ratio
const PHI = (1 + Math.sqrt(5)) / 2;
const INV_PHI = 1 / PHI;
// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
const _axisDirections = [
    /*@__PURE__*/ new Vector3(1, 1, 1),
    /*@__PURE__*/ new Vector3(-1, 1, 1),
    /*@__PURE__*/ new Vector3(1, 1, -1),
    /*@__PURE__*/ new Vector3(-1, 1, -1),
    /*@__PURE__*/ new Vector3(0, PHI, INV_PHI),
    /*@__PURE__*/ new Vector3(0, PHI, -INV_PHI),
    /*@__PURE__*/ new Vector3(INV_PHI, 0, PHI),
    /*@__PURE__*/ new Vector3(-INV_PHI, 0, PHI),
    /*@__PURE__*/ new Vector3(PHI, INV_PHI, 0),
    /*@__PURE__*/ new Vector3(-PHI, INV_PHI, 0)
];
/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/ class PMREMGenerator {
    constructor(renderer4){
        this._renderer = renderer4;
        this._pingPongRenderTarget = null;
        this._blurMaterial = _getBlurShader(MAX_SAMPLES);
        this._equirectShader = null;
        this._cubemapShader = null;
        this._compileMaterial(this._blurMaterial);
    }
    /**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */ fromScene(scene3, sigma2 = 0, near5 = 0.1, far5 = 100) {
        _oldTarget = this._renderer.getRenderTarget();
        const cubeUVRenderTarget = this._allocateTargets();
        this._sceneToCubeUV(scene3, near5, far5, cubeUVRenderTarget);
        if (sigma2 > 0) this._blur(cubeUVRenderTarget, 0, 0, sigma2);
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
    }
    /**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */ fromEquirectangular(equirectangular) {
        return this._fromTexture(equirectangular);
    }
    /**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */ fromCubemap(cubemap) {
        return this._fromTexture(cubemap);
    }
    /**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ compileCubemapShader() {
        if (this._cubemapShader === null) {
            this._cubemapShader = _getCubemapShader();
            this._compileMaterial(this._cubemapShader);
        }
    }
    /**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ compileEquirectangularShader() {
        if (this._equirectShader === null) {
            this._equirectShader = _getEquirectShader();
            this._compileMaterial(this._equirectShader);
        }
    }
    /**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */ dispose() {
        this._blurMaterial.dispose();
        if (this._cubemapShader !== null) this._cubemapShader.dispose();
        if (this._equirectShader !== null) this._equirectShader.dispose();
        for(let i = 0; i < _lodPlanes1.length; i++)_lodPlanes1[i].dispose();
    }
    // private interface
    _cleanup(outputTarget) {
        this._pingPongRenderTarget.dispose();
        this._renderer.setRenderTarget(_oldTarget);
        outputTarget.scissorTest = false;
        _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
    _fromTexture(texture6) {
        _oldTarget = this._renderer.getRenderTarget();
        const cubeUVRenderTarget = this._allocateTargets(texture6);
        this._textureToCubeUV(texture6, cubeUVRenderTarget);
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
    }
    _allocateTargets(texture3) {
        const params = {
            magFilter: LinearFilter,
            minFilter: LinearFilter,
            generateMipmaps: false,
            type: HalfFloatType,
            format: RGBAFormat,
            encoding: LinearEncoding,
            depthBuffer: false
        };
        const cubeUVRenderTarget = _createRenderTarget(params);
        cubeUVRenderTarget.depthBuffer = texture3 ? false : true;
        this._pingPongRenderTarget = _createRenderTarget(params);
        return cubeUVRenderTarget;
    }
    _compileMaterial(material7) {
        const tmpMesh = new Mesh(_lodPlanes1[0], material7);
        this._renderer.compile(tmpMesh, _flatCamera);
    }
    _sceneToCubeUV(scene2, near6, far6, cubeUVRenderTarget4) {
        const fov = 90;
        const aspect = 1;
        const cubeCamera = new PerspectiveCamera(fov, aspect, near6, far6);
        const upSign = [
            1,
            -1,
            1,
            1,
            1,
            1
        ];
        const forwardSign = [
            1,
            1,
            1,
            -1,
            -1,
            -1
        ];
        const renderer = this._renderer;
        const originalAutoClear = renderer.autoClear;
        const toneMapping = renderer.toneMapping;
        renderer.getClearColor(_clearColor);
        renderer.toneMapping = NoToneMapping;
        renderer.autoClear = false;
        const backgroundMaterial = new MeshBasicMaterial({
            name: 'PMREM.Background',
            side: BackSide,
            depthWrite: false,
            depthTest: false
        });
        const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
        let useSolidColor = false;
        const background = scene2.background;
        if (background) {
            if (background.isColor) {
                backgroundMaterial.color.copy(background);
                scene2.background = null;
                useSolidColor = true;
            }
        } else {
            backgroundMaterial.color.copy(_clearColor);
            useSolidColor = true;
        }
        for(let i = 0; i < 6; i++){
            const col = i % 3;
            if (col == 0) {
                cubeCamera.up.set(0, upSign[i], 0);
                cubeCamera.lookAt(forwardSign[i], 0, 0);
            } else if (col == 1) {
                cubeCamera.up.set(0, 0, upSign[i]);
                cubeCamera.lookAt(0, forwardSign[i], 0);
            } else {
                cubeCamera.up.set(0, upSign[i], 0);
                cubeCamera.lookAt(0, 0, forwardSign[i]);
            }
            _setViewport(cubeUVRenderTarget4, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);
            renderer.setRenderTarget(cubeUVRenderTarget4);
            if (useSolidColor) renderer.render(backgroundBox, cubeCamera);
            renderer.render(scene2, cubeCamera);
        }
        backgroundBox.geometry.dispose();
        backgroundBox.material.dispose();
        renderer.toneMapping = toneMapping;
        renderer.autoClear = originalAutoClear;
        scene2.background = background;
    }
    _setEncoding(uniform, texture4) {
        if (this._renderer.capabilities.isWebGL2 === true && texture4.format === RGBAFormat && texture4.type === UnsignedByteType && texture4.encoding === sRGBEncoding) uniform.value = ENCODINGS[LinearEncoding];
        else uniform.value = ENCODINGS[texture4.encoding];
    }
    _textureToCubeUV(texture5, cubeUVRenderTarget1) {
        const renderer = this._renderer;
        const isCubeTexture = texture5.mapping === CubeReflectionMapping || texture5.mapping === CubeRefractionMapping;
        if (isCubeTexture) {
            if (this._cubemapShader == null) this._cubemapShader = _getCubemapShader();
        } else if (this._equirectShader == null) this._equirectShader = _getEquirectShader();
        const material = isCubeTexture ? this._cubemapShader : this._equirectShader;
        const mesh = new Mesh(_lodPlanes1[0], material);
        const uniforms = material.uniforms;
        uniforms['envMap'].value = texture5;
        if (!isCubeTexture) uniforms['texelSize'].value.set(1 / texture5.image.width, 1 / texture5.image.height);
        this._setEncoding(uniforms['inputEncoding'], texture5);
        _setViewport(cubeUVRenderTarget1, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);
        renderer.setRenderTarget(cubeUVRenderTarget1);
        renderer.render(mesh, _flatCamera);
    }
    _applyPMREM(cubeUVRenderTarget2) {
        const renderer = this._renderer;
        const autoClear = renderer.autoClear;
        renderer.autoClear = false;
        for(let i = 1; i < TOTAL_LODS; i++){
            const sigma = Math.sqrt(_sigmas1[i] * _sigmas1[i] - _sigmas1[i - 1] * _sigmas1[i - 1]);
            const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];
            this._blur(cubeUVRenderTarget2, i - 1, i, sigma, poleAxis);
        }
        renderer.autoClear = autoClear;
    }
    /**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */ _blur(cubeUVRenderTarget3, lodIn, lodOut, sigma1, poleAxis2) {
        const pingPongRenderTarget = this._pingPongRenderTarget;
        this._halfBlur(cubeUVRenderTarget3, pingPongRenderTarget, lodIn, lodOut, sigma1, 'latitudinal', poleAxis2);
        this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget3, lodOut, lodOut, sigma1, 'longitudinal', poleAxis2);
    }
    _halfBlur(targetIn, targetOut, lodIn1, lodOut1, sigmaRadians, direction4, poleAxis1) {
        const renderer = this._renderer;
        const blurMaterial = this._blurMaterial;
        if (direction4 !== 'latitudinal' && direction4 !== 'longitudinal') console.error('blur direction must be either latitudinal or longitudinal!');
        // Number of standard deviations at which to cut off the discrete approximation.
        const STANDARD_DEVIATIONS = 3;
        const blurMesh = new Mesh(_lodPlanes1[lodOut1], blurMaterial);
        const blurUniforms = blurMaterial.uniforms;
        const pixels = _sizeLods1[lodIn1] - 1;
        const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
        const sigmaPixels = sigmaRadians / radiansPerPixel;
        const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
        if (samples > MAX_SAMPLES) console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
        const weights = [];
        let sum = 0;
        for(let i = 0; i < MAX_SAMPLES; ++i){
            const x = i / sigmaPixels;
            const weight = Math.exp(-x * x / 2);
            weights.push(weight);
            if (i == 0) sum += weight;
            else if (i < samples) sum += 2 * weight;
        }
        for(let i14 = 0; i14 < weights.length; i14++)weights[i14] = weights[i14] / sum;
        blurUniforms['envMap'].value = targetIn.texture;
        blurUniforms['samples'].value = samples;
        blurUniforms['weights'].value = weights;
        blurUniforms['latitudinal'].value = direction4 === 'latitudinal';
        if (poleAxis1) blurUniforms['poleAxis'].value = poleAxis1;
        blurUniforms['dTheta'].value = radiansPerPixel;
        blurUniforms['mipInt'].value = LOD_MAX - lodIn1;
        const outputSize = _sizeLods1[lodOut1];
        const x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);
        const y = (lodOut1 === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut1 > LOD_MAX - LOD_MIN ? lodOut1 - LOD_MAX + LOD_MIN : 0);
        _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
        renderer.setRenderTarget(targetOut);
        renderer.render(blurMesh, _flatCamera);
    }
}
function _createPlanes() {
    const _lodPlanes = [];
    const _sizeLods = [];
    const _sigmas = [];
    let lod = LOD_MAX;
    for(let i = 0; i < TOTAL_LODS; i++){
        const sizeLod = Math.pow(2, lod);
        _sizeLods.push(sizeLod);
        let sigma = 1 / sizeLod;
        if (i > LOD_MAX - LOD_MIN) sigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];
        else if (i == 0) sigma = 0;
        _sigmas.push(sigma);
        const texelSize = 1 / (sizeLod - 1);
        const min = -texelSize / 2;
        const max = 1 + texelSize / 2;
        const uv1 = [
            min,
            min,
            max,
            min,
            max,
            max,
            min,
            min,
            max,
            max,
            min,
            max
        ];
        const cubeFaces = 6;
        const vertices = 6;
        const positionSize = 3;
        const uvSize = 2;
        const faceIndexSize = 1;
        const position = new Float32Array(positionSize * vertices * cubeFaces);
        const uv = new Float32Array(uvSize * vertices * cubeFaces);
        const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
        for(let face = 0; face < cubeFaces; face++){
            const x = face % 3 * 2 / 3 - 1;
            const y = face > 2 ? 0 : -1;
            const coordinates = [
                x,
                y,
                0,
                x + 2 / 3,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y + 1,
                0
            ];
            position.set(coordinates, positionSize * vertices * face);
            uv.set(uv1, uvSize * vertices * face);
            const fill = [
                face,
                face,
                face,
                face,
                face,
                face
            ];
            faceIndex.set(fill, faceIndexSize * vertices * face);
        }
        const planes = new BufferGeometry();
        planes.setAttribute('position', new BufferAttribute(position, positionSize));
        planes.setAttribute('uv', new BufferAttribute(uv, uvSize));
        planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));
        _lodPlanes.push(planes);
        if (lod > LOD_MIN) lod--;
    }
    return {
        _lodPlanes,
        _sizeLods,
        _sigmas
    };
}
function _createRenderTarget(params) {
    const cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);
    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
}
function _setViewport(target, x, y, width, height) {
    target.viewport.set(x, y, width, height);
    target.scissor.set(x, y, width, height);
}
function _getBlurShader(maxSamples) {
    const weights = new Float32Array(maxSamples);
    const poleAxis = new Vector3(0, 1, 0);
    const shaderMaterial = new RawShaderMaterial({
        name: 'SphericalGaussianBlur',
        defines: {
            'n': maxSamples
        },
        uniforms: {
            'envMap': {
                value: null
            },
            'samples': {
                value: 1
            },
            'weights': {
                value: weights
            },
            'latitudinal': {
                value: false
            },
            'dTheta': {
                value: 0
            },
            'mipInt': {
                value: 0
            },
            'poleAxis': {
                value: poleAxis
            }
        },
        vertexShader: _getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${_getEncodings()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
        blending: NoBlending,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function _getEquirectShader() {
    const texelSize = new Vector2(1, 1);
    const shaderMaterial = new RawShaderMaterial({
        name: 'EquirectangularToCubeUV',
        uniforms: {
            'envMap': {
                value: null
            },
            'texelSize': {
                value: texelSize
            },
            'inputEncoding': {
                value: ENCODINGS[LinearEncoding]
            }
        },
        vertexShader: _getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${_getEncodings()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

			}
		`,
        blending: NoBlending,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function _getCubemapShader() {
    const shaderMaterial = new RawShaderMaterial({
        name: 'CubemapToCubeUV',
        uniforms: {
            'envMap': {
                value: null
            },
            'inputEncoding': {
                value: ENCODINGS[LinearEncoding]
            }
        },
        vertexShader: _getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${_getEncodings()}

			void main() {

				gl_FragColor = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) );

			}
		`,
        blending: NoBlending,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function _getCommonVertexShader() {
    return(/* glsl */ `

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`);
}
function _getEncodings() {
    return(/* glsl */ `

		uniform int inputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else {

				return sRGBToLinear( value );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`);
}
function WebGLCubeUVMaps(renderer) {
    let cubeUVmaps = new WeakMap();
    let pmremGenerator = null;
    function get(texture) {
        if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
            const mapping = texture.mapping;
            const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
            const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
            if (isEquirectMap || isCubeMap) {
                // equirect/cube map to cubeUV conversion
                if (cubeUVmaps.has(texture)) return cubeUVmaps.get(texture).texture;
                else {
                    const image = texture.image;
                    if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                        const currentRenderTarget = renderer.getRenderTarget();
                        if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);
                        const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                        cubeUVmaps.set(texture, renderTarget);
                        renderer.setRenderTarget(currentRenderTarget);
                        texture.addEventListener('dispose', onTextureDispose);
                        return renderTarget.texture;
                    } else // image not yet ready. try the conversion next frame
                    return null;
                }
            }
        }
        return texture;
    }
    function isCubeTextureComplete(image) {
        let count = 0;
        const length = 6;
        for(let i = 0; i < length; i++)if (image[i] !== undefined) count++;
        return count === length;
    }
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener('dispose', onTextureDispose);
        const cubemapUV = cubeUVmaps.get(texture);
        if (cubemapUV !== undefined) {
            cubeUVmaps.delete(texture);
            cubemapUV.dispose();
        }
    }
    function dispose() {
        cubeUVmaps = new WeakMap();
        if (pmremGenerator !== null) {
            pmremGenerator.dispose();
            pmremGenerator = null;
        }
    }
    return {
        get: get,
        dispose: dispose
    };
}
function WebGLExtensions(gl) {
    const extensions = {
    };
    function getExtension(name) {
        if (extensions[name] !== undefined) return extensions[name];
        let extension;
        switch(name){
            case 'WEBGL_depth_texture':
                extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
                break;
            case 'EXT_texture_filter_anisotropic':
                extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
                break;
            case 'WEBGL_compressed_texture_s3tc':
                extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
                break;
            case 'WEBGL_compressed_texture_pvrtc':
                extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
                break;
            default:
                extension = gl.getExtension(name);
        }
        extensions[name] = extension;
        return extension;
    }
    return {
        has: function(name) {
            return getExtension(name) !== null;
        },
        init: function(capabilities) {
            if (capabilities.isWebGL2) getExtension('EXT_color_buffer_float');
            else {
                getExtension('WEBGL_depth_texture');
                getExtension('OES_texture_float');
                getExtension('OES_texture_half_float');
                getExtension('OES_texture_half_float_linear');
                getExtension('OES_standard_derivatives');
                getExtension('OES_element_index_uint');
                getExtension('OES_vertex_array_object');
                getExtension('ANGLE_instanced_arrays');
            }
            getExtension('OES_texture_float_linear');
            getExtension('EXT_color_buffer_half_float');
            getExtension('WEBGL_multisampled_render_to_texture');
        },
        get: function(name) {
            const extension = getExtension(name);
            if (extension === null) console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');
            return extension;
        }
    };
}
function WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = {
    };
    const wireframeAttributes = new WeakMap();
    function onGeometryDispose(event) {
        const geometry = event.target;
        if (geometry.index !== null) attributes.remove(geometry.index);
        for(const name in geometry.attributes)attributes.remove(geometry.attributes[name]);
        geometry.removeEventListener('dispose', onGeometryDispose);
        delete geometries[geometry.id];
        const attribute = wireframeAttributes.get(geometry);
        if (attribute) {
            attributes.remove(attribute);
            wireframeAttributes.delete(geometry);
        }
        bindingStates.releaseStatesOfGeometry(geometry);
        if (geometry.isInstancedBufferGeometry === true) delete geometry._maxInstanceCount;
        //
        info.memory.geometries--;
    }
    function get(object, geometry) {
        if (geometries[geometry.id] === true) return geometry;
        geometry.addEventListener('dispose', onGeometryDispose);
        geometries[geometry.id] = true;
        info.memory.geometries++;
        return geometry;
    }
    function update(geometry) {
        const geometryAttributes = geometry.attributes;
        // Updating index buffer in VAO now. See WebGLBindingStates.
        for(const name in geometryAttributes)attributes.update(geometryAttributes[name], 34962);
        // morph targets
        const morphAttributes = geometry.morphAttributes;
        for(const name9 in morphAttributes){
            const array = morphAttributes[name9];
            for(let i = 0, l = array.length; i < l; i++)attributes.update(array[i], 34962);
        }
    }
    function updateWireframeAttribute(geometry) {
        const indices = [];
        const geometryIndex = geometry.index;
        const geometryPosition = geometry.attributes.position;
        let version = 0;
        if (geometryIndex !== null) {
            const array = geometryIndex.array;
            version = geometryIndex.version;
            for(let i = 0, l = array.length; i < l; i += 3){
                const a = array[i + 0];
                const b = array[i + 1];
                const c = array[i + 2];
                indices.push(a, b, b, c, c, a);
            }
        } else {
            const array = geometryPosition.array;
            version = geometryPosition.version;
            for(let i = 0, l = array.length / 3 - 1; i < l; i += 3){
                const a = i + 0;
                const b = i + 1;
                const c = i + 2;
                indices.push(a, b, b, c, c, a);
            }
        }
        const attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
        attribute.version = version;
        // Updating index buffer in VAO now. See WebGLBindingStates
        //
        const previousAttribute = wireframeAttributes.get(geometry);
        if (previousAttribute) attributes.remove(previousAttribute);
        //
        wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
        const currentAttribute = wireframeAttributes.get(geometry);
        if (currentAttribute) {
            const geometryIndex = geometry.index;
            if (geometryIndex !== null) // if the attribute is obsolete, create a new one
            {
                if (currentAttribute.version < geometryIndex.version) updateWireframeAttribute(geometry);
            }
        } else updateWireframeAttribute(geometry);
        return wireframeAttributes.get(geometry);
    }
    return {
        get: get,
        update: update,
        getWireframeAttribute: getWireframeAttribute
    };
}
function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
        mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
        type = value.type;
        bytesPerElement = value.bytesPerElement;
    }
    function render(start, count) {
        gl.drawElements(mode, count, type, start * bytesPerElement);
        info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        let extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = 'drawElementsInstanced';
        } else {
            extension = extensions.get('ANGLE_instanced_arrays');
            methodName = 'drawElementsInstancedANGLE';
            if (extension === null) {
                console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
                return;
            }
        }
        extension[methodName](mode, count, type, start * bytesPerElement, primcount);
        info.update(count, mode, primcount);
    }
    //
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
}
function WebGLInfo(gl) {
    const memory = {
        geometries: 0,
        textures: 0
    };
    const render = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
    };
    function update(count, mode, instanceCount) {
        render.calls++;
        switch(mode){
            case 4:
                render.triangles += instanceCount * (count / 3);
                break;
            case 1:
                render.lines += instanceCount * (count / 2);
                break;
            case 3:
                render.lines += instanceCount * (count - 1);
                break;
            case 2:
                render.lines += instanceCount * count;
                break;
            case 0:
                render.points += instanceCount * count;
                break;
            default:
                console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
                break;
        }
    }
    function reset() {
        render.frame++;
        render.calls = 0;
        render.triangles = 0;
        render.points = 0;
        render.lines = 0;
    }
    return {
        memory: memory,
        render: render,
        programs: null,
        autoReset: true,
        reset: reset,
        update: update
    };
}
class DataTexture2DArray extends Texture {
    constructor(data5 = null, width10 = 1, height10 = 1, depth4 = 1){
        super(null);
        this.image = {
            data: data5,
            width: width10,
            height: height10,
            depth: depth4
        };
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.wrapR = ClampToEdgeWrapping;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
DataTexture2DArray.prototype.isDataTexture2DArray = true;
function numericalSort(a, b) {
    return a[0] - b[0];
}
function absNumericalSort(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
}
function denormalize(morph, attribute) {
    let denominator = 1;
    const array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;
    if (array instanceof Int8Array) denominator = 127;
    else if (array instanceof Int16Array) denominator = 32767;
    else if (array instanceof Int32Array) denominator = 2147483647;
    else console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array);
    morph.divideScalar(denominator);
}
function WebGLMorphtargets(gl, capabilities, textures) {
    const influencesList = {
    };
    const morphInfluences = new Float32Array(8);
    const morphTextures = new WeakMap();
    const morph = new Vector3();
    const workInfluences = [];
    for(let i15 = 0; i15 < 8; i15++)workInfluences[i15] = [
        i15,
        0
    ];
    function update(object, geometry, material, program) {
        const objectInfluences = object.morphTargetInfluences;
        if (capabilities.isWebGL2 === true) {
            // instead of using attributes, the WebGL 2 code path encodes morph targets
            // into an array of data textures. Each layer represents a single morph target.
            const numberOfMorphTargets = geometry.morphAttributes.position.length;
            let entry = morphTextures.get(geometry);
            if (entry === undefined || entry.count !== numberOfMorphTargets) {
                if (entry !== undefined) entry.texture.dispose();
                const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
                const morphTargets = geometry.morphAttributes.position;
                const morphNormals = geometry.morphAttributes.normal || [];
                const numberOfVertices = geometry.attributes.position.count;
                const numberOfVertexData = hasMorphNormals === true ? 2 : 1; // (v,n) vs. (v)
                let width = numberOfVertices * numberOfVertexData;
                let height = 1;
                if (width > capabilities.maxTextureSize) {
                    height = Math.ceil(width / capabilities.maxTextureSize);
                    width = capabilities.maxTextureSize;
                }
                const buffer = new Float32Array(width * height * 4 * numberOfMorphTargets);
                const texture = new DataTexture2DArray(buffer, width, height, numberOfMorphTargets);
                texture.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)
                texture.type = FloatType;
                texture.needsUpdate = true;
                // fill buffer
                const vertexDataStride = numberOfVertexData * 4;
                for(let i = 0; i < numberOfMorphTargets; i++){
                    const morphTarget = morphTargets[i];
                    const morphNormal = morphNormals[i];
                    const offset = width * height * 4 * i;
                    for(let j = 0; j < morphTarget.count; j++){
                        morph.fromBufferAttribute(morphTarget, j);
                        if (morphTarget.normalized === true) denormalize(morph, morphTarget);
                        const stride = j * vertexDataStride;
                        buffer[offset + stride + 0] = morph.x;
                        buffer[offset + stride + 1] = morph.y;
                        buffer[offset + stride + 2] = morph.z;
                        buffer[offset + stride + 3] = 0;
                        if (hasMorphNormals === true) {
                            morph.fromBufferAttribute(morphNormal, j);
                            if (morphNormal.normalized === true) denormalize(morph, morphNormal);
                            buffer[offset + stride + 4] = morph.x;
                            buffer[offset + stride + 5] = morph.y;
                            buffer[offset + stride + 6] = morph.z;
                            buffer[offset + stride + 7] = 0;
                        }
                    }
                }
                entry = {
                    count: numberOfMorphTargets,
                    texture: texture,
                    size: new Vector2(width, height)
                };
                morphTextures.set(geometry, entry);
            }
            //
            let morphInfluencesSum = 0;
            for(let i = 0; i < objectInfluences.length; i++)morphInfluencesSum += objectInfluences[i];
            const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
            program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
            program.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);
            program.getUniforms().setValue(gl, 'morphTargetsTexture', entry.texture, textures);
            program.getUniforms().setValue(gl, 'morphTargetsTextureSize', entry.size);
        } else {
            // When object doesn't have morph target influences defined, we treat it as a 0-length array
            // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
            const length = objectInfluences === undefined ? 0 : objectInfluences.length;
            let influences = influencesList[geometry.id];
            if (influences === undefined || influences.length !== length) {
                // initialise list
                influences = [];
                for(let i = 0; i < length; i++)influences[i] = [
                    i,
                    0
                ];
                influencesList[geometry.id] = influences;
            }
            // Collect influences
            for(let i = 0; i < length; i++){
                const influence = influences[i];
                influence[0] = i;
                influence[1] = objectInfluences[i];
            }
            influences.sort(absNumericalSort);
            for(let i16 = 0; i16 < 8; i16++)if (i16 < length && influences[i16][1]) {
                workInfluences[i16][0] = influences[i16][0];
                workInfluences[i16][1] = influences[i16][1];
            } else {
                workInfluences[i16][0] = Number.MAX_SAFE_INTEGER;
                workInfluences[i16][1] = 0;
            }
            workInfluences.sort(numericalSort);
            const morphTargets = geometry.morphAttributes.position;
            const morphNormals = geometry.morphAttributes.normal;
            let morphInfluencesSum = 0;
            for(let i17 = 0; i17 < 8; i17++){
                const influence = workInfluences[i17];
                const index = influence[0];
                const value = influence[1];
                if (index !== Number.MAX_SAFE_INTEGER && value) {
                    if (morphTargets && geometry.getAttribute('morphTarget' + i17) !== morphTargets[index]) geometry.setAttribute('morphTarget' + i17, morphTargets[index]);
                    if (morphNormals && geometry.getAttribute('morphNormal' + i17) !== morphNormals[index]) geometry.setAttribute('morphNormal' + i17, morphNormals[index]);
                    morphInfluences[i17] = value;
                    morphInfluencesSum += value;
                } else {
                    if (morphTargets && geometry.hasAttribute('morphTarget' + i17) === true) geometry.deleteAttribute('morphTarget' + i17);
                    if (morphNormals && geometry.hasAttribute('morphNormal' + i17) === true) geometry.deleteAttribute('morphNormal' + i17);
                    morphInfluences[i17] = 0;
                }
            }
            // GLSL shader uses formula baseinfluence * base + sum(target * influence)
            // This allows us to switch between absolute morphs and relative morphs without changing shader code
            // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
            const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
            program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
            program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);
        }
    }
    return {
        update: update
    };
}
function WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = new WeakMap();
    function update(object) {
        const frame = info.render.frame;
        const geometry = object.geometry;
        const buffergeometry = geometries.get(object, geometry);
        // Update once per frame
        if (updateMap.get(buffergeometry) !== frame) {
            geometries.update(buffergeometry);
            updateMap.set(buffergeometry, frame);
        }
        if (object.isInstancedMesh) {
            if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) object.addEventListener('dispose', onInstancedMeshDispose);
            attributes.update(object.instanceMatrix, 34962);
            if (object.instanceColor !== null) attributes.update(object.instanceColor, 34962);
        }
        return buffergeometry;
    }
    function dispose() {
        updateMap = new WeakMap();
    }
    function onInstancedMeshDispose(event) {
        const instancedMesh = event.target;
        instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);
        attributes.remove(instancedMesh.instanceMatrix);
        if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
    }
    return {
        update: update,
        dispose: dispose
    };
}
class DataTexture3D extends Texture {
    constructor(data4 = null, width11 = 1, height11 = 1, depth5 = 1){
        // We're going to add .setXXX() methods for setting properties later.
        // Users can still set in DataTexture3D directly.
        //
        //	const texture = new THREE.DataTexture3D( data, width, height, depth );
        // 	texture.anisotropy = 16;
        //
        // See #14839
        super(null);
        this.image = {
            data: data4,
            width: width11,
            height: height11,
            depth: depth5
        };
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.wrapR = ClampToEdgeWrapping;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
DataTexture3D.prototype.isDataTexture3D = true;
/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */ const emptyTexture = new Texture();
const emptyTexture2dArray = new DataTexture2DArray();
const emptyTexture3d = new DataTexture3D();
const emptyCubeTexture = new CubeTexture();
// --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)
const arrayCacheF32 = [];
const arrayCacheI32 = [];
// Float32Array caches used for uploading Matrix uniforms
const mat4array = new Float32Array(16);
const mat3array = new Float32Array(9);
const mat2array = new Float32Array(4);
// Flattening for arrays of vectors and matrices
function flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0) return array;
    // unoptimized: ! isNaN( firstElem )
    // see http://jacksondunstan.com/articles/983
    const n = nBlocks * blockSize;
    let r = arrayCacheF32[n];
    if (r === undefined) {
        r = new Float32Array(n);
        arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
        firstElem.toArray(r, 0);
        for(let i = 1, offset = 0; i !== nBlocks; ++i){
            offset += blockSize;
            array[i].toArray(r, offset);
        }
    }
    return r;
}
function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for(let i = 0, l = a.length; i < l; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
function copyArray(a, b) {
    for(let i = 0, l = b.length; i < l; i++)a[i] = b[i];
}
// Texture unit allocation
function allocTexUnits(textures, n) {
    let r = arrayCacheI32[n];
    if (r === undefined) {
        r = new Int32Array(n);
        arrayCacheI32[n] = r;
    }
    for(let i = 0; i !== n; ++i)r[i] = textures.allocateTextureUnit();
    return r;
}
// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function setValueV1f(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
}
// Single float vector (from flat array or THREE.VectorN)
function setValueV2f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
            gl.uniform2f(this.addr, v.x, v.y);
            cache[0] = v.x;
            cache[1] = v.y;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform2fv(this.addr, v);
        copyArray(cache, v);
    }
}
function setValueV3f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
            gl.uniform3f(this.addr, v.x, v.y, v.z);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
        }
    } else if (v.r !== undefined) {
        if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
            gl.uniform3f(this.addr, v.r, v.g, v.b);
            cache[0] = v.r;
            cache[1] = v.g;
            cache[2] = v.b;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform3fv(this.addr, v);
        copyArray(cache, v);
    }
}
function setValueV4f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
            gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
            cache[3] = v.w;
        }
    } else {
        if (arraysEqual(cache, v)) return;
        gl.uniform4fv(this.addr, v);
        copyArray(cache, v);
    }
}
// Single matrix (from flat array or THREE.MatrixN)
function setValueM2(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if (arraysEqual(cache, v)) return;
        gl.uniformMatrix2fv(this.addr, false, v);
        copyArray(cache, v);
    } else {
        if (arraysEqual(cache, elements)) return;
        mat2array.set(elements);
        gl.uniformMatrix2fv(this.addr, false, mat2array);
        copyArray(cache, elements);
    }
}
function setValueM3(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if (arraysEqual(cache, v)) return;
        gl.uniformMatrix3fv(this.addr, false, v);
        copyArray(cache, v);
    } else {
        if (arraysEqual(cache, elements)) return;
        mat3array.set(elements);
        gl.uniformMatrix3fv(this.addr, false, mat3array);
        copyArray(cache, elements);
    }
}
function setValueM4(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if (arraysEqual(cache, v)) return;
        gl.uniformMatrix4fv(this.addr, false, v);
        copyArray(cache, v);
    } else {
        if (arraysEqual(cache, elements)) return;
        mat4array.set(elements);
        gl.uniformMatrix4fv(this.addr, false, mat4array);
        copyArray(cache, elements);
    }
}
// Single integer / boolean
function setValueV1i(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
}
// Single integer / boolean vector (from flat array)
function setValueV2i(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v)) return;
    gl.uniform2iv(this.addr, v);
    copyArray(cache, v);
}
function setValueV3i(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v)) return;
    gl.uniform3iv(this.addr, v);
    copyArray(cache, v);
}
function setValueV4i(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v)) return;
    gl.uniform4iv(this.addr, v);
    copyArray(cache, v);
}
// Single unsigned integer
function setValueV1ui(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
}
// Single unsigned integer vector (from flat array)
function setValueV2ui(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v)) return;
    gl.uniform2uiv(this.addr, v);
    copyArray(cache, v);
}
function setValueV3ui(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v)) return;
    gl.uniform3uiv(this.addr, v);
    copyArray(cache, v);
}
function setValueV4ui(gl, v) {
    const cache = this.cache;
    if (arraysEqual(cache, v)) return;
    gl.uniform4uiv(this.addr, v);
    copyArray(cache, v);
}
// Single texture (2D / Cube)
function setValueT1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.safeSetTexture2D(v || emptyTexture, unit);
}
function setValueT3D1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture3D(v || emptyTexture3d, unit);
}
function setValueT6(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.safeSetTextureCube(v || emptyCubeTexture, unit);
}
function setValueT2DArray1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture2DArray(v || emptyTexture2dArray, unit);
}
// Helper to pick the right setter for the singular case
function getSingularSetter(type) {
    switch(type){
        case 5126:
            return setValueV1f; // FLOAT
        case 35664:
            return setValueV2f; // _VEC2
        case 35665:
            return setValueV3f; // _VEC3
        case 35666:
            return setValueV4f; // _VEC4
        case 35674:
            return setValueM2; // _MAT2
        case 35675:
            return setValueM3; // _MAT3
        case 35676:
            return setValueM4; // _MAT4
        case 5124:
        case 35670:
            return setValueV1i; // INT, BOOL
        case 35667:
        case 35671:
            return setValueV2i; // _VEC2
        case 35668:
        case 35672:
            return setValueV3i; // _VEC3
        case 35669:
        case 35673:
            return setValueV4i; // _VEC4
        case 5125:
            return setValueV1ui; // UINT
        case 36294:
            return setValueV2ui; // _VEC2
        case 36295:
            return setValueV3ui; // _VEC3
        case 36296:
            return setValueV4ui; // _VEC4
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return setValueT1;
        case 35679:
        case 36299:
        case 36307:
            return setValueT3D1;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return setValueT6;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return setValueT2DArray1;
    }
}
// Array of scalars
function setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
}
// Array of vectors (from flat array or array of THREE.VectorN)
function setValueV2fArray(gl, v) {
    const data = flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
}
function setValueV3fArray(gl, v) {
    const data = flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
}
function setValueV4fArray(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
}
// Array of matrices (from flat array or array of THREE.MatrixN)
function setValueM2Array(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
}
function setValueM3Array(gl, v) {
    const data = flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
}
function setValueM4Array(gl, v) {
    const data = flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
}
// Array of integer / boolean
function setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
}
// Array of integer / boolean vectors (from flat array)
function setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
}
function setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
}
function setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
}
// Array of unsigned integer
function setValueV1uiArray(gl, v) {
    gl.uniform1uiv(this.addr, v);
}
// Array of unsigned integer vectors (from flat array)
function setValueV2uiArray(gl, v) {
    gl.uniform2uiv(this.addr, v);
}
function setValueV3uiArray(gl, v) {
    gl.uniform3uiv(this.addr, v);
}
function setValueV4uiArray(gl, v) {
    gl.uniform4uiv(this.addr, v);
}
// Array of textures (2D / 3D / Cube / 2DArray)
function setValueT1Array(gl, v, textures) {
    const n = v.length;
    const units = allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(let i = 0; i !== n; ++i)textures.safeSetTexture2D(v[i] || emptyTexture, units[i]);
}
function setValueT3DArray(gl, v, textures) {
    const n = v.length;
    const units = allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(let i = 0; i !== n; ++i)textures.setTexture3D(v[i] || emptyTexture3d, units[i]);
}
function setValueT6Array(gl, v, textures) {
    const n = v.length;
    const units = allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(let i = 0; i !== n; ++i)textures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);
}
function setValueT2DArrayArray(gl, v, textures) {
    const n = v.length;
    const units = allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(let i = 0; i !== n; ++i)textures.setTexture2DArray(v[i] || emptyTexture2dArray, units[i]);
}
// Helper to pick the right setter for a pure (bottom-level) array
function getPureArraySetter(type) {
    switch(type){
        case 5126:
            return setValueV1fArray; // FLOAT
        case 35664:
            return setValueV2fArray; // _VEC2
        case 35665:
            return setValueV3fArray; // _VEC3
        case 35666:
            return setValueV4fArray; // _VEC4
        case 35674:
            return setValueM2Array; // _MAT2
        case 35675:
            return setValueM3Array; // _MAT3
        case 35676:
            return setValueM4Array; // _MAT4
        case 5124:
        case 35670:
            return setValueV1iArray; // INT, BOOL
        case 35667:
        case 35671:
            return setValueV2iArray; // _VEC2
        case 35668:
        case 35672:
            return setValueV3iArray; // _VEC3
        case 35669:
        case 35673:
            return setValueV4iArray; // _VEC4
        case 5125:
            return setValueV1uiArray; // UINT
        case 36294:
            return setValueV2uiArray; // _VEC2
        case 36295:
            return setValueV3uiArray; // _VEC3
        case 36296:
            return setValueV4uiArray; // _VEC4
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return setValueT1Array;
        case 35679:
        case 36299:
        case 36307:
            return setValueT3DArray;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return setValueT6Array;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return setValueT2DArrayArray;
    }
}
// --- Uniform Classes ---
function SingleUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.setValue = getSingularSetter(activeInfo.type);
// this.path = activeInfo.name; // DEBUG
}
function PureArrayUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.size = activeInfo.size;
    this.setValue = getPureArraySetter(activeInfo.type);
// this.path = activeInfo.name; // DEBUG
}
PureArrayUniform.prototype.updateCache = function(data) {
    const cache = this.cache;
    if (data instanceof Float32Array && cache.length !== data.length) this.cache = new Float32Array(data.length);
    copyArray(cache, data);
};
function StructuredUniform(id) {
    this.id = id;
    this.seq = [];
    this.map = {
    };
}
StructuredUniform.prototype.setValue = function(gl, value, textures) {
    const seq = this.seq;
    for(let i = 0, n = seq.length; i !== n; ++i){
        const u = seq[i];
        u.setValue(gl, value[u.id], textures);
    }
};
// --- Top-level ---
// Parser - builds up the property tree from the path strings
const RePathPart = /(\w+)(\])?(\[|\.)?/g;
// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
}
function parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    // reset RegExp object, because of the early exit of a previous run
    RePathPart.lastIndex = 0;
    while(true){
        const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
        let id = match[1];
        const idIsIndex = match[2] === ']', subscript = match[3];
        if (idIsIndex) id = id | 0; // convert to integer
        if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {
            // bare name or "pure" bottom-level array "[0]" suffix
            addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
            break;
        } else {
            // step into inner node / create it in case it doesn't exist
            const map = container.map;
            let next = map[id];
            if (next === undefined) {
                next = new StructuredUniform(id);
                addUniform(container, next);
            }
            container = next;
        }
    }
}
// Root Container
function WebGLUniforms(gl, program) {
    this.seq = [];
    this.map = {
    };
    const n = gl.getProgramParameter(program, 35718);
    for(let i = 0; i < n; ++i){
        const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
        parseUniform(info, addr, this);
    }
}
WebGLUniforms.prototype.setValue = function(gl, name, value, textures) {
    const u = this.map[name];
    if (u !== undefined) u.setValue(gl, value, textures);
};
WebGLUniforms.prototype.setOptional = function(gl, object, name) {
    const v = object[name];
    if (v !== undefined) this.setValue(gl, name, v);
};
// Static interface
WebGLUniforms.upload = function(gl, seq, values, textures) {
    for(let i = 0, n = seq.length; i !== n; ++i){
        const u = seq[i], v = values[u.id];
        if (v.needsUpdate !== false) // note: always updating when .needsUpdate is undefined
        u.setValue(gl, v.value, textures);
    }
};
WebGLUniforms.seqWithValue = function(seq, values) {
    const r = [];
    for(let i = 0, n = seq.length; i !== n; ++i){
        const u = seq[i];
        if (u.id in values) r.push(u);
    }
    return r;
};
function WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
}
let programIdCount = 0;
function addLineNumbers(string) {
    const lines = string.split('\n');
    for(let i = 0; i < lines.length; i++)lines[i] = i + 1 + ': ' + lines[i];
    return lines.join('\n');
}
function getEncodingComponents(encoding) {
    switch(encoding){
        case LinearEncoding:
            return [
                'Linear',
                '( value )'
            ];
        case sRGBEncoding:
            return [
                'sRGB',
                '( value )'
            ];
        default:
            console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);
            return [
                'Linear',
                '( value )'
            ];
    }
}
function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, 35713);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === '') return '';
    // --enable-privileged-webgl-extension
    // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
    return type.toUpperCase() + '\n\n' + errors + '\n\n' + addLineNumbers(gl.getShaderSource(shader));
}
function getTexelDecodingFunction(functionName, encoding) {
    const components = getEncodingComponents(encoding);
    return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';
}
function getTexelEncodingFunction(functionName, encoding) {
    const components = getEncodingComponents(encoding);
    return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';
}
function getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch(toneMapping){
        case LinearToneMapping:
            toneMappingName = 'Linear';
            break;
        case ReinhardToneMapping:
            toneMappingName = 'Reinhard';
            break;
        case CineonToneMapping:
            toneMappingName = 'OptimizedCineon';
            break;
        case ACESFilmicToneMapping:
            toneMappingName = 'ACESFilmic';
            break;
        case CustomToneMapping:
            toneMappingName = 'Custom';
            break;
        default:
            console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);
            toneMappingName = 'Linear';
    }
    return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
}
function generateExtensions(parameters) {
    const chunks = [
        parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '',
        (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
        parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '',
        (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
    ];
    return chunks.filter(filterEmptyLine).join('\n');
}
function generateDefines(defines) {
    const chunks = [];
    for(const name in defines){
        const value = defines[name];
        if (value === false) continue;
        chunks.push('#define ' + name + ' ' + value);
    }
    return chunks.join('\n');
}
function fetchAttributeLocations(gl, program) {
    const attributes = {
    };
    const n = gl.getProgramParameter(program, 35721);
    for(let i = 0; i < n; i++){
        const info = gl.getActiveAttrib(program, i);
        const name = info.name;
        let locationSize = 1;
        if (info.type === 35674) locationSize = 2;
        if (info.type === 35675) locationSize = 3;
        if (info.type === 35676) locationSize = 4;
        // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
        attributes[name] = {
            type: info.type,
            location: gl.getAttribLocation(program, name),
            locationSize: locationSize
        };
    }
    return attributes;
}
function filterEmptyLine(string) {
    return string !== '';
}
function replaceLightNums(string, parameters) {
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
// Resolve Includes
const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function resolveIncludes(string) {
    return string.replace(includePattern, includeReplacer);
}
function includeReplacer(match, include) {
    const string = ShaderChunk[include];
    if (string === undefined) throw new Error('Can not resolve #include <' + include + '>');
    return resolveIncludes(string);
}
// Unroll Loops
const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function unrollLoops(string) {
    return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
}
function deprecatedLoopReplacer(match, start, end, snippet) {
    console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');
    return loopReplacer(match, start, end, snippet);
}
function loopReplacer(match, start, end, snippet) {
    let string = '';
    for(let i = parseInt(start); i < parseInt(end); i++)string += snippet.replace(/\[\s*i\s*\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);
    return string;
}
//
function generatePrecision(parameters) {
    let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';
    if (parameters.precision === 'highp') precisionstring += '\n#define HIGH_PRECISION';
    else if (parameters.precision === 'mediump') precisionstring += '\n#define MEDIUM_PRECISION';
    else if (parameters.precision === 'lowp') precisionstring += '\n#define LOW_PRECISION';
    return precisionstring;
}
function generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
    if (parameters.shadowMapType === PCFShadowMap) shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
    else if (parameters.shadowMapType === PCFSoftShadowMap) shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
    else if (parameters.shadowMapType === VSMShadowMap) shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
    return shadowMapTypeDefine;
}
function generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
    if (parameters.envMap) switch(parameters.envMapMode){
        case CubeReflectionMapping:
        case CubeRefractionMapping:
            envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
            break;
        case CubeUVReflectionMapping:
        case CubeUVRefractionMapping:
            envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
            break;
    }
    return envMapTypeDefine;
}
function generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
    if (parameters.envMap) switch(parameters.envMapMode){
        case CubeRefractionMapping:
        case CubeUVRefractionMapping:
            envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
            break;
    }
    return envMapModeDefine;
}
function generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';
    if (parameters.envMap) switch(parameters.combine){
        case MultiplyOperation:
            envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
            break;
        case MixOperation:
            envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
            break;
        case AddOperation:
            envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
            break;
    }
    return envMapBlendingDefine;
}
function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    // TODO Send this event to Three.js DevTools
    // console.log( 'WebGLProgram', cacheKey );
    const gl = renderer.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
    const customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);
    const customDefines = generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';
    if (parameters.isRawShaderMaterial) {
        prefixVertex = [
            customDefines
        ].filter(filterEmptyLine).join('\n');
        if (prefixVertex.length > 0) prefixVertex += '\n';
        prefixFragment = [
            customExtensions,
            customDefines
        ].filter(filterEmptyLine).join('\n');
        if (prefixFragment.length > 0) prefixFragment += '\n';
    } else {
        prefixVertex = [
            generatePrecision(parameters),
            '#define SHADER_NAME ' + parameters.shaderName,
            customDefines,
            parameters.instancing ? '#define USE_INSTANCING' : '',
            parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
            parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
            '#define MAX_BONES ' + parameters.maxBones,
            parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
            parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',
            parameters.map ? '#define USE_MAP' : '',
            parameters.envMap ? '#define USE_ENVMAP' : '',
            parameters.envMap ? '#define ' + envMapModeDefine : '',
            parameters.lightMap ? '#define USE_LIGHTMAP' : '',
            parameters.aoMap ? '#define USE_AOMAP' : '',
            parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
            parameters.bumpMap ? '#define USE_BUMPMAP' : '',
            parameters.normalMap ? '#define USE_NORMALMAP' : '',
            parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '',
            parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '',
            parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
            parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
            parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
            parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
            parameters.specularMap ? '#define USE_SPECULARMAP' : '',
            parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
            parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
            parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
            parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
            parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
            parameters.transmission ? '#define USE_TRANSMISSION' : '',
            parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
            parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',
            parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
            parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
            parameters.vertexTangents ? '#define USE_TANGENT' : '',
            parameters.vertexColors ? '#define USE_COLOR' : '',
            parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
            parameters.vertexUvs ? '#define USE_UV' : '',
            parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
            parameters.flatShading ? '#define FLAT_SHADED' : '',
            parameters.skinning ? '#define USE_SKINNING' : '',
            parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
            parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
            parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
            parameters.morphTargets && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '',
            parameters.morphTargets && parameters.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
            parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
            parameters.flipSided ? '#define FLIP_SIDED' : '',
            parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
            parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
            parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
            parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
            'uniform mat4 modelMatrix;',
            'uniform mat4 modelViewMatrix;',
            'uniform mat4 projectionMatrix;',
            'uniform mat4 viewMatrix;',
            'uniform mat3 normalMatrix;',
            'uniform vec3 cameraPosition;',
            'uniform bool isOrthographic;',
            '#ifdef USE_INSTANCING',
            '	attribute mat4 instanceMatrix;',
            '#endif',
            '#ifdef USE_INSTANCING_COLOR',
            '	attribute vec3 instanceColor;',
            '#endif',
            'attribute vec3 position;',
            'attribute vec3 normal;',
            'attribute vec2 uv;',
            '#ifdef USE_TANGENT',
            '	attribute vec4 tangent;',
            '#endif',
            '#if defined( USE_COLOR_ALPHA )',
            '	attribute vec4 color;',
            '#elif defined( USE_COLOR )',
            '	attribute vec3 color;',
            '#endif',
            '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',
            '	attribute vec3 morphTarget0;',
            '	attribute vec3 morphTarget1;',
            '	attribute vec3 morphTarget2;',
            '	attribute vec3 morphTarget3;',
            '	#ifdef USE_MORPHNORMALS',
            '		attribute vec3 morphNormal0;',
            '		attribute vec3 morphNormal1;',
            '		attribute vec3 morphNormal2;',
            '		attribute vec3 morphNormal3;',
            '	#else',
            '		attribute vec3 morphTarget4;',
            '		attribute vec3 morphTarget5;',
            '		attribute vec3 morphTarget6;',
            '		attribute vec3 morphTarget7;',
            '	#endif',
            '#endif',
            '#ifdef USE_SKINNING',
            '	attribute vec4 skinIndex;',
            '	attribute vec4 skinWeight;',
            '#endif',
            '\n'
        ].filter(filterEmptyLine).join('\n');
        prefixFragment = [
            customExtensions,
            generatePrecision(parameters),
            '#define SHADER_NAME ' + parameters.shaderName,
            customDefines,
            parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
            parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',
            parameters.map ? '#define USE_MAP' : '',
            parameters.matcap ? '#define USE_MATCAP' : '',
            parameters.envMap ? '#define USE_ENVMAP' : '',
            parameters.envMap ? '#define ' + envMapTypeDefine : '',
            parameters.envMap ? '#define ' + envMapModeDefine : '',
            parameters.envMap ? '#define ' + envMapBlendingDefine : '',
            parameters.lightMap ? '#define USE_LIGHTMAP' : '',
            parameters.aoMap ? '#define USE_AOMAP' : '',
            parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
            parameters.bumpMap ? '#define USE_BUMPMAP' : '',
            parameters.normalMap ? '#define USE_NORMALMAP' : '',
            parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '',
            parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '',
            parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
            parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
            parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
            parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
            parameters.specularMap ? '#define USE_SPECULARMAP' : '',
            parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
            parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
            parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
            parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
            parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
            parameters.alphaTest ? '#define USE_ALPHATEST' : '',
            parameters.sheen ? '#define USE_SHEEN' : '',
            parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
            parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
            parameters.transmission ? '#define USE_TRANSMISSION' : '',
            parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
            parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',
            parameters.vertexTangents ? '#define USE_TANGENT' : '',
            parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
            parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
            parameters.vertexUvs ? '#define USE_UV' : '',
            parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
            parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
            parameters.flatShading ? '#define FLAT_SHADED' : '',
            parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
            parameters.flipSided ? '#define FLIP_SIDED' : '',
            parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
            parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
            parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
            parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
            parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
            (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '',
            'uniform mat4 viewMatrix;',
            'uniform vec3 cameraPosition;',
            'uniform bool isOrthographic;',
            parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '',
            parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '',
            parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '',
            parameters.dithering ? '#define DITHERING' : '',
            parameters.format === RGBFormat ? '#define OPAQUE' : '',
            ShaderChunk['encodings_pars_fragment'],
            parameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '',
            parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '',
            parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '',
            parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '',
            parameters.specularColorMap ? getTexelDecodingFunction('specularColorMapTexelToLinear', parameters.specularColorMapEncoding) : '',
            parameters.sheenColorMap ? getTexelDecodingFunction('sheenColorMapTexelToLinear', parameters.sheenColorMapEncoding) : '',
            parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '',
            getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding),
            parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',
            '\n'
        ].filter(filterEmptyLine).join('\n');
    }
    vertexShader = resolveIncludes(vertexShader);
    vertexShader = replaceLightNums(vertexShader, parameters);
    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = resolveIncludes(fragmentShader);
    fragmentShader = replaceLightNums(fragmentShader, parameters);
    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = unrollLoops(vertexShader);
    fragmentShader = unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
        // GLSL 3.0 conversion for built-in materials and ShaderMaterial
        versionString = '#version 300 es\n';
        prefixVertex = [
            'precision mediump sampler2DArray;',
            '#define attribute in',
            '#define varying out',
            '#define texture2D texture'
        ].join('\n') + '\n' + prefixVertex;
        prefixFragment = [
            '#define varying in',
            parameters.glslVersion === GLSL3 ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
            parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor',
            '#define gl_FragDepthEXT gl_FragDepth',
            '#define texture2D texture',
            '#define textureCube texture',
            '#define texture2DProj textureProj',
            '#define texture2DLodEXT textureLod',
            '#define texture2DProjLodEXT textureProjLod',
            '#define textureCubeLodEXT textureLod',
            '#define texture2DGradEXT textureGrad',
            '#define texture2DProjGradEXT textureProjGrad',
            '#define textureCubeGradEXT textureGrad'
        ].join('\n') + '\n' + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    // console.log( '*VERTEX*', vertexGlsl );
    // console.log( '*FRAGMENT*', fragmentGlsl );
    const glVertexShader = WebGLShader(gl, 35633, vertexGlsl);
    const glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    // Force a particular attribute to index 0.
    if (parameters.index0AttributeName !== undefined) gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    else if (parameters.morphTargets === true) // programs with morphTargets displace position out of attribute 0
    gl.bindAttribLocation(program, 0, 'position');
    gl.linkProgram(program);
    // check for link errors
    if (renderer.debug.checkShaderErrors) {
        const programLog = gl.getProgramInfoLog(program).trim();
        const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
        const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
        let runnable = true;
        let haveDiagnostics = true;
        if (gl.getProgramParameter(program, 35714) === false) {
            runnable = false;
            const vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');
            const fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');
            console.error('THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' + 'VALIDATE_STATUS ' + gl.getProgramParameter(program, 35715) + '\n\n' + 'Program Info Log: ' + programLog + '\n' + vertexErrors + '\n' + fragmentErrors);
        } else if (programLog !== '') console.warn('THREE.WebGLProgram: Program Info Log:', programLog);
        else if (vertexLog === '' || fragmentLog === '') haveDiagnostics = false;
        if (haveDiagnostics) this.diagnostics = {
            runnable: runnable,
            programLog: programLog,
            vertexShader: {
                log: vertexLog,
                prefix: prefixVertex
            },
            fragmentShader: {
                log: fragmentLog,
                prefix: prefixFragment
            }
        };
    }
    // Clean up
    // Crashes in iOS9 and iOS10. #18402
    // gl.detachShader( program, glVertexShader );
    // gl.detachShader( program, glFragmentShader );
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    // set up caching for uniform locations
    let cachedUniforms;
    this.getUniforms = function() {
        if (cachedUniforms === undefined) cachedUniforms = new WebGLUniforms(gl, program);
        return cachedUniforms;
    };
    // set up caching for attribute locations
    let cachedAttributes;
    this.getAttributes = function() {
        if (cachedAttributes === undefined) cachedAttributes = fetchAttributeLocations(gl, program);
        return cachedAttributes;
    };
    // free resource
    this.destroy = function() {
        bindingStates.releaseStatesOfProgram(this);
        gl.deleteProgram(program);
        this.program = undefined;
    };
    //
    this.name = parameters.shaderName;
    this.id = programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
}
let _id = 0;
class WebGLShaderCache {
    constructor(){
        this.shaderCache = new Map();
        this.materialCache = new Map();
    }
    update(material2) {
        const vertexShader = material2.vertexShader;
        const fragmentShader = material2.fragmentShader;
        const vertexShaderStage = this._getShaderStage(vertexShader);
        const fragmentShaderStage = this._getShaderStage(fragmentShader);
        const materialShaders = this._getShaderCacheForMaterial(material2);
        if (materialShaders.has(vertexShaderStage) === false) {
            materialShaders.add(vertexShaderStage);
            vertexShaderStage.usedTimes++;
        }
        if (materialShaders.has(fragmentShaderStage) === false) {
            materialShaders.add(fragmentShaderStage);
            fragmentShaderStage.usedTimes++;
        }
        return this;
    }
    remove(material3) {
        const materialShaders = this.materialCache.get(material3);
        for (const shaderStage of materialShaders){
            shaderStage.usedTimes--;
            if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage);
        }
        this.materialCache.delete(material3);
        return this;
    }
    getVertexShaderID(material4) {
        return this._getShaderStage(material4.vertexShader).id;
    }
    getFragmentShaderID(material5) {
        return this._getShaderStage(material5.fragmentShader).id;
    }
    dispose() {
        this.shaderCache.clear();
        this.materialCache.clear();
    }
    _getShaderCacheForMaterial(material6) {
        const cache = this.materialCache;
        if (cache.has(material6) === false) cache.set(material6, new Set());
        return cache.get(material6);
    }
    _getShaderStage(code) {
        const cache = this.shaderCache;
        if (cache.has(code) === false) {
            const stage = new WebGLShaderStage();
            cache.set(code, stage);
        }
        return cache.get(code);
    }
}
class WebGLShaderStage {
    constructor(){
        this.id = _id++;
        this.usedTimes = 0;
    }
}
function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
    const _programLayers = new Layers();
    const _customShaders = new WebGLShaderCache();
    const programs = [];
    const isWebGL2 = capabilities.isWebGL2;
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const floatVertexTextures = capabilities.floatVertexTextures;
    const maxVertexUniforms = capabilities.maxVertexUniforms;
    const vertexTextures = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
        MeshDepthMaterial: 'depth',
        MeshDistanceMaterial: 'distanceRGBA',
        MeshNormalMaterial: 'normal',
        MeshBasicMaterial: 'basic',
        MeshLambertMaterial: 'lambert',
        MeshPhongMaterial: 'phong',
        MeshToonMaterial: 'toon',
        MeshStandardMaterial: 'physical',
        MeshPhysicalMaterial: 'physical',
        MeshMatcapMaterial: 'matcap',
        LineBasicMaterial: 'basic',
        LineDashedMaterial: 'dashed',
        PointsMaterial: 'points',
        ShadowMaterial: 'shadow',
        SpriteMaterial: 'sprite'
    };
    function getMaxBones(object) {
        const skeleton = object.skeleton;
        const bones = skeleton.bones;
        if (floatVertexTextures) return 1024;
        else {
            // default for when object is not specified
            // ( for example when prebuilding shader to be used with multiple objects )
            //
            //  - leave some extra space for other uniforms
            //  - limit here is ANGLE's 254 max uniform vectors
            //    (up to 54 should be safe)
            const nVertexUniforms = maxVertexUniforms;
            const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
            const maxBones = Math.min(nVertexMatrices, bones.length);
            if (maxBones < bones.length) {
                console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');
                return 0;
            }
            return maxBones;
        }
    }
    function getTextureEncodingFromMap(map) {
        let encoding;
        if (map && map.isTexture) encoding = map.encoding;
        else if (map && map.isWebGLRenderTarget) {
            console.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\'t use render targets as textures. Use their .texture property instead.');
            encoding = map.texture.encoding;
        } else encoding = LinearEncoding;
        if (isWebGL2 && map && map.isTexture && map.format === RGBAFormat && map.type === UnsignedByteType && map.encoding === sRGBEncoding) encoding = LinearEncoding; // disable inline decode for sRGB textures in WebGL 2
        return encoding;
    }
    function getParameters(material, lights, shadows, scene, object) {
        const fog = scene.fog;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const shaderID = shaderIDs[material.type];
        // heuristics to create shader parameters according to lights in the scene
        // (not to blow over maxLights budget)
        const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;
        if (material.precision !== null) {
            precision = capabilities.getMaxPrecision(material.precision);
            if (precision !== material.precision) console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');
        }
        let vertexShader, fragmentShader;
        let customVertexShaderID, customFragmentShaderID;
        if (shaderID) {
            const shader = ShaderLib[shaderID];
            vertexShader = shader.vertexShader;
            fragmentShader = shader.fragmentShader;
        } else {
            vertexShader = material.vertexShader;
            fragmentShader = material.fragmentShader;
            _customShaders.update(material);
            customVertexShaderID = _customShaders.getVertexShaderID(material);
            customFragmentShaderID = _customShaders.getFragmentShaderID(material);
        }
        const currentRenderTarget = renderer.getRenderTarget();
        const useAlphaTest = material.alphaTest > 0;
        const useClearcoat = material.clearcoat > 0;
        const parameters = {
            isWebGL2: isWebGL2,
            shaderID: shaderID,
            shaderName: material.type,
            vertexShader: vertexShader,
            fragmentShader: fragmentShader,
            defines: material.defines,
            customVertexShaderID: customVertexShaderID,
            customFragmentShaderID: customFragmentShaderID,
            isRawShaderMaterial: material.isRawShaderMaterial === true,
            glslVersion: material.glslVersion,
            precision: precision,
            instancing: object.isInstancedMesh === true,
            instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
            supportsVertexTextures: vertexTextures,
            outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,
            map: !!material.map,
            mapEncoding: getTextureEncodingFromMap(material.map),
            matcap: !!material.matcap,
            matcapEncoding: getTextureEncodingFromMap(material.matcap),
            envMap: !!envMap,
            envMapMode: envMap && envMap.mapping,
            envMapEncoding: getTextureEncodingFromMap(envMap),
            envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),
            lightMap: !!material.lightMap,
            lightMapEncoding: getTextureEncodingFromMap(material.lightMap),
            aoMap: !!material.aoMap,
            emissiveMap: !!material.emissiveMap,
            emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),
            bumpMap: !!material.bumpMap,
            normalMap: !!material.normalMap,
            objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
            tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
            clearcoat: useClearcoat,
            clearcoatMap: useClearcoat && !!material.clearcoatMap,
            clearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,
            clearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,
            displacementMap: !!material.displacementMap,
            roughnessMap: !!material.roughnessMap,
            metalnessMap: !!material.metalnessMap,
            specularMap: !!material.specularMap,
            specularIntensityMap: !!material.specularIntensityMap,
            specularColorMap: !!material.specularColorMap,
            specularColorMapEncoding: getTextureEncodingFromMap(material.specularColorMap),
            alphaMap: !!material.alphaMap,
            alphaTest: useAlphaTest,
            gradientMap: !!material.gradientMap,
            sheen: material.sheen > 0,
            sheenColorMap: !!material.sheenColorMap,
            sheenColorMapEncoding: getTextureEncodingFromMap(material.sheenColorMap),
            sheenRoughnessMap: !!material.sheenRoughnessMap,
            transmission: material.transmission > 0,
            transmissionMap: !!material.transmissionMap,
            thicknessMap: !!material.thicknessMap,
            combine: material.combine,
            vertexTangents: !!material.normalMap && !!object.geometry && !!object.geometry.attributes.tangent,
            vertexColors: material.vertexColors,
            vertexAlphas: material.vertexColors === true && !!object.geometry && !!object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,
            vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || !!material.sheenRoughnessMap,
            uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,
            fog: !!fog,
            useFog: material.fog,
            fogExp2: fog && fog.isFogExp2,
            flatShading: !!material.flatShading,
            sizeAttenuation: material.sizeAttenuation,
            logarithmicDepthBuffer: logarithmicDepthBuffer,
            skinning: object.isSkinnedMesh === true && maxBones > 0,
            maxBones: maxBones,
            useVertexTexture: floatVertexTextures,
            morphTargets: !!object.geometry && !!object.geometry.morphAttributes.position,
            morphNormals: !!object.geometry && !!object.geometry.morphAttributes.normal,
            morphTargetsCount: !!object.geometry && !!object.geometry.morphAttributes.position ? object.geometry.morphAttributes.position.length : 0,
            numDirLights: lights.directional.length,
            numPointLights: lights.point.length,
            numSpotLights: lights.spot.length,
            numRectAreaLights: lights.rectArea.length,
            numHemiLights: lights.hemi.length,
            numDirLightShadows: lights.directionalShadowMap.length,
            numPointLightShadows: lights.pointShadowMap.length,
            numSpotLightShadows: lights.spotShadowMap.length,
            numClippingPlanes: clipping.numPlanes,
            numClipIntersection: clipping.numIntersection,
            format: material.format,
            dithering: material.dithering,
            shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
            shadowMapType: renderer.shadowMap.type,
            toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
            physicallyCorrectLights: renderer.physicallyCorrectLights,
            premultipliedAlpha: material.premultipliedAlpha,
            doubleSided: material.side === DoubleSide,
            flipSided: material.side === BackSide,
            depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,
            index0AttributeName: material.index0AttributeName,
            extensionDerivatives: material.extensions && material.extensions.derivatives,
            extensionFragDepth: material.extensions && material.extensions.fragDepth,
            extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
            extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
            rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),
            rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),
            rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),
            customProgramCacheKey: material.customProgramCacheKey()
        };
        return parameters;
    }
    function getProgramCacheKey(parameters) {
        const array = [];
        if (parameters.shaderID) array.push(parameters.shaderID);
        else {
            array.push(parameters.customVertexShaderID);
            array.push(parameters.customFragmentShaderID);
        }
        if (parameters.defines !== undefined) for(const name in parameters.defines){
            array.push(name);
            array.push(parameters.defines[name]);
        }
        if (parameters.isRawShaderMaterial === false) {
            getProgramCacheKeyParameters(array, parameters);
            getProgramCacheKeyBooleans(array, parameters);
            array.push(renderer.outputEncoding);
        }
        array.push(parameters.customProgramCacheKey);
        return array.join();
    }
    function getProgramCacheKeyParameters(array, parameters) {
        array.push(parameters.precision);
        array.push(parameters.outputEncoding);
        array.push(parameters.mapEncoding);
        array.push(parameters.matcapEncoding);
        array.push(parameters.envMapMode);
        array.push(parameters.envMapEncoding);
        array.push(parameters.lightMapEncoding);
        array.push(parameters.emissiveMapEncoding);
        array.push(parameters.combine);
        array.push(parameters.vertexUvs);
        array.push(parameters.fogExp2);
        array.push(parameters.sizeAttenuation);
        array.push(parameters.maxBones);
        array.push(parameters.morphTargetsCount);
        array.push(parameters.numDirLights);
        array.push(parameters.numPointLights);
        array.push(parameters.numSpotLights);
        array.push(parameters.numHemiLights);
        array.push(parameters.numRectAreaLights);
        array.push(parameters.numDirLightShadows);
        array.push(parameters.numPointLightShadows);
        array.push(parameters.numSpotLightShadows);
        array.push(parameters.shadowMapType);
        array.push(parameters.toneMapping);
        array.push(parameters.numClippingPlanes);
        array.push(parameters.numClipIntersection);
        array.push(parameters.format);
        array.push(parameters.specularColorMapEncoding);
        array.push(parameters.sheenColorMapEncoding);
    }
    function getProgramCacheKeyBooleans(array, parameters) {
        _programLayers.disableAll();
        if (parameters.isWebGL2) _programLayers.enable(0);
        if (parameters.supportsVertexTextures) _programLayers.enable(1);
        if (parameters.instancing) _programLayers.enable(2);
        if (parameters.instancingColor) _programLayers.enable(3);
        if (parameters.map) _programLayers.enable(4);
        if (parameters.matcap) _programLayers.enable(5);
        if (parameters.envMap) _programLayers.enable(6);
        if (parameters.envMapCubeUV) _programLayers.enable(7);
        if (parameters.lightMap) _programLayers.enable(8);
        if (parameters.aoMap) _programLayers.enable(9);
        if (parameters.emissiveMap) _programLayers.enable(10);
        if (parameters.bumpMap) _programLayers.enable(11);
        if (parameters.normalMap) _programLayers.enable(12);
        if (parameters.objectSpaceNormalMap) _programLayers.enable(13);
        if (parameters.tangentSpaceNormalMap) _programLayers.enable(14);
        if (parameters.clearcoat) _programLayers.enable(15);
        if (parameters.clearcoatMap) _programLayers.enable(16);
        if (parameters.clearcoatRoughnessMap) _programLayers.enable(17);
        if (parameters.clearcoatNormalMap) _programLayers.enable(18);
        if (parameters.displacementMap) _programLayers.enable(19);
        if (parameters.specularMap) _programLayers.enable(20);
        if (parameters.roughnessMap) _programLayers.enable(21);
        if (parameters.metalnessMap) _programLayers.enable(22);
        if (parameters.gradientMap) _programLayers.enable(23);
        if (parameters.alphaMap) _programLayers.enable(24);
        if (parameters.alphaTest) _programLayers.enable(25);
        if (parameters.vertexColors) _programLayers.enable(26);
        if (parameters.vertexAlphas) _programLayers.enable(27);
        if (parameters.vertexUvs) _programLayers.enable(28);
        if (parameters.vertexTangents) _programLayers.enable(29);
        if (parameters.uvsVertexOnly) _programLayers.enable(30);
        if (parameters.fog) _programLayers.enable(31);
        array.push(_programLayers.mask);
        _programLayers.disableAll();
        if (parameters.useFog) _programLayers.enable(0);
        if (parameters.flatShading) _programLayers.enable(1);
        if (parameters.logarithmicDepthBuffer) _programLayers.enable(2);
        if (parameters.skinning) _programLayers.enable(3);
        if (parameters.useVertexTexture) _programLayers.enable(4);
        if (parameters.morphTargets) _programLayers.enable(5);
        if (parameters.morphNormals) _programLayers.enable(6);
        if (parameters.premultipliedAlpha) _programLayers.enable(7);
        if (parameters.shadowMapEnabled) _programLayers.enable(8);
        if (parameters.physicallyCorrectLights) _programLayers.enable(9);
        if (parameters.doubleSided) _programLayers.enable(10);
        if (parameters.flipSided) _programLayers.enable(11);
        if (parameters.depthPacking) _programLayers.enable(12);
        if (parameters.dithering) _programLayers.enable(13);
        if (parameters.specularIntensityMap) _programLayers.enable(14);
        if (parameters.specularColorMap) _programLayers.enable(15);
        if (parameters.transmission) _programLayers.enable(16);
        if (parameters.transmissionMap) _programLayers.enable(17);
        if (parameters.thicknessMap) _programLayers.enable(18);
        if (parameters.sheen) _programLayers.enable(19);
        if (parameters.sheenColorMap) _programLayers.enable(20);
        if (parameters.sheenRoughnessMap) _programLayers.enable(21);
        array.push(_programLayers.mask);
    }
    function getUniforms(material) {
        const shaderID = shaderIDs[material.type];
        let uniforms;
        if (shaderID) {
            const shader = ShaderLib[shaderID];
            uniforms = UniformsUtils.clone(shader.uniforms);
        } else uniforms = material.uniforms;
        return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
        let program;
        // Check if code has been already compiled
        for(let p = 0, pl = programs.length; p < pl; p++){
            const preexistingProgram = programs[p];
            if (preexistingProgram.cacheKey === cacheKey) {
                program = preexistingProgram;
                ++program.usedTimes;
                break;
            }
        }
        if (program === undefined) {
            program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
            programs.push(program);
        }
        return program;
    }
    function releaseProgram(program) {
        if (--program.usedTimes === 0) {
            // Remove from unordered set
            const i = programs.indexOf(program);
            programs[i] = programs[programs.length - 1];
            programs.pop();
            // Free WebGL resources
            program.destroy();
        }
    }
    function releaseShaderCache(material) {
        _customShaders.remove(material);
    }
    function dispose() {
        _customShaders.dispose();
    }
    return {
        getParameters: getParameters,
        getProgramCacheKey: getProgramCacheKey,
        getUniforms: getUniforms,
        acquireProgram: acquireProgram,
        releaseProgram: releaseProgram,
        releaseShaderCache: releaseShaderCache,
        // Exposed for resource monitoring & error feedback via renderer.info:
        programs: programs,
        dispose: dispose
    };
}
function WebGLProperties() {
    let properties = new WeakMap();
    function get(object) {
        let map = properties.get(object);
        if (map === undefined) {
            map = {
            };
            properties.set(object, map);
        }
        return map;
    }
    function remove(object) {
        properties.delete(object);
    }
    function update(object, key, value) {
        properties.get(object)[key] = value;
    }
    function dispose() {
        properties = new WeakMap();
    }
    return {
        get: get,
        remove: remove,
        update: update,
        dispose: dispose
    };
}
function painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.material.id !== b.material.id) return a.material.id - b.material.id;
    else if (a.z !== b.z) return a.z - b.z;
    else return a.id - b.id;
}
function reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.z !== b.z) return b.z - a.z;
    else return a.id - b.id;
}
function WebGLRenderList() {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transmissive = [];
    const transparent = [];
    function init() {
        renderItemsIndex = 0;
        opaque.length = 0;
        transmissive.length = 0;
        transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
        let renderItem = renderItems[renderItemsIndex];
        if (renderItem === undefined) {
            renderItem = {
                id: object.id,
                object: object,
                geometry: geometry,
                material: material,
                groupOrder: groupOrder,
                renderOrder: object.renderOrder,
                z: z,
                group: group
            };
            renderItems[renderItemsIndex] = renderItem;
        } else {
            renderItem.id = object.id;
            renderItem.object = object;
            renderItem.geometry = geometry;
            renderItem.material = material;
            renderItem.groupOrder = groupOrder;
            renderItem.renderOrder = object.renderOrder;
            renderItem.z = z;
            renderItem.group = group;
        }
        renderItemsIndex++;
        return renderItem;
    }
    function push(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0) transmissive.push(renderItem);
        else if (material.transparent === true) transparent.push(renderItem);
        else opaque.push(renderItem);
    }
    function unshift(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0) transmissive.unshift(renderItem);
        else if (material.transparent === true) transparent.unshift(renderItem);
        else opaque.unshift(renderItem);
    }
    function sort(customOpaqueSort, customTransparentSort) {
        if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
        if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
        if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    function finish() {
        // Clear references from inactive renderItems in the list
        for(let i = renderItemsIndex, il = renderItems.length; i < il; i++){
            const renderItem = renderItems[i];
            if (renderItem.id === null) break;
            renderItem.id = null;
            renderItem.object = null;
            renderItem.geometry = null;
            renderItem.material = null;
            renderItem.group = null;
        }
    }
    return {
        opaque: opaque,
        transmissive: transmissive,
        transparent: transparent,
        init: init,
        push: push,
        unshift: unshift,
        finish: finish,
        sort: sort
    };
}
function WebGLRenderLists() {
    let lists = new WeakMap();
    function get(scene, renderCallDepth) {
        let list;
        if (lists.has(scene) === false) {
            list = new WebGLRenderList();
            lists.set(scene, [
                list
            ]);
        } else if (renderCallDepth >= lists.get(scene).length) {
            list = new WebGLRenderList();
            lists.get(scene).push(list);
        } else list = lists.get(scene)[renderCallDepth];
        return list;
    }
    function dispose() {
        lists = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
function UniformsCache() {
    const lights = {
    };
    return {
        get: function(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            let uniforms;
            switch(light.type){
                case 'DirectionalLight':
                    uniforms = {
                        direction: new Vector3(),
                        color: new Color()
                    };
                    break;
                case 'SpotLight':
                    uniforms = {
                        position: new Vector3(),
                        direction: new Vector3(),
                        color: new Color(),
                        distance: 0,
                        coneCos: 0,
                        penumbraCos: 0,
                        decay: 0
                    };
                    break;
                case 'PointLight':
                    uniforms = {
                        position: new Vector3(),
                        color: new Color(),
                        distance: 0,
                        decay: 0
                    };
                    break;
                case 'HemisphereLight':
                    uniforms = {
                        direction: new Vector3(),
                        skyColor: new Color(),
                        groundColor: new Color()
                    };
                    break;
                case 'RectAreaLight':
                    uniforms = {
                        color: new Color(),
                        position: new Vector3(),
                        halfWidth: new Vector3(),
                        halfHeight: new Vector3()
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
function ShadowUniformsCache() {
    const lights = {
    };
    return {
        get: function(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            let uniforms;
            switch(light.type){
                case 'DirectionalLight':
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Vector2()
                    };
                    break;
                case 'SpotLight':
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Vector2()
                    };
                    break;
                case 'PointLight':
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new Vector2(),
                        shadowCameraNear: 1,
                        shadowCameraFar: 1000
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
let nextVersion = 0;
function shadowCastingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
}
function WebGLLights(extensions, capabilities) {
    const cache = new UniformsCache();
    const shadowCache = ShadowUniformsCache();
    const state = {
        version: 0,
        hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1
        },
        ambient: [
            0,
            0,
            0
        ],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotShadow: [],
        spotShadowMap: [],
        spotShadowMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: []
    };
    for(let i19 = 0; i19 < 9; i19++)state.probe.push(new Vector3());
    const vector3 = new Vector3();
    const matrix4 = new Matrix4();
    const matrix42 = new Matrix4();
    function setup(lights, physicallyCorrectLights) {
        let r = 0, g = 0, b = 0;
        for(let i = 0; i < 9; i++)state.probe[i].set(0, 0, 0);
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        let numDirectionalShadows = 0;
        let numPointShadows = 0;
        let numSpotShadows = 0;
        lights.sort(shadowCastingLightsFirst);
        // artist-friendly light intensity scaling factor
        const scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;
        for(let i18 = 0, l = lights.length; i18 < l; i18++){
            const light = lights[i18];
            const color = light.color;
            const intensity = light.intensity;
            const distance = light.distance;
            const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
            if (light.isAmbientLight) {
                r += color.r * intensity * scaleFactor;
                g += color.g * intensity * scaleFactor;
                b += color.b * intensity * scaleFactor;
            } else if (light.isLightProbe) for(let j = 0; j < 9; j++)state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
            else if (light.isDirectionalLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    state.directionalShadow[directionalLength] = shadowUniforms;
                    state.directionalShadowMap[directionalLength] = shadowMap;
                    state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
                    numDirectionalShadows++;
                }
                state.directional[directionalLength] = uniforms;
                directionalLength++;
            } else if (light.isSpotLight) {
                const uniforms = cache.get(light);
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
                uniforms.distance = distance;
                uniforms.coneCos = Math.cos(light.angle);
                uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
                uniforms.decay = light.decay;
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    state.spotShadow[spotLength] = shadowUniforms;
                    state.spotShadowMap[spotLength] = shadowMap;
                    state.spotShadowMatrix[spotLength] = light.shadow.matrix;
                    numSpotShadows++;
                }
                state.spot[spotLength] = uniforms;
                spotLength++;
            } else if (light.isRectAreaLight) {
                const uniforms = cache.get(light);
                // (a) intensity is the total visible light emitted
                //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
                // (b) intensity is the brightness of the light
                uniforms.color.copy(color).multiplyScalar(intensity);
                uniforms.halfWidth.set(light.width * 0.5, 0, 0);
                uniforms.halfHeight.set(0, light.height * 0.5, 0);
                state.rectArea[rectAreaLength] = uniforms;
                rectAreaLength++;
            } else if (light.isPointLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                uniforms.distance = light.distance;
                uniforms.decay = light.decay;
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    shadowUniforms.shadowCameraNear = shadow.camera.near;
                    shadowUniforms.shadowCameraFar = shadow.camera.far;
                    state.pointShadow[pointLength] = shadowUniforms;
                    state.pointShadowMap[pointLength] = shadowMap;
                    state.pointShadowMatrix[pointLength] = light.shadow.matrix;
                    numPointShadows++;
                }
                state.point[pointLength] = uniforms;
                pointLength++;
            } else if (light.isHemisphereLight) {
                const uniforms = cache.get(light);
                uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
                uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);
                state.hemi[hemiLength] = uniforms;
                hemiLength++;
            }
        }
        if (rectAreaLength > 0) {
            if (capabilities.isWebGL2) {
                // WebGL 2
                state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
                state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
            } else {
                // WebGL 1
                if (extensions.has('OES_texture_float_linear') === true) {
                    state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
                    state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
                } else if (extensions.has('OES_texture_half_float_linear') === true) {
                    state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
                    state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
                } else console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');
            }
        }
        state.ambient[0] = r;
        state.ambient[1] = g;
        state.ambient[2] = b;
        const hash = state.hash;
        if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
            state.directional.length = directionalLength;
            state.spot.length = spotLength;
            state.rectArea.length = rectAreaLength;
            state.point.length = pointLength;
            state.hemi.length = hemiLength;
            state.directionalShadow.length = numDirectionalShadows;
            state.directionalShadowMap.length = numDirectionalShadows;
            state.pointShadow.length = numPointShadows;
            state.pointShadowMap.length = numPointShadows;
            state.spotShadow.length = numSpotShadows;
            state.spotShadowMap.length = numSpotShadows;
            state.directionalShadowMatrix.length = numDirectionalShadows;
            state.pointShadowMatrix.length = numPointShadows;
            state.spotShadowMatrix.length = numSpotShadows;
            hash.directionalLength = directionalLength;
            hash.pointLength = pointLength;
            hash.spotLength = spotLength;
            hash.rectAreaLength = rectAreaLength;
            hash.hemiLength = hemiLength;
            hash.numDirectionalShadows = numDirectionalShadows;
            hash.numPointShadows = numPointShadows;
            hash.numSpotShadows = numSpotShadows;
            state.version = nextVersion++;
        }
    }
    function setupView(lights, camera) {
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        const viewMatrix = camera.matrixWorldInverse;
        for(let i = 0, l = lights.length; i < l; i++){
            const light = lights[i];
            if (light.isDirectionalLight) {
                const uniforms = state.directional[directionalLength];
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms.direction.sub(vector3);
                uniforms.direction.transformDirection(viewMatrix);
                directionalLength++;
            } else if (light.isSpotLight) {
                const uniforms = state.spot[spotLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms.direction.sub(vector3);
                uniforms.direction.transformDirection(viewMatrix);
                spotLength++;
            } else if (light.isRectAreaLight) {
                const uniforms = state.rectArea[rectAreaLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                // extract local rotation of light to derive width/height half vectors
                matrix42.identity();
                matrix4.copy(light.matrixWorld);
                matrix4.premultiply(viewMatrix);
                matrix42.extractRotation(matrix4);
                uniforms.halfWidth.set(light.width * 0.5, 0, 0);
                uniforms.halfHeight.set(0, light.height * 0.5, 0);
                uniforms.halfWidth.applyMatrix4(matrix42);
                uniforms.halfHeight.applyMatrix4(matrix42);
                rectAreaLength++;
            } else if (light.isPointLight) {
                const uniforms = state.point[pointLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                pointLength++;
            } else if (light.isHemisphereLight) {
                const uniforms = state.hemi[hemiLength];
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                uniforms.direction.transformDirection(viewMatrix);
                uniforms.direction.normalize();
                hemiLength++;
            }
        }
    }
    return {
        setup: setup,
        setupView: setupView,
        state: state
    };
}
function WebGLRenderState(extensions, capabilities) {
    const lights = new WebGLLights(extensions, capabilities);
    const lightsArray = [];
    const shadowsArray = [];
    function init() {
        lightsArray.length = 0;
        shadowsArray.length = 0;
    }
    function pushLight(light) {
        lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
        shadowsArray.push(shadowLight);
    }
    function setupLights(physicallyCorrectLights) {
        lights.setup(lightsArray, physicallyCorrectLights);
    }
    function setupLightsView(camera) {
        lights.setupView(lightsArray, camera);
    }
    const state = {
        lightsArray: lightsArray,
        shadowsArray: shadowsArray,
        lights: lights
    };
    return {
        init: init,
        state: state,
        setupLights: setupLights,
        setupLightsView: setupLightsView,
        pushLight: pushLight,
        pushShadow: pushShadow
    };
}
function WebGLRenderStates(extensions, capabilities) {
    let renderStates = new WeakMap();
    function get(scene, renderCallDepth = 0) {
        let renderState;
        if (renderStates.has(scene) === false) {
            renderState = new WebGLRenderState(extensions, capabilities);
            renderStates.set(scene, [
                renderState
            ]);
        } else if (renderCallDepth >= renderStates.get(scene).length) {
            renderState = new WebGLRenderState(extensions, capabilities);
            renderStates.get(scene).push(renderState);
        } else renderState = renderStates.get(scene)[renderCallDepth];
        return renderState;
    }
    function dispose() {
        renderStates = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
/**
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */ class MeshDepthMaterial extends Material {
    constructor(parameters5){
        super();
        this.type = 'MeshDepthMaterial';
        this.depthPacking = BasicDepthPacking;
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.fog = false;
        this.setValues(parameters5);
    }
    copy(source14) {
        super.copy(source14);
        this.depthPacking = source14.depthPacking;
        this.map = source14.map;
        this.alphaMap = source14.alphaMap;
        this.displacementMap = source14.displacementMap;
        this.displacementScale = source14.displacementScale;
        this.displacementBias = source14.displacementBias;
        this.wireframe = source14.wireframe;
        this.wireframeLinewidth = source14.wireframeLinewidth;
        return this;
    }
}
MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
/**
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */ class MeshDistanceMaterial extends Material {
    constructor(parameters4){
        super();
        this.type = 'MeshDistanceMaterial';
        this.referencePosition = new Vector3();
        this.nearDistance = 1;
        this.farDistance = 1000;
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.fog = false;
        this.setValues(parameters4);
    }
    copy(source15) {
        super.copy(source15);
        this.referencePosition.copy(source15.referencePosition);
        this.nearDistance = source15.nearDistance;
        this.farDistance = source15.farDistance;
        this.map = source15.map;
        this.alphaMap = source15.alphaMap;
        this.displacementMap = source15.displacementMap;
        this.displacementScale = source15.displacementScale;
        this.displacementBias = source15.displacementBias;
        return this;
    }
}
MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
const vertex1 = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
function WebGLShadowMap(_renderer, _objects, _capabilities) {
    let _frustum = new Frustum();
    const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterial = new MeshDepthMaterial({
        depthPacking: RGBADepthPacking
    }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {
    }, _maxTextureSize = _capabilities.maxTextureSize;
    const shadowSide = {
        0: BackSide,
        1: FrontSide,
        2: DoubleSide
    };
    const shadowMaterialVertical = new ShaderMaterial({
        defines: {
            VSM_SAMPLES: 8
        },
        uniforms: {
            shadow_pass: {
                value: null
            },
            resolution: {
                value: new Vector2()
            },
            radius: {
                value: 4
            }
        },
        vertexShader: vertex1,
        fragmentShader: fragment
    });
    const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    const fullScreenTri = new BufferGeometry();
    fullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([
        -1,
        -1,
        0.5,
        3,
        -1,
        0.5,
        -1,
        3,
        0.5
    ]), 3));
    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = PCFShadowMap;
    this.render = function(lights, scene, camera) {
        if (scope.enabled === false) return;
        if (scope.autoUpdate === false && scope.needsUpdate === false) return;
        if (lights.length === 0) return;
        const currentRenderTarget = _renderer.getRenderTarget();
        const activeCubeFace = _renderer.getActiveCubeFace();
        const activeMipmapLevel = _renderer.getActiveMipmapLevel();
        const _state = _renderer.state;
        // Set GL state for depth map.
        _state.setBlending(NoBlending);
        _state.buffers.color.setClear(1, 1, 1, 1);
        _state.buffers.depth.setTest(true);
        _state.setScissorTest(false);
        // render depth map
        for(let i = 0, il = lights.length; i < il; i++){
            const light = lights[i];
            const shadow = light.shadow;
            if (shadow === undefined) {
                console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
                continue;
            }
            if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
            _shadowMapSize.copy(shadow.mapSize);
            const shadowFrameExtents = shadow.getFrameExtents();
            _shadowMapSize.multiply(shadowFrameExtents);
            _viewportSize.copy(shadow.mapSize);
            if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
                if (_shadowMapSize.x > _maxTextureSize) {
                    _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
                    _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
                    shadow.mapSize.x = _viewportSize.x;
                }
                if (_shadowMapSize.y > _maxTextureSize) {
                    _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
                    _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
                    shadow.mapSize.y = _viewportSize.y;
                }
            }
            if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {
                const pars = {
                    minFilter: LinearFilter,
                    magFilter: LinearFilter,
                    format: RGBAFormat
                };
                shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.map.texture.name = light.name + '.shadowMap';
                shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.camera.updateProjectionMatrix();
            }
            if (shadow.map === null) {
                const pars = {
                    minFilter: NearestFilter,
                    magFilter: NearestFilter,
                    format: RGBAFormat
                };
                shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.map.texture.name = light.name + '.shadowMap';
                shadow.camera.updateProjectionMatrix();
            }
            _renderer.setRenderTarget(shadow.map);
            _renderer.clear();
            const viewportCount = shadow.getViewportCount();
            for(let vp = 0; vp < viewportCount; vp++){
                const viewport = shadow.getViewport(vp);
                _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
                _state.viewport(_viewport);
                shadow.updateMatrices(light, vp);
                _frustum = shadow.getFrustum();
                renderObject(scene, camera, shadow.camera, light, this.type);
            }
            // do blur pass for VSM
            if (!shadow.isPointLightShadow && this.type === VSMShadowMap) VSMPass(shadow, camera);
            shadow.needsUpdate = false;
        }
        scope.needsUpdate = false;
        _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera) {
        const geometry = _objects.update(fullScreenMesh);
        if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
            shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialVertical.needsUpdate = true;
            shadowMaterialHorizontal.needsUpdate = true;
        }
        // vertical pass
        shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
        shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialVertical.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.mapPass);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
        // horizontal pass
        shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
        shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    }
    function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {
        let result = null;
        const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
        if (customMaterial !== undefined) result = customMaterial;
        else result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
        if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0) {
            // in this case we need a unique material instance reflecting the
            // appropriate state
            const keyA = result.uuid, keyB = material.uuid;
            let materialsForVariant = _materialCache[keyA];
            if (materialsForVariant === undefined) {
                materialsForVariant = {
                };
                _materialCache[keyA] = materialsForVariant;
            }
            let cachedMaterial = materialsForVariant[keyB];
            if (cachedMaterial === undefined) {
                cachedMaterial = result.clone();
                materialsForVariant[keyB] = cachedMaterial;
            }
            result = cachedMaterial;
        }
        result.visible = material.visible;
        result.wireframe = material.wireframe;
        if (type === VSMShadowMap) result.side = material.shadowSide !== null ? material.shadowSide : material.side;
        else result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
        result.alphaMap = material.alphaMap;
        result.alphaTest = material.alphaTest;
        result.clipShadows = material.clipShadows;
        result.clippingPlanes = material.clippingPlanes;
        result.clipIntersection = material.clipIntersection;
        result.displacementMap = material.displacementMap;
        result.displacementScale = material.displacementScale;
        result.displacementBias = material.displacementBias;
        result.wireframeLinewidth = material.wireframeLinewidth;
        result.linewidth = material.linewidth;
        if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
            result.referencePosition.setFromMatrixPosition(light.matrixWorld);
            result.nearDistance = shadowCameraNear;
            result.farDistance = shadowCameraFar;
        }
        return result;
    }
    function renderObject(object, camera, shadowCamera, light, type) {
        if (object.visible === false) return;
        const visible = object.layers.test(camera.layers);
        if (visible && (object.isMesh || object.isLine || object.isPoints)) {
            if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
                object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
                const geometry = _objects.update(object);
                const material = object.material;
                if (Array.isArray(material)) {
                    const groups = geometry.groups;
                    for(let k = 0, kl = groups.length; k < kl; k++){
                        const group = groups[k];
                        const groupMaterial = material[group.materialIndex];
                        if (groupMaterial && groupMaterial.visible) {
                            const depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
                            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
                        }
                    }
                } else if (material.visible) {
                    const depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);
                    _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
                }
            }
        }
        const children = object.children;
        for(let i = 0, l = children.length; i < l; i++)renderObject(children[i], camera, shadowCamera, light, type);
    }
}
function WebGLState(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function ColorBuffer() {
        let locked = false;
        const color = new Vector4();
        let currentColorMask = null;
        const currentColorClear = new Vector4(0, 0, 0, 0);
        return {
            setMask: function(colorMask) {
                if (currentColorMask !== colorMask && !locked) {
                    gl.colorMask(colorMask, colorMask, colorMask, colorMask);
                    currentColorMask = colorMask;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(r, g, b, a, premultipliedAlpha) {
                if (premultipliedAlpha === true) {
                    r *= a;
                    g *= a;
                    b *= a;
                }
                color.set(r, g, b, a);
                if (currentColorClear.equals(color) === false) {
                    gl.clearColor(r, g, b, a);
                    currentColorClear.copy(color);
                }
            },
            reset: function() {
                locked = false;
                currentColorMask = null;
                currentColorClear.set(-1, 0, 0, 0); // set to invalid state
            }
        };
    }
    function DepthBuffer() {
        let locked = false;
        let currentDepthMask = null;
        let currentDepthFunc = null;
        let currentDepthClear = null;
        return {
            setTest: function(depthTest) {
                if (depthTest) enable(2929);
                else disable(2929);
            },
            setMask: function(depthMask) {
                if (currentDepthMask !== depthMask && !locked) {
                    gl.depthMask(depthMask);
                    currentDepthMask = depthMask;
                }
            },
            setFunc: function(depthFunc) {
                if (currentDepthFunc !== depthFunc) {
                    if (depthFunc) switch(depthFunc){
                        case NeverDepth:
                            gl.depthFunc(512);
                            break;
                        case AlwaysDepth:
                            gl.depthFunc(519);
                            break;
                        case LessDepth:
                            gl.depthFunc(513);
                            break;
                        case LessEqualDepth:
                            gl.depthFunc(515);
                            break;
                        case EqualDepth:
                            gl.depthFunc(514);
                            break;
                        case GreaterEqualDepth:
                            gl.depthFunc(518);
                            break;
                        case GreaterDepth:
                            gl.depthFunc(516);
                            break;
                        case NotEqualDepth:
                            gl.depthFunc(517);
                            break;
                        default:
                            gl.depthFunc(515);
                    }
                    else gl.depthFunc(515);
                    currentDepthFunc = depthFunc;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(depth) {
                if (currentDepthClear !== depth) {
                    gl.clearDepth(depth);
                    currentDepthClear = depth;
                }
            },
            reset: function() {
                locked = false;
                currentDepthMask = null;
                currentDepthFunc = null;
                currentDepthClear = null;
            }
        };
    }
    function StencilBuffer() {
        let locked = false;
        let currentStencilMask = null;
        let currentStencilFunc = null;
        let currentStencilRef = null;
        let currentStencilFuncMask = null;
        let currentStencilFail = null;
        let currentStencilZFail = null;
        let currentStencilZPass = null;
        let currentStencilClear = null;
        return {
            setTest: function(stencilTest) {
                if (!locked) {
                    if (stencilTest) enable(2960);
                    else disable(2960);
                }
            },
            setMask: function(stencilMask) {
                if (currentStencilMask !== stencilMask && !locked) {
                    gl.stencilMask(stencilMask);
                    currentStencilMask = stencilMask;
                }
            },
            setFunc: function(stencilFunc, stencilRef, stencilMask) {
                if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
                    gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
                    currentStencilFunc = stencilFunc;
                    currentStencilRef = stencilRef;
                    currentStencilFuncMask = stencilMask;
                }
            },
            setOp: function(stencilFail, stencilZFail, stencilZPass) {
                if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
                    gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
                    currentStencilFail = stencilFail;
                    currentStencilZFail = stencilZFail;
                    currentStencilZPass = stencilZPass;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(stencil) {
                if (currentStencilClear !== stencil) {
                    gl.clearStencil(stencil);
                    currentStencilClear = stencil;
                }
            },
            reset: function() {
                locked = false;
                currentStencilMask = null;
                currentStencilFunc = null;
                currentStencilRef = null;
                currentStencilFuncMask = null;
                currentStencilFail = null;
                currentStencilZFail = null;
                currentStencilZPass = null;
                currentStencilClear = null;
            }
        };
    }
    //
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    let enabledCapabilities = {
    };
    let currentBoundFramebuffers = {
    };
    let currentProgram = null;
    let currentBlendingEnabled = false;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(35661);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(7938);
    if (glVersion.indexOf('WebGL') !== -1) {
        version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 1;
    } else if (glVersion.indexOf('OpenGL ES') !== -1) {
        version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 2;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {
    };
    const scissorParam = gl.getParameter(3088);
    const viewportParam = gl.getParameter(2978);
    const currentScissor = new Vector4().fromArray(scissorParam);
    const currentViewport = new Vector4().fromArray(viewportParam);
    function createTexture(type, target, count) {
        const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
        const texture = gl.createTexture();
        gl.bindTexture(type, texture);
        gl.texParameteri(type, 10241, 9728);
        gl.texParameteri(type, 10240, 9728);
        for(let i = 0; i < count; i++)gl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);
        return texture;
    }
    const emptyTextures = {
    };
    emptyTextures[3553] = createTexture(3553, 3553, 1);
    emptyTextures[34067] = createTexture(34067, 34069, 6);
    // init
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(2929);
    depthBuffer.setFunc(LessEqualDepth);
    setFlipSided(false);
    setCullFace(CullFaceBack);
    enable(2884);
    setBlending(NoBlending);
    //
    function enable(id) {
        if (enabledCapabilities[id] !== true) {
            gl.enable(id);
            enabledCapabilities[id] = true;
        }
    }
    function disable(id) {
        if (enabledCapabilities[id] !== false) {
            gl.disable(id);
            enabledCapabilities[id] = false;
        }
    }
    function bindFramebuffer(target, framebuffer) {
        if (currentBoundFramebuffers[target] !== framebuffer) {
            gl.bindFramebuffer(target, framebuffer);
            currentBoundFramebuffers[target] = framebuffer;
            if (isWebGL2) {
                // 36009 is equivalent to 36160
                if (target === 36009) currentBoundFramebuffers[36160] = framebuffer;
                if (target === 36160) currentBoundFramebuffers[36009] = framebuffer;
            }
            return true;
        }
        return false;
    }
    function useProgram(program) {
        if (currentProgram !== program) {
            gl.useProgram(program);
            currentProgram = program;
            return true;
        }
        return false;
    }
    const equationToGL = {
        [AddEquation]: 32774,
        [SubtractEquation]: 32778,
        [ReverseSubtractEquation]: 32779
    };
    if (isWebGL2) {
        equationToGL[MinEquation] = 32775;
        equationToGL[MaxEquation] = 32776;
    } else {
        const extension = extensions.get('EXT_blend_minmax');
        if (extension !== null) {
            equationToGL[MinEquation] = extension.MIN_EXT;
            equationToGL[MaxEquation] = extension.MAX_EXT;
        }
    }
    const factorToGL = {
        [ZeroFactor]: 0,
        [OneFactor]: 1,
        [SrcColorFactor]: 768,
        [SrcAlphaFactor]: 770,
        [SrcAlphaSaturateFactor]: 776,
        [DstColorFactor]: 774,
        [DstAlphaFactor]: 772,
        [OneMinusSrcColorFactor]: 769,
        [OneMinusSrcAlphaFactor]: 771,
        [OneMinusDstColorFactor]: 775,
        [OneMinusDstAlphaFactor]: 773
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
        if (blending === NoBlending) {
            if (currentBlendingEnabled === true) {
                disable(3042);
                currentBlendingEnabled = false;
            }
            return;
        }
        if (currentBlendingEnabled === false) {
            enable(3042);
            currentBlendingEnabled = true;
        }
        if (blending !== CustomBlending) {
            if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
                if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
                    gl.blendEquation(32774);
                    currentBlendEquation = AddEquation;
                    currentBlendEquationAlpha = AddEquation;
                }
                if (premultipliedAlpha) switch(blending){
                    case NormalBlending:
                        gl.blendFuncSeparate(1, 771, 1, 771);
                        break;
                    case AdditiveBlending:
                        gl.blendFunc(1, 1);
                        break;
                    case SubtractiveBlending:
                        gl.blendFuncSeparate(0, 0, 769, 771);
                        break;
                    case MultiplyBlending:
                        gl.blendFuncSeparate(0, 768, 0, 770);
                        break;
                    default:
                        console.error('THREE.WebGLState: Invalid blending: ', blending);
                        break;
                }
                else switch(blending){
                    case NormalBlending:
                        gl.blendFuncSeparate(770, 771, 1, 771);
                        break;
                    case AdditiveBlending:
                        gl.blendFunc(770, 1);
                        break;
                    case SubtractiveBlending:
                        gl.blendFunc(0, 769);
                        break;
                    case MultiplyBlending:
                        gl.blendFunc(0, 768);
                        break;
                    default:
                        console.error('THREE.WebGLState: Invalid blending: ', blending);
                        break;
                }
                currentBlendSrc = null;
                currentBlendDst = null;
                currentBlendSrcAlpha = null;
                currentBlendDstAlpha = null;
                currentBlending = blending;
                currentPremultipledAlpha = premultipliedAlpha;
            }
            return;
        }
        // custom blending
        blendEquationAlpha = blendEquationAlpha || blendEquation;
        blendSrcAlpha = blendSrcAlpha || blendSrc;
        blendDstAlpha = blendDstAlpha || blendDst;
        if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
            gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
            currentBlendEquation = blendEquation;
            currentBlendEquationAlpha = blendEquationAlpha;
        }
        if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
            gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
            currentBlendSrc = blendSrc;
            currentBlendDst = blendDst;
            currentBlendSrcAlpha = blendSrcAlpha;
            currentBlendDstAlpha = blendDstAlpha;
        }
        currentBlending = blending;
        currentPremultipledAlpha = null;
    }
    function setMaterial(material, frontFaceCW) {
        material.side === DoubleSide ? disable(2884) : enable(2884);
        let flipSided = material.side === BackSide;
        if (frontFaceCW) flipSided = !flipSided;
        setFlipSided(flipSided);
        material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
        depthBuffer.setFunc(material.depthFunc);
        depthBuffer.setTest(material.depthTest);
        depthBuffer.setMask(material.depthWrite);
        colorBuffer.setMask(material.colorWrite);
        const stencilWrite = material.stencilWrite;
        stencilBuffer.setTest(stencilWrite);
        if (stencilWrite) {
            stencilBuffer.setMask(material.stencilWriteMask);
            stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
            stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
        }
        setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
        material.alphaToCoverage === true ? enable(32926) : disable(32926);
    }
    //
    function setFlipSided(flipSided) {
        if (currentFlipSided !== flipSided) {
            if (flipSided) gl.frontFace(2304);
            else gl.frontFace(2305);
            currentFlipSided = flipSided;
        }
    }
    function setCullFace(cullFace) {
        if (cullFace !== CullFaceNone) {
            enable(2884);
            if (cullFace !== currentCullFace) {
                if (cullFace === CullFaceBack) gl.cullFace(1029);
                else if (cullFace === CullFaceFront) gl.cullFace(1028);
                else gl.cullFace(1032);
            }
        } else disable(2884);
        currentCullFace = cullFace;
    }
    function setLineWidth(width) {
        if (width !== currentLineWidth) {
            if (lineWidthAvailable) gl.lineWidth(width);
            currentLineWidth = width;
        }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
        if (polygonOffset) {
            enable(32823);
            if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
                gl.polygonOffset(factor, units);
                currentPolygonOffsetFactor = factor;
                currentPolygonOffsetUnits = units;
            }
        } else disable(32823);
    }
    function setScissorTest(scissorTest) {
        if (scissorTest) enable(3089);
        else disable(3089);
    }
    // texture
    function activeTexture(webglSlot) {
        if (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;
        if (currentTextureSlot !== webglSlot) {
            gl.activeTexture(webglSlot);
            currentTextureSlot = webglSlot;
        }
    }
    function bindTexture(webglType, webglTexture) {
        if (currentTextureSlot === null) activeTexture();
        let boundTexture = currentBoundTextures[currentTextureSlot];
        if (boundTexture === undefined) {
            boundTexture = {
                type: undefined,
                texture: undefined
            };
            currentBoundTextures[currentTextureSlot] = boundTexture;
        }
        if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
            gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
            boundTexture.type = webglType;
            boundTexture.texture = webglTexture;
        }
    }
    function unbindTexture() {
        const boundTexture = currentBoundTextures[currentTextureSlot];
        if (boundTexture !== undefined && boundTexture.type !== undefined) {
            gl.bindTexture(boundTexture.type, null);
            boundTexture.type = undefined;
            boundTexture.texture = undefined;
        }
    }
    function compressedTexImage2D() {
        try {
            gl.compressedTexImage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texSubImage2D() {
        try {
            gl.texSubImage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texSubImage3D() {
        try {
            gl.texSubImage3D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function compressedTexSubImage2D() {
        try {
            gl.compressedTexSubImage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texStorage2D() {
        try {
            gl.texStorage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texStorage3D() {
        try {
            gl.texStorage3D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texImage2D() {
        try {
            gl.texImage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texImage3D() {
        try {
            gl.texImage3D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    //
    function scissor1(scissor) {
        if (currentScissor.equals(scissor) === false) {
            gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
            currentScissor.copy(scissor);
        }
    }
    function viewport1(viewport) {
        if (currentViewport.equals(viewport) === false) {
            gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
            currentViewport.copy(viewport);
        }
    }
    //
    function reset() {
        // reset state
        gl.disable(3042);
        gl.disable(2884);
        gl.disable(2929);
        gl.disable(32823);
        gl.disable(3089);
        gl.disable(2960);
        gl.disable(32926);
        gl.blendEquation(32774);
        gl.blendFunc(1, 0);
        gl.blendFuncSeparate(1, 0, 1, 0);
        gl.colorMask(true, true, true, true);
        gl.clearColor(0, 0, 0, 0);
        gl.depthMask(true);
        gl.depthFunc(513);
        gl.clearDepth(1);
        gl.stencilMask(4294967295);
        gl.stencilFunc(519, 0, 4294967295);
        gl.stencilOp(7680, 7680, 7680);
        gl.clearStencil(0);
        gl.cullFace(1029);
        gl.frontFace(2305);
        gl.polygonOffset(0, 0);
        gl.activeTexture(33984);
        gl.bindFramebuffer(36160, null);
        if (isWebGL2 === true) {
            gl.bindFramebuffer(36009, null);
            gl.bindFramebuffer(36008, null);
        }
        gl.useProgram(null);
        gl.lineWidth(1);
        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        // reset internals
        enabledCapabilities = {
        };
        currentTextureSlot = null;
        currentBoundTextures = {
        };
        currentBoundFramebuffers = {
        };
        currentProgram = null;
        currentBlendingEnabled = false;
        currentBlending = null;
        currentBlendEquation = null;
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendEquationAlpha = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentPremultipledAlpha = false;
        currentFlipSided = null;
        currentCullFace = null;
        currentLineWidth = null;
        currentPolygonOffsetFactor = null;
        currentPolygonOffsetUnits = null;
        currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
        currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
        colorBuffer.reset();
        depthBuffer.reset();
        stencilBuffer.reset();
    }
    return {
        buffers: {
            color: colorBuffer,
            depth: depthBuffer,
            stencil: stencilBuffer
        },
        enable: enable,
        disable: disable,
        bindFramebuffer: bindFramebuffer,
        useProgram: useProgram,
        setBlending: setBlending,
        setMaterial: setMaterial,
        setFlipSided: setFlipSided,
        setCullFace: setCullFace,
        setLineWidth: setLineWidth,
        setPolygonOffset: setPolygonOffset,
        setScissorTest: setScissorTest,
        activeTexture: activeTexture,
        bindTexture: bindTexture,
        unbindTexture: unbindTexture,
        compressedTexImage2D: compressedTexImage2D,
        texImage2D: texImage2D,
        texImage3D: texImage3D,
        texStorage2D: texStorage2D,
        texStorage3D: texStorage3D,
        texSubImage2D: texSubImage2D,
        texSubImage3D: texSubImage3D,
        compressedTexSubImage2D: compressedTexSubImage2D,
        scissor: scissor1,
        viewport: viewport1,
        reset: reset
    };
}
function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    const isWebGL2 = capabilities.isWebGL2;
    const maxTextures = capabilities.maxTextures;
    const maxCubemapSize = capabilities.maxCubemapSize;
    const maxTextureSize = capabilities.maxTextureSize;
    const maxSamples = capabilities.maxSamples;
    const hasMultisampledRenderToTexture = extensions.has('WEBGL_multisampled_render_to_texture');
    const MultisampledRenderToTextureExtension = hasMultisampledRenderToTexture ? extensions.get('WEBGL_multisampled_render_to_texture') : undefined;
    const _videoTextures = new WeakMap();
    let _canvas;
    // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
    // also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
    // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
    let useOffscreenCanvas = false;
    try {
        useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;
    } catch (err) {
    // Ignore any errors
    }
    function createCanvas(width, height) {
        // Use OffscreenCanvas when available. Specially needed in web workers
        return useOffscreenCanvas ? new OffscreenCanvas(width, height) : createElementNS('canvas');
    }
    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
        let scale = 1;
        // handle case if texture exceeds max size
        if (image.width > maxSize || image.height > maxSize) scale = maxSize / Math.max(image.width, image.height);
        // only perform resize if necessary
        if (scale < 1 || needsPowerOfTwo === true) {
            // only perform resize for certain image types
            if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
                const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
                const width = floor(scale * image.width);
                const height = floor(scale * image.height);
                if (_canvas === undefined) _canvas = createCanvas(width, height);
                // cube textures can't reuse the same canvas
                const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
                canvas.width = width;
                canvas.height = height;
                const context = canvas.getContext('2d');
                context.drawImage(image, 0, 0, width, height);
                console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');
                return canvas;
            } else {
                if ('data' in image) console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');
                return image;
            }
        }
        return image;
    }
    function isPowerOfTwo$1(image) {
        return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
    }
    function textureNeedsPowerOfTwo(texture) {
        if (isWebGL2) return false;
        return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function textureNeedsGenerateMipmaps(texture, supportsMips) {
        return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function generateMipmap(target) {
        _gl.generateMipmap(target);
    }
    function getInternalFormat(internalFormatName, glFormat, glType, encoding) {
        if (isWebGL2 === false) return glFormat;
        if (internalFormatName !== null) {
            if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
            console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'');
        }
        let internalFormat = glFormat;
        if (glFormat === 6403) {
            if (glType === 5126) internalFormat = 33326;
            if (glType === 5131) internalFormat = 33325;
            if (glType === 5121) internalFormat = 33321;
        }
        if (glFormat === 6407) {
            if (glType === 5126) internalFormat = 34837;
            if (glType === 5131) internalFormat = 34843;
            if (glType === 5121) internalFormat = 32849;
        }
        if (glFormat === 6408) {
            if (glType === 5126) internalFormat = 34836;
            if (glType === 5131) internalFormat = 34842;
            if (glType === 5121) internalFormat = encoding === sRGBEncoding ? 35907 : 32856;
        }
        if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) extensions.get('EXT_color_buffer_float');
        return internalFormat;
    }
    function getMipLevels(texture, image, supportsMips) {
        if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) return Math.log2(Math.max(image.width, image.height)) + 1;
        else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) // user-defined mipmaps
        return texture.mipmaps.length;
        else if (texture.isCompressedTexture && Array.isArray(texture.image)) return image.mipmaps.length;
        else // texture without mipmaps (only base level)
        return 1;
    }
    // Fallback filters for non-power-of-2 textures
    function filterFallback(f) {
        if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) return 9728;
        return 9729;
    }
    //
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener('dispose', onTextureDispose);
        deallocateTexture(texture);
        if (texture.isVideoTexture) _videoTextures.delete(texture);
        info.memory.textures--;
    }
    function onRenderTargetDispose(event) {
        const renderTarget = event.target;
        renderTarget.removeEventListener('dispose', onRenderTargetDispose);
        deallocateRenderTarget(renderTarget);
    }
    //
    function deallocateTexture(texture) {
        const textureProperties = properties.get(texture);
        if (textureProperties.__webglInit === undefined) return;
        _gl.deleteTexture(textureProperties.__webglTexture);
        properties.remove(texture);
    }
    function deallocateRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        if (!renderTarget) return;
        if (textureProperties.__webglTexture !== undefined) {
            _gl.deleteTexture(textureProperties.__webglTexture);
            info.memory.textures--;
        }
        if (renderTarget.depthTexture) renderTarget.depthTexture.dispose();
        if (renderTarget.isWebGLCubeRenderTarget) for(let i = 0; i < 6; i++){
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
        else {
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
            if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
            if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
            if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
        }
        if (renderTarget.isWebGLMultipleRenderTargets) for(let i20 = 0, il = texture.length; i20 < il; i20++){
            const attachmentProperties = properties.get(texture[i20]);
            if (attachmentProperties.__webglTexture) {
                _gl.deleteTexture(attachmentProperties.__webglTexture);
                info.memory.textures--;
            }
            properties.remove(texture[i20]);
        }
        properties.remove(texture);
        properties.remove(renderTarget);
    }
    //
    let textureUnits = 0;
    function resetTextureUnits() {
        textureUnits = 0;
    }
    function allocateTextureUnit() {
        const textureUnit = textureUnits;
        if (textureUnit >= maxTextures) console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);
        textureUnits += 1;
        return textureUnit;
    }
    //
    function setTexture2D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.isVideoTexture) updateVideoTexture(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            const image = texture.image;
            if (image === undefined) console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');
            else if (image.complete === false) console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');
            else {
                uploadTexture(textureProperties, texture, slot);
                return;
            }
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(3553, textureProperties.__webglTexture);
    }
    function setTexture2DArray(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(35866, textureProperties.__webglTexture);
    }
    function setTexture3D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(32879, textureProperties.__webglTexture);
    }
    function setTextureCube(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadCubeTexture(textureProperties, texture, slot);
            return;
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(34067, textureProperties.__webglTexture);
    }
    const wrappingToGL = {
        [RepeatWrapping]: 10497,
        [ClampToEdgeWrapping]: 33071,
        [MirroredRepeatWrapping]: 33648
    };
    const filterToGL = {
        [NearestFilter]: 9728,
        [NearestMipmapNearestFilter]: 9984,
        [NearestMipmapLinearFilter]: 9986,
        [LinearFilter]: 9729,
        [LinearMipmapNearestFilter]: 9985,
        [LinearMipmapLinearFilter]: 9987
    };
    function setTextureParameters(textureType, texture, supportsMips) {
        if (supportsMips) {
            _gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);
            _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);
            if (textureType === 32879 || textureType === 35866) _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);
            _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);
            _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);
        } else {
            _gl.texParameteri(textureType, 10242, 33071);
            _gl.texParameteri(textureType, 10243, 33071);
            if (textureType === 32879 || textureType === 35866) _gl.texParameteri(textureType, 32882, 33071);
            if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');
            _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));
            _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));
            if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');
        }
        if (extensions.has('EXT_texture_filter_anisotropic') === true) {
            const extension = extensions.get('EXT_texture_filter_anisotropic');
            if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2
            if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only
            if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
                _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
                properties.get(texture).__currentAnisotropy = texture.anisotropy;
            }
        }
    }
    function initTexture(textureProperties, texture) {
        if (textureProperties.__webglInit === undefined) {
            textureProperties.__webglInit = true;
            texture.addEventListener('dispose', onTextureDispose);
            textureProperties.__webglTexture = _gl.createTexture();
            info.memory.textures++;
        }
    }
    function uploadTexture(textureProperties, texture, slot) {
        let textureType = 3553;
        if (texture.isDataTexture2DArray) textureType = 35866;
        if (texture.isDataTexture3D) textureType = 32879;
        initTexture(textureProperties, texture);
        state.activeTexture(33984 + slot);
        state.bindTexture(textureType, textureProperties.__webglTexture);
        _gl.pixelStorei(37440, texture.flipY);
        _gl.pixelStorei(37441, texture.premultiplyAlpha);
        _gl.pixelStorei(3317, texture.unpackAlignment);
        _gl.pixelStorei(37443, 0);
        const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
        const image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
        const supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format);
        let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        setTextureParameters(textureType, texture, supportsMips);
        let mipmap;
        const mipmaps = texture.mipmaps;
        const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
        const allocateMemory = textureProperties.__version === undefined;
        const levels = getMipLevels(texture, image, supportsMips);
        if (texture.isDepthTexture) {
            // populate depth texture with dummy data
            glInternalFormat = 6402;
            if (isWebGL2) {
                if (texture.type === FloatType) glInternalFormat = 36012;
                else if (texture.type === UnsignedIntType) glInternalFormat = 33190;
                else if (texture.type === UnsignedInt248Type) glInternalFormat = 35056;
                else glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D
            } else if (texture.type === FloatType) console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');
            // validation checks for WebGL 1
            if (texture.format === DepthFormat && glInternalFormat === 6402) // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
            // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
            // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
            {
                if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
                    console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');
                    texture.type = UnsignedShortType;
                    glType = utils.convert(texture.type);
                }
            }
            if (texture.format === DepthStencilFormat && glInternalFormat === 6402) {
                // Depth stencil textures need the DEPTH_STENCIL internal format
                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                glInternalFormat = 34041;
                // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                if (texture.type !== UnsignedInt248Type) {
                    console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');
                    texture.type = UnsignedInt248Type;
                    glType = utils.convert(texture.type);
                }
            }
            //
            if (useTexStorage && allocateMemory) state.texStorage2D(3553, 1, glInternalFormat, image.width, image.height);
            else state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
        } else if (texture.isDataTexture) {
            // use manually created mipmaps if available
            // if there are no manual mipmaps
            // set 0 level mipmap and then use GL to generate other mipmap levels
            if (mipmaps.length > 0 && supportsMips) {
                if (useTexStorage && allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                for(let i = 0, il = mipmaps.length; i < il; i++){
                    mipmap = mipmaps[i];
                    if (useTexStorage) state.texSubImage2D(3553, 0, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                    else state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
                texture.generateMipmaps = false;
            } else if (useTexStorage) {
                if (allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
                state.texSubImage2D(3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
            } else state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
        } else if (texture.isCompressedTexture) {
            if (useTexStorage && allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            for(let i = 0, il = mipmaps.length; i < il; i++){
                mipmap = mipmaps[i];
                if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
                    if (glFormat !== null) {
                        if (useTexStorage) state.compressedTexSubImage2D(3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                        else state.compressedTexImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                    } else console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');
                } else if (useTexStorage) state.texSubImage2D(3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                else state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
        } else if (texture.isDataTexture2DArray) {
            if (useTexStorage) {
                if (allocateMemory) state.texStorage3D(35866, levels, glInternalFormat, image.width, image.height, image.depth);
                state.texSubImage3D(35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            } else state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        } else if (texture.isDataTexture3D) {
            if (useTexStorage) {
                if (allocateMemory) state.texStorage3D(32879, levels, glInternalFormat, image.width, image.height, image.depth);
                state.texSubImage3D(32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            } else state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        } else if (texture.isFramebufferTexture) {
            if (useTexStorage && allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
            else state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
        } else {
            // regular Texture (image, video, canvas)
            // use manually created mipmaps if available
            // if there are no manual mipmaps
            // set 0 level mipmap and then use GL to generate other mipmap levels
            if (mipmaps.length > 0 && supportsMips) {
                if (useTexStorage && allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                for(let i = 0, il = mipmaps.length; i < il; i++){
                    mipmap = mipmaps[i];
                    if (useTexStorage) state.texSubImage2D(3553, i, 0, 0, glFormat, glType, mipmap);
                    else state.texImage2D(3553, i, glInternalFormat, glFormat, glType, mipmap);
                }
                texture.generateMipmaps = false;
            } else if (useTexStorage) {
                if (allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
                state.texSubImage2D(3553, 0, 0, 0, glFormat, glType, image);
            } else state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(textureType);
        textureProperties.__version = texture.version;
        if (texture.onUpdate) texture.onUpdate(texture);
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
        if (texture.image.length !== 6) return;
        initTexture(textureProperties, texture);
        state.activeTexture(33984 + slot);
        state.bindTexture(34067, textureProperties.__webglTexture);
        _gl.pixelStorei(37440, texture.flipY);
        _gl.pixelStorei(37441, texture.premultiplyAlpha);
        _gl.pixelStorei(3317, texture.unpackAlignment);
        _gl.pixelStorei(37443, 0);
        const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
        const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
        const cubeImage = [];
        for(let i = 0; i < 6; i++)if (!isCompressed && !isDataTexture) cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
        else cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
        const image = cubeImage[0], supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
        const allocateMemory = textureProperties.__version === undefined;
        let levels = getMipLevels(texture, image, supportsMips);
        setTextureParameters(34067, texture, supportsMips);
        let mipmaps;
        if (isCompressed) {
            if (useTexStorage && allocateMemory) state.texStorage2D(34067, levels, glInternalFormat, image.width, image.height);
            for(let i = 0; i < 6; i++){
                mipmaps = cubeImage[i].mipmaps;
                for(let j = 0; j < mipmaps.length; j++){
                    const mipmap = mipmaps[j];
                    if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
                        if (glFormat !== null) {
                            if (useTexStorage) state.compressedTexSubImage2D(34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                            else state.compressedTexImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                        } else console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');
                    } else if (useTexStorage) state.texSubImage2D(34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                    else state.texImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
            }
        } else {
            mipmaps = texture.mipmaps;
            if (useTexStorage && allocateMemory) {
                // TODO: Uniformly handle mipmap definitions
                // Normal textures and compressed cube textures define base level + mips with their mipmap array
                // Uncompressed cube textures use their mipmap array only for mips (no base level)
                if (mipmaps.length > 0) levels++;
                state.texStorage2D(34067, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
            }
            for(let i = 0; i < 6; i++)if (isDataTexture) {
                if (useTexStorage) state.texSubImage2D(34069 + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
                else state.texImage2D(34069 + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
                for(let j = 0; j < mipmaps.length; j++){
                    const mipmap = mipmaps[j];
                    const mipmapImage = mipmap.image[i].image;
                    if (useTexStorage) state.texSubImage2D(34069 + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                    else state.texImage2D(34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                }
            } else {
                if (useTexStorage) state.texSubImage2D(34069 + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
                else state.texImage2D(34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
                for(let j = 0; j < mipmaps.length; j++){
                    const mipmap = mipmaps[j];
                    if (useTexStorage) state.texSubImage2D(34069 + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
                    else state.texImage2D(34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
                }
            }
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) // We assume images for cube map have the same size.
        generateMipmap(34067);
        textureProperties.__version = texture.version;
        if (texture.onUpdate) texture.onUpdate(texture);
    }
    // Render targets
    // Setup storage for target texture and bind it to correct framebuffer
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
        const glFormat = utils.convert(texture.format);
        const glType = utils.convert(texture.type);
        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        const renderTargetProperties = properties.get(renderTarget);
        if (!renderTargetProperties.__hasExternalTextures) {
            if (textureTarget === 32879 || textureTarget === 35866) state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
            else state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        }
        state.bindFramebuffer(36160, framebuffer);
        if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
        else _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
        state.bindFramebuffer(36160, null);
    }
    // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
        _gl.bindRenderbuffer(36161, renderbuffer);
        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
            let glInternalFormat = 33189;
            if (isMultisample || renderTarget.useRenderToTexture) {
                const depthTexture = renderTarget.depthTexture;
                if (depthTexture && depthTexture.isDepthTexture) {
                    if (depthTexture.type === FloatType) glInternalFormat = 36012;
                    else if (depthTexture.type === UnsignedIntType) glInternalFormat = 33190;
                }
                const samples = getRenderTargetSamples(renderTarget);
                if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                else _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            } else _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
        } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
            const samples = getRenderTargetSamples(renderTarget);
            if (isMultisample && renderTarget.useRenderbuffer) _gl.renderbufferStorageMultisample(36161, samples, 35056, renderTarget.width, renderTarget.height);
            else if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161, samples, 35056, renderTarget.width, renderTarget.height);
            else _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
        } else {
            // Use the first texture for MRT so far
            const texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;
            const glFormat = utils.convert(texture.format);
            const glType = utils.convert(texture.type);
            const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
            const samples = getRenderTargetSamples(renderTarget);
            if (isMultisample && renderTarget.useRenderbuffer) _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            else if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            else _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
        }
        _gl.bindRenderbuffer(36161, null);
    }
    // Setup resources for a Depth Texture for a FBO (needs an extension)
    function setupDepthTexture(framebuffer, renderTarget) {
        const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
        if (isCube) throw new Error('Depth Texture with cube render targets is not supported');
        state.bindFramebuffer(36160, framebuffer);
        if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
        // upload an empty depth texture with framebuffer size
        if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
            renderTarget.depthTexture.image.width = renderTarget.width;
            renderTarget.depthTexture.image.height = renderTarget.height;
            renderTarget.depthTexture.needsUpdate = true;
        }
        setTexture2D(renderTarget.depthTexture, 0);
        const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
        const samples = getRenderTargetSamples(renderTarget);
        if (renderTarget.depthTexture.format === DepthFormat) {
            if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, webglDepthTexture, 0, samples);
            else _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
        } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
            if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, webglDepthTexture, 0, samples);
            else _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
        } else throw new Error('Unknown depthTexture format');
    }
    // Setup GL resources for a non-texture depth buffer
    function setupDepthRenderbuffer(renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
            if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');
            setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
        } else if (isCube) {
            renderTargetProperties.__webglDepthbuffer = [];
            for(let i = 0; i < 6; i++){
                state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);
                renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
                setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
            }
        } else {
            state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
            renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
        state.bindFramebuffer(36160, null);
    }
    // rebind framebuffer with external textures
    function rebindTextures(renderTarget, colorTexture, depthTexture) {
        const renderTargetProperties = properties.get(renderTarget);
        if (colorTexture !== undefined) setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553);
        if (depthTexture !== undefined) setupDepthRenderbuffer(renderTarget);
    }
    // Set up GL resources for the render target
    function setupRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        renderTarget.addEventListener('dispose', onRenderTargetDispose);
        if (renderTarget.isWebGLMultipleRenderTargets !== true) {
            if (textureProperties.__webglTexture === undefined) textureProperties.__webglTexture = _gl.createTexture();
            textureProperties.__version = texture.version;
            info.memory.textures++;
        }
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
        const isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        // Handles WebGL2 RGBFormat fallback - #18858
        if (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {
            texture.format = RGBAFormat;
            console.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');
        }
        // Setup framebuffer
        if (isCube) {
            renderTargetProperties.__webglFramebuffer = [];
            for(let i = 0; i < 6; i++)renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
        } else {
            renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
            if (isMultipleRenderTargets) {
                if (capabilities.drawBuffers) {
                    const textures = renderTarget.texture;
                    for(let i = 0, il = textures.length; i < il; i++){
                        const attachmentProperties = properties.get(textures[i]);
                        if (attachmentProperties.__webglTexture === undefined) {
                            attachmentProperties.__webglTexture = _gl.createTexture();
                            info.memory.textures++;
                        }
                    }
                } else console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');
            } else if (renderTarget.useRenderbuffer) {
                if (isWebGL2) {
                    renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
                    renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
                    _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);
                    const glFormat = utils.convert(texture.format);
                    const glType = utils.convert(texture.type);
                    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
                    const samples = getRenderTargetSamples(renderTarget);
                    _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                    state.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
                    _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);
                    _gl.bindRenderbuffer(36161, null);
                    if (renderTarget.depthBuffer) {
                        renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
                        setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
                    }
                    state.bindFramebuffer(36160, null);
                } else console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
            }
        }
        // Setup color buffer
        if (isCube) {
            state.bindTexture(34067, textureProperties.__webglTexture);
            setTextureParameters(34067, texture, supportsMips);
            for(let i = 0; i < 6; i++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, 36064, 34069 + i);
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(34067);
            state.unbindTexture();
        } else if (isMultipleRenderTargets) {
            const textures = renderTarget.texture;
            for(let i = 0, il = textures.length; i < il; i++){
                const attachment = textures[i];
                const attachmentProperties = properties.get(attachment);
                state.bindTexture(3553, attachmentProperties.__webglTexture);
                setTextureParameters(3553, attachment, supportsMips);
                setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553);
                if (textureNeedsGenerateMipmaps(attachment, supportsMips)) generateMipmap(3553);
            }
            state.unbindTexture();
        } else {
            let glTextureType = 3553;
            if (isRenderTarget3D) {
                // Render targets containing layers, i.e: Texture 3D and 2d arrays
                if (isWebGL2) {
                    const isTexture3D = texture.isDataTexture3D;
                    glTextureType = isTexture3D ? 32879 : 35866;
                } else console.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');
            }
            state.bindTexture(glTextureType, textureProperties.__webglTexture);
            setTextureParameters(glTextureType, texture, supportsMips);
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType);
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(glTextureType);
            state.unbindTexture();
        }
        // Setup depth and stencil buffers
        if (renderTarget.depthBuffer) setupDepthRenderbuffer(renderTarget);
    }
    function updateRenderTargetMipmap(renderTarget) {
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [
            renderTarget.texture
        ];
        for(let i = 0, il = textures.length; i < il; i++){
            const texture = textures[i];
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
                const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
                const webglTexture = properties.get(texture).__webglTexture;
                state.bindTexture(target, webglTexture);
                generateMipmap(target);
                state.unbindTexture();
            }
        }
    }
    function updateMultisampleRenderTarget(renderTarget) {
        if (renderTarget.useRenderbuffer) {
            if (isWebGL2) {
                const width = renderTarget.width;
                const height = renderTarget.height;
                let mask = 16384;
                const invalidationArray = [
                    36064
                ];
                const depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;
                if (renderTarget.depthBuffer) invalidationArray.push(depthStyle);
                if (!renderTarget.ignoreDepthForMultisampleCopy) {
                    if (renderTarget.depthBuffer) mask |= 256;
                    if (renderTarget.stencilBuffer) mask |= 1024;
                }
                const renderTargetProperties = properties.get(renderTarget);
                state.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
                state.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);
                if (renderTarget.ignoreDepthForMultisampleCopy) {
                    _gl.invalidateFramebuffer(36008, [
                        depthStyle
                    ]);
                    _gl.invalidateFramebuffer(36009, [
                        depthStyle
                    ]);
                }
                _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);
                _gl.invalidateFramebuffer(36008, invalidationArray);
                state.bindFramebuffer(36008, null);
                state.bindFramebuffer(36009, renderTargetProperties.__webglMultisampledFramebuffer);
            } else console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
        }
    }
    function getRenderTargetSamples(renderTarget) {
        return isWebGL2 && (renderTarget.useRenderbuffer || renderTarget.useRenderToTexture) ? Math.min(maxSamples, renderTarget.samples) : 0;
    }
    function updateVideoTexture(texture) {
        const frame = info.render.frame;
        // Check the last frame we updated the VideoTexture
        if (_videoTextures.get(texture) !== frame) {
            _videoTextures.set(texture, frame);
            texture.update();
        }
    }
    // backwards compatibility
    let warnedTexture2D = false;
    let warnedTextureCube = false;
    function safeSetTexture2D(texture, slot) {
        if (texture && texture.isWebGLRenderTarget) {
            if (warnedTexture2D === false) {
                console.warn('THREE.WebGLTextures.safeSetTexture2D: don\'t use render targets as textures. Use their .texture property instead.');
                warnedTexture2D = true;
            }
            texture = texture.texture;
        }
        setTexture2D(texture, slot);
    }
    function safeSetTextureCube(texture, slot) {
        if (texture && texture.isWebGLCubeRenderTarget) {
            if (warnedTextureCube === false) {
                console.warn('THREE.WebGLTextures.safeSetTextureCube: don\'t use cube render targets as textures. Use their .texture property instead.');
                warnedTextureCube = true;
            }
            texture = texture.texture;
        }
        setTextureCube(texture, slot);
    }
    //
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.rebindTextures = rebindTextures;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    this.setupFrameBufferTexture = setupFrameBufferTexture;
    this.safeSetTexture2D = safeSetTexture2D;
    this.safeSetTextureCube = safeSetTextureCube;
}
function WebGLUtils(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function convert(p) {
        let extension;
        if (p === UnsignedByteType) return 5121;
        if (p === UnsignedShort4444Type) return 32819;
        if (p === UnsignedShort5551Type) return 32820;
        if (p === UnsignedShort565Type) return 33635;
        if (p === ByteType) return 5120;
        if (p === ShortType) return 5122;
        if (p === UnsignedShortType) return 5123;
        if (p === IntType) return 5124;
        if (p === UnsignedIntType) return 5125;
        if (p === FloatType) return 5126;
        if (p === HalfFloatType) {
            if (isWebGL2) return 5131;
            extension = extensions.get('OES_texture_half_float');
            if (extension !== null) return extension.HALF_FLOAT_OES;
            else return null;
        }
        if (p === AlphaFormat) return 6406;
        if (p === RGBFormat) return 6407;
        if (p === RGBAFormat) return 6408;
        if (p === LuminanceFormat) return 6409;
        if (p === LuminanceAlphaFormat) return 6410;
        if (p === DepthFormat) return 6402;
        if (p === DepthStencilFormat) return 34041;
        if (p === RedFormat) return 6403;
        // WebGL2 formats.
        if (p === RedIntegerFormat) return 36244;
        if (p === RGFormat) return 33319;
        if (p === RGIntegerFormat) return 33320;
        if (p === RGBIntegerFormat) return 36248;
        if (p === RGBAIntegerFormat) return 36249;
        if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
            extension = extensions.get('WEBGL_compressed_texture_s3tc');
            if (extension !== null) {
                if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
            } else return null;
        }
        if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
            extension = extensions.get('WEBGL_compressed_texture_pvrtc');
            if (extension !== null) {
                if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
            } else return null;
        }
        if (p === RGB_ETC1_Format) {
            extension = extensions.get('WEBGL_compressed_texture_etc1');
            if (extension !== null) return extension.COMPRESSED_RGB_ETC1_WEBGL;
            else return null;
        }
        if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
            extension = extensions.get('WEBGL_compressed_texture_etc');
            if (extension !== null) {
                if (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;
                if (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;
            }
        }
        if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {
            extension = extensions.get('WEBGL_compressed_texture_astc');
            if (extension !== null) // TODO Complete?
            return p;
            else return null;
        }
        if (p === RGBA_BPTC_Format) {
            extension = extensions.get('EXT_texture_compression_bptc');
            if (extension !== null) // TODO Complete?
            return p;
            else return null;
        }
        if (p === UnsignedInt248Type) {
            if (isWebGL2) return 34042;
            extension = extensions.get('WEBGL_depth_texture');
            if (extension !== null) return extension.UNSIGNED_INT_24_8_WEBGL;
            else return null;
        }
    }
    return {
        convert: convert
    };
}
class ArrayCamera extends PerspectiveCamera {
    constructor(array32 = []){
        super();
        this.cameras = array32;
    }
}
ArrayCamera.prototype.isArrayCamera = true;
class Group extends Object3D {
    constructor(){
        super();
        this.type = 'Group';
    }
}
Group.prototype.isGroup = true;
const _moveEvent = {
    type: 'move'
};
class WebXRController {
    constructor(){
        this._targetRay = null;
        this._grip = null;
        this._hand = null;
    }
    getHandSpace() {
        if (this._hand === null) {
            this._hand = new Group();
            this._hand.matrixAutoUpdate = false;
            this._hand.visible = false;
            this._hand.joints = {
            };
            this._hand.inputState = {
                pinching: false
            };
        }
        return this._hand;
    }
    getTargetRaySpace() {
        if (this._targetRay === null) {
            this._targetRay = new Group();
            this._targetRay.matrixAutoUpdate = false;
            this._targetRay.visible = false;
            this._targetRay.hasLinearVelocity = false;
            this._targetRay.linearVelocity = new Vector3();
            this._targetRay.hasAngularVelocity = false;
            this._targetRay.angularVelocity = new Vector3();
        }
        return this._targetRay;
    }
    getGripSpace() {
        if (this._grip === null) {
            this._grip = new Group();
            this._grip.matrixAutoUpdate = false;
            this._grip.visible = false;
            this._grip.hasLinearVelocity = false;
            this._grip.linearVelocity = new Vector3();
            this._grip.hasAngularVelocity = false;
            this._grip.angularVelocity = new Vector3();
        }
        return this._grip;
    }
    dispatchEvent(event2) {
        if (this._targetRay !== null) this._targetRay.dispatchEvent(event2);
        if (this._grip !== null) this._grip.dispatchEvent(event2);
        if (this._hand !== null) this._hand.dispatchEvent(event2);
        return this;
    }
    disconnect(inputSource2) {
        this.dispatchEvent({
            type: 'disconnected',
            data: inputSource2
        });
        if (this._targetRay !== null) this._targetRay.visible = false;
        if (this._grip !== null) this._grip.visible = false;
        if (this._hand !== null) this._hand.visible = false;
        return this;
    }
    update(inputSource1, frame1, referenceSpace) {
        let inputPose = null;
        let gripPose = null;
        let handPose = null;
        const targetRay = this._targetRay;
        const grip = this._grip;
        const hand = this._hand;
        if (inputSource1 && frame1.session.visibilityState !== 'visible-blurred') {
            if (targetRay !== null) {
                inputPose = frame1.getPose(inputSource1.targetRaySpace, referenceSpace);
                if (inputPose !== null) {
                    targetRay.matrix.fromArray(inputPose.transform.matrix);
                    targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
                    if (inputPose.linearVelocity) {
                        targetRay.hasLinearVelocity = true;
                        targetRay.linearVelocity.copy(inputPose.linearVelocity);
                    } else targetRay.hasLinearVelocity = false;
                    if (inputPose.angularVelocity) {
                        targetRay.hasAngularVelocity = true;
                        targetRay.angularVelocity.copy(inputPose.angularVelocity);
                    } else targetRay.hasAngularVelocity = false;
                    this.dispatchEvent(_moveEvent);
                }
            }
            if (hand && inputSource1.hand) {
                handPose = true;
                for (const inputjoint of inputSource1.hand.values()){
                    // Update the joints groups with the XRJoint poses
                    const jointPose = frame1.getJointPose(inputjoint, referenceSpace);
                    if (hand.joints[inputjoint.jointName] === undefined) {
                        // The transform of this joint will be updated with the joint pose on each frame
                        const joint = new Group();
                        joint.matrixAutoUpdate = false;
                        joint.visible = false;
                        hand.joints[inputjoint.jointName] = joint;
                        // ??
                        hand.add(joint);
                    }
                    const joint = hand.joints[inputjoint.jointName];
                    if (jointPose !== null) {
                        joint.matrix.fromArray(jointPose.transform.matrix);
                        joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
                        joint.jointRadius = jointPose.radius;
                    }
                    joint.visible = jointPose !== null;
                }
                // Custom events
                // Check pinchz
                const indexTip = hand.joints['index-finger-tip'];
                const thumbTip = hand.joints['thumb-tip'];
                const distance = indexTip.position.distanceTo(thumbTip.position);
                const distanceToPinch = 0.02;
                const threshold = 0.005;
                if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
                    hand.inputState.pinching = false;
                    this.dispatchEvent({
                        type: 'pinchend',
                        handedness: inputSource1.handedness,
                        target: this
                    });
                } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
                    hand.inputState.pinching = true;
                    this.dispatchEvent({
                        type: 'pinchstart',
                        handedness: inputSource1.handedness,
                        target: this
                    });
                }
            } else if (grip !== null && inputSource1.gripSpace) {
                gripPose = frame1.getPose(inputSource1.gripSpace, referenceSpace);
                if (gripPose !== null) {
                    grip.matrix.fromArray(gripPose.transform.matrix);
                    grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
                    if (gripPose.linearVelocity) {
                        grip.hasLinearVelocity = true;
                        grip.linearVelocity.copy(gripPose.linearVelocity);
                    } else grip.hasLinearVelocity = false;
                    if (gripPose.angularVelocity) {
                        grip.hasAngularVelocity = true;
                        grip.angularVelocity.copy(gripPose.angularVelocity);
                    } else grip.hasAngularVelocity = false;
                }
            }
        }
        if (targetRay !== null) targetRay.visible = inputPose !== null;
        if (grip !== null) grip.visible = gripPose !== null;
        if (hand !== null) hand.visible = handPose !== null;
        return this;
    }
}
class DepthTexture extends Texture {
    constructor(width12, height12, type10, mapping7, wrapS2, wrapT2, magFilter2, minFilter2, anisotropy2, format2){
        format2 = format2 !== undefined ? format2 : DepthFormat;
        if (format2 !== DepthFormat && format2 !== DepthStencilFormat) throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
        if (type10 === undefined && format2 === DepthFormat) type10 = UnsignedShortType;
        if (type10 === undefined && format2 === DepthStencilFormat) type10 = UnsignedInt248Type;
        super(null, mapping7, wrapS2, wrapT2, magFilter2, minFilter2, format2, type10, anisotropy2);
        this.image = {
            width: width12,
            height: height12
        };
        this.magFilter = magFilter2 !== undefined ? magFilter2 : NearestFilter;
        this.minFilter = minFilter2 !== undefined ? minFilter2 : NearestFilter;
        this.flipY = false;
        this.generateMipmaps = false;
    }
}
DepthTexture.prototype.isDepthTexture = true;
class WebXRManager extends EventDispatcher {
    constructor(renderer5, gl){
        super();
        const scope = this;
        let session = null;
        let framebufferScaleFactor = 1;
        let referenceSpace = null;
        let referenceSpaceType = 'local-floor';
        const hasMultisampledRenderToTexture = renderer5.extensions.has('WEBGL_multisampled_render_to_texture');
        let pose = null;
        let glBinding = null;
        let glProjLayer = null;
        let glBaseLayer = null;
        let isMultisample = false;
        let xrFrame = null;
        const attributes = gl.getContextAttributes();
        let initialRenderTarget = null;
        let newRenderTarget = null;
        const controllers = [];
        const inputSourcesMap = new Map();
        //
        const cameraL1 = new PerspectiveCamera();
        cameraL1.layers.enable(1);
        cameraL1.viewport = new Vector4();
        const cameraR1 = new PerspectiveCamera();
        cameraR1.layers.enable(2);
        cameraR1.viewport = new Vector4();
        const cameras1 = [
            cameraL1,
            cameraR1
        ];
        const cameraVR = new ArrayCamera();
        cameraVR.layers.enable(1);
        cameraVR.layers.enable(2);
        let _currentDepthNear = null;
        let _currentDepthFar = null;
        //
        this.cameraAutoUpdate = true;
        this.enabled = false;
        this.isPresenting = false;
        this.getController = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new WebXRController();
                controllers[index] = controller;
            }
            return controller.getTargetRaySpace();
        };
        this.getControllerGrip = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new WebXRController();
                controllers[index] = controller;
            }
            return controller.getGripSpace();
        };
        this.getHand = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new WebXRController();
                controllers[index] = controller;
            }
            return controller.getHandSpace();
        };
        //
        function onSessionEvent(event) {
            const controller = inputSourcesMap.get(event.inputSource);
            if (controller) controller.dispatchEvent({
                type: event.type,
                data: event.inputSource
            });
        }
        function onSessionEnd() {
            inputSourcesMap.forEach(function(controller, inputSource) {
                controller.disconnect(inputSource);
            });
            inputSourcesMap.clear();
            _currentDepthNear = null;
            _currentDepthFar = null;
            // restore framebuffer/rendering state
            renderer5.setRenderTarget(initialRenderTarget);
            glBaseLayer = null;
            glProjLayer = null;
            glBinding = null;
            session = null;
            newRenderTarget = null;
            //
            animation.stop();
            scope.isPresenting = false;
            scope.dispatchEvent({
                type: 'sessionend'
            });
        }
        this.setFramebufferScaleFactor = function(value) {
            framebufferScaleFactor = value;
            if (scope.isPresenting === true) console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');
        };
        this.setReferenceSpaceType = function(value) {
            referenceSpaceType = value;
            if (scope.isPresenting === true) console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');
        };
        this.getReferenceSpace = function() {
            return referenceSpace;
        };
        this.getBaseLayer = function() {
            return glProjLayer !== null ? glProjLayer : glBaseLayer;
        };
        this.getBinding = function() {
            return glBinding;
        };
        this.getFrame = function() {
            return xrFrame;
        };
        this.getSession = function() {
            return session;
        };
        this.setSession = async function(value) {
            session = value;
            if (session !== null) {
                initialRenderTarget = renderer5.getRenderTarget();
                session.addEventListener('select', onSessionEvent);
                session.addEventListener('selectstart', onSessionEvent);
                session.addEventListener('selectend', onSessionEvent);
                session.addEventListener('squeeze', onSessionEvent);
                session.addEventListener('squeezestart', onSessionEvent);
                session.addEventListener('squeezeend', onSessionEvent);
                session.addEventListener('end', onSessionEnd);
                session.addEventListener('inputsourceschange', onInputSourcesChange);
                if (attributes.xrCompatible !== true) await gl.makeXRCompatible();
                if (session.renderState.layers === undefined || renderer5.capabilities.isWebGL2 === false) {
                    const layerInit = {
                        antialias: session.renderState.layers === undefined ? attributes.antialias : true,
                        alpha: attributes.alpha,
                        depth: attributes.depth,
                        stencil: attributes.stencil,
                        framebufferScaleFactor: framebufferScaleFactor
                    };
                    glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
                    session.updateRenderState({
                        baseLayer: glBaseLayer
                    });
                    newRenderTarget = new WebGLRenderTarget(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, {
                        format: RGBAFormat,
                        type: UnsignedByteType,
                        encoding: renderer5.outputEncoding
                    });
                } else {
                    isMultisample = attributes.antialias;
                    let depthFormat = null;
                    let depthType = null;
                    let glDepthFormat = null;
                    if (attributes.depth) {
                        glDepthFormat = attributes.stencil ? 35056 : 33190;
                        depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
                        depthType = attributes.stencil ? UnsignedInt248Type : UnsignedShortType;
                    }
                    const projectionlayerInit = {
                        colorFormat: attributes.alpha || isMultisample ? 32856 : 32849,
                        depthFormat: glDepthFormat,
                        scaleFactor: framebufferScaleFactor
                    };
                    glBinding = new XRWebGLBinding(session, gl);
                    glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
                    session.updateRenderState({
                        layers: [
                            glProjLayer
                        ]
                    });
                    if (isMultisample) newRenderTarget = new WebGLMultisampleRenderTarget(glProjLayer.textureWidth, glProjLayer.textureHeight, {
                        format: RGBAFormat,
                        type: UnsignedByteType,
                        depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),
                        stencilBuffer: attributes.stencil,
                        ignoreDepth: glProjLayer.ignoreDepthValues,
                        useRenderToTexture: hasMultisampledRenderToTexture,
                        encoding: renderer5.outputEncoding
                    });
                    else newRenderTarget = new WebGLRenderTarget(glProjLayer.textureWidth, glProjLayer.textureHeight, {
                        format: attributes.alpha ? RGBAFormat : RGBFormat,
                        type: UnsignedByteType,
                        depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),
                        stencilBuffer: attributes.stencil,
                        ignoreDepth: glProjLayer.ignoreDepthValues,
                        encoding: renderer5.outputEncoding
                    });
                }
                // Set foveation to maximum.
                this.setFoveation(1);
                referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
                animation.setContext(session);
                animation.start();
                scope.isPresenting = true;
                scope.dispatchEvent({
                    type: 'sessionstart'
                });
            }
        };
        function onInputSourcesChange(event) {
            const inputSources = session.inputSources;
            // Assign inputSources to available controllers
            for(let i = 0; i < controllers.length; i++)inputSourcesMap.set(inputSources[i], controllers[i]);
            // Notify disconnected
            for(let i22 = 0; i22 < event.removed.length; i22++){
                const inputSource = event.removed[i22];
                const controller = inputSourcesMap.get(inputSource);
                if (controller) {
                    controller.dispatchEvent({
                        type: 'disconnected',
                        data: inputSource
                    });
                    inputSourcesMap.delete(inputSource);
                }
            }
            // Notify connected
            for(let i23 = 0; i23 < event.added.length; i23++){
                const inputSource = event.added[i23];
                const controller = inputSourcesMap.get(inputSource);
                if (controller) controller.dispatchEvent({
                    type: 'connected',
                    data: inputSource
                });
            }
        }
        //
        const cameraLPos = new Vector3();
        const cameraRPos = new Vector3();
        /**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */ function setProjectionFromUnion(camera, cameraL, cameraR) {
            cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
            cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
            const ipd = cameraLPos.distanceTo(cameraRPos);
            const projL = cameraL.projectionMatrix.elements;
            const projR = cameraR.projectionMatrix.elements;
            // VR systems will have identical far and near planes, and
            // most likely identical top and bottom frustum extents.
            // Use the left camera for these values.
            const near = projL[14] / (projL[10] - 1);
            const far = projL[14] / (projL[10] + 1);
            const topFov = (projL[9] + 1) / projL[5];
            const bottomFov = (projL[9] - 1) / projL[5];
            const leftFov = (projL[8] - 1) / projL[0];
            const rightFov = (projR[8] + 1) / projR[0];
            const left = near * leftFov;
            const right = near * rightFov;
            // Calculate the new camera's position offset from the
            // left camera. xOffset should be roughly half `ipd`.
            const zOffset = ipd / (-leftFov + rightFov);
            const xOffset = zOffset * -leftFov;
            // TODO: Better way to apply this offset?
            cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
            camera.translateX(xOffset);
            camera.translateZ(zOffset);
            camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
            // Find the union of the frustum values of the cameras and scale
            // the values so that the near plane's position does not change in world space,
            // although must now be relative to the new union camera.
            const near2 = near + zOffset;
            const far2 = far + zOffset;
            const left2 = left - xOffset;
            const right2 = right + (ipd - xOffset);
            const top2 = topFov * far / far2 * near2;
            const bottom2 = bottomFov * far / far2 * near2;
            camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
        }
        function updateCamera(camera, parent) {
            if (parent === null) camera.matrixWorld.copy(camera.matrix);
            else camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        }
        this.updateCamera = function(camera) {
            if (session === null) return;
            cameraVR.near = cameraR1.near = cameraL1.near = camera.near;
            cameraVR.far = cameraR1.far = cameraL1.far = camera.far;
            if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
                // Note that the new renderState won't apply until the next frame. See #18320
                session.updateRenderState({
                    depthNear: cameraVR.near,
                    depthFar: cameraVR.far
                });
                _currentDepthNear = cameraVR.near;
                _currentDepthFar = cameraVR.far;
            }
            const parent = camera.parent;
            const cameras = cameraVR.cameras;
            updateCamera(cameraVR, parent);
            for(let i = 0; i < cameras.length; i++)updateCamera(cameras[i], parent);
            cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale);
            // update user camera and its children
            camera.position.copy(cameraVR.position);
            camera.quaternion.copy(cameraVR.quaternion);
            camera.scale.copy(cameraVR.scale);
            camera.matrix.copy(cameraVR.matrix);
            camera.matrixWorld.copy(cameraVR.matrixWorld);
            const children = camera.children;
            for(let i24 = 0, l = children.length; i24 < l; i24++)children[i24].updateMatrixWorld(true);
            // update projection matrix for proper view frustum culling
            if (cameras.length === 2) setProjectionFromUnion(cameraVR, cameraL1, cameraR1);
            else // assume single camera setup (AR)
            cameraVR.projectionMatrix.copy(cameraL1.projectionMatrix);
        };
        this.getCamera = function() {
            return cameraVR;
        };
        this.getFoveation = function() {
            if (glProjLayer !== null) return glProjLayer.fixedFoveation;
            if (glBaseLayer !== null) return glBaseLayer.fixedFoveation;
            return undefined;
        };
        this.setFoveation = function(foveation) {
            // 0 = no foveation = full resolution
            // 1 = maximum foveation = the edges render at lower resolution
            if (glProjLayer !== null) glProjLayer.fixedFoveation = foveation;
            if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) glBaseLayer.fixedFoveation = foveation;
        };
        // Animation Loop
        let onAnimationFrameCallback = null;
        function onAnimationFrame(time, frame) {
            pose = frame.getViewerPose(referenceSpace);
            xrFrame = frame;
            if (pose !== null) {
                const views = pose.views;
                if (glBaseLayer !== null) {
                    renderer5.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
                    renderer5.setRenderTarget(newRenderTarget);
                }
                let cameraVRNeedsUpdate = false;
                // check if it's necessary to rebuild cameraVR's camera list
                if (views.length !== cameraVR.cameras.length) {
                    cameraVR.cameras.length = 0;
                    cameraVRNeedsUpdate = true;
                }
                for(let i = 0; i < views.length; i++){
                    const view = views[i];
                    let viewport = null;
                    if (glBaseLayer !== null) viewport = glBaseLayer.getViewport(view);
                    else {
                        const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
                        viewport = glSubImage.viewport;
                        // For side-by-side projection, we only produce a single texture for both eyes.
                        if (i === 0) {
                            renderer5.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture);
                            renderer5.setRenderTarget(newRenderTarget);
                        }
                    }
                    const camera = cameras1[i];
                    camera.matrix.fromArray(view.transform.matrix);
                    camera.projectionMatrix.fromArray(view.projectionMatrix);
                    camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
                    if (i === 0) cameraVR.matrix.copy(camera.matrix);
                    if (cameraVRNeedsUpdate === true) cameraVR.cameras.push(camera);
                }
            }
            //
            const inputSources = session.inputSources;
            for(let i = 0; i < controllers.length; i++){
                const controller = controllers[i];
                const inputSource = inputSources[i];
                controller.update(inputSource, frame, referenceSpace);
            }
            if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
            xrFrame = null;
        }
        const animation = new WebGLAnimation();
        animation.setAnimationLoop(onAnimationFrame);
        this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
        };
        this.dispose = function() {
        };
    }
}
function WebGLMaterials(properties) {
    function refreshFogUniforms(uniforms, fog) {
        uniforms.fogColor.value.copy(fog.color);
        if (fog.isFog) {
            uniforms.fogNear.value = fog.near;
            uniforms.fogFar.value = fog.far;
        } else if (fog.isFogExp2) uniforms.fogDensity.value = fog.density;
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
        if (material.isMeshBasicMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isMeshLambertMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsLambert(uniforms, material);
        } else if (material.isMeshToonMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsToon(uniforms, material);
        } else if (material.isMeshPhongMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsPhong(uniforms, material);
        } else if (material.isMeshStandardMaterial) {
            refreshUniformsCommon(uniforms, material);
            if (material.isMeshPhysicalMaterial) refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
            else refreshUniformsStandard(uniforms, material);
        } else if (material.isMeshMatcapMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsMatcap(uniforms, material);
        } else if (material.isMeshDepthMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsDepth(uniforms, material);
        } else if (material.isMeshDistanceMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsDistance(uniforms, material);
        } else if (material.isMeshNormalMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsNormal(uniforms, material);
        } else if (material.isLineBasicMaterial) {
            refreshUniformsLine(uniforms, material);
            if (material.isLineDashedMaterial) refreshUniformsDash(uniforms, material);
        } else if (material.isPointsMaterial) refreshUniformsPoints(uniforms, material, pixelRatio, height);
        else if (material.isSpriteMaterial) refreshUniformsSprites(uniforms, material);
        else if (material.isShadowMaterial) {
            uniforms.color.value.copy(material.color);
            uniforms.opacity.value = material.opacity;
        } else if (material.isShaderMaterial) material.uniformsNeedUpdate = false; // #15581
    }
    function refreshUniformsCommon(uniforms, material) {
        uniforms.opacity.value = material.opacity;
        if (material.color) uniforms.diffuse.value.copy(material.color);
        if (material.emissive) uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
        if (material.map) uniforms.map.value = material.map;
        if (material.alphaMap) uniforms.alphaMap.value = material.alphaMap;
        if (material.specularMap) uniforms.specularMap.value = material.specularMap;
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        const envMap = properties.get(material).envMap;
        if (envMap) {
            uniforms.envMap.value = envMap;
            uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
            uniforms.reflectivity.value = material.reflectivity;
            uniforms.ior.value = material.ior;
            uniforms.refractionRatio.value = material.refractionRatio;
        }
        if (material.lightMap) {
            uniforms.lightMap.value = material.lightMap;
            uniforms.lightMapIntensity.value = material.lightMapIntensity;
        }
        if (material.aoMap) {
            uniforms.aoMap.value = material.aoMap;
            uniforms.aoMapIntensity.value = material.aoMapIntensity;
        }
        // uv repeat and offset setting priorities
        // 1. color map
        // 2. specular map
        // 3. displacementMap map
        // 4. normal map
        // 5. bump map
        // 6. roughnessMap map
        // 7. metalnessMap map
        // 8. alphaMap map
        // 9. emissiveMap map
        // 10. clearcoat map
        // 11. clearcoat normal map
        // 12. clearcoat roughnessMap map
        // 13. specular intensity map
        // 14. specular tint map
        // 15. transmission map
        // 16. thickness map
        let uvScaleMap;
        if (material.map) uvScaleMap = material.map;
        else if (material.specularMap) uvScaleMap = material.specularMap;
        else if (material.displacementMap) uvScaleMap = material.displacementMap;
        else if (material.normalMap) uvScaleMap = material.normalMap;
        else if (material.bumpMap) uvScaleMap = material.bumpMap;
        else if (material.roughnessMap) uvScaleMap = material.roughnessMap;
        else if (material.metalnessMap) uvScaleMap = material.metalnessMap;
        else if (material.alphaMap) uvScaleMap = material.alphaMap;
        else if (material.emissiveMap) uvScaleMap = material.emissiveMap;
        else if (material.clearcoatMap) uvScaleMap = material.clearcoatMap;
        else if (material.clearcoatNormalMap) uvScaleMap = material.clearcoatNormalMap;
        else if (material.clearcoatRoughnessMap) uvScaleMap = material.clearcoatRoughnessMap;
        else if (material.specularIntensityMap) uvScaleMap = material.specularIntensityMap;
        else if (material.specularColorMap) uvScaleMap = material.specularColorMap;
        else if (material.transmissionMap) uvScaleMap = material.transmissionMap;
        else if (material.thicknessMap) uvScaleMap = material.thicknessMap;
        else if (material.sheenColorMap) uvScaleMap = material.sheenColorMap;
        else if (material.sheenRoughnessMap) uvScaleMap = material.sheenRoughnessMap;
        if (uvScaleMap !== undefined) {
            // backwards compatibility
            if (uvScaleMap.isWebGLRenderTarget) uvScaleMap = uvScaleMap.texture;
            if (uvScaleMap.matrixAutoUpdate === true) uvScaleMap.updateMatrix();
            uniforms.uvTransform.value.copy(uvScaleMap.matrix);
        }
        // uv repeat and offset setting priorities for uv2
        // 1. ao map
        // 2. light map
        let uv2ScaleMap;
        if (material.aoMap) uv2ScaleMap = material.aoMap;
        else if (material.lightMap) uv2ScaleMap = material.lightMap;
        if (uv2ScaleMap !== undefined) {
            // backwards compatibility
            if (uv2ScaleMap.isWebGLRenderTarget) uv2ScaleMap = uv2ScaleMap.texture;
            if (uv2ScaleMap.matrixAutoUpdate === true) uv2ScaleMap.updateMatrix();
            uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
        }
    }
    function refreshUniformsLine(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
    }
    function refreshUniformsDash(uniforms, material) {
        uniforms.dashSize.value = material.dashSize;
        uniforms.totalSize.value = material.dashSize + material.gapSize;
        uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.size.value = material.size * pixelRatio;
        uniforms.scale.value = height * 0.5;
        if (material.map) uniforms.map.value = material.map;
        if (material.alphaMap) uniforms.alphaMap.value = material.alphaMap;
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        // uv repeat and offset setting priorities
        // 1. color map
        // 2. alpha map
        let uvScaleMap;
        if (material.map) uvScaleMap = material.map;
        else if (material.alphaMap) uvScaleMap = material.alphaMap;
        if (uvScaleMap !== undefined) {
            if (uvScaleMap.matrixAutoUpdate === true) uvScaleMap.updateMatrix();
            uniforms.uvTransform.value.copy(uvScaleMap.matrix);
        }
    }
    function refreshUniformsSprites(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.rotation.value = material.rotation;
        if (material.map) uniforms.map.value = material.map;
        if (material.alphaMap) uniforms.alphaMap.value = material.alphaMap;
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        // uv repeat and offset setting priorities
        // 1. color map
        // 2. alpha map
        let uvScaleMap;
        if (material.map) uvScaleMap = material.map;
        else if (material.alphaMap) uvScaleMap = material.alphaMap;
        if (uvScaleMap !== undefined) {
            if (uvScaleMap.matrixAutoUpdate === true) uvScaleMap.updateMatrix();
            uniforms.uvTransform.value.copy(uvScaleMap.matrix);
        }
    }
    function refreshUniformsLambert(uniforms, material) {
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
    }
    function refreshUniformsPhong(uniforms, material) {
        uniforms.specular.value.copy(material.specular);
        uniforms.shininess.value = Math.max(material.shininess, 0.0001); // to prevent pow( 0.0, 0.0 )
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === BackSide) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === BackSide) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    function refreshUniformsToon(uniforms, material) {
        if (material.gradientMap) uniforms.gradientMap.value = material.gradientMap;
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === BackSide) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === BackSide) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    function refreshUniformsStandard(uniforms, material) {
        uniforms.roughness.value = material.roughness;
        uniforms.metalness.value = material.metalness;
        if (material.roughnessMap) uniforms.roughnessMap.value = material.roughnessMap;
        if (material.metalnessMap) uniforms.metalnessMap.value = material.metalnessMap;
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === BackSide) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === BackSide) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
        const envMap = properties.get(material).envMap;
        if (envMap) //uniforms.envMap.value = material.envMap; // part of uniforms common
        uniforms.envMapIntensity.value = material.envMapIntensity;
    }
    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
        refreshUniformsStandard(uniforms, material);
        uniforms.ior.value = material.ior; // also part of uniforms common
        if (material.sheen > 0) {
            uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
            uniforms.sheenRoughness.value = material.sheenRoughness;
            if (material.sheenColorMap) uniforms.sheenColorMap.value = material.sheenColorMap;
            if (material.sheenRoughnessMap) uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
        }
        if (material.clearcoat > 0) {
            uniforms.clearcoat.value = material.clearcoat;
            uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
            if (material.clearcoatMap) uniforms.clearcoatMap.value = material.clearcoatMap;
            if (material.clearcoatRoughnessMap) uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
            if (material.clearcoatNormalMap) {
                uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
                uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
                if (material.side === BackSide) uniforms.clearcoatNormalScale.value.negate();
            }
        }
        if (material.transmission > 0) {
            uniforms.transmission.value = material.transmission;
            uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
            uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
            if (material.transmissionMap) uniforms.transmissionMap.value = material.transmissionMap;
            uniforms.thickness.value = material.thickness;
            if (material.thicknessMap) uniforms.thicknessMap.value = material.thicknessMap;
            uniforms.attenuationDistance.value = material.attenuationDistance;
            uniforms.attenuationColor.value.copy(material.attenuationColor);
        }
        uniforms.specularIntensity.value = material.specularIntensity;
        uniforms.specularColor.value.copy(material.specularColor);
        if (material.specularIntensityMap) uniforms.specularIntensityMap.value = material.specularIntensityMap;
        if (material.specularColorMap) uniforms.specularColorMap.value = material.specularColorMap;
    }
    function refreshUniformsMatcap(uniforms, material) {
        if (material.matcap) uniforms.matcap.value = material.matcap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === BackSide) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === BackSide) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    function refreshUniformsDepth(uniforms, material) {
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    function refreshUniformsDistance(uniforms, material) {
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
        uniforms.referencePosition.value.copy(material.referencePosition);
        uniforms.nearDistance.value = material.nearDistance;
        uniforms.farDistance.value = material.farDistance;
    }
    function refreshUniformsNormal(uniforms, material) {
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === BackSide) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === BackSide) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    return {
        refreshFogUniforms: refreshFogUniforms,
        refreshMaterialUniforms: refreshMaterialUniforms
    };
}
function createCanvasElement() {
    const canvas = createElementNS('canvas');
    canvas.style.display = 'block';
    return canvas;
}
function WebGLRenderer(parameters6 = {
}) {
    const _canvas = parameters6.canvas !== undefined ? parameters6.canvas : createCanvasElement(), _context = parameters6.context !== undefined ? parameters6.context : null, _alpha = parameters6.alpha !== undefined ? parameters6.alpha : false, _depth = parameters6.depth !== undefined ? parameters6.depth : true, _stencil = parameters6.stencil !== undefined ? parameters6.stencil : true, _antialias = parameters6.antialias !== undefined ? parameters6.antialias : false, _premultipliedAlpha = parameters6.premultipliedAlpha !== undefined ? parameters6.premultipliedAlpha : true, _preserveDrawingBuffer = parameters6.preserveDrawingBuffer !== undefined ? parameters6.preserveDrawingBuffer : false, _powerPreference = parameters6.powerPreference !== undefined ? parameters6.powerPreference : 'default', _failIfMajorPerformanceCaveat = parameters6.failIfMajorPerformanceCaveat !== undefined ? parameters6.failIfMajorPerformanceCaveat : false;
    let currentRenderList1 = null;
    let currentRenderState = null;
    // render() can be called from within a callback triggered by another render.
    // We track this so that the nested render call gets its list and state isolated from the parent render call.
    const renderListStack = [];
    const renderStateStack = [];
    // public properties
    this.domElement = _canvas;
    // Debug configuration container
    this.debug = {
        /**
		 * Enables error checking and reporting when shader programs are being compiled
		 * @type {boolean}
		 */ checkShaderErrors: true
    };
    // clearing
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    // scene graph
    this.sortObjects = true;
    // user-defined clipping
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    // physically based shading
    this.outputEncoding = LinearEncoding;
    // physical lights
    this.physicallyCorrectLights = false;
    // tone mapping
    this.toneMapping = NoToneMapping;
    this.toneMappingExposure = 1;
    // internal properties
    const _this = this;
    let _isContextLost = false;
    // internal state cache
    let _currentActiveCubeFace = 0;
    let _currentActiveMipmapLevel = 0;
    let _currentRenderTarget = null;
    let _currentMaterialId = -1;
    let _currentCamera = null;
    const _currentViewport = new Vector4();
    const _currentScissor = new Vector4();
    let _currentScissorTest = null;
    //
    let _width = _canvas.width;
    let _height = _canvas.height;
    let _pixelRatio = 1;
    let _opaqueSort = null;
    let _transparentSort = null;
    const _viewport = new Vector4(0, 0, _width, _height);
    const _scissor = new Vector4(0, 0, _width, _height);
    let _scissorTest = false;
    //
    const _currentDrawBuffers = [];
    // frustum
    const _frustum = new Frustum();
    // clipping
    let _clippingEnabled = false;
    let _localClippingEnabled = false;
    // transmission
    let _transmissionRenderTarget = null;
    // camera matrices cache
    const _projScreenMatrix = new Matrix4();
    const _vector3 = new Vector3();
    const _emptyScene = {
        background: null,
        fog: null,
        environment: null,
        overrideMaterial: null,
        isScene: true
    };
    function getTargetPixelRatio() {
        return _currentRenderTarget === null ? _pixelRatio : 1;
    }
    // initialize
    let _gl = _context;
    function getContext(contextNames, contextAttributes) {
        for(let i = 0; i < contextNames.length; i++){
            const contextName = contextNames[i];
            const context = _canvas.getContext(contextName, contextAttributes);
            if (context !== null) return context;
        }
        return null;
    }
    try {
        const contextAttributes = {
            alpha: _alpha,
            depth: _depth,
            stencil: _stencil,
            antialias: _antialias,
            premultipliedAlpha: _premultipliedAlpha,
            preserveDrawingBuffer: _preserveDrawingBuffer,
            powerPreference: _powerPreference,
            failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
        };
        // OffscreenCanvas does not have setAttribute, see #22811
        if ('setAttribute' in _canvas) _canvas.setAttribute('data-engine', `three.js r${REVISION}`);
        // event listeners must be registered before WebGL context is created, see #12753
        _canvas.addEventListener('webglcontextlost', onContextLost, false);
        _canvas.addEventListener('webglcontextrestored', onContextRestore, false);
        if (_gl === null) {
            const contextNames = [
                'webgl2',
                'webgl',
                'experimental-webgl'
            ];
            if (_this.isWebGL1Renderer === true) contextNames.shift();
            _gl = getContext(contextNames, contextAttributes);
            if (_gl === null) {
                if (getContext(contextNames)) throw new Error('Error creating WebGL context with your selected attributes.');
                else throw new Error('Error creating WebGL context.');
            }
        }
        // Some experimental-webgl implementations do not have getShaderPrecisionFormat
        if (_gl.getShaderPrecisionFormat === undefined) _gl.getShaderPrecisionFormat = function() {
            return {
                'rangeMin': 1,
                'rangeMax': 1,
                'precision': 1
            };
        };
    } catch (error) {
        console.error('THREE.WebGLRenderer: ' + error.message);
        throw error;
    }
    let extensions, capabilities, state, info;
    let properties, textures1, cubemaps, cubeuvmaps, attributes, geometries, objects;
    let programCache, materials, renderLists, renderStates, clipping, shadowMap;
    let background, morphtargets, bufferRenderer, indexedBufferRenderer;
    let utils, bindingStates;
    function initGLContext() {
        extensions = new WebGLExtensions(_gl);
        capabilities = new WebGLCapabilities(_gl, extensions, parameters6);
        extensions.init(capabilities);
        utils = new WebGLUtils(_gl, extensions, capabilities);
        state = new WebGLState(_gl, extensions, capabilities);
        _currentDrawBuffers[0] = 1029;
        info = new WebGLInfo(_gl);
        properties = new WebGLProperties();
        textures1 = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
        cubemaps = new WebGLCubeMaps(_this);
        cubeuvmaps = new WebGLCubeUVMaps(_this);
        attributes = new WebGLAttributes(_gl, capabilities);
        bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
        geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
        objects = new WebGLObjects(_gl, geometries, attributes, info);
        morphtargets = new WebGLMorphtargets(_gl, capabilities, textures1);
        clipping = new WebGLClipping(properties);
        programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
        materials = new WebGLMaterials(properties);
        renderLists = new WebGLRenderLists();
        renderStates = new WebGLRenderStates(extensions, capabilities);
        background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);
        shadowMap = new WebGLShadowMap(_this, objects, capabilities);
        bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
        indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
        info.programs = programCache.programs;
        _this.capabilities = capabilities;
        _this.extensions = extensions;
        _this.properties = properties;
        _this.renderLists = renderLists;
        _this.shadowMap = shadowMap;
        _this.state = state;
        _this.info = info;
    }
    initGLContext();
    // xr
    const xr = new WebXRManager(_this, _gl);
    this.xr = xr;
    // API
    this.getContext = function() {
        return _gl;
    };
    this.getContextAttributes = function() {
        return _gl.getContextAttributes();
    };
    this.forceContextLoss = function() {
        const extension = extensions.get('WEBGL_lose_context');
        if (extension) extension.loseContext();
    };
    this.forceContextRestore = function() {
        const extension = extensions.get('WEBGL_lose_context');
        if (extension) extension.restoreContext();
    };
    this.getPixelRatio = function() {
        return _pixelRatio;
    };
    this.setPixelRatio = function(value) {
        if (value === undefined) return;
        _pixelRatio = value;
        this.setSize(_width, _height, false);
    };
    this.getSize = function(target) {
        return target.set(_width, _height);
    };
    this.setSize = function(width, height, updateStyle) {
        if (xr.isPresenting) {
            console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
            return;
        }
        _width = width;
        _height = height;
        _canvas.width = Math.floor(width * _pixelRatio);
        _canvas.height = Math.floor(height * _pixelRatio);
        if (updateStyle !== false) {
            _canvas.style.width = width + 'px';
            _canvas.style.height = height + 'px';
        }
        this.setViewport(0, 0, width, height);
    };
    this.getDrawingBufferSize = function(target) {
        return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
    };
    this.setDrawingBufferSize = function(width, height, pixelRatio) {
        _width = width;
        _height = height;
        _pixelRatio = pixelRatio;
        _canvas.width = Math.floor(width * pixelRatio);
        _canvas.height = Math.floor(height * pixelRatio);
        this.setViewport(0, 0, width, height);
    };
    this.getCurrentViewport = function(target) {
        return target.copy(_currentViewport);
    };
    this.getViewport = function(target) {
        return target.copy(_viewport);
    };
    this.setViewport = function(x, y, width, height) {
        if (x.isVector4) _viewport.set(x.x, x.y, x.z, x.w);
        else _viewport.set(x, y, width, height);
        state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissor = function(target) {
        return target.copy(_scissor);
    };
    this.setScissor = function(x, y, width, height) {
        if (x.isVector4) _scissor.set(x.x, x.y, x.z, x.w);
        else _scissor.set(x, y, width, height);
        state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissorTest = function() {
        return _scissorTest;
    };
    this.setScissorTest = function(boolean) {
        state.setScissorTest(_scissorTest = boolean);
    };
    this.setOpaqueSort = function(method) {
        _opaqueSort = method;
    };
    this.setTransparentSort = function(method) {
        _transparentSort = method;
    };
    // Clearing
    this.getClearColor = function(target) {
        return target.copy(background.getClearColor());
    };
    this.setClearColor = function() {
        background.setClearColor.apply(background, arguments);
    };
    this.getClearAlpha = function() {
        return background.getClearAlpha();
    };
    this.setClearAlpha = function() {
        background.setClearAlpha.apply(background, arguments);
    };
    this.clear = function(color, depth, stencil) {
        let bits = 0;
        if (color === undefined || color) bits |= 16384;
        if (depth === undefined || depth) bits |= 256;
        if (stencil === undefined || stencil) bits |= 1024;
        _gl.clear(bits);
    };
    this.clearColor = function() {
        this.clear(true, false, false);
    };
    this.clearDepth = function() {
        this.clear(false, true, false);
    };
    this.clearStencil = function() {
        this.clear(false, false, true);
    };
    //
    this.dispose = function() {
        _canvas.removeEventListener('webglcontextlost', onContextLost, false);
        _canvas.removeEventListener('webglcontextrestored', onContextRestore, false);
        renderLists.dispose();
        renderStates.dispose();
        properties.dispose();
        cubemaps.dispose();
        cubeuvmaps.dispose();
        objects.dispose();
        bindingStates.dispose();
        programCache.dispose();
        xr.dispose();
        xr.removeEventListener('sessionstart', onXRSessionStart);
        xr.removeEventListener('sessionend', onXRSessionEnd);
        if (_transmissionRenderTarget) {
            _transmissionRenderTarget.dispose();
            _transmissionRenderTarget = null;
        }
        animation.stop();
    };
    // Events
    function onContextLost(event) {
        event.preventDefault();
        console.log('THREE.WebGLRenderer: Context Lost.');
        _isContextLost = true;
    }
    function onContextRestore() {
        console.log('THREE.WebGLRenderer: Context Restored.');
        _isContextLost = false;
        const infoAutoReset = info.autoReset;
        const shadowMapEnabled = shadowMap.enabled;
        const shadowMapAutoUpdate = shadowMap.autoUpdate;
        const shadowMapNeedsUpdate = shadowMap.needsUpdate;
        const shadowMapType = shadowMap.type;
        initGLContext();
        info.autoReset = infoAutoReset;
        shadowMap.enabled = shadowMapEnabled;
        shadowMap.autoUpdate = shadowMapAutoUpdate;
        shadowMap.needsUpdate = shadowMapNeedsUpdate;
        shadowMap.type = shadowMapType;
    }
    function onMaterialDispose(event) {
        const material = event.target;
        material.removeEventListener('dispose', onMaterialDispose);
        deallocateMaterial(material);
    }
    // Buffer deallocation
    function deallocateMaterial(material) {
        releaseMaterialProgramReferences(material);
        properties.remove(material);
    }
    function releaseMaterialProgramReferences(material) {
        const programs = properties.get(material).programs;
        if (programs !== undefined) {
            programs.forEach(function(program) {
                programCache.releaseProgram(program);
            });
            if (material.isShaderMaterial) programCache.releaseShaderCache(material);
        }
    }
    // Buffer rendering
    this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
        if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)
        const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
        const program = setProgram(camera, scene, geometry, material, object);
        state.setMaterial(material, frontFaceCW);
        //
        let index = geometry.index;
        const position = geometry.attributes.position;
        //
        if (index === null) {
            if (position === undefined || position.count === 0) return;
        } else if (index.count === 0) return;
        //
        let rangeFactor = 1;
        if (material.wireframe === true) {
            index = geometries.getWireframeAttribute(geometry);
            rangeFactor = 2;
        }
        bindingStates.setup(object, material, program, geometry, index);
        let attribute;
        let renderer = bufferRenderer;
        if (index !== null) {
            attribute = attributes.get(index);
            renderer = indexedBufferRenderer;
            renderer.setIndex(attribute);
        }
        //
        const dataCount = index !== null ? index.count : position.count;
        const rangeStart = geometry.drawRange.start * rangeFactor;
        const rangeCount = geometry.drawRange.count * rangeFactor;
        const groupStart = group !== null ? group.start * rangeFactor : 0;
        const groupCount = group !== null ? group.count * rangeFactor : Infinity;
        const drawStart = Math.max(rangeStart, groupStart);
        const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
        const drawCount = Math.max(0, drawEnd - drawStart + 1);
        if (drawCount === 0) return;
        //
        if (object.isMesh) {
            if (material.wireframe === true) {
                state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
                renderer.setMode(1);
            } else renderer.setMode(4);
        } else if (object.isLine) {
            let lineWidth = material.linewidth;
            if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material
            state.setLineWidth(lineWidth * getTargetPixelRatio());
            if (object.isLineSegments) renderer.setMode(1);
            else if (object.isLineLoop) renderer.setMode(2);
            else renderer.setMode(3);
        } else if (object.isPoints) renderer.setMode(0);
        else if (object.isSprite) renderer.setMode(4);
        if (object.isInstancedMesh) renderer.renderInstances(drawStart, drawCount, object.count);
        else if (geometry.isInstancedBufferGeometry) {
            const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
            renderer.renderInstances(drawStart, drawCount, instanceCount);
        } else renderer.render(drawStart, drawCount);
    };
    // Compile
    this.compile = function(scene, camera) {
        currentRenderState = renderStates.get(scene);
        currentRenderState.init();
        renderStateStack.push(currentRenderState);
        scene.traverseVisible(function(object) {
            if (object.isLight && object.layers.test(camera.layers)) {
                currentRenderState.pushLight(object);
                if (object.castShadow) currentRenderState.pushShadow(object);
            }
        });
        currentRenderState.setupLights(_this.physicallyCorrectLights);
        scene.traverse(function(object) {
            const material = object.material;
            if (material) {
                if (Array.isArray(material)) for(let i = 0; i < material.length; i++){
                    const material2 = material[i];
                    getProgram(material2, scene, object);
                }
                else getProgram(material, scene, object);
            }
        });
        renderStateStack.pop();
        currentRenderState = null;
    };
    // Animation Loop
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time) {
        if (onAnimationFrameCallback) onAnimationFrameCallback(time);
    }
    function onXRSessionStart() {
        animation.stop();
    }
    function onXRSessionEnd() {
        animation.start();
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    if (typeof window !== 'undefined') animation.setContext(window);
    this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
        xr.setAnimationLoop(callback);
        callback === null ? animation.stop() : animation.start();
    };
    xr.addEventListener('sessionstart', onXRSessionStart);
    xr.addEventListener('sessionend', onXRSessionEnd);
    // Rendering
    this.render = function(scene, camera) {
        if (camera !== undefined && camera.isCamera !== true) {
            console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
            return;
        }
        if (_isContextLost === true) return;
        // update scene graph
        if (scene.autoUpdate === true) scene.updateMatrixWorld();
        // update camera matrices and frustum
        if (camera.parent === null) camera.updateMatrixWorld();
        if (xr.enabled === true && xr.isPresenting === true) {
            if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
            camera = xr.getCamera(); // use XR camera for rendering
        }
        //
        if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
        currentRenderState = renderStates.get(scene, renderStateStack.length);
        currentRenderState.init();
        renderStateStack.push(currentRenderState);
        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        _frustum.setFromProjectionMatrix(_projScreenMatrix);
        _localClippingEnabled = this.localClippingEnabled;
        _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
        currentRenderList1 = renderLists.get(scene, renderListStack.length);
        currentRenderList1.init();
        renderListStack.push(currentRenderList1);
        projectObject(scene, camera, 0, _this.sortObjects);
        currentRenderList1.finish();
        if (_this.sortObjects === true) currentRenderList1.sort(_opaqueSort, _transparentSort);
        //
        if (_clippingEnabled === true) clipping.beginShadows();
        const shadowsArray = currentRenderState.state.shadowsArray;
        shadowMap.render(shadowsArray, scene, camera);
        if (_clippingEnabled === true) clipping.endShadows();
        //
        if (this.info.autoReset === true) this.info.reset();
        //
        background.render(currentRenderList1, scene);
        // render scene
        currentRenderState.setupLights(_this.physicallyCorrectLights);
        if (camera.isArrayCamera) {
            const cameras = camera.cameras;
            for(let i = 0, l = cameras.length; i < l; i++){
                const camera2 = cameras[i];
                renderScene(currentRenderList1, scene, camera2, camera2.viewport);
            }
        } else renderScene(currentRenderList1, scene, camera);
        //
        if (_currentRenderTarget !== null) {
            // resolve multisample renderbuffers to a single-sample texture if necessary
            textures1.updateMultisampleRenderTarget(_currentRenderTarget);
            // Generate mipmap if we're using any kind of mipmap filtering
            textures1.updateRenderTargetMipmap(_currentRenderTarget);
        }
        //
        if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);
        // Ensure depth buffer writing is enabled so it can be cleared on next render
        state.buffers.depth.setTest(true);
        state.buffers.depth.setMask(true);
        state.buffers.color.setMask(true);
        state.setPolygonOffset(false);
        // _gl.finish();
        bindingStates.resetDefaultState();
        _currentMaterialId = -1;
        _currentCamera = null;
        renderStateStack.pop();
        if (renderStateStack.length > 0) currentRenderState = renderStateStack[renderStateStack.length - 1];
        else currentRenderState = null;
        renderListStack.pop();
        if (renderListStack.length > 0) currentRenderList1 = renderListStack[renderListStack.length - 1];
        else currentRenderList1 = null;
    };
    function projectObject(object, camera, groupOrder, sortObjects) {
        if (object.visible === false) return;
        const visible = object.layers.test(camera.layers);
        if (visible) {
            if (object.isGroup) groupOrder = object.renderOrder;
            else if (object.isLOD) {
                if (object.autoUpdate === true) object.update(camera);
            } else if (object.isLight) {
                currentRenderState.pushLight(object);
                if (object.castShadow) currentRenderState.pushShadow(object);
            } else if (object.isSprite) {
                if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
                    if (sortObjects) _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                    const geometry = objects.update(object);
                    const material = object.material;
                    if (material.visible) currentRenderList1.push(object, geometry, material, groupOrder, _vector3.z, null);
                }
            } else if (object.isMesh || object.isLine || object.isPoints) {
                if (object.isSkinnedMesh) // update skeleton only once in a frame
                {
                    if (object.skeleton.frame !== info.render.frame) {
                        object.skeleton.update();
                        object.skeleton.frame = info.render.frame;
                    }
                }
                if (!object.frustumCulled || _frustum.intersectsObject(object)) {
                    if (sortObjects) _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                    const geometry = objects.update(object);
                    const material = object.material;
                    if (Array.isArray(material)) {
                        const groups = geometry.groups;
                        for(let i = 0, l = groups.length; i < l; i++){
                            const group = groups[i];
                            const groupMaterial = material[group.materialIndex];
                            if (groupMaterial && groupMaterial.visible) currentRenderList1.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
                        }
                    } else if (material.visible) currentRenderList1.push(object, geometry, material, groupOrder, _vector3.z, null);
                }
            }
        }
        const children = object.children;
        for(let i = 0, l = children.length; i < l; i++)projectObject(children[i], camera, groupOrder, sortObjects);
    }
    function renderScene(currentRenderList, scene, camera, viewport) {
        const opaqueObjects = currentRenderList.opaque;
        const transmissiveObjects = currentRenderList.transmissive;
        const transparentObjects = currentRenderList.transparent;
        currentRenderState.setupLightsView(camera);
        if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, scene, camera);
        if (viewport) state.viewport(_currentViewport.copy(viewport));
        if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
        if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
        if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);
    }
    function renderTransmissionPass(opaqueObjects, scene, camera) {
        if (_transmissionRenderTarget === null) {
            const needsAntialias = _antialias === true && capabilities.isWebGL2 === true;
            const renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;
            _transmissionRenderTarget = new renderTargetType(1024, 1024, {
                generateMipmaps: true,
                type: utils.convert(HalfFloatType) !== null ? HalfFloatType : UnsignedByteType,
                minFilter: LinearMipmapLinearFilter,
                magFilter: NearestFilter,
                wrapS: ClampToEdgeWrapping,
                wrapT: ClampToEdgeWrapping,
                useRenderToTexture: extensions.has('WEBGL_multisampled_render_to_texture')
            });
        }
        const currentRenderTarget = _this.getRenderTarget();
        _this.setRenderTarget(_transmissionRenderTarget);
        _this.clear();
        // Turn off the features which can affect the frag color for opaque objects pass.
        // Otherwise they are applied twice in opaque objects pass and transmission objects pass.
        const currentToneMapping = _this.toneMapping;
        _this.toneMapping = NoToneMapping;
        renderObjects(opaqueObjects, scene, camera);
        _this.toneMapping = currentToneMapping;
        textures1.updateMultisampleRenderTarget(_transmissionRenderTarget);
        textures1.updateRenderTargetMipmap(_transmissionRenderTarget);
        _this.setRenderTarget(currentRenderTarget);
    }
    function renderObjects(renderList, scene, camera) {
        const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
        for(let i = 0, l = renderList.length; i < l; i++){
            const renderItem = renderList[i];
            const object = renderItem.object;
            const geometry = renderItem.geometry;
            const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
            const group = renderItem.group;
            if (object.layers.test(camera.layers)) renderObject(object, scene, camera, geometry, material, group);
        }
    }
    function renderObject(object, scene, camera, geometry, material, group) {
        object.onBeforeRender(_this, scene, camera, geometry, material, group);
        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
        material.onBeforeRender(_this, scene, camera, geometry, object, group);
        if (material.transparent === true && material.side === DoubleSide) {
            material.side = BackSide;
            material.needsUpdate = true;
            _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            material.side = FrontSide;
            material.needsUpdate = true;
            _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            material.side = DoubleSide;
        } else _this.renderBufferDirect(camera, scene, geometry, material, object, group);
        object.onAfterRender(_this, scene, camera, geometry, material, group);
    }
    function getProgram(material, scene, object) {
        if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        const shadowsArray = currentRenderState.state.shadowsArray;
        const lightsStateVersion = lights.state.version;
        const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
        const programCacheKey = programCache.getProgramCacheKey(parameters);
        let programs = materialProperties.programs;
        // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
        materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
        materialProperties.fog = scene.fog;
        materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
        if (programs === undefined) {
            // new material
            material.addEventListener('dispose', onMaterialDispose);
            programs = new Map();
            materialProperties.programs = programs;
        }
        let program = programs.get(programCacheKey);
        if (program !== undefined) // early out if program and light state is identical
        {
            if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
                updateCommonMaterialProperties(material, parameters);
                return program;
            }
        } else {
            parameters.uniforms = programCache.getUniforms(material);
            material.onBuild(object, parameters, _this);
            material.onBeforeCompile(parameters, _this);
            program = programCache.acquireProgram(parameters, programCacheKey);
            programs.set(programCacheKey, program);
            materialProperties.uniforms = parameters.uniforms;
        }
        const uniforms = materialProperties.uniforms;
        if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) uniforms.clippingPlanes = clipping.uniform;
        updateCommonMaterialProperties(material, parameters);
        // store the light setup it was created for
        materialProperties.needsLights = materialNeedsLights(material);
        materialProperties.lightsStateVersion = lightsStateVersion;
        if (materialProperties.needsLights) {
            // wire up the material to this renderer's lighting state
            uniforms.ambientLightColor.value = lights.state.ambient;
            uniforms.lightProbe.value = lights.state.probe;
            uniforms.directionalLights.value = lights.state.directional;
            uniforms.directionalLightShadows.value = lights.state.directionalShadow;
            uniforms.spotLights.value = lights.state.spot;
            uniforms.spotLightShadows.value = lights.state.spotShadow;
            uniforms.rectAreaLights.value = lights.state.rectArea;
            uniforms.ltc_1.value = lights.state.rectAreaLTC1;
            uniforms.ltc_2.value = lights.state.rectAreaLTC2;
            uniforms.pointLights.value = lights.state.point;
            uniforms.pointLightShadows.value = lights.state.pointShadow;
            uniforms.hemisphereLights.value = lights.state.hemi;
            uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
            uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
            uniforms.spotShadowMap.value = lights.state.spotShadowMap;
            uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
            uniforms.pointShadowMap.value = lights.state.pointShadowMap;
            uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
        // TODO (abelnation): add area lights shadow info to uniforms
        }
        const progUniforms = program.getUniforms();
        const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
        materialProperties.currentProgram = program;
        materialProperties.uniformsList = uniformsList;
        return program;
    }
    function updateCommonMaterialProperties(material, parameters) {
        const materialProperties = properties.get(material);
        materialProperties.outputEncoding = parameters.outputEncoding;
        materialProperties.instancing = parameters.instancing;
        materialProperties.skinning = parameters.skinning;
        materialProperties.morphTargets = parameters.morphTargets;
        materialProperties.morphNormals = parameters.morphNormals;
        materialProperties.morphTargetsCount = parameters.morphTargetsCount;
        materialProperties.numClippingPlanes = parameters.numClippingPlanes;
        materialProperties.numIntersection = parameters.numClipIntersection;
        materialProperties.vertexAlphas = parameters.vertexAlphas;
        materialProperties.vertexTangents = parameters.vertexTangents;
        materialProperties.toneMapping = parameters.toneMapping;
    }
    function setProgram(camera, scene, geometry, material, object) {
        if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
        textures1.resetTextureUnits();
        const fog = scene.fog;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
        const vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;
        const morphTargets = !!geometry.morphAttributes.position;
        const morphNormals = !!geometry.morphAttributes.normal;
        const morphTargetsCount = !!geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;
        const toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        if (_clippingEnabled === true) {
            if (_localClippingEnabled === true || camera !== _currentCamera) {
                const useCache = camera === _currentCamera && material.id === _currentMaterialId;
                // we might want to call this function with some ClippingGroup
                // object instead of the material, once it becomes feasible
                // (#8465, #8379)
                clipping.setState(material, camera, useCache);
            }
        }
        //
        let needsProgramChange = false;
        if (material.version === materialProperties.__version) {
            if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) needsProgramChange = true;
            else if (materialProperties.outputEncoding !== encoding) needsProgramChange = true;
            else if (object.isInstancedMesh && materialProperties.instancing === false) needsProgramChange = true;
            else if (!object.isInstancedMesh && materialProperties.instancing === true) needsProgramChange = true;
            else if (object.isSkinnedMesh && materialProperties.skinning === false) needsProgramChange = true;
            else if (!object.isSkinnedMesh && materialProperties.skinning === true) needsProgramChange = true;
            else if (materialProperties.envMap !== envMap) needsProgramChange = true;
            else if (material.fog && materialProperties.fog !== fog) needsProgramChange = true;
            else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) needsProgramChange = true;
            else if (materialProperties.vertexAlphas !== vertexAlphas) needsProgramChange = true;
            else if (materialProperties.vertexTangents !== vertexTangents) needsProgramChange = true;
            else if (materialProperties.morphTargets !== morphTargets) needsProgramChange = true;
            else if (materialProperties.morphNormals !== morphNormals) needsProgramChange = true;
            else if (materialProperties.toneMapping !== toneMapping) needsProgramChange = true;
            else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) needsProgramChange = true;
        } else {
            needsProgramChange = true;
            materialProperties.__version = material.version;
        }
        //
        let program = materialProperties.currentProgram;
        if (needsProgramChange === true) program = getProgram(material, scene, object);
        let refreshProgram = false;
        let refreshMaterial = false;
        let refreshLights = false;
        const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
        if (state.useProgram(program.program)) {
            refreshProgram = true;
            refreshMaterial = true;
            refreshLights = true;
        }
        if (material.id !== _currentMaterialId) {
            _currentMaterialId = material.id;
            refreshMaterial = true;
        }
        if (refreshProgram || _currentCamera !== camera) {
            p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);
            if (capabilities.logarithmicDepthBuffer) p_uniforms.setValue(_gl, 'logDepthBufFC', 2 / (Math.log(camera.far + 1) / Math.LN2));
            if (_currentCamera !== camera) {
                _currentCamera = camera;
                // lighting uniforms depend on the camera so enforce an update
                // now, in case this material supports lights - or later, when
                // the next material that does gets activated:
                refreshMaterial = true; // set to true on material change
                refreshLights = true; // remains set until update done
            }
            // load material specific uniforms
            // (shader material also gets them for the sake of genericity)
            if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
                const uCamPos = p_uniforms.map.cameraPosition;
                if (uCamPos !== undefined) uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
            }
            if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);
            if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);
        }
        // skinning and morph target uniforms must be set even if material didn't change
        // auto-setting of texture unit for bone and morph texture must go before other textures
        // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
        if (object.isSkinnedMesh) {
            p_uniforms.setOptional(_gl, object, 'bindMatrix');
            p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');
            const skeleton = object.skeleton;
            if (skeleton) {
                if (capabilities.floatVertexTextures) {
                    if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
                    p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures1);
                    p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);
                } else p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');
            }
        }
        if (!!geometry && (geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined)) morphtargets.update(object, geometry, material, program);
        if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
            materialProperties.receiveShadow = object.receiveShadow;
            p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);
        }
        if (refreshMaterial) {
            p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);
            if (materialProperties.needsLights) // the current material requires lighting info
            // note: all lighting uniforms are always set correctly
            // they simply reference the renderer's state for their
            // values
            //
            // use the current material's .needsUpdate flags to set
            // the GL state when required
            markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
            // refresh uniforms common to several materials
            if (fog && material.fog) materials.refreshFogUniforms(m_uniforms, fog);
            materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
            WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures1);
        }
        if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
            WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures1);
            material.uniformsNeedUpdate = false;
        }
        if (material.isSpriteMaterial) p_uniforms.setValue(_gl, 'center', object.center);
        // common matrices
        p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);
        p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);
        p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);
        return program;
    }
    // If uniforms are marked as clean, they don't need to be loaded to the GPU.
    function markUniformsLightsNeedsUpdate(uniforms, value) {
        uniforms.ambientLightColor.needsUpdate = value;
        uniforms.lightProbe.needsUpdate = value;
        uniforms.directionalLights.needsUpdate = value;
        uniforms.directionalLightShadows.needsUpdate = value;
        uniforms.pointLights.needsUpdate = value;
        uniforms.pointLightShadows.needsUpdate = value;
        uniforms.spotLights.needsUpdate = value;
        uniforms.spotLightShadows.needsUpdate = value;
        uniforms.rectAreaLights.needsUpdate = value;
        uniforms.hemisphereLights.needsUpdate = value;
    }
    function materialNeedsLights(material) {
        return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
    }
    this.getActiveCubeFace = function() {
        return _currentActiveCubeFace;
    };
    this.getActiveMipmapLevel = function() {
        return _currentActiveMipmapLevel;
    };
    this.getRenderTarget = function() {
        return _currentRenderTarget;
    };
    this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
        properties.get(renderTarget.texture).__webglTexture = colorTexture;
        properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__hasExternalTextures = true;
        if (renderTargetProperties.__hasExternalTextures) {
            renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;
            if (!renderTargetProperties.__autoAllocateDepthBuffer) // The multisample_render_to_texture extension doesn't work properly if there
            // are midframe flushes and an external depth buffer. Disable use of the extension.
            {
                if (renderTarget.useRenderToTexture) {
                    console.warn('render-to-texture extension was disabled because an external texture was provided');
                    renderTarget.useRenderToTexture = false;
                    renderTarget.useRenderbuffer = true;
                }
            }
        }
    };
    this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
        renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
    };
    this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
        _currentRenderTarget = renderTarget;
        _currentActiveCubeFace = activeCubeFace;
        _currentActiveMipmapLevel = activeMipmapLevel;
        let useDefaultFramebuffer = true;
        if (renderTarget) {
            const renderTargetProperties = properties.get(renderTarget);
            if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {
                // We need to make sure to rebind the framebuffer.
                state.bindFramebuffer(36160, null);
                useDefaultFramebuffer = false;
            } else if (renderTargetProperties.__webglFramebuffer === undefined) textures1.setupRenderTarget(renderTarget);
            else if (renderTargetProperties.__hasExternalTextures) // Color and depth texture must be rebound in order for the swapchain to update.
            textures1.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
        }
        let framebuffer = null;
        let isCube = false;
        let isRenderTarget3D = false;
        if (renderTarget) {
            const texture = renderTarget.texture;
            if (texture.isDataTexture3D || texture.isDataTexture2DArray) isRenderTarget3D = true;
            const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
            if (renderTarget.isWebGLCubeRenderTarget) {
                framebuffer = __webglFramebuffer[activeCubeFace];
                isCube = true;
            } else if (renderTarget.useRenderbuffer) framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
            else framebuffer = __webglFramebuffer;
            _currentViewport.copy(renderTarget.viewport);
            _currentScissor.copy(renderTarget.scissor);
            _currentScissorTest = renderTarget.scissorTest;
        } else {
            _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
            _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
            _currentScissorTest = _scissorTest;
        }
        const framebufferBound = state.bindFramebuffer(36160, framebuffer);
        if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
            let needsUpdate = false;
            if (renderTarget) {
                if (renderTarget.isWebGLMultipleRenderTargets) {
                    const textures = renderTarget.texture;
                    if (_currentDrawBuffers.length !== textures.length || _currentDrawBuffers[0] !== 36064) {
                        for(let i = 0, il = textures.length; i < il; i++)_currentDrawBuffers[i] = 36064 + i;
                        _currentDrawBuffers.length = textures.length;
                        needsUpdate = true;
                    }
                } else if (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== 36064) {
                    _currentDrawBuffers[0] = 36064;
                    _currentDrawBuffers.length = 1;
                    needsUpdate = true;
                }
            } else if (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== 1029) {
                _currentDrawBuffers[0] = 1029;
                _currentDrawBuffers.length = 1;
                needsUpdate = true;
            }
            if (needsUpdate) {
                if (capabilities.isWebGL2) _gl.drawBuffers(_currentDrawBuffers);
                else extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);
            }
        }
        state.viewport(_currentViewport);
        state.scissor(_currentScissor);
        state.setScissorTest(_currentScissorTest);
        if (isCube) {
            const textureProperties = properties.get(renderTarget.texture);
            _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
        } else if (isRenderTarget3D) {
            const textureProperties = properties.get(renderTarget.texture);
            const layer = activeCubeFace || 0;
            _gl.framebufferTextureLayer(36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
        }
        _currentMaterialId = -1; // reset current material to ensure correct uniform bindings
    };
    this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
        if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
            return;
        }
        let framebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) framebuffer = framebuffer[activeCubeFaceIndex];
        if (framebuffer) {
            state.bindFramebuffer(36160, framebuffer);
            try {
                const texture = renderTarget.texture;
                const textureFormat = texture.format;
                const textureType = texture.type;
                if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
                    console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
                    return;
                }
                const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));
                if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && !(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && !halfFloatSupportedByExt) {
                    console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
                    return;
                }
                if (_gl.checkFramebufferStatus(36160) === 36053) // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
                {
                    if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
                } else console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');
            } finally{
                // restore framebuffer of current render target if necessary
                const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
                state.bindFramebuffer(36160, framebuffer);
            }
        }
    };
    this.copyFramebufferToTexture = function(position, texture, level = 0) {
        if (texture.isFramebufferTexture !== true) {
            console.error('THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.');
            return;
        }
        const levelScale = Math.pow(2, -level);
        const width = Math.floor(texture.image.width * levelScale);
        const height = Math.floor(texture.image.height * levelScale);
        textures1.setTexture2D(texture, 0);
        _gl.copyTexSubImage2D(3553, level, 0, 0, position.x, position.y, width, height);
        state.unbindTexture();
    };
    this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
        const width = srcTexture.image.width;
        const height = srcTexture.image.height;
        const glFormat = utils.convert(dstTexture.format);
        const glType = utils.convert(dstTexture.type);
        textures1.setTexture2D(dstTexture, 0);
        // As another texture upload may have changed pixelStorei
        // parameters, make sure they are correct for the dstTexture
        _gl.pixelStorei(37440, dstTexture.flipY);
        _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(3317, dstTexture.unpackAlignment);
        if (srcTexture.isDataTexture) _gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
        else if (srcTexture.isCompressedTexture) _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
        else _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);
        // Generate mipmaps only when copying level 0
        if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);
        state.unbindTexture();
    };
    this.copyTextureToTexture3D = function(sourceBox, position, srcTexture, dstTexture, level = 0) {
        if (_this.isWebGL1Renderer) {
            console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');
            return;
        }
        const width = sourceBox.max.x - sourceBox.min.x + 1;
        const height = sourceBox.max.y - sourceBox.min.y + 1;
        const depth = sourceBox.max.z - sourceBox.min.z + 1;
        const glFormat = utils.convert(dstTexture.format);
        const glType = utils.convert(dstTexture.type);
        let glTarget;
        if (dstTexture.isDataTexture3D) {
            textures1.setTexture3D(dstTexture, 0);
            glTarget = 32879;
        } else if (dstTexture.isDataTexture2DArray) {
            textures1.setTexture2DArray(dstTexture, 0);
            glTarget = 35866;
        } else {
            console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');
            return;
        }
        _gl.pixelStorei(37440, dstTexture.flipY);
        _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(3317, dstTexture.unpackAlignment);
        const unpackRowLen = _gl.getParameter(3314);
        const unpackImageHeight = _gl.getParameter(32878);
        const unpackSkipPixels = _gl.getParameter(3316);
        const unpackSkipRows = _gl.getParameter(3315);
        const unpackSkipImages = _gl.getParameter(32877);
        const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
        _gl.pixelStorei(3314, image.width);
        _gl.pixelStorei(32878, image.height);
        _gl.pixelStorei(3316, sourceBox.min.x);
        _gl.pixelStorei(3315, sourceBox.min.y);
        _gl.pixelStorei(32877, sourceBox.min.z);
        if (srcTexture.isDataTexture || srcTexture.isDataTexture3D) _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);
        else if (srcTexture.isCompressedTexture) {
            console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');
            _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);
        } else _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);
        _gl.pixelStorei(3314, unpackRowLen);
        _gl.pixelStorei(32878, unpackImageHeight);
        _gl.pixelStorei(3316, unpackSkipPixels);
        _gl.pixelStorei(3315, unpackSkipRows);
        _gl.pixelStorei(32877, unpackSkipImages);
        // Generate mipmaps only when copying level 0
        if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
        state.unbindTexture();
    };
    this.initTexture = function(texture) {
        textures1.setTexture2D(texture, 0);
        state.unbindTexture();
    };
    this.resetState = function() {
        _currentActiveCubeFace = 0;
        _currentActiveMipmapLevel = 0;
        _currentRenderTarget = null;
        state.reset();
        bindingStates.reset();
    };
    if (typeof __THREE_DEVTOOLS__ !== 'undefined') __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
        detail: this
    }));
}
WebGLRenderer.prototype.isWebGLRenderer = true;
class WebGL1Renderer extends WebGLRenderer {
}
WebGL1Renderer.prototype.isWebGL1Renderer = true;
class FogExp2 {
    constructor(color28, density = 0.00025){
        this.name = '';
        this.color = new Color(color28);
        this.density = density;
    }
    clone() {
        return new FogExp2(this.color, this.density);
    }
    toJSON() {
        return {
            type: 'FogExp2',
            color: this.color.getHex(),
            density: this.density
        };
    }
}
FogExp2.prototype.isFogExp2 = true;
class Fog {
    constructor(color10, near9 = 1, far9 = 1000){
        this.name = '';
        this.color = new Color(color10);
        this.near = near9;
        this.far = far9;
    }
    clone() {
        return new Fog(this.color, this.near, this.far);
    }
    toJSON() {
        return {
            type: 'Fog',
            color: this.color.getHex(),
            near: this.near,
            far: this.far
        };
    }
}
Fog.prototype.isFog = true;
class Scene extends Object3D {
    constructor(){
        super();
        this.type = 'Scene';
        this.background = null;
        this.environment = null;
        this.fog = null;
        this.overrideMaterial = null;
        this.autoUpdate = true; // checked by the renderer
        if (typeof __THREE_DEVTOOLS__ !== 'undefined') __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
            detail: this
        }));
    }
    copy(source16, recursive5) {
        super.copy(source16, recursive5);
        if (source16.background !== null) this.background = source16.background.clone();
        if (source16.environment !== null) this.environment = source16.environment.clone();
        if (source16.fog !== null) this.fog = source16.fog.clone();
        if (source16.overrideMaterial !== null) this.overrideMaterial = source16.overrideMaterial.clone();
        this.autoUpdate = source16.autoUpdate;
        this.matrixAutoUpdate = source16.matrixAutoUpdate;
        return this;
    }
    toJSON(meta6) {
        const data = super.toJSON(meta6);
        if (this.fog !== null) data.object.fog = this.fog.toJSON();
        return data;
    }
}
Scene.prototype.isScene = true;
class InterleavedBuffer {
    constructor(array30, stride1){
        this.array = array30;
        this.stride = stride1;
        this.count = array30 !== undefined ? array30.length / stride1 : 0;
        this.usage = StaticDrawUsage;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
        this.uuid = generateUUID();
    }
    onUploadCallback() {
    }
    set needsUpdate(value31) {
        if (value31 === true) this.version++;
    }
    setUsage(value25) {
        this.usage = value25;
        return this;
    }
    copy(source17) {
        this.array = new source17.array.constructor(source17.array);
        this.count = source17.count;
        this.stride = source17.stride;
        this.usage = source17.usage;
        return this;
    }
    copyAt(index110, attribute10, index26) {
        index110 *= this.stride;
        index26 *= attribute10.stride;
        for(let i = 0, l = this.stride; i < l; i++)this.array[index110 + i] = attribute10.array[index26 + i];
        return this;
    }
    set(value26, offset25 = 0) {
        this.array.set(value26, offset25);
        return this;
    }
    clone(data15) {
        if (data15.arrayBuffers === undefined) data15.arrayBuffers = {
        };
        if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = generateUUID();
        if (data15.arrayBuffers[this.array.buffer._uuid] === undefined) data15.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
        const array = new this.array.constructor(data15.arrayBuffers[this.array.buffer._uuid]);
        const ib = new this.constructor(array, this.stride);
        ib.setUsage(this.usage);
        return ib;
    }
    onUpload(callback7) {
        this.onUploadCallback = callback7;
        return this;
    }
    toJSON(data6) {
        if (data6.arrayBuffers === undefined) data6.arrayBuffers = {
        };
        // generate UUID for array buffer if necessary
        if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = generateUUID();
        if (data6.arrayBuffers[this.array.buffer._uuid] === undefined) data6.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
        //
        return {
            uuid: this.uuid,
            buffer: this.array.buffer._uuid,
            type: this.array.constructor.name,
            stride: this.stride
        };
    }
}
InterleavedBuffer.prototype.isInterleavedBuffer = true;
const _vector$6 = /*@__PURE__*/ new Vector3();
class InterleavedBufferAttribute {
    constructor(interleavedBuffer1, itemSize15, offset24, normalized = false){
        this.name = '';
        this.data = interleavedBuffer1;
        this.itemSize = itemSize15;
        this.offset = offset24;
        this.normalized = normalized === true;
    }
    get count() {
        return this.data.count;
    }
    get array() {
        return this.data.array;
    }
    set needsUpdate(value27) {
        this.data.needsUpdate = value27;
    }
    applyMatrix4(m29) {
        for(let i = 0, l = this.data.count; i < l; i++){
            _vector$6.x = this.getX(i);
            _vector$6.y = this.getY(i);
            _vector$6.z = this.getZ(i);
            _vector$6.applyMatrix4(m29);
            this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
        }
        return this;
    }
    applyNormalMatrix(m30) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$6.x = this.getX(i);
            _vector$6.y = this.getY(i);
            _vector$6.z = this.getZ(i);
            _vector$6.applyNormalMatrix(m30);
            this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
        }
        return this;
    }
    transformDirection(m31) {
        for(let i = 0, l = this.count; i < l; i++){
            _vector$6.x = this.getX(i);
            _vector$6.y = this.getY(i);
            _vector$6.z = this.getZ(i);
            _vector$6.transformDirection(m31);
            this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
        }
        return this;
    }
    setX(index42, x30) {
        this.data.array[index42 * this.data.stride + this.offset] = x30;
        return this;
    }
    setY(index27, y32) {
        this.data.array[index27 * this.data.stride + this.offset + 1] = y32;
        return this;
    }
    setZ(index28, z23) {
        this.data.array[index28 * this.data.stride + this.offset + 2] = z23;
        return this;
    }
    setW(index29, w16) {
        this.data.array[index29 * this.data.stride + this.offset + 3] = w16;
        return this;
    }
    getX(index30) {
        return this.data.array[index30 * this.data.stride + this.offset];
    }
    getY(index31) {
        return this.data.array[index31 * this.data.stride + this.offset + 1];
    }
    getZ(index32) {
        return this.data.array[index32 * this.data.stride + this.offset + 2];
    }
    getW(index33) {
        return this.data.array[index33 * this.data.stride + this.offset + 3];
    }
    setXY(index34, x27, y28) {
        index34 = index34 * this.data.stride + this.offset;
        this.data.array[index34 + 0] = x27;
        this.data.array[index34 + 1] = y28;
        return this;
    }
    setXYZ(index35, x28, y29, z21) {
        index35 = index35 * this.data.stride + this.offset;
        this.data.array[index35 + 0] = x28;
        this.data.array[index35 + 1] = y29;
        this.data.array[index35 + 2] = z21;
        return this;
    }
    setXYZW(index36, x29, y30, z22, w17) {
        index36 = index36 * this.data.stride + this.offset;
        this.data.array[index36 + 0] = x29;
        this.data.array[index36 + 1] = y30;
        this.data.array[index36 + 2] = z22;
        this.data.array[index36 + 3] = w17;
        return this;
    }
    clone(data7) {
        if (data7 === undefined) {
            console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');
            const array = [];
            for(let i = 0; i < this.count; i++){
                const index = i * this.data.stride + this.offset;
                for(let j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            }
            return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
        } else {
            if (data7.interleavedBuffers === undefined) data7.interleavedBuffers = {
            };
            if (data7.interleavedBuffers[this.data.uuid] === undefined) data7.interleavedBuffers[this.data.uuid] = this.data.clone(data7);
            return new InterleavedBufferAttribute(data7.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
        }
    }
    toJSON(data8) {
        if (data8 === undefined) {
            console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');
            const array = [];
            for(let i = 0; i < this.count; i++){
                const index = i * this.data.stride + this.offset;
                for(let j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            }
            // deinterleave data and save it as an ordinary buffer attribute for now
            return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: array,
                normalized: this.normalized
            };
        } else {
            // save as true interlaved attribtue
            if (data8.interleavedBuffers === undefined) data8.interleavedBuffers = {
            };
            if (data8.interleavedBuffers[this.data.uuid] === undefined) data8.interleavedBuffers[this.data.uuid] = this.data.toJSON(data8);
            return {
                isInterleavedBufferAttribute: true,
                itemSize: this.itemSize,
                data: this.data.uuid,
                offset: this.offset,
                normalized: this.normalized
            };
        }
    }
}
InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;
/**
 * parameters = {
 *  color: <hex>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *  rotation: <float>,
 *  sizeAttenuation: <bool>
 * }
 */ class SpriteMaterial extends Material {
    constructor(parameters18){
        super();
        this.type = 'SpriteMaterial';
        this.color = new Color(16777215);
        this.map = null;
        this.alphaMap = null;
        this.rotation = 0;
        this.sizeAttenuation = true;
        this.transparent = true;
        this.setValues(parameters18);
    }
    copy(source18) {
        super.copy(source18);
        this.color.copy(source18.color);
        this.map = source18.map;
        this.alphaMap = source18.alphaMap;
        this.rotation = source18.rotation;
        this.sizeAttenuation = source18.sizeAttenuation;
        return this;
    }
}
SpriteMaterial.prototype.isSpriteMaterial = true;
let _geometry;
const _intersectPoint = /*@__PURE__*/ new Vector3();
const _worldScale = /*@__PURE__*/ new Vector3();
const _mvPosition = /*@__PURE__*/ new Vector3();
const _alignedPosition = /*@__PURE__*/ new Vector2();
const _rotatedPosition = /*@__PURE__*/ new Vector2();
const _viewWorldMatrix = /*@__PURE__*/ new Matrix4();
const _vA = /*@__PURE__*/ new Vector3();
const _vB = /*@__PURE__*/ new Vector3();
const _vC = /*@__PURE__*/ new Vector3();
const _uvA = /*@__PURE__*/ new Vector2();
const _uvB = /*@__PURE__*/ new Vector2();
const _uvC = /*@__PURE__*/ new Vector2();
class Sprite extends Object3D {
    constructor(material14){
        super();
        this.type = 'Sprite';
        if (_geometry === undefined) {
            _geometry = new BufferGeometry();
            const float32Array = new Float32Array([
                -0.5,
                -0.5,
                0,
                0,
                0,
                0.5,
                -0.5,
                0,
                1,
                0,
                0.5,
                0.5,
                0,
                1,
                1,
                -0.5,
                0.5,
                0,
                0,
                1
            ]);
            const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
            _geometry.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]);
            _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
            _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
        }
        this.geometry = _geometry;
        this.material = material14 !== undefined ? material14 : new SpriteMaterial();
        this.center = new Vector2(0.5, 0.5);
    }
    raycast(raycaster6, intersects2) {
        if (raycaster6.camera === null) console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
        _worldScale.setFromMatrixScale(this.matrixWorld);
        _viewWorldMatrix.copy(raycaster6.camera.matrixWorld);
        this.modelViewMatrix.multiplyMatrices(raycaster6.camera.matrixWorldInverse, this.matrixWorld);
        _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
        if (raycaster6.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) _worldScale.multiplyScalar(-_mvPosition.z);
        const rotation = this.material.rotation;
        let sin, cos;
        if (rotation !== 0) {
            cos = Math.cos(rotation);
            sin = Math.sin(rotation);
        }
        const center = this.center;
        transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
        _uvA.set(0, 0);
        _uvB.set(1, 0);
        _uvC.set(1, 1);
        // check first triangle
        let intersect = raycaster6.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);
        if (intersect === null) {
            // check second triangle
            transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
            _uvB.set(0, 1);
            intersect = raycaster6.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);
            if (intersect === null) return;
        }
        const distance = raycaster6.ray.origin.distanceTo(_intersectPoint);
        if (distance < raycaster6.near || distance > raycaster6.far) return;
        intersects2.push({
            distance: distance,
            point: _intersectPoint.clone(),
            uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),
            face: null,
            object: this
        });
    }
    copy(source19) {
        super.copy(source19);
        if (source19.center !== undefined) this.center.copy(source19.center);
        this.material = source19.material;
        return this;
    }
}
Sprite.prototype.isSprite = true;
function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
    // compute position in camera space
    _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
    // to check if rotation is not zero
    if (sin !== undefined) {
        _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
        _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
    } else _rotatedPosition.copy(_alignedPosition);
    vertexPosition.copy(mvPosition);
    vertexPosition.x += _rotatedPosition.x;
    vertexPosition.y += _rotatedPosition.y;
    // transform to world space
    vertexPosition.applyMatrix4(_viewWorldMatrix);
}
const _v1$2 = /*@__PURE__*/ new Vector3();
const _v2$1 = /*@__PURE__*/ new Vector3();
class LOD extends Object3D {
    constructor(){
        super();
        this._currentLevel = 0;
        this.type = 'LOD';
        Object.defineProperties(this, {
            levels: {
                enumerable: true,
                value: []
            },
            isLOD: {
                value: true
            }
        });
        this.autoUpdate = true;
    }
    copy(source20) {
        super.copy(source20, false);
        const levels = source20.levels;
        for(let i = 0, l = levels.length; i < l; i++){
            const level = levels[i];
            this.addLevel(level.object.clone(), level.distance);
        }
        this.autoUpdate = source20.autoUpdate;
        return this;
    }
    addLevel(object7, distance6 = 0) {
        distance6 = Math.abs(distance6);
        const levels = this.levels;
        let l;
        for(l = 0; l < levels.length; l++){
            if (distance6 < levels[l].distance) break;
        }
        levels.splice(l, 0, {
            distance: distance6,
            object: object7
        });
        this.add(object7);
        return this;
    }
    getCurrentLevel() {
        return this._currentLevel;
    }
    getObjectForDistance(distance5) {
        const levels = this.levels;
        if (levels.length > 0) {
            let i, l;
            for(i = 1, l = levels.length; i < l; i++){
                if (distance5 < levels[i].distance) break;
            }
            return levels[i - 1].object;
        }
        return null;
    }
    raycast(raycaster2, intersects3) {
        const levels = this.levels;
        if (levels.length > 0) {
            _v1$2.setFromMatrixPosition(this.matrixWorld);
            const distance = raycaster2.ray.origin.distanceTo(_v1$2);
            this.getObjectForDistance(distance).raycast(raycaster2, intersects3);
        }
    }
    update(camera7) {
        const levels = this.levels;
        if (levels.length > 1) {
            _v1$2.setFromMatrixPosition(camera7.matrixWorld);
            _v2$1.setFromMatrixPosition(this.matrixWorld);
            const distance = _v1$2.distanceTo(_v2$1) / camera7.zoom;
            levels[0].object.visible = true;
            let i, l;
            for(i = 1, l = levels.length; i < l; i++){
                if (distance >= levels[i].distance) {
                    levels[i - 1].object.visible = false;
                    levels[i].object.visible = true;
                } else break;
            }
            this._currentLevel = i - 1;
            for(; i < l; i++)levels[i].object.visible = false;
        }
    }
    toJSON(meta7) {
        const data = super.toJSON(meta7);
        if (this.autoUpdate === false) data.object.autoUpdate = false;
        data.object.levels = [];
        const levels = this.levels;
        for(let i = 0, l = levels.length; i < l; i++){
            const level = levels[i];
            data.object.levels.push({
                object: level.object.uuid,
                distance: level.distance
            });
        }
        return data;
    }
}
const _basePosition = /*@__PURE__*/ new Vector3();
const _skinIndex = /*@__PURE__*/ new Vector4();
const _skinWeight = /*@__PURE__*/ new Vector4();
const _vector$5 = /*@__PURE__*/ new Vector3();
const _matrix = /*@__PURE__*/ new Matrix4();
class SkinnedMesh extends Mesh {
    constructor(geometry10, material8){
        super(geometry10, material8);
        this.type = 'SkinnedMesh';
        this.bindMode = 'attached';
        this.bindMatrix = new Matrix4();
        this.bindMatrixInverse = new Matrix4();
    }
    copy(source21) {
        super.copy(source21);
        this.bindMode = source21.bindMode;
        this.bindMatrix.copy(source21.bindMatrix);
        this.bindMatrixInverse.copy(source21.bindMatrixInverse);
        this.skeleton = source21.skeleton;
        return this;
    }
    bind(skeleton1, bindMatrix) {
        this.skeleton = skeleton1;
        if (bindMatrix === undefined) {
            this.updateMatrixWorld(true);
            this.skeleton.calculateInverses();
            bindMatrix = this.matrixWorld;
        }
        this.bindMatrix.copy(bindMatrix);
        this.bindMatrixInverse.copy(bindMatrix).invert();
    }
    pose() {
        this.skeleton.pose();
    }
    normalizeSkinWeights() {
        const vector = new Vector4();
        const skinWeight = this.geometry.attributes.skinWeight;
        for(let i = 0, l = skinWeight.count; i < l; i++){
            vector.x = skinWeight.getX(i);
            vector.y = skinWeight.getY(i);
            vector.z = skinWeight.getZ(i);
            vector.w = skinWeight.getW(i);
            const scale = 1 / vector.manhattanLength();
            if (scale !== Infinity) vector.multiplyScalar(scale);
            else vector.set(1, 0, 0, 0); // do something reasonable
            skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
        }
    }
    updateMatrixWorld(force2) {
        super.updateMatrixWorld(force2);
        if (this.bindMode === 'attached') this.bindMatrixInverse.copy(this.matrixWorld).invert();
        else if (this.bindMode === 'detached') this.bindMatrixInverse.copy(this.bindMatrix).invert();
        else console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);
    }
    boneTransform(index37, target43) {
        const skeleton = this.skeleton;
        const geometry = this.geometry;
        _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index37);
        _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index37);
        _basePosition.copy(target43).applyMatrix4(this.bindMatrix);
        target43.set(0, 0, 0);
        for(let i = 0; i < 4; i++){
            const weight = _skinWeight.getComponent(i);
            if (weight !== 0) {
                const boneIndex = _skinIndex.getComponent(i);
                _matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
                target43.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);
            }
        }
        return target43.applyMatrix4(this.bindMatrixInverse);
    }
}
SkinnedMesh.prototype.isSkinnedMesh = true;
class Bone extends Object3D {
    constructor(){
        super();
        this.type = 'Bone';
    }
}
Bone.prototype.isBone = true;
class DataTexture extends Texture {
    constructor(data9 = null, width16 = 1, height = 1, format3, type6, mapping3, wrapS3, wrapT3, magFilter3 = NearestFilter, minFilter3 = NearestFilter, anisotropy3, encoding){
        super(null, mapping3, wrapS3, wrapT3, magFilter3, minFilter3, format3, type6, anisotropy3, encoding);
        this.image = {
            data: data9,
            width: width16,
            height: height
        };
        this.magFilter = magFilter3;
        this.minFilter = minFilter3;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
DataTexture.prototype.isDataTexture = true;
const _offsetMatrix = /*@__PURE__*/ new Matrix4();
const _identityMatrix = /*@__PURE__*/ new Matrix4();
class Skeleton {
    constructor(bones = [], boneInverses = []){
        this.uuid = generateUUID();
        this.bones = bones.slice(0);
        this.boneInverses = boneInverses;
        this.boneMatrices = null;
        this.boneTexture = null;
        this.boneTextureSize = 0;
        this.frame = -1;
        this.init();
    }
    init() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        this.boneMatrices = new Float32Array(bones.length * 16);
        // calculate inverse bone matrices if necessary
        if (boneInverses.length === 0) this.calculateInverses();
        else // handle special case
        if (bones.length !== boneInverses.length) {
            console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');
            this.boneInverses = [];
            for(let i = 0, il = this.bones.length; i < il; i++)this.boneInverses.push(new Matrix4());
        }
    }
    calculateInverses() {
        this.boneInverses.length = 0;
        for(let i = 0, il = this.bones.length; i < il; i++){
            const inverse = new Matrix4();
            if (this.bones[i]) inverse.copy(this.bones[i].matrixWorld).invert();
            this.boneInverses.push(inverse);
        }
    }
    pose() {
        // recover the bind-time world matrices
        for(let i = 0, il = this.bones.length; i < il; i++){
            const bone = this.bones[i];
            if (bone) bone.matrixWorld.copy(this.boneInverses[i]).invert();
        }
        // compute the local matrices, positions, rotations and scales
        for(let i25 = 0, il6 = this.bones.length; i25 < il6; i25++){
            const bone = this.bones[i25];
            if (bone) {
                if (bone.parent && bone.parent.isBone) {
                    bone.matrix.copy(bone.parent.matrixWorld).invert();
                    bone.matrix.multiply(bone.matrixWorld);
                } else bone.matrix.copy(bone.matrixWorld);
                bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
            }
        }
    }
    update() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        const boneMatrices = this.boneMatrices;
        const boneTexture = this.boneTexture;
        // flatten bone matrices to array
        for(let i = 0, il = bones.length; i < il; i++){
            // compute the offset between the current and the original transform
            const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
            _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
            _offsetMatrix.toArray(boneMatrices, i * 16);
        }
        if (boneTexture !== null) boneTexture.needsUpdate = true;
    }
    clone() {
        return new Skeleton(this.bones, this.boneInverses);
    }
    computeBoneTexture() {
        // layout (1 matrix = 4 pixels)
        //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
        //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
        //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
        //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
        //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
        let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
        size = ceilPowerOfTwo(size);
        size = Math.max(size, 4);
        const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel
        boneMatrices.set(this.boneMatrices); // copy current values
        const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
        boneTexture.needsUpdate = true;
        this.boneMatrices = boneMatrices;
        this.boneTexture = boneTexture;
        this.boneTextureSize = size;
        return this;
    }
    getBoneByName(name10) {
        for(let i = 0, il = this.bones.length; i < il; i++){
            const bone = this.bones[i];
            if (bone.name === name10) return bone;
        }
        return undefined;
    }
    dispose() {
        if (this.boneTexture !== null) {
            this.boneTexture.dispose();
            this.boneTexture = null;
        }
    }
    fromJSON(json15, bones1) {
        this.uuid = json15.uuid;
        for(let i = 0, l = json15.bones.length; i < l; i++){
            const uuid = json15.bones[i];
            let bone = bones1[uuid];
            if (bone === undefined) {
                console.warn('THREE.Skeleton: No bone found with UUID:', uuid);
                bone = new Bone();
            }
            this.bones.push(bone);
            this.boneInverses.push(new Matrix4().fromArray(json15.boneInverses[i]));
        }
        this.init();
        return this;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.5,
                type: 'Skeleton',
                generator: 'Skeleton.toJSON'
            },
            bones: [],
            boneInverses: []
        };
        data.uuid = this.uuid;
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        for(let i = 0, l = bones.length; i < l; i++){
            const bone = bones[i];
            data.bones.push(bone.uuid);
            const boneInverse = boneInverses[i];
            data.boneInverses.push(boneInverse.toArray());
        }
        return data;
    }
}
class InstancedBufferAttribute extends BufferAttribute {
    constructor(array31, itemSize12, normalized12, meshPerAttribute = 1){
        if (typeof normalized12 === 'number') {
            meshPerAttribute = normalized12;
            normalized12 = false;
            console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');
        }
        super(array31, itemSize12, normalized12);
        this.meshPerAttribute = meshPerAttribute;
    }
    copy(source22) {
        super.copy(source22);
        this.meshPerAttribute = source22.meshPerAttribute;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.meshPerAttribute = this.meshPerAttribute;
        data.isInstancedBufferAttribute = true;
        return data;
    }
}
InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;
const _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();
const _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();
const _instanceIntersects = [];
const _mesh = /*@__PURE__*/ new Mesh();
class InstancedMesh extends Mesh {
    constructor(geometry3, material9, count6){
        super(geometry3, material9);
        this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count6 * 16), 16);
        this.instanceColor = null;
        this.count = count6;
        this.frustumCulled = false;
    }
    copy(source23) {
        super.copy(source23);
        this.instanceMatrix.copy(source23.instanceMatrix);
        if (source23.instanceColor !== null) this.instanceColor = source23.instanceColor.clone();
        this.count = source23.count;
        return this;
    }
    getColorAt(index38, color12) {
        color12.fromArray(this.instanceColor.array, index38 * 3);
    }
    getMatrixAt(index39, matrix4) {
        matrix4.fromArray(this.instanceMatrix.array, index39 * 16);
    }
    raycast(raycaster3, intersects4) {
        const matrixWorld = this.matrixWorld;
        const raycastTimes = this.count;
        _mesh.geometry = this.geometry;
        _mesh.material = this.material;
        if (_mesh.material === undefined) return;
        for(let instanceId = 0; instanceId < raycastTimes; instanceId++){
            // calculate the world matrix for each instance
            this.getMatrixAt(instanceId, _instanceLocalMatrix);
            _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
            // the mesh represents this single instance
            _mesh.matrixWorld = _instanceWorldMatrix;
            _mesh.raycast(raycaster3, _instanceIntersects);
            // process the result of raycast
            for(let i = 0, l = _instanceIntersects.length; i < l; i++){
                const intersect = _instanceIntersects[i];
                intersect.instanceId = instanceId;
                intersect.object = this;
                intersects4.push(intersect);
            }
            _instanceIntersects.length = 0;
        }
    }
    setColorAt(index40, color13) {
        if (this.instanceColor === null) this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
        color13.toArray(this.instanceColor.array, index40 * 3);
    }
    setMatrixAt(index41, matrix8) {
        matrix8.toArray(this.instanceMatrix.array, index41 * 16);
    }
    updateMorphTargets() {
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
}
InstancedMesh.prototype.isInstancedMesh = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */ class LineBasicMaterial extends Material {
    constructor(parameters7){
        super();
        this.type = 'LineBasicMaterial';
        this.color = new Color(16777215);
        this.linewidth = 1;
        this.linecap = 'round';
        this.linejoin = 'round';
        this.setValues(parameters7);
    }
    copy(source24) {
        super.copy(source24);
        this.color.copy(source24.color);
        this.linewidth = source24.linewidth;
        this.linecap = source24.linecap;
        this.linejoin = source24.linejoin;
        return this;
    }
}
LineBasicMaterial.prototype.isLineBasicMaterial = true;
const _start$1 = /*@__PURE__*/ new Vector3();
const _end$1 = /*@__PURE__*/ new Vector3();
const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();
const _ray$1 = /*@__PURE__*/ new Ray();
const _sphere$1 = /*@__PURE__*/ new Sphere();
class Line extends Object3D {
    constructor(geometry4 = new BufferGeometry(), material10 = new LineBasicMaterial()){
        super();
        this.type = 'Line';
        this.geometry = geometry4;
        this.material = material10;
        this.updateMorphTargets();
    }
    copy(source25) {
        super.copy(source25);
        this.material = source25.material;
        this.geometry = source25.geometry;
        return this;
    }
    computeLineDistances() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            // we assume non-indexed geometry
            if (geometry.index === null) {
                const positionAttribute = geometry.attributes.position;
                const lineDistances = [
                    0
                ];
                for(let i = 1, l = positionAttribute.count; i < l; i++){
                    _start$1.fromBufferAttribute(positionAttribute, i - 1);
                    _end$1.fromBufferAttribute(positionAttribute, i);
                    lineDistances[i] = lineDistances[i - 1];
                    lineDistances[i] += _start$1.distanceTo(_end$1);
                }
                geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
            } else console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
        } else if (geometry.isGeometry) console.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
        return this;
    }
    raycast(raycaster4, intersects5) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster4.params.Line.threshold;
        const drawRange = geometry.drawRange;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere$1.copy(geometry.boundingSphere);
        _sphere$1.applyMatrix4(matrixWorld);
        _sphere$1.radius += threshold;
        if (raycaster4.ray.intersectsSphere(_sphere$1) === false) return;
        //
        _inverseMatrix$1.copy(matrixWorld).invert();
        _ray$1.copy(raycaster4.ray).applyMatrix4(_inverseMatrix$1);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        const vStart = new Vector3();
        const vEnd = new Vector3();
        const interSegment = new Vector3();
        const interRay = new Vector3();
        const step = this.isLineSegments ? 2 : 1;
        if (geometry.isBufferGeometry) {
            const index = geometry.index;
            const attributes = geometry.attributes;
            const positionAttribute = attributes.position;
            if (index !== null) {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(index.count, drawRange.start + drawRange.count);
                for(let i = start, l = end - 1; i < l; i += step){
                    const a = index.getX(i);
                    const b = index.getX(i + 1);
                    vStart.fromBufferAttribute(positionAttribute, a);
                    vEnd.fromBufferAttribute(positionAttribute, b);
                    const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                    if (distSq > localThresholdSq) continue;
                    interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                    const distance = raycaster4.ray.origin.distanceTo(interRay);
                    if (distance < raycaster4.near || distance > raycaster4.far) continue;
                    intersects5.push({
                        distance: distance,
                        // What do we want? intersection point on the ray or on the segment??
                        // point: raycaster.ray.at( distance ),
                        point: interSegment.clone().applyMatrix4(this.matrixWorld),
                        index: i,
                        face: null,
                        faceIndex: null,
                        object: this
                    });
                }
            } else {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
                for(let i = start, l = end - 1; i < l; i += step){
                    vStart.fromBufferAttribute(positionAttribute, i);
                    vEnd.fromBufferAttribute(positionAttribute, i + 1);
                    const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                    if (distSq > localThresholdSq) continue;
                    interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                    const distance = raycaster4.ray.origin.distanceTo(interRay);
                    if (distance < raycaster4.near || distance > raycaster4.far) continue;
                    intersects5.push({
                        distance: distance,
                        // What do we want? intersection point on the ray or on the segment??
                        // point: raycaster.ray.at( distance ),
                        point: interSegment.clone().applyMatrix4(this.matrixWorld),
                        index: i,
                        face: null,
                        faceIndex: null,
                        object: this
                    });
                }
            }
        } else if (geometry.isGeometry) console.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            const morphAttributes = geometry.morphAttributes;
            const keys = Object.keys(morphAttributes);
            if (keys.length > 0) {
                const morphAttribute = morphAttributes[keys[0]];
                if (morphAttribute !== undefined) {
                    this.morphTargetInfluences = [];
                    this.morphTargetDictionary = {
                    };
                    for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                        const name = morphAttribute[m].name || String(m);
                        this.morphTargetInfluences.push(0);
                        this.morphTargetDictionary[name] = m;
                    }
                }
            }
        } else {
            const morphTargets = geometry.morphTargets;
            if (morphTargets !== undefined && morphTargets.length > 0) console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
        }
    }
}
Line.prototype.isLine = true;
const _start = /*@__PURE__*/ new Vector3();
const _end = /*@__PURE__*/ new Vector3();
class LineSegments extends Line {
    constructor(geometry5, material11){
        super(geometry5, material11);
        this.type = 'LineSegments';
    }
    computeLineDistances() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            // we assume non-indexed geometry
            if (geometry.index === null) {
                const positionAttribute = geometry.attributes.position;
                const lineDistances = [];
                for(let i = 0, l = positionAttribute.count; i < l; i += 2){
                    _start.fromBufferAttribute(positionAttribute, i);
                    _end.fromBufferAttribute(positionAttribute, i + 1);
                    lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
                    lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);
                }
                geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
            } else console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
        } else if (geometry.isGeometry) console.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
        return this;
    }
}
LineSegments.prototype.isLineSegments = true;
class LineLoop extends Line {
    constructor(geometry6, material12){
        super(geometry6, material12);
        this.type = 'LineLoop';
    }
}
LineLoop.prototype.isLineLoop = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 *
 * }
 */ class PointsMaterial extends Material {
    constructor(parameters8){
        super();
        this.type = 'PointsMaterial';
        this.color = new Color(16777215);
        this.map = null;
        this.alphaMap = null;
        this.size = 1;
        this.sizeAttenuation = true;
        this.setValues(parameters8);
    }
    copy(source26) {
        super.copy(source26);
        this.color.copy(source26.color);
        this.map = source26.map;
        this.alphaMap = source26.alphaMap;
        this.size = source26.size;
        this.sizeAttenuation = source26.sizeAttenuation;
        return this;
    }
}
PointsMaterial.prototype.isPointsMaterial = true;
const _inverseMatrix = /*@__PURE__*/ new Matrix4();
const _ray = /*@__PURE__*/ new Ray();
const _sphere = /*@__PURE__*/ new Sphere();
const _position$2 = /*@__PURE__*/ new Vector3();
class Points extends Object3D {
    constructor(geometry7 = new BufferGeometry(), material13 = new PointsMaterial()){
        super();
        this.type = 'Points';
        this.geometry = geometry7;
        this.material = material13;
        this.updateMorphTargets();
    }
    copy(source27) {
        super.copy(source27);
        this.material = source27.material;
        this.geometry = source27.geometry;
        return this;
    }
    raycast(raycaster5, intersects6) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster5.params.Points.threshold;
        const drawRange = geometry.drawRange;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere.copy(geometry.boundingSphere);
        _sphere.applyMatrix4(matrixWorld);
        _sphere.radius += threshold;
        if (raycaster5.ray.intersectsSphere(_sphere) === false) return;
        //
        _inverseMatrix.copy(matrixWorld).invert();
        _ray.copy(raycaster5.ray).applyMatrix4(_inverseMatrix);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        if (geometry.isBufferGeometry) {
            const index = geometry.index;
            const attributes = geometry.attributes;
            const positionAttribute = attributes.position;
            if (index !== null) {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(index.count, drawRange.start + drawRange.count);
                for(let i = start, il = end; i < il; i++){
                    const a = index.getX(i);
                    _position$2.fromBufferAttribute(positionAttribute, a);
                    testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster5, intersects6, this);
                }
            } else {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
                for(let i = start, l = end; i < l; i++){
                    _position$2.fromBufferAttribute(positionAttribute, i);
                    testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster5, intersects6, this);
                }
            }
        } else console.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            const morphAttributes = geometry.morphAttributes;
            const keys = Object.keys(morphAttributes);
            if (keys.length > 0) {
                const morphAttribute = morphAttributes[keys[0]];
                if (morphAttribute !== undefined) {
                    this.morphTargetInfluences = [];
                    this.morphTargetDictionary = {
                    };
                    for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                        const name = morphAttribute[m].name || String(m);
                        this.morphTargetInfluences.push(0);
                        this.morphTargetDictionary[name] = m;
                    }
                }
            }
        } else {
            const morphTargets = geometry.morphTargets;
            if (morphTargets !== undefined && morphTargets.length > 0) console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
        }
    }
}
Points.prototype.isPoints = true;
function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
    const rayPointDistanceSq = _ray.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
        const intersectPoint = new Vector3();
        _ray.closestPointToPoint(point, intersectPoint);
        intersectPoint.applyMatrix4(matrixWorld);
        const distance = raycaster.ray.origin.distanceTo(intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far) return;
        intersects.push({
            distance: distance,
            distanceToRay: Math.sqrt(rayPointDistanceSq),
            point: intersectPoint,
            index: index,
            face: null,
            object: object
        });
    }
}
class VideoTexture extends Texture {
    constructor(video, mapping4, wrapS4, wrapT4, magFilter4, minFilter4, format4, type7, anisotropy4){
        super(video, mapping4, wrapS4, wrapT4, magFilter4, minFilter4, format4, type7, anisotropy4);
        this.format = format4 !== undefined ? format4 : RGBFormat;
        this.minFilter = minFilter4 !== undefined ? minFilter4 : LinearFilter;
        this.magFilter = magFilter4 !== undefined ? magFilter4 : LinearFilter;
        this.generateMipmaps = false;
        const scope = this;
        function updateVideo() {
            scope.needsUpdate = true;
            video.requestVideoFrameCallback(updateVideo);
        }
        if ('requestVideoFrameCallback' in video) video.requestVideoFrameCallback(updateVideo);
    }
    clone() {
        return new this.constructor(this.image).copy(this);
    }
    update() {
        const video = this.image;
        const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;
        if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) this.needsUpdate = true;
    }
}
VideoTexture.prototype.isVideoTexture = true;
class FramebufferTexture extends Texture {
    constructor(width13, height13, format5){
        super({
            width: width13,
            height: height13
        });
        this.format = format5;
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.generateMipmaps = false;
        this.needsUpdate = true;
    }
}
FramebufferTexture.prototype.isFramebufferTexture = true;
class CompressedTexture extends Texture {
    constructor(mipmaps, width14, height14, format6, type8, mapping5, wrapS5, wrapT5, magFilter5, minFilter5, anisotropy5, encoding3){
        super(null, mapping5, wrapS5, wrapT5, magFilter5, minFilter5, format6, type8, anisotropy5, encoding3);
        this.image = {
            width: width14,
            height: height14
        };
        this.mipmaps = mipmaps;
        // no flipping for cube textures
        // (also flipping doesn't work for compressed textures )
        this.flipY = false;
        // can't generate mipmaps for compressed textures
        // mips must be embedded in DDS files
        this.generateMipmaps = false;
    }
}
CompressedTexture.prototype.isCompressedTexture = true;
class CanvasTexture extends Texture {
    constructor(canvas, mapping6, wrapS6, wrapT6, magFilter6, minFilter6, format7, type9, anisotropy6){
        super(canvas, mapping6, wrapS6, wrapT6, magFilter6, minFilter6, format7, type9, anisotropy6);
        this.needsUpdate = true;
    }
}
CanvasTexture.prototype.isCanvasTexture = true;
class CircleGeometry extends BufferGeometry {
    constructor(radius4 = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = 'CircleGeometry';
        this.parameters = {
            radius: radius4,
            segments: segments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        segments = Math.max(3, segments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const vertex = new Vector3();
        const uv = new Vector2();
        // center point
        vertices.push(0, 0, 0);
        normals.push(0, 0, 1);
        uvs.push(0.5, 0.5);
        for(let s = 0, i = 3; s <= segments; s++, i += 3){
            const segment = thetaStart + s / segments * thetaLength;
            // vertex
            vertex.x = radius4 * Math.cos(segment);
            vertex.y = radius4 * Math.sin(segment);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            normals.push(0, 0, 1);
            // uvs
            uv.x = (vertices[i] / radius4 + 1) / 2;
            uv.y = (vertices[i + 1] / radius4 + 1) / 2;
            uvs.push(uv.x, uv.y);
        }
        // indices
        for(let i26 = 1; i26 <= segments; i26++)indices.push(i26, i26 + 1, 0);
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
    }
    static fromJSON(data10) {
        return new CircleGeometry(data10.radius, data10.segments, data10.thetaStart, data10.thetaLength);
    }
}
class CylinderGeometry extends BufferGeometry {
    constructor(radiusTop = 1, radiusBottom = 1, height15 = 1, radialSegments = 8, heightSegments2 = 1, openEnded = false, thetaStart1 = 0, thetaLength1 = Math.PI * 2){
        super();
        this.type = 'CylinderGeometry';
        this.parameters = {
            radiusTop: radiusTop,
            radiusBottom: radiusBottom,
            height: height15,
            radialSegments: radialSegments,
            heightSegments: heightSegments2,
            openEnded: openEnded,
            thetaStart: thetaStart1,
            thetaLength: thetaLength1
        };
        const scope = this;
        radialSegments = Math.floor(radialSegments);
        heightSegments2 = Math.floor(heightSegments2);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let index = 0;
        const indexArray = [];
        const halfHeight = height15 / 2;
        let groupStart = 0;
        // generate geometry
        generateTorso();
        if (openEnded === false) {
            if (radiusTop > 0) generateCap(true);
            if (radiusBottom > 0) generateCap(false);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
        function generateTorso() {
            const normal = new Vector3();
            const vertex = new Vector3();
            let groupCount = 0;
            // this will be used to calculate the normal
            const slope = (radiusBottom - radiusTop) / height15;
            // generate vertices, normals and uvs
            for(let y = 0; y <= heightSegments2; y++){
                const indexRow = [];
                const v = y / heightSegments2;
                // calculate the radius of the current row
                const radius = v * (radiusBottom - radiusTop) + radiusTop;
                for(let x = 0; x <= radialSegments; x++){
                    const u = x / radialSegments;
                    const theta = u * thetaLength1 + thetaStart1;
                    const sinTheta = Math.sin(theta);
                    const cosTheta = Math.cos(theta);
                    // vertex
                    vertex.x = radius * sinTheta;
                    vertex.y = -v * height15 + halfHeight;
                    vertex.z = radius * cosTheta;
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    // normal
                    normal.set(sinTheta, slope, cosTheta).normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    // uv
                    uvs.push(u, 1 - v);
                    // save index of vertex in respective row
                    indexRow.push(index++);
                }
                // now save vertices of the row in our index array
                indexArray.push(indexRow);
            }
            // generate indices
            for(let x = 0; x < radialSegments; x++)for(let y31 = 0; y31 < heightSegments2; y31++){
                // we use the index array to access the correct indices
                const a = indexArray[y31][x];
                const b = indexArray[y31 + 1][x];
                const c = indexArray[y31 + 1][x + 1];
                const d = indexArray[y31][x + 1];
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // update group counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, 0);
            // calculate new start value for groups
            groupStart += groupCount;
        }
        function generateCap(top) {
            // save the index of the first center vertex
            const centerIndexStart = index;
            const uv = new Vector2();
            const vertex = new Vector3();
            let groupCount = 0;
            const radius = top === true ? radiusTop : radiusBottom;
            const sign = top === true ? 1 : -1;
            // first we generate the center vertex data of the cap.
            // because the geometry needs one set of uvs per face,
            // we must generate a center vertex per face/segment
            for(let x = 1; x <= radialSegments; x++){
                // vertex
                vertices.push(0, halfHeight * sign, 0);
                // normal
                normals.push(0, sign, 0);
                // uv
                uvs.push(0.5, 0.5);
                // increase index
                index++;
            }
            // save the index of the last center vertex
            const centerIndexEnd = index;
            // now we generate the surrounding vertices, normals and uvs
            for(let x31 = 0; x31 <= radialSegments; x31++){
                const u = x31 / radialSegments;
                const theta = u * thetaLength1 + thetaStart1;
                const cosTheta = Math.cos(theta);
                const sinTheta = Math.sin(theta);
                // vertex
                vertex.x = radius * sinTheta;
                vertex.y = halfHeight * sign;
                vertex.z = radius * cosTheta;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, sign, 0);
                // uv
                uv.x = cosTheta * 0.5 + 0.5;
                uv.y = sinTheta * 0.5 * sign + 0.5;
                uvs.push(uv.x, uv.y);
                // increase index
                index++;
            }
            // generate indices
            for(let x32 = 0; x32 < radialSegments; x32++){
                const c = centerIndexStart + x32;
                const i = centerIndexEnd + x32;
                if (top === true) // face top
                indices.push(i, i + 1, c);
                else // face bottom
                indices.push(i + 1, i, c);
                groupCount += 3;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
            // calculate new start value for groups
            groupStart += groupCount;
        }
    }
    static fromJSON(data11) {
        return new CylinderGeometry(data11.radiusTop, data11.radiusBottom, data11.height, data11.radialSegments, data11.heightSegments, data11.openEnded, data11.thetaStart, data11.thetaLength);
    }
}
class ConeGeometry extends CylinderGeometry {
    constructor(radius7 = 1, height16 = 1, radialSegments1 = 8, heightSegments3 = 1, openEnded1 = false, thetaStart2 = 0, thetaLength2 = Math.PI * 2){
        super(0, radius7, height16, radialSegments1, heightSegments3, openEnded1, thetaStart2, thetaLength2);
        this.type = 'ConeGeometry';
        this.parameters = {
            radius: radius7,
            height: height16,
            radialSegments: radialSegments1,
            heightSegments: heightSegments3,
            openEnded: openEnded1,
            thetaStart: thetaStart2,
            thetaLength: thetaLength2
        };
    }
    static fromJSON(data12) {
        return new ConeGeometry(data12.radius, data12.height, data12.radialSegments, data12.heightSegments, data12.openEnded, data12.thetaStart, data12.thetaLength);
    }
}
class PolyhedronGeometry extends BufferGeometry {
    constructor(vertices1 = [], indices = [], radius6 = 1, detail1 = 0){
        super();
        this.type = 'PolyhedronGeometry';
        this.parameters = {
            vertices: vertices1,
            indices: indices,
            radius: radius6,
            detail: detail1
        };
        // default buffer data
        const vertexBuffer = [];
        const uvBuffer = [];
        // the subdivision creates the vertex buffer data
        subdivide(detail1);
        // all vertices should lie on a conceptual sphere with a given radius
        applyRadius(radius6);
        // finally, create the uv data
        generateUVs();
        // build non-indexed geometry
        this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));
        this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));
        if (detail1 === 0) this.computeVertexNormals(); // flat normals
        else this.normalizeNormals(); // smooth normals
        // helper functions
        function subdivide(detail) {
            const a = new Vector3();
            const b = new Vector3();
            const c = new Vector3();
            // iterate over all faces and apply a subdivison with the given detail value
            for(let i = 0; i < indices.length; i += 3){
                // get the vertices of the face
                getVertexByIndex(indices[i + 0], a);
                getVertexByIndex(indices[i + 1], b);
                getVertexByIndex(indices[i + 2], c);
                // perform subdivision
                subdivideFace(a, b, c, detail);
            }
        }
        function subdivideFace(a, b, c, detail) {
            const cols = detail + 1;
            // we use this multidimensional array as a data structure for creating the subdivision
            const v = [];
            // construct all of the vertices for this subdivision
            for(let i = 0; i <= cols; i++){
                v[i] = [];
                const aj = a.clone().lerp(c, i / cols);
                const bj = b.clone().lerp(c, i / cols);
                const rows = cols - i;
                for(let j = 0; j <= rows; j++)if (j === 0 && i === cols) v[i][j] = aj;
                else v[i][j] = aj.clone().lerp(bj, j / rows);
            }
            // construct all of the faces
            for(let i27 = 0; i27 < cols; i27++)for(let j = 0; j < 2 * (cols - i27) - 1; j++){
                const k = Math.floor(j / 2);
                if (j % 2 === 0) {
                    pushVertex(v[i27][k + 1]);
                    pushVertex(v[i27 + 1][k]);
                    pushVertex(v[i27][k]);
                } else {
                    pushVertex(v[i27][k + 1]);
                    pushVertex(v[i27 + 1][k + 1]);
                    pushVertex(v[i27 + 1][k]);
                }
            }
        }
        function applyRadius(radius) {
            const vertex = new Vector3();
            // iterate over the entire buffer and apply the radius to each vertex
            for(let i = 0; i < vertexBuffer.length; i += 3){
                vertex.x = vertexBuffer[i + 0];
                vertex.y = vertexBuffer[i + 1];
                vertex.z = vertexBuffer[i + 2];
                vertex.normalize().multiplyScalar(radius);
                vertexBuffer[i + 0] = vertex.x;
                vertexBuffer[i + 1] = vertex.y;
                vertexBuffer[i + 2] = vertex.z;
            }
        }
        function generateUVs() {
            const vertex = new Vector3();
            for(let i = 0; i < vertexBuffer.length; i += 3){
                vertex.x = vertexBuffer[i + 0];
                vertex.y = vertexBuffer[i + 1];
                vertex.z = vertexBuffer[i + 2];
                const u = azimuth1(vertex) / 2 / Math.PI + 0.5;
                const v = inclination(vertex) / Math.PI + 0.5;
                uvBuffer.push(u, 1 - v);
            }
            correctUVs();
            correctSeam();
        }
        function correctSeam() {
            // handle case when face straddles the seam, see #3269
            for(let i = 0; i < uvBuffer.length; i += 6){
                // uv data of a single face
                const x0 = uvBuffer[i + 0];
                const x1 = uvBuffer[i + 2];
                const x2 = uvBuffer[i + 4];
                const max = Math.max(x0, x1, x2);
                const min = Math.min(x0, x1, x2);
                // 0.9 is somewhat arbitrary
                if (max > 0.9 && min < 0.1) {
                    if (x0 < 0.2) uvBuffer[i + 0] += 1;
                    if (x1 < 0.2) uvBuffer[i + 2] += 1;
                    if (x2 < 0.2) uvBuffer[i + 4] += 1;
                }
            }
        }
        function pushVertex(vertex) {
            vertexBuffer.push(vertex.x, vertex.y, vertex.z);
        }
        function getVertexByIndex(index, vertex) {
            const stride = index * 3;
            vertex.x = vertices1[stride + 0];
            vertex.y = vertices1[stride + 1];
            vertex.z = vertices1[stride + 2];
        }
        function correctUVs() {
            const a = new Vector3();
            const b = new Vector3();
            const c = new Vector3();
            const centroid = new Vector3();
            const uvA = new Vector2();
            const uvB = new Vector2();
            const uvC = new Vector2();
            for(let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6){
                a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
                b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
                c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
                uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
                uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
                uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
                centroid.copy(a).add(b).add(c).divideScalar(3);
                const azi = azimuth1(centroid);
                correctUV(uvA, j + 0, a, azi);
                correctUV(uvB, j + 2, b, azi);
                correctUV(uvC, j + 4, c, azi);
            }
        }
        function correctUV(uv, stride, vector, azimuth) {
            if (azimuth < 0 && uv.x === 1) uvBuffer[stride] = uv.x - 1;
            if (vector.x === 0 && vector.z === 0) uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
        }
        // Angle around the Y axis, counter-clockwise when looking from above.
        function azimuth1(vector) {
            return Math.atan2(vector.z, -vector.x);
        }
        // Angle above the XZ plane.
        function inclination(vector) {
            return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
        }
    }
    static fromJSON(data13) {
        return new PolyhedronGeometry(data13.vertices, data13.indices, data13.radius, data13.details);
    }
}
class DodecahedronGeometry extends PolyhedronGeometry {
    constructor(radius14 = 1, detail = 0){
        const t = (1 + Math.sqrt(5)) / 2;
        const r = 1 / t;
        const vertices = [
            // (±1, ±1, ±1)
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            // (0, ±1/φ, ±φ)
            0,
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            // (±1/φ, ±φ, 0)
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            0,
            // (±φ, 0, ±1/φ)
            -t,
            0,
            -r,
            t,
            0,
            -r,
            -t,
            0,
            r,
            t,
            0,
            r
        ];
        const indices = [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
        ];
        super(vertices, indices, radius14, detail);
        this.type = 'DodecahedronGeometry';
        this.parameters = {
            radius: radius14,
            detail: detail
        };
    }
    static fromJSON(data14) {
        return new DodecahedronGeometry(data14.radius, data14.detail);
    }
}
const _v0 = new Vector3();
const _v1$1 = new Vector3();
const _normal = new Vector3();
const _triangle = new Triangle();
class EdgesGeometry extends BufferGeometry {
    constructor(geometry8 = null, thresholdAngle = 1){
        super();
        this.type = 'EdgesGeometry';
        this.parameters = {
            geometry: geometry8,
            thresholdAngle: thresholdAngle
        };
        if (geometry8 !== null) {
            const precisionPoints = 4;
            const precision = Math.pow(10, precisionPoints);
            const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
            const indexAttr = geometry8.getIndex();
            const positionAttr = geometry8.getAttribute('position');
            const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
            const indexArr = [
                0,
                0,
                0
            ];
            const vertKeys = [
                'a',
                'b',
                'c'
            ];
            const hashes = new Array(3);
            const edgeData = {
            };
            const vertices = [];
            for(let i = 0; i < indexCount; i += 3){
                if (indexAttr) {
                    indexArr[0] = indexAttr.getX(i);
                    indexArr[1] = indexAttr.getX(i + 1);
                    indexArr[2] = indexAttr.getX(i + 2);
                } else {
                    indexArr[0] = i;
                    indexArr[1] = i + 1;
                    indexArr[2] = i + 2;
                }
                const { a , b , c  } = _triangle;
                a.fromBufferAttribute(positionAttr, indexArr[0]);
                b.fromBufferAttribute(positionAttr, indexArr[1]);
                c.fromBufferAttribute(positionAttr, indexArr[2]);
                _triangle.getNormal(_normal);
                // create hashes for the edge from the vertices
                hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
                hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
                hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
                // skip degenerate triangles
                if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) continue;
                // iterate over every edge
                for(let j = 0; j < 3; j++){
                    // get the first and next vertex making up the edge
                    const jNext = (j + 1) % 3;
                    const vecHash0 = hashes[j];
                    const vecHash1 = hashes[jNext];
                    const v0 = _triangle[vertKeys[j]];
                    const v1 = _triangle[vertKeys[jNext]];
                    const hash = `${vecHash0}_${vecHash1}`;
                    const reverseHash = `${vecHash1}_${vecHash0}`;
                    if (reverseHash in edgeData && edgeData[reverseHash]) {
                        // if we found a sibling edge add it into the vertex array if
                        // it meets the angle threshold and delete the edge from the map.
                        if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
                            vertices.push(v0.x, v0.y, v0.z);
                            vertices.push(v1.x, v1.y, v1.z);
                        }
                        edgeData[reverseHash] = null;
                    } else if (!(hash in edgeData)) // if we've already got an edge here then skip adding a new one
                    edgeData[hash] = {
                        index0: indexArr[j],
                        index1: indexArr[jNext],
                        normal: _normal.clone()
                    };
                }
            }
            // iterate over all remaining, unmatched edges and add them to the vertex array
            for(const key in edgeData)if (edgeData[key]) {
                const { index0 , index1  } = edgeData[key];
                _v0.fromBufferAttribute(positionAttr, index0);
                _v1$1.fromBufferAttribute(positionAttr, index1);
                vertices.push(_v0.x, _v0.y, _v0.z);
                vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
            }
            this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        }
    }
}
/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/ class Curve {
    constructor(){
        this.type = 'Curve';
        this.arcLengthDivisions = 200;
    }
    // Virtual base class method to overwrite and implement in subclasses
    //	- t [0 .. 1]
    getPoint() {
        console.warn('THREE.Curve: .getPoint() not implemented.');
        return null;
    }
    // Get point at relative position in curve according to arc length
    // - u [0 .. 1]
    getPointAt(u5, optionalTarget16) {
        const t = this.getUtoTmapping(u5);
        return this.getPoint(t, optionalTarget16);
    }
    // Get sequence of points using getPoint( t )
    getPoints(divisions9 = 5) {
        const points = [];
        for(let d = 0; d <= divisions9; d++)points.push(this.getPoint(d / divisions9));
        return points;
    }
    // Get sequence of points using getPointAt( u )
    getSpacedPoints(divisions1 = 5) {
        const points = [];
        for(let d = 0; d <= divisions1; d++)points.push(this.getPointAt(d / divisions1));
        return points;
    }
    // Get total curve arc length
    getLength() {
        const lengths = this.getLengths();
        return lengths[lengths.length - 1];
    }
    // Get list of cumulative segment lengths
    getLengths(divisions2 = this.arcLengthDivisions) {
        if (this.cacheArcLengths && this.cacheArcLengths.length === divisions2 + 1 && !this.needsUpdate) return this.cacheArcLengths;
        this.needsUpdate = false;
        const cache = [];
        let current, last = this.getPoint(0);
        let sum = 0;
        cache.push(0);
        for(let p = 1; p <= divisions2; p++){
            current = this.getPoint(p / divisions2);
            sum += current.distanceTo(last);
            cache.push(sum);
            last = current;
        }
        this.cacheArcLengths = cache;
        return cache; // { sums: cache, sum: sum }; Sum is in the last element.
    }
    updateArcLengths() {
        this.needsUpdate = true;
        this.getLengths();
    }
    // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
    getUtoTmapping(u1, distance9) {
        const arcLengths = this.getLengths();
        let i = 0;
        const il = arcLengths.length;
        let targetArcLength; // The targeted u distance value to get
        if (distance9) targetArcLength = distance9;
        else targetArcLength = u1 * arcLengths[il - 1];
        // binary search for the index with largest value smaller than target u distance
        let low = 0, high = il - 1, comparison;
        while(low <= high){
            i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
            comparison = arcLengths[i] - targetArcLength;
            if (comparison < 0) low = i + 1;
            else if (comparison > 0) high = i - 1;
            else {
                high = i;
                break;
            // DONE
            }
        }
        i = high;
        if (arcLengths[i] === targetArcLength) return i / (il - 1);
        // we could get finer grain at lengths, or use simple interpolation between two points
        const lengthBefore = arcLengths[i];
        const lengthAfter = arcLengths[i + 1];
        const segmentLength = lengthAfter - lengthBefore;
        // determine where we are between the 'before' and 'after' points
        const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
        // add that fractional amount to t
        const t = (i + segmentFraction) / (il - 1);
        return t;
    }
    // Returns a unit vector tangent at t
    // In case any sub curve does not implement its tangent derivation,
    // 2 points a small delta apart will be used to find its gradient
    // which seems to give a reasonable approximation
    getTangent(t8, optionalTarget1) {
        const delta = 0.0001;
        let t1 = t8 - delta;
        let t2 = t8 + delta;
        // Capping in case of danger
        if (t1 < 0) t1 = 0;
        if (t2 > 1) t2 = 1;
        const pt1 = this.getPoint(t1);
        const pt2 = this.getPoint(t2);
        const tangent = optionalTarget1 || (pt1.isVector2 ? new Vector2() : new Vector3());
        tangent.copy(pt2).sub(pt1).normalize();
        return tangent;
    }
    getTangentAt(u2, optionalTarget2) {
        const t = this.getUtoTmapping(u2);
        return this.getTangent(t, optionalTarget2);
    }
    computeFrenetFrames(segments1, closed) {
        // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
        const normal = new Vector3();
        const tangents = [];
        const normals = [];
        const binormals = [];
        const vec = new Vector3();
        const mat = new Matrix4();
        // compute the tangent vectors for each segment on the curve
        for(let i = 0; i <= segments1; i++){
            const u = i / segments1;
            tangents[i] = this.getTangentAt(u, new Vector3());
        }
        // select an initial normal vector perpendicular to the first tangent vector,
        // and in the direction of the minimum tangent xyz component
        normals[0] = new Vector3();
        binormals[0] = new Vector3();
        let min = Number.MAX_VALUE;
        const tx = Math.abs(tangents[0].x);
        const ty = Math.abs(tangents[0].y);
        const tz = Math.abs(tangents[0].z);
        if (tx <= min) {
            min = tx;
            normal.set(1, 0, 0);
        }
        if (ty <= min) {
            min = ty;
            normal.set(0, 1, 0);
        }
        if (tz <= min) normal.set(0, 0, 1);
        vec.crossVectors(tangents[0], normal).normalize();
        normals[0].crossVectors(tangents[0], vec);
        binormals[0].crossVectors(tangents[0], normals[0]);
        // compute the slowly-varying normal and binormal vectors for each segment on the curve
        for(let i28 = 1; i28 <= segments1; i28++){
            normals[i28] = normals[i28 - 1].clone();
            binormals[i28] = binormals[i28 - 1].clone();
            vec.crossVectors(tangents[i28 - 1], tangents[i28]);
            if (vec.length() > Number.EPSILON) {
                vec.normalize();
                const theta = Math.acos(clamp(tangents[i28 - 1].dot(tangents[i28]), -1, 1)); // clamp for floating pt errors
                normals[i28].applyMatrix4(mat.makeRotationAxis(vec, theta));
            }
            binormals[i28].crossVectors(tangents[i28], normals[i28]);
        }
        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
        if (closed === true) {
            let theta = Math.acos(clamp(normals[0].dot(normals[segments1]), -1, 1));
            theta /= segments1;
            if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments1])) > 0) theta = -theta;
            for(let i = 1; i <= segments1; i++){
                // twist a little...
                normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
                binormals[i].crossVectors(tangents[i], normals[i]);
            }
        }
        return {
            tangents: tangents,
            normals: normals,
            binormals: binormals
        };
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source28) {
        this.arcLengthDivisions = source28.arcLengthDivisions;
        return this;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.5,
                type: 'Curve',
                generator: 'Curve.toJSON'
            }
        };
        data.arcLengthDivisions = this.arcLengthDivisions;
        data.type = this.type;
        return data;
    }
    fromJSON(json1) {
        this.arcLengthDivisions = json1.arcLengthDivisions;
        return this;
    }
}
class EllipseCurve extends Curve {
    constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0){
        super();
        this.type = 'EllipseCurve';
        this.aX = aX;
        this.aY = aY;
        this.xRadius = xRadius;
        this.yRadius = yRadius;
        this.aStartAngle = aStartAngle;
        this.aEndAngle = aEndAngle;
        this.aClockwise = aClockwise;
        this.aRotation = aRotation;
    }
    getPoint(t7, optionalTarget3) {
        const point = optionalTarget3 || new Vector2();
        const twoPi = Math.PI * 2;
        let deltaAngle = this.aEndAngle - this.aStartAngle;
        const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
        // ensures that deltaAngle is 0 .. 2 PI
        while(deltaAngle < 0)deltaAngle += twoPi;
        while(deltaAngle > twoPi)deltaAngle -= twoPi;
        if (deltaAngle < Number.EPSILON) {
            if (samePoints) deltaAngle = 0;
            else deltaAngle = twoPi;
        }
        if (this.aClockwise === true && !samePoints) {
            if (deltaAngle === twoPi) deltaAngle = -twoPi;
            else deltaAngle = deltaAngle - twoPi;
        }
        const angle = this.aStartAngle + t7 * deltaAngle;
        let x = this.aX + this.xRadius * Math.cos(angle);
        let y = this.aY + this.yRadius * Math.sin(angle);
        if (this.aRotation !== 0) {
            const cos = Math.cos(this.aRotation);
            const sin = Math.sin(this.aRotation);
            const tx = x - this.aX;
            const ty = y - this.aY;
            // Rotate the point about the center of the ellipse.
            x = tx * cos - ty * sin + this.aX;
            y = tx * sin + ty * cos + this.aY;
        }
        return point.set(x, y);
    }
    copy(source29) {
        super.copy(source29);
        this.aX = source29.aX;
        this.aY = source29.aY;
        this.xRadius = source29.xRadius;
        this.yRadius = source29.yRadius;
        this.aStartAngle = source29.aStartAngle;
        this.aEndAngle = source29.aEndAngle;
        this.aClockwise = source29.aClockwise;
        this.aRotation = source29.aRotation;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.aX = this.aX;
        data.aY = this.aY;
        data.xRadius = this.xRadius;
        data.yRadius = this.yRadius;
        data.aStartAngle = this.aStartAngle;
        data.aEndAngle = this.aEndAngle;
        data.aClockwise = this.aClockwise;
        data.aRotation = this.aRotation;
        return data;
    }
    fromJSON(json2) {
        super.fromJSON(json2);
        this.aX = json2.aX;
        this.aY = json2.aY;
        this.xRadius = json2.xRadius;
        this.yRadius = json2.yRadius;
        this.aStartAngle = json2.aStartAngle;
        this.aEndAngle = json2.aEndAngle;
        this.aClockwise = json2.aClockwise;
        this.aRotation = json2.aRotation;
        return this;
    }
}
EllipseCurve.prototype.isEllipseCurve = true;
class ArcCurve extends EllipseCurve {
    constructor(aX1, aY1, aRadius, aStartAngle1, aEndAngle1, aClockwise1){
        super(aX1, aY1, aRadius, aRadius, aStartAngle1, aEndAngle1, aClockwise1);
        this.type = 'ArcCurve';
    }
}
ArcCurve.prototype.isArcCurve = true;
/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */ /*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/ function CubicPoly() {
    let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    /*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */ function init(x0, x1, t0, t1) {
        c0 = x0;
        c1 = t0;
        c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
        c3 = 2 * x0 - 2 * x1 + t0 + t1;
    }
    return {
        initCatmullRom: function(x0, x1, x2, x3, tension) {
            init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
        },
        initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
            // compute tangents when parameterized in [t1,t2]
            let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
            let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
            // rescale tangents for parametrization in [0,1]
            t1 *= dt1;
            t2 *= dt1;
            init(x1, x2, t1, t2);
        },
        calc: function(t) {
            const t2 = t * t;
            const t3 = t2 * t;
            return c0 + c1 * t + c2 * t2 + c3 * t3;
        }
    };
}
//
const tmp1 = new Vector3();
const px1 = new CubicPoly(), py1 = new CubicPoly(), pz = new CubicPoly();
class CatmullRomCurve3 extends Curve {
    constructor(points4 = [], closed1 = false, curveType = 'centripetal', tension = 0.5){
        super();
        this.type = 'CatmullRomCurve3';
        this.points = points4;
        this.closed = closed1;
        this.curveType = curveType;
        this.tension = tension;
    }
    getPoint(t9, optionalTarget4 = new Vector3()) {
        const point = optionalTarget4;
        const points = this.points;
        const l = points.length;
        const p = (l - (this.closed ? 0 : 1)) * t9;
        let intPoint = Math.floor(p);
        let weight = p - intPoint;
        if (this.closed) intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
        else if (weight === 0 && intPoint === l - 1) {
            intPoint = l - 2;
            weight = 1;
        }
        let p0, p3; // 4 points (p1 & p2 defined below)
        if (this.closed || intPoint > 0) p0 = points[(intPoint - 1) % l];
        else {
            // extrapolate first point
            tmp1.subVectors(points[0], points[1]).add(points[0]);
            p0 = tmp1;
        }
        const p1 = points[intPoint % l];
        const p2 = points[(intPoint + 1) % l];
        if (this.closed || intPoint + 2 < l) p3 = points[(intPoint + 2) % l];
        else {
            // extrapolate last point
            tmp1.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
            p3 = tmp1;
        }
        if (this.curveType === 'centripetal' || this.curveType === 'chordal') {
            // init Centripetal / Chordal Catmull-Rom
            const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
            let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
            let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
            let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
            // safety check for repeated points
            if (dt1 < 0.0001) dt1 = 1;
            if (dt0 < 0.0001) dt0 = dt1;
            if (dt2 < 0.0001) dt2 = dt1;
            px1.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
            py1.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
            pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
        } else if (this.curveType === 'catmullrom') {
            px1.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
            py1.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
            pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
        }
        point.set(px1.calc(weight), py1.calc(weight), pz.calc(weight));
        return point;
    }
    copy(source30) {
        super.copy(source30);
        this.points = [];
        for(let i = 0, l = source30.points.length; i < l; i++){
            const point = source30.points[i];
            this.points.push(point.clone());
        }
        this.closed = source30.closed;
        this.curveType = source30.curveType;
        this.tension = source30.tension;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.points = [];
        for(let i = 0, l = this.points.length; i < l; i++){
            const point = this.points[i];
            data.points.push(point.toArray());
        }
        data.closed = this.closed;
        data.curveType = this.curveType;
        data.tension = this.tension;
        return data;
    }
    fromJSON(json3) {
        super.fromJSON(json3);
        this.points = [];
        for(let i = 0, l = json3.points.length; i < l; i++){
            const point = json3.points[i];
            this.points.push(new Vector3().fromArray(point));
        }
        this.closed = json3.closed;
        this.curveType = json3.curveType;
        this.tension = json3.tension;
        return this;
    }
}
CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
/**
 * Bezier Curves formulas obtained from
 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 */ function CatmullRom(t, p0, p1, p2, p3) {
    const v0 = (p2 - p0) * 0.5;
    const v1 = (p3 - p1) * 0.5;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
}
//
function QuadraticBezierP0(t, p) {
    const k = 1 - t;
    return k * k * p;
}
function QuadraticBezierP1(t, p) {
    return 2 * (1 - t) * t * p;
}
function QuadraticBezierP2(t, p) {
    return t * t * p;
}
function QuadraticBezier(t, p0, p1, p2) {
    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
}
//
function CubicBezierP0(t, p) {
    const k = 1 - t;
    return k * k * k * p;
}
function CubicBezierP1(t, p) {
    const k = 1 - t;
    return 3 * k * k * t * p;
}
function CubicBezierP2(t, p) {
    return 3 * (1 - t) * t * t * p;
}
function CubicBezierP3(t, p) {
    return t * t * t * p;
}
function CubicBezier(t, p0, p1, p2, p3) {
    return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
}
class CubicBezierCurve extends Curve {
    constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()){
        super();
        this.type = 'CubicBezierCurve';
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
    }
    getPoint(t18, optionalTarget5 = new Vector2()) {
        const point = optionalTarget5;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set(CubicBezier(t18, v0.x, v1.x, v2.x, v3.x), CubicBezier(t18, v0.y, v1.y, v2.y, v3.y));
        return point;
    }
    copy(source31) {
        super.copy(source31);
        this.v0.copy(source31.v0);
        this.v1.copy(source31.v1);
        this.v2.copy(source31.v2);
        this.v3.copy(source31.v3);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
    }
    fromJSON(json4) {
        super.fromJSON(json4);
        this.v0.fromArray(json4.v0);
        this.v1.fromArray(json4.v1);
        this.v2.fromArray(json4.v2);
        this.v3.fromArray(json4.v3);
        return this;
    }
}
CubicBezierCurve.prototype.isCubicBezierCurve = true;
class CubicBezierCurve3 extends Curve {
    constructor(v02 = new Vector3(), v114 = new Vector3(), v212 = new Vector3(), v310 = new Vector3()){
        super();
        this.type = 'CubicBezierCurve3';
        this.v0 = v02;
        this.v1 = v114;
        this.v2 = v212;
        this.v3 = v310;
    }
    getPoint(t10, optionalTarget6 = new Vector3()) {
        const point = optionalTarget6;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set(CubicBezier(t10, v0.x, v1.x, v2.x, v3.x), CubicBezier(t10, v0.y, v1.y, v2.y, v3.y), CubicBezier(t10, v0.z, v1.z, v2.z, v3.z));
        return point;
    }
    copy(source32) {
        super.copy(source32);
        this.v0.copy(source32.v0);
        this.v1.copy(source32.v1);
        this.v2.copy(source32.v2);
        this.v3.copy(source32.v3);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
    }
    fromJSON(json5) {
        super.fromJSON(json5);
        this.v0.fromArray(json5.v0);
        this.v1.fromArray(json5.v1);
        this.v2.fromArray(json5.v2);
        this.v3.fromArray(json5.v3);
        return this;
    }
}
CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
class LineCurve extends Curve {
    constructor(v115 = new Vector2(), v213 = new Vector2()){
        super();
        this.type = 'LineCurve';
        this.v1 = v115;
        this.v2 = v213;
    }
    getPoint(t11, optionalTarget7 = new Vector2()) {
        const point = optionalTarget7;
        if (t11 === 1) point.copy(this.v2);
        else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t11).add(this.v1);
        }
        return point;
    }
    // Line curve is linear, so we can overwrite default getPointAt
    getPointAt(u3, optionalTarget8) {
        return this.getPoint(u3, optionalTarget8);
    }
    getTangent(t12, optionalTarget9) {
        const tangent = optionalTarget9 || new Vector2();
        tangent.copy(this.v2).sub(this.v1).normalize();
        return tangent;
    }
    copy(source33) {
        super.copy(source33);
        this.v1.copy(source33.v1);
        this.v2.copy(source33.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json6) {
        super.fromJSON(json6);
        this.v1.fromArray(json6.v1);
        this.v2.fromArray(json6.v2);
        return this;
    }
}
LineCurve.prototype.isLineCurve = true;
class LineCurve3 extends Curve {
    constructor(v116 = new Vector3(), v214 = new Vector3()){
        super();
        this.type = 'LineCurve3';
        this.isLineCurve3 = true;
        this.v1 = v116;
        this.v2 = v214;
    }
    getPoint(t13, optionalTarget10 = new Vector3()) {
        const point = optionalTarget10;
        if (t13 === 1) point.copy(this.v2);
        else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t13).add(this.v1);
        }
        return point;
    }
    // Line curve is linear, so we can overwrite default getPointAt
    getPointAt(u4, optionalTarget11) {
        return this.getPoint(u4, optionalTarget11);
    }
    copy(source34) {
        super.copy(source34);
        this.v1.copy(source34.v1);
        this.v2.copy(source34.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json7) {
        super.fromJSON(json7);
        this.v1.fromArray(json7.v1);
        this.v2.fromArray(json7.v2);
        return this;
    }
}
class QuadraticBezierCurve extends Curve {
    constructor(v03 = new Vector2(), v117 = new Vector2(), v215 = new Vector2()){
        super();
        this.type = 'QuadraticBezierCurve';
        this.v0 = v03;
        this.v1 = v117;
        this.v2 = v215;
    }
    getPoint(t14, optionalTarget12 = new Vector2()) {
        const point = optionalTarget12;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set(QuadraticBezier(t14, v0.x, v1.x, v2.x), QuadraticBezier(t14, v0.y, v1.y, v2.y));
        return point;
    }
    copy(source35) {
        super.copy(source35);
        this.v0.copy(source35.v0);
        this.v1.copy(source35.v1);
        this.v2.copy(source35.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json8) {
        super.fromJSON(json8);
        this.v0.fromArray(json8.v0);
        this.v1.fromArray(json8.v1);
        this.v2.fromArray(json8.v2);
        return this;
    }
}
QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
class QuadraticBezierCurve3 extends Curve {
    constructor(v04 = new Vector3(), v118 = new Vector3(), v216 = new Vector3()){
        super();
        this.type = 'QuadraticBezierCurve3';
        this.v0 = v04;
        this.v1 = v118;
        this.v2 = v216;
    }
    getPoint(t15, optionalTarget13 = new Vector3()) {
        const point = optionalTarget13;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set(QuadraticBezier(t15, v0.x, v1.x, v2.x), QuadraticBezier(t15, v0.y, v1.y, v2.y), QuadraticBezier(t15, v0.z, v1.z, v2.z));
        return point;
    }
    copy(source36) {
        super.copy(source36);
        this.v0.copy(source36.v0);
        this.v1.copy(source36.v1);
        this.v2.copy(source36.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json9) {
        super.fromJSON(json9);
        this.v0.fromArray(json9.v0);
        this.v1.fromArray(json9.v1);
        this.v2.fromArray(json9.v2);
        return this;
    }
}
QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
class SplineCurve extends Curve {
    constructor(points5 = []){
        super();
        this.type = 'SplineCurve';
        this.points = points5;
    }
    getPoint(t16, optionalTarget14 = new Vector2()) {
        const point = optionalTarget14;
        const points = this.points;
        const p = (points.length - 1) * t16;
        const intPoint = Math.floor(p);
        const weight = p - intPoint;
        const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
        const p1 = points[intPoint];
        const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
        const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
        point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
        return point;
    }
    copy(source37) {
        super.copy(source37);
        this.points = [];
        for(let i = 0, l = source37.points.length; i < l; i++){
            const point = source37.points[i];
            this.points.push(point.clone());
        }
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.points = [];
        for(let i = 0, l = this.points.length; i < l; i++){
            const point = this.points[i];
            data.points.push(point.toArray());
        }
        return data;
    }
    fromJSON(json10) {
        super.fromJSON(json10);
        this.points = [];
        for(let i = 0, l = json10.points.length; i < l; i++){
            const point = json10.points[i];
            this.points.push(new Vector2().fromArray(point));
        }
        return this;
    }
}
SplineCurve.prototype.isSplineCurve = true;
var Curves = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcCurve: ArcCurve,
    CatmullRomCurve3: CatmullRomCurve3,
    CubicBezierCurve: CubicBezierCurve,
    CubicBezierCurve3: CubicBezierCurve3,
    EllipseCurve: EllipseCurve,
    LineCurve: LineCurve,
    LineCurve3: LineCurve3,
    QuadraticBezierCurve: QuadraticBezierCurve,
    QuadraticBezierCurve3: QuadraticBezierCurve3,
    SplineCurve: SplineCurve
});
/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/ class CurvePath extends Curve {
    constructor(){
        super();
        this.type = 'CurvePath';
        this.curves = [];
        this.autoClose = false; // Automatically closes the path
    }
    add(curve) {
        this.curves.push(curve);
    }
    closePath() {
        // Add a line curve if start and end of lines are not connected
        const startPoint = this.curves[0].getPoint(0);
        const endPoint = this.curves[this.curves.length - 1].getPoint(1);
        if (!startPoint.equals(endPoint)) this.curves.push(new LineCurve(endPoint, startPoint));
    }
    // To get accurate point with reference to
    // entire path distance at time t,
    // following has to be done:
    // 1. Length of each sub path have to be known
    // 2. Locate and identify type of curve
    // 3. Get t for the curve
    // 4. Return curve.getPointAt(t')
    getPoint(t17, optionalTarget15) {
        const d = t17 * this.getLength();
        const curveLengths = this.getCurveLengths();
        let i = 0;
        // To think about boundaries points.
        while(i < curveLengths.length){
            if (curveLengths[i] >= d) {
                const diff = curveLengths[i] - d;
                const curve = this.curves[i];
                const segmentLength = curve.getLength();
                const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
                return curve.getPointAt(u, optionalTarget15);
            }
            i++;
        }
        return null;
    // loop where sum != 0, sum > d , sum+1 <d
    }
    // We cannot use the default THREE.Curve getPoint() with getLength() because in
    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
    // getPoint() depends on getLength
    getLength() {
        const lens = this.getCurveLengths();
        return lens[lens.length - 1];
    }
    // cacheLengths must be recalculated.
    updateArcLengths() {
        this.needsUpdate = true;
        this.cacheLengths = null;
        this.getCurveLengths();
    }
    // Compute lengths and cache them
    // We cannot overwrite getLengths() because UtoT mapping uses it.
    getCurveLengths() {
        // We use cache values if curves and cache array are same length
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
        // Get length of sub-curve
        // Push sums into cached array
        const lengths = [];
        let sums = 0;
        for(let i = 0, l = this.curves.length; i < l; i++){
            sums += this.curves[i].getLength();
            lengths.push(sums);
        }
        this.cacheLengths = lengths;
        return lengths;
    }
    getSpacedPoints(divisions3 = 40) {
        const points = [];
        for(let i = 0; i <= divisions3; i++)points.push(this.getPoint(i / divisions3));
        if (this.autoClose) points.push(points[0]);
        return points;
    }
    getPoints(divisions4 = 12) {
        const points = [];
        let last;
        for(let i = 0, curves = this.curves; i < curves.length; i++){
            const curve = curves[i];
            const resolution = curve && curve.isEllipseCurve ? divisions4 * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions4 * curve.points.length : divisions4;
            const pts = curve.getPoints(resolution);
            for(let j = 0; j < pts.length; j++){
                const point = pts[j];
                if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates
                points.push(point);
                last = point;
            }
        }
        if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) points.push(points[0]);
        return points;
    }
    copy(source38) {
        super.copy(source38);
        this.curves = [];
        for(let i = 0, l = source38.curves.length; i < l; i++){
            const curve = source38.curves[i];
            this.curves.push(curve.clone());
        }
        this.autoClose = source38.autoClose;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.autoClose = this.autoClose;
        data.curves = [];
        for(let i = 0, l = this.curves.length; i < l; i++){
            const curve = this.curves[i];
            data.curves.push(curve.toJSON());
        }
        return data;
    }
    fromJSON(json11) {
        super.fromJSON(json11);
        this.autoClose = json11.autoClose;
        this.curves = [];
        for(let i = 0, l = json11.curves.length; i < l; i++){
            const curve = json11.curves[i];
            this.curves.push(new Curves[curve.type]().fromJSON(curve));
        }
        return this;
    }
}
class Path extends CurvePath {
    constructor(points6){
        super();
        this.type = 'Path';
        this.currentPoint = new Vector2();
        if (points6) this.setFromPoints(points6);
    }
    setFromPoints(points7) {
        this.moveTo(points7[0].x, points7[0].y);
        for(let i = 1, l = points7.length; i < l; i++)this.lineTo(points7[i].x, points7[i].y);
        return this;
    }
    moveTo(x34, y34) {
        this.currentPoint.set(x34, y34); // TODO consider referencing vectors instead of copying?
        return this;
    }
    lineTo(x33, y33) {
        const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x33, y33));
        this.curves.push(curve);
        this.currentPoint.set(x33, y33);
        return this;
    }
    quadraticCurveTo(aCPx, aCPy, aX2, aY2) {
        const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX2, aY2));
        this.curves.push(curve);
        this.currentPoint.set(aX2, aY2);
        return this;
    }
    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX3, aY3) {
        const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX3, aY3));
        this.curves.push(curve);
        this.currentPoint.set(aX3, aY3);
        return this;
    }
    splineThru(pts /*Array of Vector*/ ) {
        const npts = [
            this.currentPoint.clone()
        ].concat(pts);
        const curve = new SplineCurve(npts);
        this.curves.push(curve);
        this.currentPoint.copy(pts[pts.length - 1]);
        return this;
    }
    arc(aX4, aY4, aRadius1, aStartAngle2, aEndAngle2, aClockwise2) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absarc(aX4 + x0, aY4 + y0, aRadius1, aStartAngle2, aEndAngle2, aClockwise2);
        return this;
    }
    absarc(aX5, aY5, aRadius2, aStartAngle3, aEndAngle3, aClockwise3) {
        this.absellipse(aX5, aY5, aRadius2, aRadius2, aStartAngle3, aEndAngle3, aClockwise3);
        return this;
    }
    ellipse(aX6, aY6, xRadius1, yRadius1, aStartAngle4, aEndAngle4, aClockwise4, aRotation1) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absellipse(aX6 + x0, aY6 + y0, xRadius1, yRadius1, aStartAngle4, aEndAngle4, aClockwise4, aRotation1);
        return this;
    }
    absellipse(aX7, aY7, xRadius2, yRadius2, aStartAngle5, aEndAngle5, aClockwise5, aRotation2) {
        const curve = new EllipseCurve(aX7, aY7, xRadius2, yRadius2, aStartAngle5, aEndAngle5, aClockwise5, aRotation2);
        if (this.curves.length > 0) {
            // if a previous curve is present, attempt to join
            const firstPoint = curve.getPoint(0);
            if (!firstPoint.equals(this.currentPoint)) this.lineTo(firstPoint.x, firstPoint.y);
        }
        this.curves.push(curve);
        const lastPoint = curve.getPoint(1);
        this.currentPoint.copy(lastPoint);
        return this;
    }
    copy(source39) {
        super.copy(source39);
        this.currentPoint.copy(source39.currentPoint);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.currentPoint = this.currentPoint.toArray();
        return data;
    }
    fromJSON(json12) {
        super.fromJSON(json12);
        this.currentPoint.fromArray(json12.currentPoint);
        return this;
    }
}
class Shape extends Path {
    constructor(points8){
        super(points8);
        this.uuid = generateUUID();
        this.type = 'Shape';
        this.holes = [];
    }
    getPointsHoles(divisions5) {
        const holesPts = [];
        for(let i = 0, l = this.holes.length; i < l; i++)holesPts[i] = this.holes[i].getPoints(divisions5);
        return holesPts;
    }
    // get points of shape and holes (keypoints based on segments parameter)
    extractPoints(divisions6) {
        return {
            shape: this.getPoints(divisions6),
            holes: this.getPointsHoles(divisions6)
        };
    }
    copy(source40) {
        super.copy(source40);
        this.holes = [];
        for(let i = 0, l = source40.holes.length; i < l; i++){
            const hole = source40.holes[i];
            this.holes.push(hole.clone());
        }
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.uuid = this.uuid;
        data.holes = [];
        for(let i = 0, l = this.holes.length; i < l; i++){
            const hole = this.holes[i];
            data.holes.push(hole.toJSON());
        }
        return data;
    }
    fromJSON(json13) {
        super.fromJSON(json13);
        this.uuid = json13.uuid;
        this.holes = [];
        for(let i = 0, l = json13.holes.length; i < l; i++){
            const hole = json13.holes[i];
            this.holes.push(new Path().fromJSON(hole));
        }
        return this;
    }
}
/**
 * Port from https://github.com/mapbox/earcut (v2.2.2)
 */ const Earcut = {
    triangulate: function(data, holeIndices, dim = 2) {
        const hasHoles = holeIndices && holeIndices.length;
        const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        let outerNode = linkedList(data, 0, outerLen, dim, true);
        const triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev) return triangles;
        let minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
        if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];
            for(let i = dim; i < outerLen; i += dim){
                x = data[i];
                y = data[i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
            }
            // minX, minY and invSize are later used to transform coords into integers for z-order calculation
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 1 / invSize : 0;
        }
        earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
        return triangles;
    }
};
// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    let i, last;
    if (clockwise === signedArea(data, start, end, dim) > 0) for(i = start; i < end; i += dim)last = insertNode(i, data[i], data[i + 1], last);
    else for(i = end - dim; i >= start; i -= dim)last = insertNode(i, data[i], data[i + 1], last);
    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }
    return last;
}
// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    let p = start, again;
    do {
        again = false;
        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;
        } else p = p.next;
    }while (again || p !== end)
    return end;
}
// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;
    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
    let stop = ear, prev, next;
    // iterate through ears, slicing them one by one
    while(ear.prev !== ear.next){
        prev = ear.prev;
        next = ear.next;
        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);
            removeNode(ear);
            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;
            continue;
        }
        ear = next;
        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            else if (pass === 1) {
                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) splitEarcut(ear, triangles, dim, minX, minY, invSize);
            break;
        }
    }
}
// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // now make sure we don't have other points inside the potential ear
    let p = ear.next.next;
    while(p !== ear.prev){
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }
    return true;
}
function isEarHashed(ear, minX, minY, invSize) {
    const a = ear.prev, b = ear, c = ear.next;
    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // triangle bbox; min & max are calculated like this for speed
    const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x, minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y, maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x, maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
    // z-order range for the current triangle bbox;
    const minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
    let p = ear.prevZ, n = ear.nextZ;
    // look for points inside the triangle in both directions
    while(p && p.z >= minZ && n && n.z <= maxZ){
        if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
        if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    // look for remaining points in decreasing z-order
    while(p && p.z >= minZ){
        if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }
    // look for remaining points in increasing z-order
    while(n && n.z <= maxZ){
        if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    return true;
}
// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    let p = start;
    do {
        const a = p.prev, b = p.next.next;
        if (!equals(a, b) && intersects7(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);
            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);
            p = start = b;
        }
        p = p.next;
    }while (p !== start)
    return filterPoints(p);
}
// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    let a = start;
    do {
        let b = a.next.next;
        while(b !== a.prev){
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                let c = splitPolygon(a, b);
                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);
                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize);
                earcutLinked(c, triangles, dim, minX, minY, invSize);
                return;
            }
            b = b.next;
        }
        a = a.next;
    }while (a !== start)
}
// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    const queue = [];
    let i, len, start, end, list;
    for(i = 0, len = holeIndices.length; i < len; i++){
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    // process holes from left to right
    for(i = 0; i < queue.length; i++){
        eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
    }
    return outerNode;
}
function compareX(a, b) {
    return a.x - b.x;
}
// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
        const b = splitPolygon(outerNode, hole);
        // filter collinear points around the cuts
        filterPoints(outerNode, outerNode.next);
        filterPoints(b, b.next);
    }
}
// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    let p = outerNode;
    const hx = hole.x;
    const hy = hole.y;
    let qx = -Infinity, m;
    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    }while (p !== outerNode)
    if (!m) return null;
    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint
    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point
    const stop = m, mx = m.x, my = m.y;
    let tanMin = Infinity, tan;
    p = m;
    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
            if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
                m = p;
                tanMin = tan;
            }
        }
        p = p.next;
    }while (p !== stop)
    return m;
}
// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}
// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    let p = start;
    do {
        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    }while (p !== start)
    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
}
// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while(p){
            numMerges++;
            q = p;
            pSize = 0;
            for(i = 0; i < inSize; i++){
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;
            while(pSize > 0 || qSize > 0 && q){
                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }
                if (tail) tail.nextZ = e;
                else list = e;
                e.prevZ = tail;
                tail = e;
            }
            p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
    }while (numMerges > 1)
    return list;
}
// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;
    x = (x | x << 8) & 16711935;
    x = (x | x << 4) & 252645135;
    x = (x | x << 2) & 858993459;
    x = (x | x << 1) & 1431655765;
    y = (y | y << 8) & 16711935;
    y = (y | y << 4) & 252645135;
    y = (y | y << 2) & 858993459;
    y = (y | y << 1) & 1431655765;
    return x | y << 1;
}
// find the leftmost node of a polygon ring
function getLeftmost(start) {
    let p = start, leftmost = start;
    do {
        if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
        p = p.next;
    }while (p !== start)
    return leftmost;
}
// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}
// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (area(a.prev, a, b.prev) || area(a, b.prev, b)) || equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
}
// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}
// check if two segments intersect
function intersects7(p1, q1, p2, q2) {
    const o1 = sign1(area(p1, q1, p2));
    const o2 = sign1(area(p1, q1, q2));
    const o3 = sign1(area(p2, q2, p1));
    const o4 = sign1(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true; // general case
    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
    return false;
}
// for collinear points p, q, r, check if point q lies on segment pr
function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function sign1(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}
// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    let p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects7(p, p.next, a, b)) return true;
        p = p.next;
    }while (p !== a)
    return false;
}
// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    let p = a, inside = false;
    const px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
    do {
        if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
        p = p.next;
    }while (p !== a)
    return inside;
}
// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    const a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
}
// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    const p = new Node(i, x, y);
    if (!last) {
        p.prev = p;
        p.next = p;
    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}
function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}
function Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;
    // vertex coordinates
    this.x = x;
    this.y = y;
    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;
    // z-order curve value
    this.z = null;
    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;
    // indicates whether this is a steiner point
    this.steiner = false;
}
function signedArea(data, start, end, dim) {
    let sum = 0;
    for(let i = start, j = end - dim; i < end; i += dim){
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}
class ShapeUtils {
    // calculate area of the contour polygon
    static area(contour2) {
        const n = contour2.length;
        let a = 0;
        for(let p = n - 1, q = 0; q < n; p = q++)a += contour2[p].x * contour2[q].y - contour2[q].x * contour2[p].y;
        return a * 0.5;
    }
    static isClockWise(pts1) {
        return ShapeUtils.area(pts1) < 0;
    }
    static triangulateShape(contour1, holes1) {
        const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
        const holeIndices = []; // array of hole indices
        const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
        removeDupEndPts(contour1);
        addContour(vertices, contour1);
        //
        let holeIndex = contour1.length;
        holes1.forEach(removeDupEndPts);
        for(let i = 0; i < holes1.length; i++){
            holeIndices.push(holeIndex);
            holeIndex += holes1[i].length;
            addContour(vertices, holes1[i]);
        }
        //
        const triangles = Earcut.triangulate(vertices, holeIndices);
        //
        for(let i29 = 0; i29 < triangles.length; i29 += 3)faces.push(triangles.slice(i29, i29 + 3));
        return faces;
    }
}
function removeDupEndPts(points) {
    const l = points.length;
    if (l > 2 && points[l - 1].equals(points[0])) points.pop();
}
function addContour(vertices, contour) {
    for(let i = 0; i < contour.length; i++){
        vertices.push(contour[i].x);
        vertices.push(contour[i].y);
    }
}
/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */ class ExtrudeGeometry extends BufferGeometry {
    constructor(shapes2 = new Shape([
        new Vector2(0.5, 0.5),
        new Vector2(-0.5, 0.5),
        new Vector2(-0.5, -0.5),
        new Vector2(0.5, -0.5)
    ]), options3 = {
    }){
        super();
        this.type = 'ExtrudeGeometry';
        this.parameters = {
            shapes: shapes2,
            options: options3
        };
        shapes2 = Array.isArray(shapes2) ? shapes2 : [
            shapes2
        ];
        const scope = this;
        const verticesArray = [];
        const uvArray = [];
        for(let i32 = 0, l = shapes2.length; i32 < l; i32++){
            const shape = shapes2[i32];
            addShape(shape);
        }
        // build geometry
        this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));
        this.computeVertexNormals();
        // functions
        function addShape(shape) {
            const placeholder = [];
            // options
            const curveSegments = options3.curveSegments !== undefined ? options3.curveSegments : 12;
            const steps = options3.steps !== undefined ? options3.steps : 1;
            let depth = options3.depth !== undefined ? options3.depth : 1;
            let bevelEnabled = options3.bevelEnabled !== undefined ? options3.bevelEnabled : true;
            let bevelThickness = options3.bevelThickness !== undefined ? options3.bevelThickness : 0.2;
            let bevelSize = options3.bevelSize !== undefined ? options3.bevelSize : bevelThickness - 0.1;
            let bevelOffset = options3.bevelOffset !== undefined ? options3.bevelOffset : 0;
            let bevelSegments = options3.bevelSegments !== undefined ? options3.bevelSegments : 3;
            const extrudePath = options3.extrudePath;
            const uvgen = options3.UVGenerator !== undefined ? options3.UVGenerator : WorldUVGenerator;
            // deprecated options
            if (options3.amount !== undefined) {
                console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');
                depth = options3.amount;
            }
            //
            let extrudePts, extrudeByPath = false;
            let splineTube, binormal, normal, position2;
            if (extrudePath) {
                extrudePts = extrudePath.getSpacedPoints(steps);
                extrudeByPath = true;
                bevelEnabled = false; // bevels not supported for path extrusion
                // SETUP TNB variables
                // TODO1 - have a .isClosed in spline?
                splineTube = extrudePath.computeFrenetFrames(steps, false);
                // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
                binormal = new Vector3();
                normal = new Vector3();
                position2 = new Vector3();
            }
            // Safeguards if bevels are not enabled
            if (!bevelEnabled) {
                bevelSegments = 0;
                bevelThickness = 0;
                bevelSize = 0;
                bevelOffset = 0;
            }
            // Variables initialization
            const shapePoints = shape.extractPoints(curveSegments);
            let vertices = shapePoints.shape;
            const holes = shapePoints.holes;
            const reverse = !ShapeUtils.isClockWise(vertices);
            if (reverse) {
                vertices = vertices.reverse();
                // Maybe we should also check if holes are in the opposite direction, just to be safe ...
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    if (ShapeUtils.isClockWise(ahole)) holes[h] = ahole.reverse();
                }
            }
            const faces = ShapeUtils.triangulateShape(vertices, holes);
            /* Vertices */ const contour3 = vertices; // vertices has all points but contour has only points of circumference
            for(let h4 = 0, hl2 = holes.length; h4 < hl2; h4++){
                const ahole = holes[h4];
                vertices = vertices.concat(ahole);
            }
            function scalePt2(pt, vec, size) {
                if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');
                return vec.clone().multiplyScalar(size).add(pt);
            }
            const vlen = vertices.length, flen = faces.length;
            // Find directions for point movement
            function getBevelVec(inPt, inPrev, inNext) {
                // computes for inPt the corresponding point inPt' on a new contour
                //   shifted by 1 unit (length of normalized vector) to the left
                // if we walk along contour clockwise, this new contour is outside the old one
                //
                // inPt' is the intersection of the two lines parallel to the two
                //  adjacent edges of inPt at a distance of 1 unit on the left side.
                let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
                // good reading for geometry algorithms (here: line-line intersection)
                // http://geomalgorithms.com/a05-_intersect-1.html
                const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
                const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
                const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
                // check for collinear edges
                const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
                if (Math.abs(collinear0) > Number.EPSILON) {
                    // not collinear
                    // length of vectors for normalizing
                    const v_prev_len = Math.sqrt(v_prev_lensq);
                    const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
                    // shift adjacent points by unit vectors to the left
                    const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
                    const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
                    const ptNextShift_x = inNext.x - v_next_y / v_next_len;
                    const ptNextShift_y = inNext.y + v_next_x / v_next_len;
                    // scaling factor for v_prev to intersection point
                    const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
                    // vector from inPt to intersection point
                    v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
                    v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
                    // Don't normalize!, otherwise sharp corners become ugly
                    //  but prevent crazy spikes
                    const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
                    if (v_trans_lensq <= 2) return new Vector2(v_trans_x, v_trans_y);
                    else shrink_by = Math.sqrt(v_trans_lensq / 2);
                } else {
                    // handle special case of collinear edges
                    let direction_eq = false; // assumes: opposite
                    if (v_prev_x > Number.EPSILON) {
                        if (v_next_x > Number.EPSILON) direction_eq = true;
                    } else {
                        if (v_prev_x < -Number.EPSILON) {
                            if (v_next_x < -Number.EPSILON) direction_eq = true;
                        } else if (Math.sign(v_prev_y) === Math.sign(v_next_y)) direction_eq = true;
                    }
                    if (direction_eq) {
                        // console.log("Warning: lines are a straight sequence");
                        v_trans_x = -v_prev_y;
                        v_trans_y = v_prev_x;
                        shrink_by = Math.sqrt(v_prev_lensq);
                    } else {
                        // console.log("Warning: lines are a straight spike");
                        v_trans_x = v_prev_x;
                        v_trans_y = v_prev_y;
                        shrink_by = Math.sqrt(v_prev_lensq / 2);
                    }
                }
                return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
            }
            const contourMovements = [];
            for(let i34 = 0, il = contour3.length, j1 = il - 1, k1 = i34 + 1; i34 < il; i34++, j1++, k1++){
                if (j1 === il) j1 = 0;
                if (k1 === il) k1 = 0;
                //  (j)---(i)---(k)
                // console.log('i,j,k', i, j , k)
                contourMovements[i34] = getBevelVec(contour3[i34], contour3[j1], contour3[k1]);
            }
            const holesMovements = [];
            let oneHoleMovements, verticesMovements = contourMovements.concat();
            for(let h2 = 0, hl1 = holes.length; h2 < hl1; h2++){
                const ahole = holes[h2];
                oneHoleMovements = [];
                for(let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++){
                    if (j === il) j = 0;
                    if (k === il) k = 0;
                    //  (j)---(i)---(k)
                    oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
                }
                holesMovements.push(oneHoleMovements);
                verticesMovements = verticesMovements.concat(oneHoleMovements);
            }
            // Loop bevelSegments, 1 for the front, 1 for the back
            for(let b23 = 0; b23 < bevelSegments; b23++){
                //for ( b = bevelSegments; b > 0; b -- ) {
                const t = b23 / bevelSegments;
                const z = bevelThickness * Math.cos(t * Math.PI / 2);
                const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
                // contract shape
                for(let i = 0, il = contour3.length; i < il; i++){
                    const vert = scalePt2(contour3[i], contourMovements[i], bs);
                    v(vert.x, vert.y, -z);
                }
                // expand holes
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    oneHoleMovements = holesMovements[h];
                    for(let i = 0, il = ahole.length; i < il; i++){
                        const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
                        v(vert.x, vert.y, -z);
                    }
                }
            }
            const bs = bevelSize + bevelOffset;
            // Back facing vertices
            for(let i30 = 0; i30 < vlen; i30++){
                const vert = bevelEnabled ? scalePt2(vertices[i30], verticesMovements[i30], bs) : vertices[i30];
                if (!extrudeByPath) v(vert.x, vert.y, 0);
                else {
                    // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
                    normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
                    binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
                    position2.copy(extrudePts[0]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add stepped vertices...
            // Including front facing vertices
            for(let s17 = 1; s17 <= steps; s17++)for(let i31 = 0; i31 < vlen; i31++){
                const vert = bevelEnabled ? scalePt2(vertices[i31], verticesMovements[i31], bs) : vertices[i31];
                if (!extrudeByPath) v(vert.x, vert.y, depth / steps * s17);
                else {
                    // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
                    normal.copy(splineTube.normals[s17]).multiplyScalar(vert.x);
                    binormal.copy(splineTube.binormals[s17]).multiplyScalar(vert.y);
                    position2.copy(extrudePts[s17]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add bevel segments planes
            //for ( b = 1; b <= bevelSegments; b ++ ) {
            for(let b22 = bevelSegments - 1; b22 >= 0; b22--){
                const t = b22 / bevelSegments;
                const z = bevelThickness * Math.cos(t * Math.PI / 2);
                const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
                // contract shape
                for(let i = 0, il = contour3.length; i < il; i++){
                    const vert = scalePt2(contour3[i], contourMovements[i], bs);
                    v(vert.x, vert.y, depth + z);
                }
                // expand holes
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    oneHoleMovements = holesMovements[h];
                    for(let i = 0, il = ahole.length; i < il; i++){
                        const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
                        if (!extrudeByPath) v(vert.x, vert.y, depth + z);
                        else v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
                    }
                }
            }
            /* Faces */ // Top and bottom faces
            buildLidFaces();
            // Sides faces
            buildSideFaces();
            /////  Internal functions
            function buildLidFaces() {
                const start = verticesArray.length / 3;
                if (bevelEnabled) {
                    let layer = 0; // steps + 1
                    let offset = vlen * layer;
                    // Bottom faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[2] + offset, face[1] + offset, face[0] + offset);
                    }
                    layer = steps + bevelSegments * 2;
                    offset = vlen * layer;
                    // Top faces
                    for(let i33 = 0; i33 < flen; i33++){
                        const face = faces[i33];
                        f3(face[0] + offset, face[1] + offset, face[2] + offset);
                    }
                } else {
                    // Bottom faces
                    for(let i = 0; i < flen; i++){
                        const face = faces[i];
                        f3(face[2], face[1], face[0]);
                    }
                    // Top faces
                    for(let i35 = 0; i35 < flen; i35++){
                        const face = faces[i35];
                        f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
                    }
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 0);
            }
            // Create faces for the z-sides of the shape
            function buildSideFaces() {
                const start = verticesArray.length / 3;
                let layeroffset = 0;
                sidewalls(contour3, layeroffset);
                layeroffset += contour3.length;
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    sidewalls(ahole, layeroffset);
                    //, true
                    layeroffset += ahole.length;
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 1);
            }
            function sidewalls(contour, layeroffset) {
                let i = contour.length;
                while(--i >= 0){
                    const j = i;
                    let k = i - 1;
                    if (k < 0) k = contour.length - 1;
                    //console.log('b', i,j, i-1, k,vertices.length);
                    for(let s = 0, sl = steps + bevelSegments * 2; s < sl; s++){
                        const slen1 = vlen * s;
                        const slen2 = vlen * (s + 1);
                        const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
                        f4(a, b, c, d);
                    }
                }
            }
            function v(x, y, z) {
                placeholder.push(x);
                placeholder.push(y);
                placeholder.push(z);
            }
            function f3(a, b, c) {
                addVertex(a);
                addVertex(b);
                addVertex(c);
                const nextIndex = verticesArray.length / 3;
                const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[2]);
            }
            function f4(a, b, c, d) {
                addVertex(a);
                addVertex(b);
                addVertex(d);
                addVertex(b);
                addVertex(c);
                addVertex(d);
                const nextIndex = verticesArray.length / 3;
                const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[3]);
                addUV(uvs[1]);
                addUV(uvs[2]);
                addUV(uvs[3]);
            }
            function addVertex(index) {
                verticesArray.push(placeholder[index * 3 + 0]);
                verticesArray.push(placeholder[index * 3 + 1]);
                verticesArray.push(placeholder[index * 3 + 2]);
            }
            function addUV(vector2) {
                uvArray.push(vector2.x);
                uvArray.push(vector2.y);
            }
        }
    }
    toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        const options = this.parameters.options;
        return toJSON$1(shapes, options, data);
    }
    static fromJSON(data16, shapes1) {
        const geometryShapes = [];
        for(let j = 0, jl = data16.shapes.length; j < jl; j++){
            const shape = shapes1[data16.shapes[j]];
            geometryShapes.push(shape);
        }
        const extrudePath = data16.options.extrudePath;
        if (extrudePath !== undefined) data16.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
        return new ExtrudeGeometry(geometryShapes, data16.options);
    }
}
const WorldUVGenerator = {
    generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        return [
            new Vector2(a_x, a_y),
            new Vector2(b_x, b_y),
            new Vector2(c_x, c_y)
        ];
    },
    generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const a_z = vertices[indexA * 3 + 2];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const b_z = vertices[indexB * 3 + 2];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        const c_z = vertices[indexC * 3 + 2];
        const d_x = vertices[indexD * 3];
        const d_y = vertices[indexD * 3 + 1];
        const d_z = vertices[indexD * 3 + 2];
        if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) return [
            new Vector2(a_x, 1 - a_z),
            new Vector2(b_x, 1 - b_z),
            new Vector2(c_x, 1 - c_z),
            new Vector2(d_x, 1 - d_z)
        ];
        else return [
            new Vector2(a_y, 1 - a_z),
            new Vector2(b_y, 1 - b_z),
            new Vector2(c_y, 1 - c_z),
            new Vector2(d_y, 1 - d_z)
        ];
    }
};
function toJSON$1(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(let i = 0, l = shapes.length; i < l; i++){
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
    return data;
}
class IcosahedronGeometry extends PolyhedronGeometry {
    constructor(radius8 = 1, detail2 = 0){
        const t = (1 + Math.sqrt(5)) / 2;
        const vertices = [
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            0,
            0,
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            t,
            0,
            -1,
            t,
            0,
            1,
            -t,
            0,
            -1,
            -t,
            0,
            1
        ];
        const indices = [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
        ];
        super(vertices, indices, radius8, detail2);
        this.type = 'IcosahedronGeometry';
        this.parameters = {
            radius: radius8,
            detail: detail2
        };
    }
    static fromJSON(data21) {
        return new IcosahedronGeometry(data21.radius, data21.detail);
    }
}
class LatheGeometry extends BufferGeometry {
    constructor(points10 = [
        new Vector2(0, 0.5),
        new Vector2(0.5, 0),
        new Vector2(0, -0.5)
    ], segments2 = 12, phiStart = 0, phiLength = Math.PI * 2){
        super();
        this.type = 'LatheGeometry';
        this.parameters = {
            points: points10,
            segments: segments2,
            phiStart: phiStart,
            phiLength: phiLength
        };
        segments2 = Math.floor(segments2);
        // clamp phiLength so it's in range of [ 0, 2PI ]
        phiLength = clamp(phiLength, 0, Math.PI * 2);
        // buffers
        const indices = [];
        const vertices = [];
        const uvs = [];
        const initNormals = [];
        const normals = [];
        // helper variables
        const inverseSegments = 1 / segments2;
        const vertex = new Vector3();
        const uv = new Vector2();
        const normal = new Vector3();
        const curNormal = new Vector3();
        const prevNormal = new Vector3();
        let dx = 0;
        let dy = 0;
        // pre-compute normals for initial "meridian"
        for(let j = 0; j <= points10.length - 1; j++)switch(j){
            case 0:
                dx = points10[j + 1].x - points10[j].x;
                dy = points10[j + 1].y - points10[j].y;
                normal.x = dy * 1;
                normal.y = -dx;
                normal.z = dy * 0;
                prevNormal.copy(normal);
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                break;
            case points10.length - 1:
                initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
                break;
            default:
                dx = points10[j + 1].x - points10[j].x;
                dy = points10[j + 1].y - points10[j].y;
                normal.x = dy * 1;
                normal.y = -dx;
                normal.z = dy * 0;
                curNormal.copy(normal);
                normal.x += prevNormal.x;
                normal.y += prevNormal.y;
                normal.z += prevNormal.z;
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                prevNormal.copy(curNormal);
        }
        // generate vertices, uvs and normals
        for(let i = 0; i <= segments2; i++){
            const phi = phiStart + i * inverseSegments * phiLength;
            const sin = Math.sin(phi);
            const cos = Math.cos(phi);
            for(let j = 0; j <= points10.length - 1; j++){
                // vertex
                vertex.x = points10[j].x * sin;
                vertex.y = points10[j].y;
                vertex.z = points10[j].x * cos;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // uv
                uv.x = i / segments2;
                uv.y = j / (points10.length - 1);
                uvs.push(uv.x, uv.y);
                // normal
                const x = initNormals[3 * j + 0] * sin;
                const y = initNormals[3 * j + 1];
                const z = initNormals[3 * j + 0] * cos;
                normals.push(x, y, z);
            }
        }
        // indices
        for(let i36 = 0; i36 < segments2; i36++)for(let j2 = 0; j2 < points10.length - 1; j2++){
            const base = j2 + i36 * points10.length;
            const a = base;
            const b = base + points10.length;
            const c = base + points10.length + 1;
            const d = base + 1;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
    }
    static fromJSON(data17) {
        return new LatheGeometry(data17.points, data17.segments, data17.phiStart, data17.phiLength);
    }
}
class OctahedronGeometry extends PolyhedronGeometry {
    constructor(radius9 = 1, detail3 = 0){
        const vertices = [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
        ];
        const indices = [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
        ];
        super(vertices, indices, radius9, detail3);
        this.type = 'OctahedronGeometry';
        this.parameters = {
            radius: radius9,
            detail: detail3
        };
    }
    static fromJSON(data18) {
        return new OctahedronGeometry(data18.radius, data18.detail);
    }
}
class RingGeometry extends BufferGeometry {
    constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart3 = 0, thetaLength3 = Math.PI * 2){
        super();
        this.type = 'RingGeometry';
        this.parameters = {
            innerRadius: innerRadius,
            outerRadius: outerRadius,
            thetaSegments: thetaSegments,
            phiSegments: phiSegments,
            thetaStart: thetaStart3,
            thetaLength: thetaLength3
        };
        thetaSegments = Math.max(3, thetaSegments);
        phiSegments = Math.max(1, phiSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // some helper variables
        let radius = innerRadius;
        const radiusStep = (outerRadius - innerRadius) / phiSegments;
        const vertex = new Vector3();
        const uv = new Vector2();
        // generate vertices, normals and uvs
        for(let j = 0; j <= phiSegments; j++){
            for(let i = 0; i <= thetaSegments; i++){
                // values are generate from the inside of the ring to the outside
                const segment = thetaStart3 + i / thetaSegments * thetaLength3;
                // vertex
                vertex.x = radius * Math.cos(segment);
                vertex.y = radius * Math.sin(segment);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, 0, 1);
                // uv
                uv.x = (vertex.x / outerRadius + 1) / 2;
                uv.y = (vertex.y / outerRadius + 1) / 2;
                uvs.push(uv.x, uv.y);
            }
            // increase the radius for next row of vertices
            radius += radiusStep;
        }
        // indices
        for(let j3 = 0; j3 < phiSegments; j3++){
            const thetaSegmentLevel = j3 * (thetaSegments + 1);
            for(let i = 0; i < thetaSegments; i++){
                const segment = i + thetaSegmentLevel;
                const a = segment;
                const b = segment + thetaSegments + 1;
                const c = segment + thetaSegments + 2;
                const d = segment + 1;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
    }
    static fromJSON(data19) {
        return new RingGeometry(data19.innerRadius, data19.outerRadius, data19.thetaSegments, data19.phiSegments, data19.thetaStart, data19.thetaLength);
    }
}
class ShapeGeometry extends BufferGeometry {
    constructor(shapes4 = new Shape([
        new Vector2(0, 0.5),
        new Vector2(-0.5, -0.5),
        new Vector2(0.5, -0.5)
    ]), curveSegments = 12){
        super();
        this.type = 'ShapeGeometry';
        this.parameters = {
            shapes: shapes4,
            curveSegments: curveSegments
        };
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let groupStart = 0;
        let groupCount = 0;
        // allow single and array values for "shapes" parameter
        if (Array.isArray(shapes4) === false) addShape(shapes4);
        else for(let i40 = 0; i40 < shapes4.length; i40++){
            addShape(shapes4[i40]);
            this.addGroup(groupStart, groupCount, i40); // enables MultiMaterial support
            groupStart += groupCount;
            groupCount = 0;
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
        // helper functions
        function addShape(shape) {
            const indexOffset = vertices.length / 3;
            const points = shape.extractPoints(curveSegments);
            let shapeVertices = points.shape;
            const shapeHoles = points.holes;
            // check direction of vertices
            if (ShapeUtils.isClockWise(shapeVertices) === false) shapeVertices = shapeVertices.reverse();
            for(let i = 0, l = shapeHoles.length; i < l; i++){
                const shapeHole = shapeHoles[i];
                if (ShapeUtils.isClockWise(shapeHole) === true) shapeHoles[i] = shapeHole.reverse();
            }
            const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
            // join vertices of inner and outer paths to a single array
            for(let i37 = 0, l5 = shapeHoles.length; i37 < l5; i37++){
                const shapeHole = shapeHoles[i37];
                shapeVertices = shapeVertices.concat(shapeHole);
            }
            // vertices, normals, uvs
            for(let i38 = 0, l6 = shapeVertices.length; i38 < l6; i38++){
                const vertex = shapeVertices[i38];
                vertices.push(vertex.x, vertex.y, 0);
                normals.push(0, 0, 1);
                uvs.push(vertex.x, vertex.y); // world uvs
            }
            // incides
            for(let i39 = 0, l7 = faces.length; i39 < l7; i39++){
                const face = faces[i39];
                const a = face[0] + indexOffset;
                const b = face[1] + indexOffset;
                const c = face[2] + indexOffset;
                indices.push(a, b, c);
                groupCount += 3;
            }
        }
    }
    toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        return toJSON(shapes, data);
    }
    static fromJSON(data20, shapes3) {
        const geometryShapes = [];
        for(let j = 0, jl = data20.shapes.length; j < jl; j++){
            const shape = shapes3[data20.shapes[j]];
            geometryShapes.push(shape);
        }
        return new ShapeGeometry(geometryShapes, data20.curveSegments);
    }
}
function toJSON(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(let i = 0, l = shapes.length; i < l; i++){
        const shape = shapes[i];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    return data;
}
class SphereGeometry extends BufferGeometry {
    constructor(radius10 = 1, widthSegments2 = 32, heightSegments4 = 16, phiStart1 = 0, phiLength1 = Math.PI * 2, thetaStart4 = 0, thetaLength4 = Math.PI){
        super();
        this.type = 'SphereGeometry';
        this.parameters = {
            radius: radius10,
            widthSegments: widthSegments2,
            heightSegments: heightSegments4,
            phiStart: phiStart1,
            phiLength: phiLength1,
            thetaStart: thetaStart4,
            thetaLength: thetaLength4
        };
        widthSegments2 = Math.max(3, Math.floor(widthSegments2));
        heightSegments4 = Math.max(2, Math.floor(heightSegments4));
        const thetaEnd = Math.min(thetaStart4 + thetaLength4, Math.PI);
        let index = 0;
        const grid = [];
        const vertex = new Vector3();
        const normal = new Vector3();
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // generate vertices, normals and uvs
        for(let iy = 0; iy <= heightSegments4; iy++){
            const verticesRow = [];
            const v = iy / heightSegments4;
            // special case for the poles
            let uOffset = 0;
            if (iy == 0 && thetaStart4 == 0) uOffset = 0.5 / widthSegments2;
            else if (iy == heightSegments4 && thetaEnd == Math.PI) uOffset = -0.5 / widthSegments2;
            for(let ix = 0; ix <= widthSegments2; ix++){
                const u = ix / widthSegments2;
                // vertex
                vertex.x = -radius10 * Math.cos(phiStart1 + u * phiLength1) * Math.sin(thetaStart4 + v * thetaLength4);
                vertex.y = radius10 * Math.cos(thetaStart4 + v * thetaLength4);
                vertex.z = radius10 * Math.sin(phiStart1 + u * phiLength1) * Math.sin(thetaStart4 + v * thetaLength4);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normal.copy(vertex).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(u + uOffset, 1 - v);
                verticesRow.push(index++);
            }
            grid.push(verticesRow);
        }
        // indices
        for(let iy3 = 0; iy3 < heightSegments4; iy3++)for(let ix = 0; ix < widthSegments2; ix++){
            const a = grid[iy3][ix + 1];
            const b = grid[iy3][ix];
            const c = grid[iy3 + 1][ix];
            const d = grid[iy3 + 1][ix + 1];
            if (iy3 !== 0 || thetaStart4 > 0) indices.push(a, b, d);
            if (iy3 !== heightSegments4 - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
    }
    static fromJSON(data26) {
        return new SphereGeometry(data26.radius, data26.widthSegments, data26.heightSegments, data26.phiStart, data26.phiLength, data26.thetaStart, data26.thetaLength);
    }
}
class TetrahedronGeometry extends PolyhedronGeometry {
    constructor(radius11 = 1, detail4 = 0){
        const vertices = [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
        ];
        const indices = [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
        ];
        super(vertices, indices, radius11, detail4);
        this.type = 'TetrahedronGeometry';
        this.parameters = {
            radius: radius11,
            detail: detail4
        };
    }
    static fromJSON(data22) {
        return new TetrahedronGeometry(data22.radius, data22.detail);
    }
}
class TorusGeometry extends BufferGeometry {
    constructor(radius12 = 1, tube = 0.4, radialSegments2 = 8, tubularSegments = 6, arc = Math.PI * 2){
        super();
        this.type = 'TorusGeometry';
        this.parameters = {
            radius: radius12,
            tube: tube,
            radialSegments: radialSegments2,
            tubularSegments: tubularSegments,
            arc: arc
        };
        radialSegments2 = Math.floor(radialSegments2);
        tubularSegments = Math.floor(tubularSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const center = new Vector3();
        const vertex = new Vector3();
        const normal = new Vector3();
        // generate vertices, normals and uvs
        for(let j = 0; j <= radialSegments2; j++)for(let i = 0; i <= tubularSegments; i++){
            const u = i / tubularSegments * arc;
            const v = j / radialSegments2 * Math.PI * 2;
            // vertex
            vertex.x = (radius12 + tube * Math.cos(v)) * Math.cos(u);
            vertex.y = (radius12 + tube * Math.cos(v)) * Math.sin(u);
            vertex.z = tube * Math.sin(v);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            center.x = radius12 * Math.cos(u);
            center.y = radius12 * Math.sin(u);
            normal.subVectors(vertex, center).normalize();
            normals.push(normal.x, normal.y, normal.z);
            // uv
            uvs.push(i / tubularSegments);
            uvs.push(j / radialSegments2);
        }
        // generate indices
        for(let j4 = 1; j4 <= radialSegments2; j4++)for(let i41 = 1; i41 <= tubularSegments; i41++){
            // indices
            const a = (tubularSegments + 1) * j4 + i41 - 1;
            const b = (tubularSegments + 1) * (j4 - 1) + i41 - 1;
            const c = (tubularSegments + 1) * (j4 - 1) + i41;
            const d = (tubularSegments + 1) * j4 + i41;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
    }
    static fromJSON(data23) {
        return new TorusGeometry(data23.radius, data23.tube, data23.radialSegments, data23.tubularSegments, data23.arc);
    }
}
class TorusKnotGeometry extends BufferGeometry {
    constructor(radius13 = 1, tube1 = 0.4, tubularSegments1 = 64, radialSegments3 = 8, p1 = 2, q12 = 3){
        super();
        this.type = 'TorusKnotGeometry';
        this.parameters = {
            radius: radius13,
            tube: tube1,
            tubularSegments: tubularSegments1,
            radialSegments: radialSegments3,
            p: p1,
            q: q12
        };
        tubularSegments1 = Math.floor(tubularSegments1);
        radialSegments3 = Math.floor(radialSegments3);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const vertex = new Vector3();
        const normal = new Vector3();
        const P1 = new Vector3();
        const P2 = new Vector3();
        const B = new Vector3();
        const T = new Vector3();
        const N = new Vector3();
        // generate vertices, normals and uvs
        for(let i = 0; i <= tubularSegments1; ++i){
            // the radian "u" is used to calculate the position on the torus curve of the current tubular segement
            const u = i / tubularSegments1 * p1 * Math.PI * 2;
            // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
            // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
            calculatePositionOnCurve(u, p1, q12, radius13, P1);
            calculatePositionOnCurve(u + 0.01, p1, q12, radius13, P2);
            // calculate orthonormal basis
            T.subVectors(P2, P1);
            N.addVectors(P2, P1);
            B.crossVectors(T, N);
            N.crossVectors(B, T);
            // normalize B, N. T can be ignored, we don't use it
            B.normalize();
            N.normalize();
            for(let j = 0; j <= radialSegments3; ++j){
                // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
                // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
                const v = j / radialSegments3 * Math.PI * 2;
                const cx = -tube1 * Math.cos(v);
                const cy = tube1 * Math.sin(v);
                // now calculate the final vertex position.
                // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
                vertex.x = P1.x + (cx * N.x + cy * B.x);
                vertex.y = P1.y + (cx * N.y + cy * B.y);
                vertex.z = P1.z + (cx * N.z + cy * B.z);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
                normal.subVectors(vertex, P1).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(i / tubularSegments1);
                uvs.push(j / radialSegments3);
            }
        }
        // generate indices
        for(let j = 1; j <= tubularSegments1; j++)for(let i42 = 1; i42 <= radialSegments3; i42++){
            // indices
            const a = (radialSegments3 + 1) * (j - 1) + (i42 - 1);
            const b = (radialSegments3 + 1) * j + (i42 - 1);
            const c = (radialSegments3 + 1) * j + i42;
            const d = (radialSegments3 + 1) * (j - 1) + i42;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
        // this function calculates the current position on the torus curve
        function calculatePositionOnCurve(u, p, q, radius, position) {
            const cu = Math.cos(u);
            const su = Math.sin(u);
            const quOverP = q / p * u;
            const cs = Math.cos(quOverP);
            position.x = radius * (2 + cs) * 0.5 * cu;
            position.y = radius * (2 + cs) * su * 0.5;
            position.z = radius * Math.sin(quOverP) * 0.5;
        }
    }
    static fromJSON(data24) {
        return new TorusKnotGeometry(data24.radius, data24.tube, data24.tubularSegments, data24.radialSegments, data24.p, data24.q);
    }
}
class TubeGeometry extends BufferGeometry {
    constructor(path3 = new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0)), tubularSegments2 = 64, radius = 1, radialSegments4 = 8, closed2 = false){
        super();
        this.type = 'TubeGeometry';
        this.parameters = {
            path: path3,
            tubularSegments: tubularSegments2,
            radius: radius,
            radialSegments: radialSegments4,
            closed: closed2
        };
        const frames = path3.computeFrenetFrames(tubularSegments2, closed2);
        // expose internals
        this.tangents = frames.tangents;
        this.normals = frames.normals;
        this.binormals = frames.binormals;
        // helper variables
        const vertex = new Vector3();
        const normal = new Vector3();
        const uv = new Vector2();
        let P = new Vector3();
        // buffer
        const vertices = [];
        const normals = [];
        const uvs = [];
        const indices = [];
        // create buffer data
        generateBufferData();
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
        // functions
        function generateBufferData() {
            for(let i = 0; i < tubularSegments2; i++)generateSegment(i);
            // if the geometry is not closed, generate the last row of vertices and normals
            // at the regular position on the given path
            //
            // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
            generateSegment(closed2 === false ? tubularSegments2 : 0);
            // uvs are generated in a separate function.
            // this makes it easy compute correct values for closed geometries
            generateUVs();
            // finally create faces
            generateIndices();
        }
        function generateSegment(i) {
            // we use getPointAt to sample evenly distributed points from the given path
            P = path3.getPointAt(i / tubularSegments2, P);
            // retrieve corresponding normal and binormal
            const N = frames.normals[i];
            const B = frames.binormals[i];
            // generate normals and vertices for the current segment
            for(let j = 0; j <= radialSegments4; j++){
                const v = j / radialSegments4 * Math.PI * 2;
                const sin = Math.sin(v);
                const cos = -Math.cos(v);
                // normal
                normal.x = cos * N.x + sin * B.x;
                normal.y = cos * N.y + sin * B.y;
                normal.z = cos * N.z + sin * B.z;
                normal.normalize();
                normals.push(normal.x, normal.y, normal.z);
                // vertex
                vertex.x = P.x + radius * normal.x;
                vertex.y = P.y + radius * normal.y;
                vertex.z = P.z + radius * normal.z;
                vertices.push(vertex.x, vertex.y, vertex.z);
            }
        }
        function generateIndices() {
            for(let j = 1; j <= tubularSegments2; j++)for(let i = 1; i <= radialSegments4; i++){
                const a = (radialSegments4 + 1) * (j - 1) + (i - 1);
                const b = (radialSegments4 + 1) * j + (i - 1);
                const c = (radialSegments4 + 1) * j + i;
                const d = (radialSegments4 + 1) * (j - 1) + i;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        }
        function generateUVs() {
            for(let i = 0; i <= tubularSegments2; i++)for(let j = 0; j <= radialSegments4; j++){
                uv.x = i / tubularSegments2;
                uv.y = j / radialSegments4;
                uvs.push(uv.x, uv.y);
            }
        }
    }
    toJSON() {
        const data = super.toJSON();
        data.path = this.parameters.path.toJSON();
        return data;
    }
    static fromJSON(data25) {
        // This only works for built-in curves (e.g. CatmullRomCurve3).
        // User defined curves or instances of CurvePath will not be deserialized.
        return new TubeGeometry(new Curves[data25.path.type]().fromJSON(data25.path), data25.tubularSegments, data25.radius, data25.radialSegments, data25.closed);
    }
}
class WireframeGeometry extends BufferGeometry {
    constructor(geometry9 = null){
        super();
        this.type = 'WireframeGeometry';
        this.parameters = {
            geometry: geometry9
        };
        if (geometry9 !== null) {
            // buffer
            const vertices = [];
            const edges = new Set();
            // helper variables
            const start = new Vector3();
            const end = new Vector3();
            if (geometry9.index !== null) {
                // indexed BufferGeometry
                const position = geometry9.attributes.position;
                const indices = geometry9.index;
                let groups = geometry9.groups;
                if (groups.length === 0) groups = [
                    {
                        start: 0,
                        count: indices.count,
                        materialIndex: 0
                    }
                ];
                // create a data structure that contains all eges without duplicates
                for(let o = 0, ol = groups.length; o < ol; ++o){
                    const group = groups[o];
                    const groupStart = group.start;
                    const groupCount = group.count;
                    for(let i = groupStart, l = groupStart + groupCount; i < l; i += 3)for(let j = 0; j < 3; j++){
                        const index1 = indices.getX(i + j);
                        const index2 = indices.getX(i + (j + 1) % 3);
                        start.fromBufferAttribute(position, index1);
                        end.fromBufferAttribute(position, index2);
                        if (isUniqueEdge(start, end, edges) === true) {
                            vertices.push(start.x, start.y, start.z);
                            vertices.push(end.x, end.y, end.z);
                        }
                    }
                }
            } else {
                // non-indexed BufferGeometry
                const position = geometry9.attributes.position;
                for(let i = 0, l = position.count / 3; i < l; i++)for(let j = 0; j < 3; j++){
                    // three edges per triangle, an edge is represented as (index1, index2)
                    // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
                    const index1 = 3 * i + j;
                    const index2 = 3 * i + (j + 1) % 3;
                    start.fromBufferAttribute(position, index1);
                    end.fromBufferAttribute(position, index2);
                    if (isUniqueEdge(start, end, edges) === true) {
                        vertices.push(start.x, start.y, start.z);
                        vertices.push(end.x, end.y, end.z);
                    }
                }
            }
            // build geometry
            this.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        }
    }
}
function isUniqueEdge(start, end, edges) {
    const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
    const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge
    if (edges.has(hash1) === true || edges.has(hash2) === true) return false;
    else {
        edges.add(hash1, hash2);
        return true;
    }
}
var Geometries = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BoxGeometry: BoxGeometry,
    BoxBufferGeometry: BoxGeometry,
    CircleGeometry: CircleGeometry,
    CircleBufferGeometry: CircleGeometry,
    ConeGeometry: ConeGeometry,
    ConeBufferGeometry: ConeGeometry,
    CylinderGeometry: CylinderGeometry,
    CylinderBufferGeometry: CylinderGeometry,
    DodecahedronGeometry: DodecahedronGeometry,
    DodecahedronBufferGeometry: DodecahedronGeometry,
    EdgesGeometry: EdgesGeometry,
    ExtrudeGeometry: ExtrudeGeometry,
    ExtrudeBufferGeometry: ExtrudeGeometry,
    IcosahedronGeometry: IcosahedronGeometry,
    IcosahedronBufferGeometry: IcosahedronGeometry,
    LatheGeometry: LatheGeometry,
    LatheBufferGeometry: LatheGeometry,
    OctahedronGeometry: OctahedronGeometry,
    OctahedronBufferGeometry: OctahedronGeometry,
    PlaneGeometry: PlaneGeometry,
    PlaneBufferGeometry: PlaneGeometry,
    PolyhedronGeometry: PolyhedronGeometry,
    PolyhedronBufferGeometry: PolyhedronGeometry,
    RingGeometry: RingGeometry,
    RingBufferGeometry: RingGeometry,
    ShapeGeometry: ShapeGeometry,
    ShapeBufferGeometry: ShapeGeometry,
    SphereGeometry: SphereGeometry,
    SphereBufferGeometry: SphereGeometry,
    TetrahedronGeometry: TetrahedronGeometry,
    TetrahedronBufferGeometry: TetrahedronGeometry,
    TorusGeometry: TorusGeometry,
    TorusBufferGeometry: TorusGeometry,
    TorusKnotGeometry: TorusKnotGeometry,
    TorusKnotBufferGeometry: TorusKnotGeometry,
    TubeGeometry: TubeGeometry,
    TubeBufferGeometry: TubeGeometry,
    WireframeGeometry: WireframeGeometry
});
/**
 * parameters = {
 *  color: <THREE.Color>
 * }
 */ class ShadowMaterial extends Material {
    constructor(parameters9){
        super();
        this.type = 'ShadowMaterial';
        this.color = new Color(0);
        this.transparent = true;
        this.setValues(parameters9);
    }
    copy(source41) {
        super.copy(source41);
        this.color.copy(source41.color);
        return this;
    }
}
ShadowMaterial.prototype.isShadowMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */ class MeshStandardMaterial extends Material {
    constructor(parameters10){
        super();
        this.defines = {
            'STANDARD': ''
        };
        this.type = 'MeshStandardMaterial';
        this.color = new Color(16777215); // diffuse
        this.roughness = 1;
        this.metalness = 0;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.roughnessMap = null;
        this.metalnessMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.envMapIntensity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.flatShading = false;
        this.setValues(parameters10);
    }
    copy(source42) {
        super.copy(source42);
        this.defines = {
            'STANDARD': ''
        };
        this.color.copy(source42.color);
        this.roughness = source42.roughness;
        this.metalness = source42.metalness;
        this.map = source42.map;
        this.lightMap = source42.lightMap;
        this.lightMapIntensity = source42.lightMapIntensity;
        this.aoMap = source42.aoMap;
        this.aoMapIntensity = source42.aoMapIntensity;
        this.emissive.copy(source42.emissive);
        this.emissiveMap = source42.emissiveMap;
        this.emissiveIntensity = source42.emissiveIntensity;
        this.bumpMap = source42.bumpMap;
        this.bumpScale = source42.bumpScale;
        this.normalMap = source42.normalMap;
        this.normalMapType = source42.normalMapType;
        this.normalScale.copy(source42.normalScale);
        this.displacementMap = source42.displacementMap;
        this.displacementScale = source42.displacementScale;
        this.displacementBias = source42.displacementBias;
        this.roughnessMap = source42.roughnessMap;
        this.metalnessMap = source42.metalnessMap;
        this.alphaMap = source42.alphaMap;
        this.envMap = source42.envMap;
        this.envMapIntensity = source42.envMapIntensity;
        this.refractionRatio = source42.refractionRatio;
        this.wireframe = source42.wireframe;
        this.wireframeLinewidth = source42.wireframeLinewidth;
        this.wireframeLinecap = source42.wireframeLinecap;
        this.wireframeLinejoin = source42.wireframeLinejoin;
        this.flatShading = source42.flatShading;
        return this;
    }
}
MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
/**
 * parameters = {
 *  clearcoat: <float>,
 *  clearcoatMap: new THREE.Texture( <Image> ),
 *  clearcoatRoughness: <float>,
 *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
 *  clearcoatNormalScale: <Vector2>,
 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
 *
 *  ior: <float>,
 *  reflectivity: <float>,
 *
 *  sheen: <float>,
 *  sheenColor: <Color>,
 *  sheenColorMap: new THREE.Texture( <Image> ),
 *  sheenRoughness: <float>,
 *  sheenRoughnessMap: new THREE.Texture( <Image> ),
 *
 *  transmission: <float>,
 *  transmissionMap: new THREE.Texture( <Image> ),
 *
 *  thickness: <float>,
 *  thicknessMap: new THREE.Texture( <Image> ),
 *  attenuationDistance: <float>,
 *  attenuationColor: <Color>,
 *
 *  specularIntensity: <float>,
 *  specularIntensityMap: new THREE.Texture( <Image> ),
 *  specularColor: <Color>,
 *  specularColorMap: new THREE.Texture( <Image> )
 * }
 */ class MeshPhysicalMaterial extends MeshStandardMaterial {
    constructor(parameters11){
        super();
        this.defines = {
            'STANDARD': '',
            'PHYSICAL': ''
        };
        this.type = 'MeshPhysicalMaterial';
        this.clearcoatMap = null;
        this.clearcoatRoughness = 0;
        this.clearcoatRoughnessMap = null;
        this.clearcoatNormalScale = new Vector2(1, 1);
        this.clearcoatNormalMap = null;
        this.ior = 1.5;
        Object.defineProperty(this, 'reflectivity', {
            get: function() {
                return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function(reflectivity) {
                this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
            }
        });
        this.sheenColor = new Color(0);
        this.sheenColorMap = null;
        this.sheenRoughness = 1;
        this.sheenRoughnessMap = null;
        this.transmissionMap = null;
        this.thickness = 0;
        this.thicknessMap = null;
        this.attenuationDistance = 0;
        this.attenuationColor = new Color(1, 1, 1);
        this.specularIntensity = 1;
        this.specularIntensityMap = null;
        this.specularColor = new Color(1, 1, 1);
        this.specularColorMap = null;
        this._sheen = 0;
        this._clearcoat = 0;
        this._transmission = 0;
        this.setValues(parameters11);
    }
    get sheen() {
        return this._sheen;
    }
    set sheen(value28) {
        if (this._sheen > 0 !== value28 > 0) this.version++;
        this._sheen = value28;
    }
    get clearcoat() {
        return this._clearcoat;
    }
    set clearcoat(value29) {
        if (this._clearcoat > 0 !== value29 > 0) this.version++;
        this._clearcoat = value29;
    }
    get transmission() {
        return this._transmission;
    }
    set transmission(value30) {
        if (this._transmission > 0 !== value30 > 0) this.version++;
        this._transmission = value30;
    }
    copy(source43) {
        super.copy(source43);
        this.defines = {
            'STANDARD': '',
            'PHYSICAL': ''
        };
        this.clearcoat = source43.clearcoat;
        this.clearcoatMap = source43.clearcoatMap;
        this.clearcoatRoughness = source43.clearcoatRoughness;
        this.clearcoatRoughnessMap = source43.clearcoatRoughnessMap;
        this.clearcoatNormalMap = source43.clearcoatNormalMap;
        this.clearcoatNormalScale.copy(source43.clearcoatNormalScale);
        this.ior = source43.ior;
        this.sheen = source43.sheen;
        this.sheenColor.copy(source43.sheenColor);
        this.sheenColorMap = source43.sheenColorMap;
        this.sheenRoughness = source43.sheenRoughness;
        this.sheenRoughnessMap = source43.sheenRoughnessMap;
        this.transmission = source43.transmission;
        this.transmissionMap = source43.transmissionMap;
        this.thickness = source43.thickness;
        this.thicknessMap = source43.thicknessMap;
        this.attenuationDistance = source43.attenuationDistance;
        this.attenuationColor.copy(source43.attenuationColor);
        this.specularIntensity = source43.specularIntensity;
        this.specularIntensityMap = source43.specularIntensityMap;
        this.specularColor.copy(source43.specularColor);
        this.specularColorMap = source43.specularColorMap;
        return this;
    }
}
MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.MultiplyOperation,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */ class MeshPhongMaterial extends Material {
    constructor(parameters12){
        super();
        this.type = 'MeshPhongMaterial';
        this.color = new Color(16777215); // diffuse
        this.specular = new Color(1118481);
        this.shininess = 30;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.flatShading = false;
        this.setValues(parameters12);
    }
    copy(source44) {
        super.copy(source44);
        this.color.copy(source44.color);
        this.specular.copy(source44.specular);
        this.shininess = source44.shininess;
        this.map = source44.map;
        this.lightMap = source44.lightMap;
        this.lightMapIntensity = source44.lightMapIntensity;
        this.aoMap = source44.aoMap;
        this.aoMapIntensity = source44.aoMapIntensity;
        this.emissive.copy(source44.emissive);
        this.emissiveMap = source44.emissiveMap;
        this.emissiveIntensity = source44.emissiveIntensity;
        this.bumpMap = source44.bumpMap;
        this.bumpScale = source44.bumpScale;
        this.normalMap = source44.normalMap;
        this.normalMapType = source44.normalMapType;
        this.normalScale.copy(source44.normalScale);
        this.displacementMap = source44.displacementMap;
        this.displacementScale = source44.displacementScale;
        this.displacementBias = source44.displacementBias;
        this.specularMap = source44.specularMap;
        this.alphaMap = source44.alphaMap;
        this.envMap = source44.envMap;
        this.combine = source44.combine;
        this.reflectivity = source44.reflectivity;
        this.refractionRatio = source44.refractionRatio;
        this.wireframe = source44.wireframe;
        this.wireframeLinewidth = source44.wireframeLinewidth;
        this.wireframeLinecap = source44.wireframeLinecap;
        this.wireframeLinejoin = source44.wireframeLinejoin;
        this.flatShading = source44.flatShading;
        return this;
    }
}
MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *
 *  map: new THREE.Texture( <Image> ),
 *  gradientMap: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */ class MeshToonMaterial extends Material {
    constructor(parameters13){
        super();
        this.defines = {
            'TOON': ''
        };
        this.type = 'MeshToonMaterial';
        this.color = new Color(16777215);
        this.map = null;
        this.gradientMap = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.setValues(parameters13);
    }
    copy(source45) {
        super.copy(source45);
        this.color.copy(source45.color);
        this.map = source45.map;
        this.gradientMap = source45.gradientMap;
        this.lightMap = source45.lightMap;
        this.lightMapIntensity = source45.lightMapIntensity;
        this.aoMap = source45.aoMap;
        this.aoMapIntensity = source45.aoMapIntensity;
        this.emissive.copy(source45.emissive);
        this.emissiveMap = source45.emissiveMap;
        this.emissiveIntensity = source45.emissiveIntensity;
        this.bumpMap = source45.bumpMap;
        this.bumpScale = source45.bumpScale;
        this.normalMap = source45.normalMap;
        this.normalMapType = source45.normalMapType;
        this.normalScale.copy(source45.normalScale);
        this.displacementMap = source45.displacementMap;
        this.displacementScale = source45.displacementScale;
        this.displacementBias = source45.displacementBias;
        this.alphaMap = source45.alphaMap;
        this.wireframe = source45.wireframe;
        this.wireframeLinewidth = source45.wireframeLinewidth;
        this.wireframeLinecap = source45.wireframeLinecap;
        this.wireframeLinejoin = source45.wireframeLinejoin;
        return this;
    }
}
MeshToonMaterial.prototype.isMeshToonMaterial = true;
/**
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  flatShading: <bool>
 * }
 */ class MeshNormalMaterial extends Material {
    constructor(parameters14){
        super();
        this.type = 'MeshNormalMaterial';
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.fog = false;
        this.flatShading = false;
        this.setValues(parameters14);
    }
    copy(source46) {
        super.copy(source46);
        this.bumpMap = source46.bumpMap;
        this.bumpScale = source46.bumpScale;
        this.normalMap = source46.normalMap;
        this.normalMapType = source46.normalMapType;
        this.normalScale.copy(source46.normalScale);
        this.displacementMap = source46.displacementMap;
        this.displacementScale = source46.displacementScale;
        this.displacementBias = source46.displacementBias;
        this.wireframe = source46.wireframe;
        this.wireframeLinewidth = source46.wireframeLinewidth;
        this.flatShading = source46.flatShading;
        return this;
    }
}
MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */ class MeshLambertMaterial extends Material {
    constructor(parameters15){
        super();
        this.type = 'MeshLambertMaterial';
        this.color = new Color(16777215); // diffuse
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.setValues(parameters15);
    }
    copy(source47) {
        super.copy(source47);
        this.color.copy(source47.color);
        this.map = source47.map;
        this.lightMap = source47.lightMap;
        this.lightMapIntensity = source47.lightMapIntensity;
        this.aoMap = source47.aoMap;
        this.aoMapIntensity = source47.aoMapIntensity;
        this.emissive.copy(source47.emissive);
        this.emissiveMap = source47.emissiveMap;
        this.emissiveIntensity = source47.emissiveIntensity;
        this.specularMap = source47.specularMap;
        this.alphaMap = source47.alphaMap;
        this.envMap = source47.envMap;
        this.combine = source47.combine;
        this.reflectivity = source47.reflectivity;
        this.refractionRatio = source47.refractionRatio;
        this.wireframe = source47.wireframe;
        this.wireframeLinewidth = source47.wireframeLinewidth;
        this.wireframeLinecap = source47.wireframeLinecap;
        this.wireframeLinejoin = source47.wireframeLinejoin;
        return this;
    }
}
MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  matcap: new THREE.Texture( <Image> ),
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  flatShading: <bool>
 * }
 */ class MeshMatcapMaterial extends Material {
    constructor(parameters16){
        super();
        this.defines = {
            'MATCAP': ''
        };
        this.type = 'MeshMatcapMaterial';
        this.color = new Color(16777215); // diffuse
        this.matcap = null;
        this.map = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.flatShading = false;
        this.setValues(parameters16);
    }
    copy(source48) {
        super.copy(source48);
        this.defines = {
            'MATCAP': ''
        };
        this.color.copy(source48.color);
        this.matcap = source48.matcap;
        this.map = source48.map;
        this.bumpMap = source48.bumpMap;
        this.bumpScale = source48.bumpScale;
        this.normalMap = source48.normalMap;
        this.normalMapType = source48.normalMapType;
        this.normalScale.copy(source48.normalScale);
        this.displacementMap = source48.displacementMap;
        this.displacementScale = source48.displacementScale;
        this.displacementBias = source48.displacementBias;
        this.alphaMap = source48.alphaMap;
        this.flatShading = source48.flatShading;
        return this;
    }
}
MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */ class LineDashedMaterial extends LineBasicMaterial {
    constructor(parameters17){
        super();
        this.type = 'LineDashedMaterial';
        this.scale = 1;
        this.dashSize = 3;
        this.gapSize = 1;
        this.setValues(parameters17);
    }
    copy(source49) {
        super.copy(source49);
        this.scale = source49.scale;
        this.dashSize = source49.dashSize;
        this.gapSize = source49.gapSize;
        return this;
    }
}
LineDashedMaterial.prototype.isLineDashedMaterial = true;
var Materials = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ShadowMaterial: ShadowMaterial,
    SpriteMaterial: SpriteMaterial,
    RawShaderMaterial: RawShaderMaterial,
    ShaderMaterial: ShaderMaterial,
    PointsMaterial: PointsMaterial,
    MeshPhysicalMaterial: MeshPhysicalMaterial,
    MeshStandardMaterial: MeshStandardMaterial,
    MeshPhongMaterial: MeshPhongMaterial,
    MeshToonMaterial: MeshToonMaterial,
    MeshNormalMaterial: MeshNormalMaterial,
    MeshLambertMaterial: MeshLambertMaterial,
    MeshDepthMaterial: MeshDepthMaterial,
    MeshDistanceMaterial: MeshDistanceMaterial,
    MeshBasicMaterial: MeshBasicMaterial,
    MeshMatcapMaterial: MeshMatcapMaterial,
    LineDashedMaterial: LineDashedMaterial,
    LineBasicMaterial: LineBasicMaterial,
    Material: Material
});
const AnimationUtils = {
    // same as Array.prototype.slice, but also works on typed arrays
    arraySlice: function(array, from, to) {
        if (AnimationUtils.isTypedArray(array)) // in ios9 array.subarray(from, undefined) will return empty array
        // but array.subarray(from) or array.subarray(from, len) is correct
        return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
        return array.slice(from, to);
    },
    // converts an array to a specific type
    convertArray: function(array, type, forceClone) {
        if (!array || !forceClone && array.constructor === type) return array;
        if (typeof type.BYTES_PER_ELEMENT === 'number') return new type(array); // create typed array
        return Array.prototype.slice.call(array); // create Array
    },
    isTypedArray: function(object) {
        return ArrayBuffer.isView(object) && !(object instanceof DataView);
    },
    // returns an array by which times and values can be sorted
    getKeyframeOrder: function(times) {
        function compareTime(i, j) {
            return times[i] - times[j];
        }
        const n = times.length;
        const result = new Array(n);
        for(let i = 0; i !== n; ++i)result[i] = i;
        result.sort(compareTime);
        return result;
    },
    // uses the array previously returned by 'getKeyframeOrder' to sort data
    sortedArray: function(values, stride, order) {
        const nValues = values.length;
        const result = new values.constructor(nValues);
        for(let i = 0, dstOffset = 0; dstOffset !== nValues; ++i){
            const srcOffset = order[i] * stride;
            for(let j = 0; j !== stride; ++j)result[dstOffset++] = values[srcOffset + j];
        }
        return result;
    },
    // function for parsing AOS keyframe formats
    flattenJSON: function(jsonKeys, times, values, valuePropertyName) {
        let i = 1, key = jsonKeys[0];
        while(key !== undefined && key[valuePropertyName] === undefined)key = jsonKeys[i++];
        if (key === undefined) return; // no data
        let value = key[valuePropertyName];
        if (value === undefined) return; // no data
        if (Array.isArray(value)) do {
            value = key[valuePropertyName];
            if (value !== undefined) {
                times.push(key.time);
                values.push.apply(values, value); // push all elements
            }
            key = jsonKeys[i++];
        }while (key !== undefined)
        else if (value.toArray !== undefined) // ...assume THREE.Math-ish
        do {
            value = key[valuePropertyName];
            if (value !== undefined) {
                times.push(key.time);
                value.toArray(values, values.length);
            }
            key = jsonKeys[i++];
        }while (key !== undefined)
        else // otherwise push as-is
        do {
            value = key[valuePropertyName];
            if (value !== undefined) {
                times.push(key.time);
                values.push(value);
            }
            key = jsonKeys[i++];
        }while (key !== undefined)
    },
    subclip: function(sourceClip, name, startFrame, endFrame, fps = 30) {
        const clip = sourceClip.clone();
        clip.name = name;
        const tracks = [];
        for(let i = 0; i < clip.tracks.length; ++i){
            const track = clip.tracks[i];
            const valueSize = track.getValueSize();
            const times = [];
            const values = [];
            for(let j = 0; j < track.times.length; ++j){
                const frame = track.times[j] * fps;
                if (frame < startFrame || frame >= endFrame) continue;
                times.push(track.times[j]);
                for(let k = 0; k < valueSize; ++k)values.push(track.values[j * valueSize + k]);
            }
            if (times.length === 0) continue;
            track.times = AnimationUtils.convertArray(times, track.times.constructor);
            track.values = AnimationUtils.convertArray(values, track.values.constructor);
            tracks.push(track);
        }
        clip.tracks = tracks;
        // find minimum .times value across all tracks in the trimmed clip
        let minStartTime = Infinity;
        for(let i43 = 0; i43 < clip.tracks.length; ++i43)if (minStartTime > clip.tracks[i43].times[0]) minStartTime = clip.tracks[i43].times[0];
        // shift all tracks such that clip begins at t=0
        for(let i44 = 0; i44 < clip.tracks.length; ++i44)clip.tracks[i44].shift(-1 * minStartTime);
        clip.resetDuration();
        return clip;
    },
    makeClipAdditive: function(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
        if (fps <= 0) fps = 30;
        const numTracks = referenceClip.tracks.length;
        const referenceTime = referenceFrame / fps;
        // Make each track's values relative to the values at the reference frame
        for(let i = 0; i < numTracks; ++i){
            const referenceTrack = referenceClip.tracks[i];
            const referenceTrackType = referenceTrack.ValueTypeName;
            // Skip this track if it's non-numeric
            if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue;
            // Find the track in the target clip whose name and type matches the reference track
            const targetTrack = targetClip.tracks.find(function(track) {
                return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
            });
            if (targetTrack === undefined) continue;
            let referenceOffset = 0;
            const referenceValueSize = referenceTrack.getValueSize();
            if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) referenceOffset = referenceValueSize / 3;
            let targetOffset = 0;
            const targetValueSize = targetTrack.getValueSize();
            if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) targetOffset = targetValueSize / 3;
            const lastIndex = referenceTrack.times.length - 1;
            let referenceValue;
            // Find the value to subtract out of the track
            if (referenceTime <= referenceTrack.times[0]) {
                // Reference frame is earlier than the first keyframe, so just use the first keyframe
                const startIndex = referenceOffset;
                const endIndex = referenceValueSize - referenceOffset;
                referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
            } else if (referenceTime >= referenceTrack.times[lastIndex]) {
                // Reference frame is after the last keyframe, so just use the last keyframe
                const startIndex = lastIndex * referenceValueSize + referenceOffset;
                const endIndex = startIndex + referenceValueSize - referenceOffset;
                referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
            } else {
                // Interpolate to the reference value
                const interpolant = referenceTrack.createInterpolant();
                const startIndex = referenceOffset;
                const endIndex = referenceValueSize - referenceOffset;
                interpolant.evaluate(referenceTime);
                referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);
            }
            // Conjugate the quaternion
            if (referenceTrackType === 'quaternion') {
                const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
                referenceQuat.toArray(referenceValue);
            }
            // Subtract the reference value from all of the track values
            const numTimes = targetTrack.times.length;
            for(let j = 0; j < numTimes; ++j){
                const valueStart = j * targetValueSize + targetOffset;
                if (referenceTrackType === 'quaternion') // Multiply the conjugate for quaternion track types
                Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
                else {
                    const valueEnd = targetValueSize - targetOffset * 2;
                    // Subtract each value for all other numeric track types
                    for(let k = 0; k < valueEnd; ++k)targetTrack.values[valueStart + k] -= referenceValue[k];
                }
            }
        }
        targetClip.blendMode = AdditiveAnimationBlendMode;
        return targetClip;
    }
};
/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */ class Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        this.parameterPositions = parameterPositions;
        this._cachedIndex = 0;
        this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
        this.sampleValues = sampleValues;
        this.valueSize = sampleSize;
        this.settings = null;
        this.DefaultSettings_ = {
        };
    }
    evaluate(t) {
        const pp = this.parameterPositions;
        let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
        validate_interval: {
            seek: {
                let right;
                linear_scan: {
                    //- See http://jsperf.com/comparison-to-undefined/3
                    //- slower code:
                    //-
                    //- 				if ( t >= t1 || t1 === undefined ) {
                    forward_scan: if (!(t < t1)) {
                        for(let giveUpAt = i1 + 2;;){
                            if (t1 === undefined) {
                                if (t < t0) break forward_scan;
                                // after end
                                i1 = pp.length;
                                this._cachedIndex = i1;
                                return this.afterEnd_(i1 - 1, t, t0);
                            }
                            if (i1 === giveUpAt) break; // this loop
                            t0 = t1;
                            t1 = pp[++i1];
                            if (t < t1) break seek;
                        }
                        // prepare binary search on the right side of the index
                        right = pp.length;
                        break linear_scan;
                    }
                    //- slower code:
                    //-					if ( t < t0 || t0 === undefined ) {
                    if (!(t >= t0)) {
                        // looping?
                        const t1global = pp[1];
                        if (t < t1global) {
                            i1 = 2; // + 1, using the scan for the details
                            t0 = t1global;
                        }
                        // linear reverse scan
                        for(let giveUpAt = i1 - 2;;){
                            if (t0 === undefined) {
                                // before start
                                this._cachedIndex = 0;
                                return this.beforeStart_(0, t, t1);
                            }
                            if (i1 === giveUpAt) break; // this loop
                            t1 = t0;
                            t0 = pp[--i1 - 1];
                            if (t >= t0) break seek;
                        }
                        // prepare binary search on the left side of the index
                        right = i1;
                        i1 = 0;
                        break linear_scan;
                    }
                    break validate_interval;
                } // linear scan
                // binary search
                while(i1 < right){
                    const mid = i1 + right >>> 1;
                    if (t < pp[mid]) right = mid;
                    else i1 = mid + 1;
                }
                t1 = pp[i1];
                t0 = pp[i1 - 1];
                // check boundary cases, again
                if (t0 === undefined) {
                    this._cachedIndex = 0;
                    return this.beforeStart_(0, t, t1);
                }
                if (t1 === undefined) {
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.afterEnd_(i1 - 1, t0, t);
                }
            } // seek
            this._cachedIndex = i1;
            this.intervalChanged_(i1, t0, t1);
        } // validate_interval
        return this.interpolate_(i1, t0, t, t1);
    }
    getSettings_() {
        return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(index43) {
        // copies a sample value to the result buffer
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index43 * stride;
        for(let i = 0; i !== stride; ++i)result[i] = values[offset + i];
        return result;
    }
    // Template methods for derived classes:
    interpolate_() {
        throw new Error('call to abstract method');
    // implementations shall return this.resultBuffer
    }
    intervalChanged_() {
    // empty
    }
}
// ALIAS DEFINITIONS
Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;
Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;
/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */ class CubicInterpolant extends Interpolant {
    constructor(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1){
        super(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1);
        this._weightPrev = -0;
        this._offsetPrev = -0;
        this._weightNext = -0;
        this._offsetNext = -0;
        this.DefaultSettings_ = {
            endingStart: ZeroCurvatureEnding,
            endingEnd: ZeroCurvatureEnding
        };
    }
    intervalChanged_(i110, t0, t1) {
        const pp = this.parameterPositions;
        let iPrev = i110 - 2, iNext = i110 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
        if (tPrev === undefined) switch(this.getSettings_().endingStart){
            case ZeroSlopeEnding:
                // f'(t0) = 0
                iPrev = i110;
                tPrev = 2 * t0 - t1;
                break;
            case WrapAroundEnding:
                // use the other end of the curve
                iPrev = pp.length - 2;
                tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
                break;
            default:
                // f''(t0) = 0 a.k.a. Natural Spline
                iPrev = i110;
                tPrev = t1;
        }
        if (tNext === undefined) switch(this.getSettings_().endingEnd){
            case ZeroSlopeEnding:
                // f'(tN) = 0
                iNext = i110;
                tNext = 2 * t1 - t0;
                break;
            case WrapAroundEnding:
                // use the other end of the curve
                iNext = 1;
                tNext = t1 + pp[1] - pp[0];
                break;
            default:
                // f''(tN) = 0, a.k.a. Natural Spline
                iNext = i110 - 1;
                tNext = t0;
        }
        const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
        this._weightPrev = halfDt / (t0 - tPrev);
        this._weightNext = halfDt / (tNext - t1);
        this._offsetPrev = iPrev * stride;
        this._offsetNext = iNext * stride;
    }
    interpolate_(i111, t01, t19, t110) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i111 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t19 - t01) / (t110 - t01), pp = p * p, ppp = pp * p;
        // evaluate polynomials
        const sP = -wP * ppp + 2 * wP * pp - wP * p;
        const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
        const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
        const sN = wN * ppp - wN * pp;
        // combine data linearly
        for(let i = 0; i !== stride; ++i)result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
        return result;
    }
}
class LinearInterpolant extends Interpolant {
    constructor(parameterPositions2, sampleValues2, sampleSize2, resultBuffer2){
        super(parameterPositions2, sampleValues2, sampleSize2, resultBuffer2);
    }
    interpolate_(i112, t02, t20, t111) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i112 * stride, offset0 = offset1 - stride, weight1 = (t20 - t02) / (t111 - t02), weight0 = 1 - weight1;
        for(let i = 0; i !== stride; ++i)result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
        return result;
    }
}
/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 */ class DiscreteInterpolant extends Interpolant {
    constructor(parameterPositions3, sampleValues3, sampleSize3, resultBuffer3){
        super(parameterPositions3, sampleValues3, sampleSize3, resultBuffer3);
    }
    interpolate_(i113 /*, t0, t, t1 */ ) {
        return this.copySampleValue_(i113 - 1);
    }
}
class KeyframeTrack {
    constructor(name15, times1, values2, interpolation){
        if (name15 === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');
        if (times1 === undefined || times1.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name15);
        this.name = name15;
        this.times = AnimationUtils.convertArray(times1, this.TimeBufferType);
        this.values = AnimationUtils.convertArray(values2, this.ValueBufferType);
        this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    // Serialization (in static context, because of constructor invocation
    // and automatic invocation of .toJSON):
    static toJSON(track) {
        const trackType = track.constructor;
        let json;
        // derived classes can define a static toJSON method
        if (trackType.toJSON !== this.toJSON) json = trackType.toJSON(track);
        else {
            // by default, we assume the data can be serialized as-is
            json = {
                'name': track.name,
                'times': AnimationUtils.convertArray(track.times, Array),
                'values': AnimationUtils.convertArray(track.values, Array)
            };
            const interpolation = track.getInterpolation();
            if (interpolation !== track.DefaultInterpolation) json.interpolation = interpolation;
        }
        json.type = track.ValueTypeName; // mandatory
        return json;
    }
    InterpolantFactoryMethodDiscrete(result4) {
        return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result4);
    }
    InterpolantFactoryMethodLinear(result1) {
        return new LinearInterpolant(this.times, this.values, this.getValueSize(), result1);
    }
    InterpolantFactoryMethodSmooth(result2) {
        return new CubicInterpolant(this.times, this.values, this.getValueSize(), result2);
    }
    setInterpolation(interpolation1) {
        let factoryMethod;
        switch(interpolation1){
            case InterpolateDiscrete:
                factoryMethod = this.InterpolantFactoryMethodDiscrete;
                break;
            case InterpolateLinear:
                factoryMethod = this.InterpolantFactoryMethodLinear;
                break;
            case InterpolateSmooth:
                factoryMethod = this.InterpolantFactoryMethodSmooth;
                break;
        }
        if (factoryMethod === undefined) {
            const message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;
            if (this.createInterpolant === undefined) {
                // fall back to default, unless the default itself is messed up
                if (interpolation1 !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
                else throw new Error(message); // fatal, in this case
            }
            console.warn('THREE.KeyframeTrack:', message);
            return this;
        }
        this.createInterpolant = factoryMethod;
        return this;
    }
    getInterpolation() {
        switch(this.createInterpolant){
            case this.InterpolantFactoryMethodDiscrete:
                return InterpolateDiscrete;
            case this.InterpolantFactoryMethodLinear:
                return InterpolateLinear;
            case this.InterpolantFactoryMethodSmooth:
                return InterpolateSmooth;
        }
    }
    getValueSize() {
        return this.values.length / this.times.length;
    }
    // move all keyframes either forwards or backwards in time
    shift(timeOffset) {
        if (timeOffset !== 0) {
            const times = this.times;
            for(let i = 0, n = times.length; i !== n; ++i)times[i] += timeOffset;
        }
        return this;
    }
    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
    scale(timeScale) {
        if (timeScale !== 1) {
            const times = this.times;
            for(let i = 0, n = times.length; i !== n; ++i)times[i] *= timeScale;
        }
        return this;
    }
    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
    trim(startTime, endTime) {
        const times = this.times, nKeys = times.length;
        let from = 0, to = nKeys - 1;
        while(from !== nKeys && times[from] < startTime)++from;
        while(to !== -1 && times[to] > endTime)--to;
        ++to; // inclusive -> exclusive bound
        if (from !== 0 || to !== nKeys) {
            // empty tracks are forbidden, so keep at least one keyframe
            if (from >= to) {
                to = Math.max(to, 1);
                from = to - 1;
            }
            const stride = this.getValueSize();
            this.times = AnimationUtils.arraySlice(times, from, to);
            this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
        }
        return this;
    }
    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
    validate() {
        let valid = true;
        const valueSize = this.getValueSize();
        if (valueSize - Math.floor(valueSize) !== 0) {
            console.error('THREE.KeyframeTrack: Invalid value size in track.', this);
            valid = false;
        }
        const times = this.times, values = this.values, nKeys = times.length;
        if (nKeys === 0) {
            console.error('THREE.KeyframeTrack: Track is empty.', this);
            valid = false;
        }
        let prevTime = null;
        for(let i = 0; i !== nKeys; i++){
            const currTime = times[i];
            if (typeof currTime === 'number' && isNaN(currTime)) {
                console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);
                valid = false;
                break;
            }
            if (prevTime !== null && prevTime > currTime) {
                console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);
                valid = false;
                break;
            }
            prevTime = currTime;
        }
        if (values !== undefined) {
            if (AnimationUtils.isTypedArray(values)) for(let i = 0, n = values.length; i !== n; ++i){
                const value = values[i];
                if (isNaN(value)) {
                    console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);
                    valid = false;
                    break;
                }
            }
        }
        return valid;
    }
    // removes equivalent sequential keys as common in morph target sequences
    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
    optimize() {
        // times or values may be shared with other tracks, so overwriting is unsafe
        const times = AnimationUtils.arraySlice(this.times), values = AnimationUtils.arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
        let writeIndex = 1;
        for(let i = 1; i < lastIndex; ++i){
            let keep = false;
            const time = times[i];
            const timeNext = times[i + 1];
            // remove adjacent keyframes scheduled at the same time
            if (time !== timeNext && (i !== 1 || time !== times[0])) {
                if (!smoothInterpolation) {
                    // remove unnecessary keyframes same as their neighbors
                    const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
                    for(let j = 0; j !== stride; ++j){
                        const value = values[offset + j];
                        if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                            keep = true;
                            break;
                        }
                    }
                } else keep = true;
            }
            // in-place compaction
            if (keep) {
                if (i !== writeIndex) {
                    times[writeIndex] = times[i];
                    const readOffset = i * stride, writeOffset = writeIndex * stride;
                    for(let j = 0; j !== stride; ++j)values[writeOffset + j] = values[readOffset + j];
                }
                ++writeIndex;
            }
        }
        // flush last keyframe (compaction looks ahead)
        if (lastIndex > 0) {
            times[writeIndex] = times[lastIndex];
            for(let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j)values[writeOffset + j] = values[readOffset + j];
            ++writeIndex;
        }
        if (writeIndex !== times.length) {
            this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
            this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
        } else {
            this.times = times;
            this.values = values;
        }
        return this;
    }
    clone() {
        const times = AnimationUtils.arraySlice(this.times, 0);
        const values = AnimationUtils.arraySlice(this.values, 0);
        const TypedKeyframeTrack = this.constructor;
        const track = new TypedKeyframeTrack(this.name, times, values);
        // Interpolant argument to constructor is not saved, so copy the factory method directly.
        track.createInterpolant = this.createInterpolant;
        return track;
    }
}
KeyframeTrack.prototype.TimeBufferType = Float32Array;
KeyframeTrack.prototype.ValueBufferType = Float32Array;
KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
/**
 * A Track of Boolean keyframe values.
 */ class BooleanKeyframeTrack extends KeyframeTrack {
}
BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';
BooleanKeyframeTrack.prototype.ValueBufferType = Array;
BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of keyframe values that represent color.
 */ class ColorKeyframeTrack extends KeyframeTrack {
}
ColorKeyframeTrack.prototype.ValueTypeName = 'color';
/**
 * A Track of numeric keyframe values.
 */ class NumberKeyframeTrack extends KeyframeTrack {
}
NumberKeyframeTrack.prototype.ValueTypeName = 'number';
/**
 * Spherical linear unit quaternion interpolant.
 */ class QuaternionLinearInterpolant extends Interpolant {
    constructor(parameterPositions4, sampleValues4, sampleSize4, resultBuffer4){
        super(parameterPositions4, sampleValues4, sampleSize4, resultBuffer4);
    }
    interpolate_(i114, t03, t21, t112) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t21 - t03) / (t112 - t03);
        let offset = i114 * stride;
        for(let end = offset + stride; offset !== end; offset += 4)Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
        return result;
    }
}
/**
 * A Track of quaternion keyframe values.
 */ class QuaternionKeyframeTrack extends KeyframeTrack {
    InterpolantFactoryMethodLinear(result3) {
        return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result3);
    }
}
QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';
// ValueBufferType is inherited
QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track that interpolates Strings
 */ class StringKeyframeTrack extends KeyframeTrack {
}
StringKeyframeTrack.prototype.ValueTypeName = 'string';
StringKeyframeTrack.prototype.ValueBufferType = Array;
StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of vectored keyframe values.
 */ class VectorKeyframeTrack extends KeyframeTrack {
}
VectorKeyframeTrack.prototype.ValueTypeName = 'vector';
class AnimationClip {
    constructor(name11, duration = -1, tracks, blendMode = NormalAnimationBlendMode){
        this.name = name11;
        this.tracks = tracks;
        this.duration = duration;
        this.blendMode = blendMode;
        this.uuid = generateUUID();
        // this means it should figure out its duration by scanning the tracks
        if (this.duration < 0) this.resetDuration();
    }
    static parse(json14) {
        const tracks = [], jsonTracks = json14.tracks, frameTime = 1 / (json14.fps || 1);
        for(let i = 0, n = jsonTracks.length; i !== n; ++i)tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
        const clip = new this(json14.name, json14.duration, tracks, json14.blendMode);
        clip.uuid = json14.uuid;
        return clip;
    }
    static toJSON(clip) {
        const tracks = [], clipTracks = clip.tracks;
        const json = {
            'name': clip.name,
            'duration': clip.duration,
            'tracks': tracks,
            'uuid': clip.uuid,
            'blendMode': clip.blendMode
        };
        for(let i = 0, n = clipTracks.length; i !== n; ++i)tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
        return json;
    }
    static CreateFromMorphTargetSequence(name12, morphTargetSequence, fps, noLoop) {
        const numMorphTargets = morphTargetSequence.length;
        const tracks = [];
        for(let i = 0; i < numMorphTargets; i++){
            let times = [];
            let values = [];
            times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
            values.push(0, 1, 0);
            const order = AnimationUtils.getKeyframeOrder(times);
            times = AnimationUtils.sortedArray(times, 1, order);
            values = AnimationUtils.sortedArray(values, 1, order);
            // if there is a key at the first frame, duplicate it as the
            // last frame as well for perfect loop.
            if (!noLoop && times[0] === 0) {
                times.push(numMorphTargets);
                values.push(values[0]);
            }
            tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1 / fps));
        }
        return new this(name12, -1, tracks);
    }
    static findByName(objectOrClipArray, name13) {
        let clipArray = objectOrClipArray;
        if (!Array.isArray(objectOrClipArray)) {
            const o = objectOrClipArray;
            clipArray = o.geometry && o.geometry.animations || o.animations;
        }
        for(let i = 0; i < clipArray.length; i++){
            if (clipArray[i].name === name13) return clipArray[i];
        }
        return null;
    }
    static CreateClipsFromMorphTargetSequences(morphTargets, fps1, noLoop1) {
        const animationToMorphTargets = {
        };
        // tested with https://regex101.com/ on trick sequences
        // such flamingo_flyA_003, flamingo_run1_003, crdeath0059
        const pattern = /^([\w-]*?)([\d]+)$/;
        // sort morph target names into animation groups based
        // patterns like Walk_001, Walk_002, Run_001, Run_002
        for(let i = 0, il = morphTargets.length; i < il; i++){
            const morphTarget = morphTargets[i];
            const parts = morphTarget.name.match(pattern);
            if (parts && parts.length > 1) {
                const name = parts[1];
                let animationMorphTargets = animationToMorphTargets[name];
                if (!animationMorphTargets) animationToMorphTargets[name] = animationMorphTargets = [];
                animationMorphTargets.push(morphTarget);
            }
        }
        const clips = [];
        for(const name in animationToMorphTargets)clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps1, noLoop1));
        return clips;
    }
    // parse the animation.hierarchy format
    static parseAnimation(animation, bones2) {
        if (!animation) {
            console.error('THREE.AnimationClip: No animation in JSONLoader data.');
            return null;
        }
        const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
            // only return track if there are actually keys.
            if (animationKeys.length !== 0) {
                const times = [];
                const values = [];
                AnimationUtils.flattenJSON(animationKeys, times, values, propertyName);
                // empty keys are filtered out, so check again
                if (times.length !== 0) destTracks.push(new trackType(trackName, times, values));
            }
        };
        const tracks = [];
        const clipName = animation.name || 'default';
        const fps = animation.fps || 30;
        const blendMode = animation.blendMode;
        // automatic length determination in AnimationClip.
        let duration = animation.length || -1;
        const hierarchyTracks = animation.hierarchy || [];
        for(let h = 0; h < hierarchyTracks.length; h++){
            const animationKeys = hierarchyTracks[h].keys;
            // skip empty tracks
            if (!animationKeys || animationKeys.length === 0) continue;
            // process morph targets
            if (animationKeys[0].morphTargets) {
                // figure out all morph targets used in this track
                const morphTargetNames = {
                };
                let k;
                for(k = 0; k < animationKeys.length; k++){
                    if (animationKeys[k].morphTargets) for(let m = 0; m < animationKeys[k].morphTargets.length; m++)morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                }
                // create a track for each morph target with all zero
                // morphTargetInfluences except for the keys in which
                // the morphTarget is named.
                for(const morphTargetName in morphTargetNames){
                    const times = [];
                    const values = [];
                    for(let m = 0; m !== animationKeys[k].morphTargets.length; ++m){
                        const animationKey = animationKeys[k];
                        times.push(animationKey.time);
                        values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
                    }
                    tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));
                }
                duration = morphTargetNames.length * (fps || 1);
            } else {
                // ...assume skeletal animation
                const boneName = '.bones[' + bones2[h].name + ']';
                addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);
                addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);
                addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);
            }
        }
        if (tracks.length === 0) return null;
        const clip = new this(clipName, duration, tracks, blendMode);
        return clip;
    }
    resetDuration() {
        const tracks = this.tracks;
        let duration = 0;
        for(let i = 0, n = tracks.length; i !== n; ++i){
            const track = this.tracks[i];
            duration = Math.max(duration, track.times[track.times.length - 1]);
        }
        this.duration = duration;
        return this;
    }
    trim() {
        for(let i = 0; i < this.tracks.length; i++)this.tracks[i].trim(0, this.duration);
        return this;
    }
    validate() {
        let valid = true;
        for(let i = 0; i < this.tracks.length; i++)valid = valid && this.tracks[i].validate();
        return valid;
    }
    optimize() {
        for(let i = 0; i < this.tracks.length; i++)this.tracks[i].optimize();
        return this;
    }
    clone() {
        const tracks = [];
        for(let i = 0; i < this.tracks.length; i++)tracks.push(this.tracks[i].clone());
        return new this.constructor(this.name, this.duration, tracks, this.blendMode);
    }
    toJSON() {
        return this.constructor.toJSON(this);
    }
}
function getTrackTypeForValueTypeName(typeName) {
    switch(typeName.toLowerCase()){
        case 'scalar':
        case 'double':
        case 'float':
        case 'number':
        case 'integer':
            return NumberKeyframeTrack;
        case 'vector':
        case 'vector2':
        case 'vector3':
        case 'vector4':
            return VectorKeyframeTrack;
        case 'color':
            return ColorKeyframeTrack;
        case 'quaternion':
            return QuaternionKeyframeTrack;
        case 'bool':
        case 'boolean':
            return BooleanKeyframeTrack;
        case 'string':
            return StringKeyframeTrack;
    }
    throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);
}
function parseKeyframeTrack(json) {
    if (json.type === undefined) throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');
    const trackType = getTrackTypeForValueTypeName(json.type);
    if (json.times === undefined) {
        const times = [], values = [];
        AnimationUtils.flattenJSON(json.keys, times, values, 'value');
        json.times = times;
        json.values = values;
    }
    // derived classes can define a static parse method
    if (trackType.parse !== undefined) return trackType.parse(json);
    else // by default, we assume a constructor compatible with the base
    return new trackType(json.name, json.times, json.values, json.interpolation);
}
const Cache = {
    enabled: false,
    files: {
    },
    add: function(key, file) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Adding key:', key );
        this.files[key] = file;
    },
    get: function(key) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Checking key:', key );
        return this.files[key];
    },
    remove: function(key) {
        delete this.files[key];
    },
    clear: function() {
        this.files = {
        };
    }
};
class LoadingManager {
    constructor(onLoad15, onProgress, onError13){
        const scope = this;
        let isLoading = false;
        let itemsLoaded = 0;
        let itemsTotal = 0;
        let urlModifier = undefined;
        const handlers = [];
        // Refer to #5689 for the reason why we don't set .onStart
        // in the constructor
        this.onStart = undefined;
        this.onLoad = onLoad15;
        this.onProgress = onProgress;
        this.onError = onError13;
        this.itemStart = function(url) {
            itemsTotal++;
            if (isLoading === false) {
                if (scope.onStart !== undefined) scope.onStart(url, itemsLoaded, itemsTotal);
            }
            isLoading = true;
        };
        this.itemEnd = function(url) {
            itemsLoaded++;
            if (scope.onProgress !== undefined) scope.onProgress(url, itemsLoaded, itemsTotal);
            if (itemsLoaded === itemsTotal) {
                isLoading = false;
                if (scope.onLoad !== undefined) scope.onLoad();
            }
        };
        this.itemError = function(url) {
            if (scope.onError !== undefined) scope.onError(url);
        };
        this.resolveURL = function(url) {
            if (urlModifier) return urlModifier(url);
            return url;
        };
        this.setURLModifier = function(transform) {
            urlModifier = transform;
            return this;
        };
        this.addHandler = function(regex, loader) {
            handlers.push(regex, loader);
            return this;
        };
        this.removeHandler = function(regex) {
            const index = handlers.indexOf(regex);
            if (index !== -1) handlers.splice(index, 2);
            return this;
        };
        this.getHandler = function(file) {
            for(let i = 0, l = handlers.length; i < l; i += 2){
                const regex = handlers[i];
                const loader = handlers[i + 1];
                if (regex.global) regex.lastIndex = 0; // see #17920
                if (regex.test(file)) return loader;
            }
            return null;
        };
    }
}
const DefaultLoadingManager = new LoadingManager();
class Loader {
    constructor(manager13){
        this.manager = manager13 !== undefined ? manager13 : DefaultLoadingManager;
        this.crossOrigin = 'anonymous';
        this.withCredentials = false;
        this.path = '';
        this.resourcePath = '';
        this.requestHeader = {
        };
    }
    load() {
    }
    loadAsync(url13, onProgress1) {
        const scope = this;
        return new Promise(function(resolve, reject) {
            scope.load(url13, resolve, onProgress1, reject);
        });
    }
    parse() {
    }
    setCrossOrigin(crossOrigin) {
        this.crossOrigin = crossOrigin;
        return this;
    }
    setWithCredentials(value32) {
        this.withCredentials = value32;
        return this;
    }
    setPath(path1) {
        this.path = path1;
        return this;
    }
    setResourcePath(resourcePath) {
        this.resourcePath = resourcePath;
        return this;
    }
    setRequestHeader(requestHeader) {
        this.requestHeader = requestHeader;
        return this;
    }
}
const loading = {
};
class FileLoader extends Loader {
    constructor(manager1){
        super(manager1);
    }
    load(url1, onLoad1, onProgress2, onError1) {
        if (url1 === undefined) url1 = '';
        if (this.path !== undefined) url1 = this.path + url1;
        url1 = this.manager.resolveURL(url1);
        const cached = Cache.get(url1);
        if (cached !== undefined) {
            this.manager.itemStart(url1);
            setTimeout(()=>{
                if (onLoad1) onLoad1(cached);
                this.manager.itemEnd(url1);
            }, 0);
            return cached;
        }
        // Check if request is duplicate
        if (loading[url1] !== undefined) {
            loading[url1].push({
                onLoad: onLoad1,
                onProgress: onProgress2,
                onError: onError1
            });
            return;
        }
        // Initialise array for duplicate requests
        loading[url1] = [];
        loading[url1].push({
            onLoad: onLoad1,
            onProgress: onProgress2,
            onError: onError1
        });
        // create request
        const req = new Request(url1, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? 'include' : 'same-origin'
        });
        // start the fetch
        fetch(req).then((response)=>{
            if (response.status === 200 || response.status === 0) {
                // Some browsers return HTTP Status 0 when using non-http protocol
                // e.g. 'file://' or 'data://'. Handle as success.
                if (response.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.');
                if (typeof ReadableStream === 'undefined' || response.body.getReader === undefined) return response;
                const callbacks = loading[url1];
                const reader = response.body.getReader();
                const contentLength = response.headers.get('Content-Length');
                const total = contentLength ? parseInt(contentLength) : 0;
                const lengthComputable = total !== 0;
                let loaded = 0;
                // periodically read data into the new stream tracking while download progress
                const stream = new ReadableStream({
                    start (controller) {
                        readData();
                        function readData() {
                            reader.read().then(({ done , value  })=>{
                                if (done) controller.close();
                                else {
                                    loaded += value.byteLength;
                                    const event = new ProgressEvent('progress', {
                                        lengthComputable,
                                        loaded,
                                        total
                                    });
                                    for(let i = 0, il = callbacks.length; i < il; i++){
                                        const callback = callbacks[i];
                                        if (callback.onProgress) callback.onProgress(event);
                                    }
                                    controller.enqueue(value);
                                    readData();
                                }
                            });
                        }
                    }
                });
                return new Response(stream);
            } else throw Error(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`);
        }).then((response)=>{
            switch(this.responseType){
                case 'arraybuffer':
                    return response.arrayBuffer();
                case 'blob':
                    return response.blob();
                case 'document':
                    return response.text().then((text)=>{
                        const parser = new DOMParser();
                        return parser.parseFromString(text, this.mimeType);
                    });
                case 'json':
                    return response.json();
                default:
                    return response.text();
            }
        }).then((data)=>{
            // Add to cache only on HTTP success, so that we do not cache
            // error response bodies as proper responses to requests.
            Cache.add(url1, data);
            const callbacks = loading[url1];
            delete loading[url1];
            for(let i = 0, il = callbacks.length; i < il; i++){
                const callback = callbacks[i];
                if (callback.onLoad) callback.onLoad(data);
            }
        }).catch((err)=>{
            // Abort errors and other errors are handled the same
            const callbacks = loading[url1];
            if (callbacks === undefined) {
                // When onLoad was called and url was deleted in `loading`
                this.manager.itemError(url1);
                throw err;
            }
            delete loading[url1];
            for(let i = 0, il = callbacks.length; i < il; i++){
                const callback = callbacks[i];
                if (callback.onError) callback.onError(err);
            }
            this.manager.itemError(url1);
        }).finally(()=>{
            this.manager.itemEnd(url1);
        });
        this.manager.itemStart(url1);
    }
    setResponseType(value35) {
        this.responseType = value35;
        return this;
    }
    setMimeType(value33) {
        this.mimeType = value33;
        return this;
    }
}
class AnimationLoader extends Loader {
    constructor(manager2){
        super(manager2);
    }
    load(url2, onLoad2, onProgress3, onError2) {
        const scope = this;
        const loader = new FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url2, function(text) {
            try {
                onLoad2(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError2) onError2(e);
                else console.error(e);
                scope.manager.itemError(url2);
            }
        }, onProgress3, onError2);
    }
    parse(json19) {
        const animations = [];
        for(let i = 0; i < json19.length; i++){
            const clip = AnimationClip.parse(json19[i]);
            animations.push(clip);
        }
        return animations;
    }
}
/**
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ class CompressedTextureLoader extends Loader {
    constructor(manager3){
        super(manager3);
    }
    load(url3, onLoad3, onProgress4, onError3) {
        const scope = this;
        const images = [];
        const texture = new CompressedTexture();
        const loader = new FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setResponseType('arraybuffer');
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        let loaded = 0;
        function loadTexture(i) {
            loader.load(url3[i], function(buffer) {
                const texDatas = scope.parse(buffer, true);
                images[i] = {
                    width: texDatas.width,
                    height: texDatas.height,
                    format: texDatas.format,
                    mipmaps: texDatas.mipmaps
                };
                loaded += 1;
                if (loaded === 6) {
                    if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
                    texture.image = images;
                    texture.format = texDatas.format;
                    texture.needsUpdate = true;
                    if (onLoad3) onLoad3(texture);
                }
            }, onProgress4, onError3);
        }
        if (Array.isArray(url3)) for(let i45 = 0, il = url3.length; i45 < il; ++i45)loadTexture(i45);
        else // compressed cubemap texture stored in a single DDS file
        loader.load(url3, function(buffer) {
            const texDatas = scope.parse(buffer, true);
            if (texDatas.isCubemap) {
                const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
                for(let f = 0; f < faces; f++){
                    images[f] = {
                        mipmaps: []
                    };
                    for(let i = 0; i < texDatas.mipmapCount; i++){
                        images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                        images[f].format = texDatas.format;
                        images[f].width = texDatas.width;
                        images[f].height = texDatas.height;
                    }
                }
                texture.image = images;
            } else {
                texture.image.width = texDatas.width;
                texture.image.height = texDatas.height;
                texture.mipmaps = texDatas.mipmaps;
            }
            if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
            texture.format = texDatas.format;
            texture.needsUpdate = true;
            if (onLoad3) onLoad3(texture);
        }, onProgress4, onError3);
        return texture;
    }
}
class ImageLoader extends Loader {
    constructor(manager4){
        super(manager4);
    }
    load(url4, onLoad4, onProgress5, onError4) {
        if (this.path !== undefined) url4 = this.path + url4;
        url4 = this.manager.resolveURL(url4);
        const scope = this;
        const cached = Cache.get(url4);
        if (cached !== undefined) {
            scope.manager.itemStart(url4);
            setTimeout(function() {
                if (onLoad4) onLoad4(cached);
                scope.manager.itemEnd(url4);
            }, 0);
            return cached;
        }
        const image = createElementNS('img');
        function onImageLoad() {
            removeEventListeners();
            Cache.add(url4, this);
            if (onLoad4) onLoad4(this);
            scope.manager.itemEnd(url4);
        }
        function onImageError(event) {
            removeEventListeners();
            if (onError4) onError4(event);
            scope.manager.itemError(url4);
            scope.manager.itemEnd(url4);
        }
        function removeEventListeners() {
            image.removeEventListener('load', onImageLoad, false);
            image.removeEventListener('error', onImageError, false);
        }
        image.addEventListener('load', onImageLoad, false);
        image.addEventListener('error', onImageError, false);
        if (url4.substr(0, 5) !== 'data:') {
            if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
        }
        scope.manager.itemStart(url4);
        image.src = url4;
        return image;
    }
}
class CubeTextureLoader extends Loader {
    constructor(manager5){
        super(manager5);
    }
    load(urls1, onLoad5, onProgress6, onError5) {
        const texture = new CubeTexture();
        const loader = new ImageLoader(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        let loaded = 0;
        function loadTexture(i) {
            loader.load(urls1[i], function(image) {
                texture.images[i] = image;
                loaded++;
                if (loaded === 6) {
                    texture.needsUpdate = true;
                    if (onLoad5) onLoad5(texture);
                }
            }, undefined, onError5);
        }
        for(let i = 0; i < urls1.length; ++i)loadTexture(i);
        return texture;
    }
}
/**
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ class DataTextureLoader extends Loader {
    constructor(manager6){
        super(manager6);
    }
    load(url5, onLoad6, onProgress7, onError6) {
        const scope = this;
        const texture = new DataTexture();
        const loader = new FileLoader(this.manager);
        loader.setResponseType('arraybuffer');
        loader.setRequestHeader(this.requestHeader);
        loader.setPath(this.path);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url5, function(buffer) {
            const texData = scope.parse(buffer);
            if (!texData) return;
            if (texData.image !== undefined) texture.image = texData.image;
            else if (texData.data !== undefined) {
                texture.image.width = texData.width;
                texture.image.height = texData.height;
                texture.image.data = texData.data;
            }
            texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
            texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
            texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
            texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
            texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
            if (texData.encoding !== undefined) texture.encoding = texData.encoding;
            if (texData.flipY !== undefined) texture.flipY = texData.flipY;
            if (texData.format !== undefined) texture.format = texData.format;
            if (texData.type !== undefined) texture.type = texData.type;
            if (texData.mipmaps !== undefined) {
                texture.mipmaps = texData.mipmaps;
                texture.minFilter = LinearMipmapLinearFilter; // presumably...
            }
            if (texData.mipmapCount === 1) texture.minFilter = LinearFilter;
            if (texData.generateMipmaps !== undefined) texture.generateMipmaps = texData.generateMipmaps;
            texture.needsUpdate = true;
            if (onLoad6) onLoad6(texture, texData);
        }, onProgress7, onError6);
        return texture;
    }
}
class TextureLoader extends Loader {
    constructor(manager7){
        super(manager7);
    }
    load(url6, onLoad7, onProgress8, onError7) {
        const texture = new Texture();
        const loader = new ImageLoader(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        loader.load(url6, function(image) {
            texture.image = image;
            texture.needsUpdate = true;
            if (onLoad7 !== undefined) onLoad7(texture);
        }, onProgress8, onError7);
        return texture;
    }
}
class Light extends Object3D {
    constructor(color14, intensity = 1){
        super();
        this.type = 'Light';
        this.color = new Color(color14);
        this.intensity = intensity;
    }
    dispose() {
    // Empty here in base class; some subclasses override.
    }
    copy(source50) {
        super.copy(source50);
        this.color.copy(source50.color);
        this.intensity = source50.intensity;
        return this;
    }
    toJSON(meta8) {
        const data = super.toJSON(meta8);
        data.object.color = this.color.getHex();
        data.object.intensity = this.intensity;
        if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();
        if (this.distance !== undefined) data.object.distance = this.distance;
        if (this.angle !== undefined) data.object.angle = this.angle;
        if (this.decay !== undefined) data.object.decay = this.decay;
        if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;
        if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
        return data;
    }
}
Light.prototype.isLight = true;
class HemisphereLight extends Light {
    constructor(skyColor, groundColor, intensity1){
        super(skyColor, intensity1);
        this.type = 'HemisphereLight';
        this.position.copy(Object3D.DefaultUp);
        this.updateMatrix();
        this.groundColor = new Color(groundColor);
    }
    copy(source51) {
        Light.prototype.copy.call(this, source51);
        this.groundColor.copy(source51.groundColor);
        return this;
    }
}
HemisphereLight.prototype.isHemisphereLight = true;
const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();
const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();
const _lookTarget$1 = /*@__PURE__*/ new Vector3();
class LightShadow {
    constructor(camera3){
        this.camera = camera3;
        this.bias = 0;
        this.normalBias = 0;
        this.radius = 1;
        this.blurSamples = 8;
        this.mapSize = new Vector2(512, 512);
        this.map = null;
        this.mapPass = null;
        this.matrix = new Matrix4();
        this.autoUpdate = true;
        this.needsUpdate = false;
        this._frustum = new Frustum();
        this._frameExtents = new Vector2(1, 1);
        this._viewportCount = 1;
        this._viewports = [
            new Vector4(0, 0, 1, 1)
        ];
    }
    getViewportCount() {
        return this._viewportCount;
    }
    getFrustum() {
        return this._frustum;
    }
    updateMatrices(light) {
        const shadowCamera = this.camera;
        const shadowMatrix = this.matrix;
        _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
        shadowCamera.position.copy(_lightPositionWorld$1);
        _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
        shadowCamera.lookAt(_lookTarget$1);
        shadowCamera.updateMatrixWorld();
        _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
        shadowMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
        shadowMatrix.multiply(shadowCamera.projectionMatrix);
        shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
    }
    getViewport(viewportIndex) {
        return this._viewports[viewportIndex];
    }
    getFrameExtents() {
        return this._frameExtents;
    }
    dispose() {
        if (this.map) this.map.dispose();
        if (this.mapPass) this.mapPass.dispose();
    }
    copy(source52) {
        this.camera = source52.camera.clone();
        this.bias = source52.bias;
        this.radius = source52.radius;
        this.mapSize.copy(source52.mapSize);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        const object = {
        };
        if (this.bias !== 0) object.bias = this.bias;
        if (this.normalBias !== 0) object.normalBias = this.normalBias;
        if (this.radius !== 1) object.radius = this.radius;
        if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
        object.camera = this.camera.toJSON(false).object;
        delete object.camera.matrix;
        return object;
    }
}
class SpotLightShadow extends LightShadow {
    constructor(){
        super(new PerspectiveCamera(50, 1, 0.5, 500));
        this.focus = 1;
    }
    updateMatrices(light1) {
        const camera = this.camera;
        const fov = RAD2DEG * 2 * light1.angle * this.focus;
        const aspect = this.mapSize.width / this.mapSize.height;
        const far = light1.distance || camera.far;
        if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
            camera.fov = fov;
            camera.aspect = aspect;
            camera.far = far;
            camera.updateProjectionMatrix();
        }
        super.updateMatrices(light1);
    }
    copy(source53) {
        super.copy(source53);
        this.focus = source53.focus;
        return this;
    }
}
SpotLightShadow.prototype.isSpotLightShadow = true;
class SpotLight extends Light {
    constructor(color15, intensity2, distance7 = 0, angle13 = Math.PI / 3, penumbra = 0, decay = 1){
        super(color15, intensity2);
        this.type = 'SpotLight';
        this.position.copy(Object3D.DefaultUp);
        this.updateMatrix();
        this.target = new Object3D();
        this.distance = distance7;
        this.angle = angle13;
        this.penumbra = penumbra;
        this.decay = decay; // for physically correct lights, should be 2.
        this.shadow = new SpotLightShadow();
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in candela)
        // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
        return this.intensity * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in candela) from the desired luminous power (in lumens)
        this.intensity = power / Math.PI;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source54) {
        super.copy(source54);
        this.distance = source54.distance;
        this.angle = source54.angle;
        this.penumbra = source54.penumbra;
        this.decay = source54.decay;
        this.target = source54.target.clone();
        this.shadow = source54.shadow.clone();
        return this;
    }
}
SpotLight.prototype.isSpotLight = true;
const _projScreenMatrix1 = /*@__PURE__*/ new Matrix4();
const _lightPositionWorld = /*@__PURE__*/ new Vector3();
const _lookTarget = /*@__PURE__*/ new Vector3();
class PointLightShadow extends LightShadow {
    constructor(){
        super(new PerspectiveCamera(90, 1, 0.5, 500));
        this._frameExtents = new Vector2(4, 2);
        this._viewportCount = 6;
        this._viewports = [
            // These viewports map a cube-map onto a 2D texture with the
            // following orientation:
            //
            //  xzXZ
            //   y Y
            //
            // X - Positive x direction
            // x - Negative x direction
            // Y - Positive y direction
            // y - Negative y direction
            // Z - Positive z direction
            // z - Negative z direction
            // positive X
            new Vector4(2, 1, 1, 1),
            // negative X
            new Vector4(0, 1, 1, 1),
            // positive Z
            new Vector4(3, 1, 1, 1),
            // negative Z
            new Vector4(1, 1, 1, 1),
            // positive Y
            new Vector4(3, 0, 1, 1),
            // negative Y
            new Vector4(1, 0, 1, 1)
        ];
        this._cubeDirections = [
            new Vector3(1, 0, 0),
            new Vector3(-1, 0, 0),
            new Vector3(0, 0, 1),
            new Vector3(0, 0, -1),
            new Vector3(0, 1, 0),
            new Vector3(0, -1, 0)
        ];
        this._cubeUps = [
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 0, 1),
            new Vector3(0, 0, -1)
        ];
    }
    updateMatrices(light2, viewportIndex1 = 0) {
        const camera = this.camera;
        const shadowMatrix = this.matrix;
        const far = light2.distance || camera.far;
        if (far !== camera.far) {
            camera.far = far;
            camera.updateProjectionMatrix();
        }
        _lightPositionWorld.setFromMatrixPosition(light2.matrixWorld);
        camera.position.copy(_lightPositionWorld);
        _lookTarget.copy(camera.position);
        _lookTarget.add(this._cubeDirections[viewportIndex1]);
        camera.up.copy(this._cubeUps[viewportIndex1]);
        camera.lookAt(_lookTarget);
        camera.updateMatrixWorld();
        shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
        _projScreenMatrix1.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix(_projScreenMatrix1);
    }
}
PointLightShadow.prototype.isPointLightShadow = true;
class PointLight extends Light {
    constructor(color16, intensity3, distance8 = 0, decay1 = 1){
        super(color16, intensity3);
        this.type = 'PointLight';
        this.distance = distance8;
        this.decay = decay1; // for physically correct lights, should be 2.
        this.shadow = new PointLightShadow();
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in candela)
        // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
        return this.intensity * 4 * Math.PI;
    }
    set power(power1) {
        // set the light's intensity (in candela) from the desired luminous power (in lumens)
        this.intensity = power1 / (4 * Math.PI);
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source55) {
        super.copy(source55);
        this.distance = source55.distance;
        this.decay = source55.decay;
        this.shadow = source55.shadow.clone();
        return this;
    }
}
PointLight.prototype.isPointLight = true;
class DirectionalLightShadow extends LightShadow {
    constructor(){
        super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
    }
}
DirectionalLightShadow.prototype.isDirectionalLightShadow = true;
class DirectionalLight extends Light {
    constructor(color17, intensity4){
        super(color17, intensity4);
        this.type = 'DirectionalLight';
        this.position.copy(Object3D.DefaultUp);
        this.updateMatrix();
        this.target = new Object3D();
        this.shadow = new DirectionalLightShadow();
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source56) {
        super.copy(source56);
        this.target = source56.target.clone();
        this.shadow = source56.shadow.clone();
        return this;
    }
}
DirectionalLight.prototype.isDirectionalLight = true;
class AmbientLight extends Light {
    constructor(color18, intensity5){
        super(color18, intensity5);
        this.type = 'AmbientLight';
    }
}
AmbientLight.prototype.isAmbientLight = true;
class RectAreaLight extends Light {
    constructor(color19, intensity6, width15 = 10, height17 = 10){
        super(color19, intensity6);
        this.type = 'RectAreaLight';
        this.width = width15;
        this.height = height17;
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in nits)
        return this.intensity * this.width * this.height * Math.PI;
    }
    set power(power2) {
        // set the light's intensity (in nits) from the desired luminous power (in lumens)
        this.intensity = power2 / (this.width * this.height * Math.PI);
    }
    copy(source57) {
        super.copy(source57);
        this.width = source57.width;
        this.height = source57.height;
        return this;
    }
    toJSON(meta9) {
        const data = super.toJSON(meta9);
        data.object.width = this.width;
        data.object.height = this.height;
        return data;
    }
}
RectAreaLight.prototype.isRectAreaLight = true;
/**
 * Primary reference:
 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
 *
 * Secondary reference:
 *   https://www.ppsloan.org/publications/StupidSH36.pdf
 */ // 3-band SH defined by 9 coefficients
class SphericalHarmonics3 {
    constructor(){
        this.coefficients = [];
        for(let i = 0; i < 9; i++)this.coefficients.push(new Vector3());
    }
    set(coefficients) {
        for(let i = 0; i < 9; i++)this.coefficients[i].copy(coefficients[i]);
        return this;
    }
    zero() {
        for(let i = 0; i < 9; i++)this.coefficients[i].set(0, 0, 0);
        return this;
    }
    // get the radiance in the direction of the normal
    // target is a Vector3
    getAt(normal, target33) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        const coeff = this.coefficients;
        // band 0
        target33.copy(coeff[0]).multiplyScalar(0.282095);
        // band 1
        target33.addScaledVector(coeff[1], 0.488603 * y);
        target33.addScaledVector(coeff[2], 0.488603 * z);
        target33.addScaledVector(coeff[3], 0.488603 * x);
        // band 2
        target33.addScaledVector(coeff[4], 1.092548 * (x * y));
        target33.addScaledVector(coeff[5], 1.092548 * (y * z));
        target33.addScaledVector(coeff[6], 0.315392 * (3 * z * z - 1));
        target33.addScaledVector(coeff[7], 1.092548 * (x * z));
        target33.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
        return target33;
    }
    // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
    // target is a Vector3
    // https://graphics.stanford.edu/papers/envmap/envmap.pdf
    getIrradianceAt(normal5, target34) {
        // normal is assumed to be unit length
        const x = normal5.x, y = normal5.y, z = normal5.z;
        const coeff = this.coefficients;
        // band 0
        target34.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
        // band 1
        target34.addScaledVector(coeff[1], 1.023328 * y); // ( 2 * π / 3 ) * 0.488603
        target34.addScaledVector(coeff[2], 1.023328 * z);
        target34.addScaledVector(coeff[3], 1.023328 * x);
        // band 2
        target34.addScaledVector(coeff[4], 0.858086 * x * y); // ( π / 4 ) * 1.092548
        target34.addScaledVector(coeff[5], 0.858086 * y * z);
        target34.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3
        target34.addScaledVector(coeff[7], 0.858086 * x * z);
        target34.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274
        return target34;
    }
    add(sh) {
        for(let i = 0; i < 9; i++)this.coefficients[i].add(sh.coefficients[i]);
        return this;
    }
    addScaledSH(sh1, s) {
        for(let i = 0; i < 9; i++)this.coefficients[i].addScaledVector(sh1.coefficients[i], s);
        return this;
    }
    scale(s18) {
        for(let i = 0; i < 9; i++)this.coefficients[i].multiplyScalar(s18);
        return this;
    }
    lerp(sh2, alpha) {
        for(let i = 0; i < 9; i++)this.coefficients[i].lerp(sh2.coefficients[i], alpha);
        return this;
    }
    equals(sh3) {
        for(let i = 0; i < 9; i++){
            if (!this.coefficients[i].equals(sh3.coefficients[i])) return false;
        }
        return true;
    }
    copy(sh4) {
        return this.set(sh4.coefficients);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    fromArray(array35, offset48 = 0) {
        const coefficients = this.coefficients;
        for(let i = 0; i < 9; i++)coefficients[i].fromArray(array35, offset48 + i * 3);
        return this;
    }
    toArray(array33 = [], offset26 = 0) {
        const coefficients = this.coefficients;
        for(let i = 0; i < 9; i++)coefficients[i].toArray(array33, offset26 + i * 3);
        return array33;
    }
    // evaluate the basis functions
    // shBasis is an Array[ 9 ]
    static getBasisAt(normal6, shBasis) {
        // normal is assumed to be unit length
        const x = normal6.x, y = normal6.y, z = normal6.z;
        // band 0
        shBasis[0] = 0.282095;
        // band 1
        shBasis[1] = 0.488603 * y;
        shBasis[2] = 0.488603 * z;
        shBasis[3] = 0.488603 * x;
        // band 2
        shBasis[4] = 1.092548 * x * y;
        shBasis[5] = 1.092548 * y * z;
        shBasis[6] = 0.315392 * (3 * z * z - 1);
        shBasis[7] = 1.092548 * x * z;
        shBasis[8] = 0.546274 * (x * x - y * y);
    }
}
SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;
class LightProbe extends Light {
    constructor(sh5 = new SphericalHarmonics3(), intensity7 = 1){
        super(undefined, intensity7);
        this.sh = sh5;
    }
    copy(source58) {
        super.copy(source58);
        this.sh.copy(source58.sh);
        return this;
    }
    fromJSON(json16) {
        this.intensity = json16.intensity; // TODO: Move this bit to Light.fromJSON();
        this.sh.fromArray(json16.sh);
        return this;
    }
    toJSON(meta10) {
        const data = super.toJSON(meta10);
        data.object.sh = this.sh.toArray();
        return data;
    }
}
LightProbe.prototype.isLightProbe = true;
class MaterialLoader extends Loader {
    constructor(manager8){
        super(manager8);
        this.textures = {
        };
    }
    load(url7, onLoad8, onProgress9, onError8) {
        const scope = this;
        const loader = new FileLoader(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url7, function(text) {
            try {
                onLoad8(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError8) onError8(e);
                else console.error(e);
                scope.manager.itemError(url7);
            }
        }, onProgress9, onError8);
    }
    parse(json17) {
        const textures = this.textures;
        function getTexture(name) {
            if (textures[name] === undefined) console.warn('THREE.MaterialLoader: Undefined texture', name);
            return textures[name];
        }
        const material = new Materials[json17.type]();
        if (json17.uuid !== undefined) material.uuid = json17.uuid;
        if (json17.name !== undefined) material.name = json17.name;
        if (json17.color !== undefined && material.color !== undefined) material.color.setHex(json17.color);
        if (json17.roughness !== undefined) material.roughness = json17.roughness;
        if (json17.metalness !== undefined) material.metalness = json17.metalness;
        if (json17.sheen !== undefined) material.sheen = json17.sheen;
        if (json17.sheenColor !== undefined) material.sheenColor = new Color().setHex(json17.sheenColor);
        if (json17.sheenRoughness !== undefined) material.sheenRoughness = json17.sheenRoughness;
        if (json17.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json17.emissive);
        if (json17.specular !== undefined && material.specular !== undefined) material.specular.setHex(json17.specular);
        if (json17.specularIntensity !== undefined) material.specularIntensity = json17.specularIntensity;
        if (json17.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json17.specularColor);
        if (json17.shininess !== undefined) material.shininess = json17.shininess;
        if (json17.clearcoat !== undefined) material.clearcoat = json17.clearcoat;
        if (json17.clearcoatRoughness !== undefined) material.clearcoatRoughness = json17.clearcoatRoughness;
        if (json17.transmission !== undefined) material.transmission = json17.transmission;
        if (json17.thickness !== undefined) material.thickness = json17.thickness;
        if (json17.attenuationDistance !== undefined) material.attenuationDistance = json17.attenuationDistance;
        if (json17.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json17.attenuationColor);
        if (json17.fog !== undefined) material.fog = json17.fog;
        if (json17.flatShading !== undefined) material.flatShading = json17.flatShading;
        if (json17.blending !== undefined) material.blending = json17.blending;
        if (json17.combine !== undefined) material.combine = json17.combine;
        if (json17.side !== undefined) material.side = json17.side;
        if (json17.shadowSide !== undefined) material.shadowSide = json17.shadowSide;
        if (json17.opacity !== undefined) material.opacity = json17.opacity;
        if (json17.format !== undefined) material.format = json17.format;
        if (json17.transparent !== undefined) material.transparent = json17.transparent;
        if (json17.alphaTest !== undefined) material.alphaTest = json17.alphaTest;
        if (json17.depthTest !== undefined) material.depthTest = json17.depthTest;
        if (json17.depthWrite !== undefined) material.depthWrite = json17.depthWrite;
        if (json17.colorWrite !== undefined) material.colorWrite = json17.colorWrite;
        if (json17.stencilWrite !== undefined) material.stencilWrite = json17.stencilWrite;
        if (json17.stencilWriteMask !== undefined) material.stencilWriteMask = json17.stencilWriteMask;
        if (json17.stencilFunc !== undefined) material.stencilFunc = json17.stencilFunc;
        if (json17.stencilRef !== undefined) material.stencilRef = json17.stencilRef;
        if (json17.stencilFuncMask !== undefined) material.stencilFuncMask = json17.stencilFuncMask;
        if (json17.stencilFail !== undefined) material.stencilFail = json17.stencilFail;
        if (json17.stencilZFail !== undefined) material.stencilZFail = json17.stencilZFail;
        if (json17.stencilZPass !== undefined) material.stencilZPass = json17.stencilZPass;
        if (json17.wireframe !== undefined) material.wireframe = json17.wireframe;
        if (json17.wireframeLinewidth !== undefined) material.wireframeLinewidth = json17.wireframeLinewidth;
        if (json17.wireframeLinecap !== undefined) material.wireframeLinecap = json17.wireframeLinecap;
        if (json17.wireframeLinejoin !== undefined) material.wireframeLinejoin = json17.wireframeLinejoin;
        if (json17.rotation !== undefined) material.rotation = json17.rotation;
        if (json17.linewidth !== 1) material.linewidth = json17.linewidth;
        if (json17.dashSize !== undefined) material.dashSize = json17.dashSize;
        if (json17.gapSize !== undefined) material.gapSize = json17.gapSize;
        if (json17.scale !== undefined) material.scale = json17.scale;
        if (json17.polygonOffset !== undefined) material.polygonOffset = json17.polygonOffset;
        if (json17.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json17.polygonOffsetFactor;
        if (json17.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json17.polygonOffsetUnits;
        if (json17.dithering !== undefined) material.dithering = json17.dithering;
        if (json17.alphaToCoverage !== undefined) material.alphaToCoverage = json17.alphaToCoverage;
        if (json17.premultipliedAlpha !== undefined) material.premultipliedAlpha = json17.premultipliedAlpha;
        if (json17.visible !== undefined) material.visible = json17.visible;
        if (json17.toneMapped !== undefined) material.toneMapped = json17.toneMapped;
        if (json17.userData !== undefined) material.userData = json17.userData;
        if (json17.vertexColors !== undefined) {
            if (typeof json17.vertexColors === 'number') material.vertexColors = json17.vertexColors > 0 ? true : false;
            else material.vertexColors = json17.vertexColors;
        }
        // Shader Material
        if (json17.uniforms !== undefined) for(const name14 in json17.uniforms){
            const uniform = json17.uniforms[name14];
            material.uniforms[name14] = {
            };
            switch(uniform.type){
                case 't':
                    material.uniforms[name14].value = getTexture(uniform.value);
                    break;
                case 'c':
                    material.uniforms[name14].value = new Color().setHex(uniform.value);
                    break;
                case 'v2':
                    material.uniforms[name14].value = new Vector2().fromArray(uniform.value);
                    break;
                case 'v3':
                    material.uniforms[name14].value = new Vector3().fromArray(uniform.value);
                    break;
                case 'v4':
                    material.uniforms[name14].value = new Vector4().fromArray(uniform.value);
                    break;
                case 'm3':
                    material.uniforms[name14].value = new Matrix3().fromArray(uniform.value);
                    break;
                case 'm4':
                    material.uniforms[name14].value = new Matrix4().fromArray(uniform.value);
                    break;
                default:
                    material.uniforms[name14].value = uniform.value;
            }
        }
        if (json17.defines !== undefined) material.defines = json17.defines;
        if (json17.vertexShader !== undefined) material.vertexShader = json17.vertexShader;
        if (json17.fragmentShader !== undefined) material.fragmentShader = json17.fragmentShader;
        if (json17.extensions !== undefined) for(const key in json17.extensions)material.extensions[key] = json17.extensions[key];
        // Deprecated
        if (json17.shading !== undefined) material.flatShading = json17.shading === 1; // THREE.FlatShading
        // for PointsMaterial
        if (json17.size !== undefined) material.size = json17.size;
        if (json17.sizeAttenuation !== undefined) material.sizeAttenuation = json17.sizeAttenuation;
        // maps
        if (json17.map !== undefined) material.map = getTexture(json17.map);
        if (json17.matcap !== undefined) material.matcap = getTexture(json17.matcap);
        if (json17.alphaMap !== undefined) material.alphaMap = getTexture(json17.alphaMap);
        if (json17.bumpMap !== undefined) material.bumpMap = getTexture(json17.bumpMap);
        if (json17.bumpScale !== undefined) material.bumpScale = json17.bumpScale;
        if (json17.normalMap !== undefined) material.normalMap = getTexture(json17.normalMap);
        if (json17.normalMapType !== undefined) material.normalMapType = json17.normalMapType;
        if (json17.normalScale !== undefined) {
            let normalScale = json17.normalScale;
            if (Array.isArray(normalScale) === false) // Blender exporter used to export a scalar. See #7459
            normalScale = [
                normalScale,
                normalScale
            ];
            material.normalScale = new Vector2().fromArray(normalScale);
        }
        if (json17.displacementMap !== undefined) material.displacementMap = getTexture(json17.displacementMap);
        if (json17.displacementScale !== undefined) material.displacementScale = json17.displacementScale;
        if (json17.displacementBias !== undefined) material.displacementBias = json17.displacementBias;
        if (json17.roughnessMap !== undefined) material.roughnessMap = getTexture(json17.roughnessMap);
        if (json17.metalnessMap !== undefined) material.metalnessMap = getTexture(json17.metalnessMap);
        if (json17.emissiveMap !== undefined) material.emissiveMap = getTexture(json17.emissiveMap);
        if (json17.emissiveIntensity !== undefined) material.emissiveIntensity = json17.emissiveIntensity;
        if (json17.specularMap !== undefined) material.specularMap = getTexture(json17.specularMap);
        if (json17.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json17.specularIntensityMap);
        if (json17.specularColorMap !== undefined) material.specularColorMap = getTexture(json17.specularColorMap);
        if (json17.envMap !== undefined) material.envMap = getTexture(json17.envMap);
        if (json17.envMapIntensity !== undefined) material.envMapIntensity = json17.envMapIntensity;
        if (json17.reflectivity !== undefined) material.reflectivity = json17.reflectivity;
        if (json17.refractionRatio !== undefined) material.refractionRatio = json17.refractionRatio;
        if (json17.lightMap !== undefined) material.lightMap = getTexture(json17.lightMap);
        if (json17.lightMapIntensity !== undefined) material.lightMapIntensity = json17.lightMapIntensity;
        if (json17.aoMap !== undefined) material.aoMap = getTexture(json17.aoMap);
        if (json17.aoMapIntensity !== undefined) material.aoMapIntensity = json17.aoMapIntensity;
        if (json17.gradientMap !== undefined) material.gradientMap = getTexture(json17.gradientMap);
        if (json17.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json17.clearcoatMap);
        if (json17.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json17.clearcoatRoughnessMap);
        if (json17.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json17.clearcoatNormalMap);
        if (json17.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json17.clearcoatNormalScale);
        if (json17.transmissionMap !== undefined) material.transmissionMap = getTexture(json17.transmissionMap);
        if (json17.thicknessMap !== undefined) material.thicknessMap = getTexture(json17.thicknessMap);
        if (json17.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json17.sheenColorMap);
        if (json17.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json17.sheenRoughnessMap);
        return material;
    }
    setTextures(value34) {
        this.textures = value34;
        return this;
    }
}
class LoaderUtils {
    static decodeText(array34) {
        if (typeof TextDecoder !== 'undefined') return new TextDecoder().decode(array34);
        // Avoid the String.fromCharCode.apply(null, array) shortcut, which
        // throws a "maximum call stack size exceeded" error for large arrays.
        let s = '';
        for(let i = 0, il = array34.length; i < il; i++)// Implicitly assumes little-endian.
        s += String.fromCharCode(array34[i]);
        try {
            // merges multi-byte utf-8 characters.
            return decodeURIComponent(escape(s));
        } catch (e) {
            return s;
        }
    }
    static extractUrlBase(url8) {
        const index = url8.lastIndexOf('/');
        if (index === -1) return './';
        return url8.substr(0, index + 1);
    }
    static resolveURL(url9, path2) {
        // Invalid URL
        if (typeof url9 !== 'string' || url9 === '') return '';
        // Host Relative URL
        if (/^https?:\/\//i.test(path2) && /^\//.test(url9)) path2 = path2.replace(/(^https?:\/\/[^\/]+).*/i, '$1');
        // Absolute URL http://,https://,//
        if (/^(https?:)?\/\//i.test(url9)) return url9;
        // Data URI
        if (/^data:.*,.*$/i.test(url9)) return url9;
        // Blob URL
        if (/^blob:.*$/i.test(url9)) return url9;
        // Relative URL
        return path2 + url9;
    }
}
class InstancedBufferGeometry extends BufferGeometry {
    constructor(){
        super();
        this.type = 'InstancedBufferGeometry';
        this.instanceCount = Infinity;
    }
    copy(source59) {
        super.copy(source59);
        this.instanceCount = source59.instanceCount;
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        const data = super.toJSON(this);
        data.instanceCount = this.instanceCount;
        data.isInstancedBufferGeometry = true;
        return data;
    }
}
InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;
class BufferGeometryLoader extends Loader {
    constructor(manager9){
        super(manager9);
    }
    load(url10, onLoad9, onProgress10, onError9) {
        const scope = this;
        const loader = new FileLoader(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url10, function(text) {
            try {
                onLoad9(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError9) onError9(e);
                else console.error(e);
                scope.manager.itemError(url10);
            }
        }, onProgress10, onError9);
    }
    parse(json18) {
        const interleavedBufferMap = {
        };
        const arrayBufferMap = {
        };
        function getInterleavedBuffer(json, uuid) {
            if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
            const interleavedBuffers = json.interleavedBuffers;
            const interleavedBuffer = interleavedBuffers[uuid];
            const buffer = getArrayBuffer(json, interleavedBuffer.buffer);
            const array = getTypedArray(interleavedBuffer.type, buffer);
            const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
            ib.uuid = interleavedBuffer.uuid;
            interleavedBufferMap[uuid] = ib;
            return ib;
        }
        function getArrayBuffer(json, uuid) {
            if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
            const arrayBuffers = json.arrayBuffers;
            const arrayBuffer = arrayBuffers[uuid];
            const ab = new Uint32Array(arrayBuffer).buffer;
            arrayBufferMap[uuid] = ab;
            return ab;
        }
        const geometry = json18.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
        const index = json18.data.index;
        if (index !== undefined) {
            const typedArray = getTypedArray(index.type, index.array);
            geometry.setIndex(new BufferAttribute(typedArray, 1));
        }
        const attributes = json18.data.attributes;
        for(const key in attributes){
            const attribute = attributes[key];
            let bufferAttribute;
            if (attribute.isInterleavedBufferAttribute) {
                const interleavedBuffer = getInterleavedBuffer(json18.data, attribute.data);
                bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
            } else {
                const typedArray = getTypedArray(attribute.type, attribute.array);
                const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
                bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
            }
            if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
            if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);
            if (attribute.updateRange !== undefined) {
                bufferAttribute.updateRange.offset = attribute.updateRange.offset;
                bufferAttribute.updateRange.count = attribute.updateRange.count;
            }
            geometry.setAttribute(key, bufferAttribute);
        }
        const morphAttributes = json18.data.morphAttributes;
        if (morphAttributes) for(const key2 in morphAttributes){
            const attributeArray = morphAttributes[key2];
            const array = [];
            for(let i = 0, il = attributeArray.length; i < il; i++){
                const attribute = attributeArray[i];
                let bufferAttribute;
                if (attribute.isInterleavedBufferAttribute) {
                    const interleavedBuffer = getInterleavedBuffer(json18.data, attribute.data);
                    bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
                } else {
                    const typedArray = getTypedArray(attribute.type, attribute.array);
                    bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
                }
                if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
                array.push(bufferAttribute);
            }
            geometry.morphAttributes[key2] = array;
        }
        const morphTargetsRelative = json18.data.morphTargetsRelative;
        if (morphTargetsRelative) geometry.morphTargetsRelative = true;
        const groups = json18.data.groups || json18.data.drawcalls || json18.data.offsets;
        if (groups !== undefined) for(let i = 0, n = groups.length; i !== n; ++i){
            const group = groups[i];
            geometry.addGroup(group.start, group.count, group.materialIndex);
        }
        const boundingSphere = json18.data.boundingSphere;
        if (boundingSphere !== undefined) {
            const center = new Vector3();
            if (boundingSphere.center !== undefined) center.fromArray(boundingSphere.center);
            geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
        }
        if (json18.name) geometry.name = json18.name;
        if (json18.userData) geometry.userData = json18.userData;
        return geometry;
    }
}
class ObjectLoader extends Loader {
    constructor(manager10){
        super(manager10);
    }
    load(url11, onLoad10, onProgress11, onError10) {
        const scope = this;
        const path = this.path === '' ? LoaderUtils.extractUrlBase(url11) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url11, function(text) {
            let json = null;
            try {
                json = JSON.parse(text);
            } catch (error) {
                if (onError10 !== undefined) onError10(error);
                console.error('THREE:ObjectLoader: Can\'t parse ' + url11 + '.', error.message);
                return;
            }
            const metadata = json.metadata;
            if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
                console.error('THREE.ObjectLoader: Can\'t load ' + url11);
                return;
            }
            scope.parse(json, onLoad10);
        }, onProgress11, onError10);
    }
    async loadAsync(url12, onProgress12) {
        const scope = this;
        const path = this.path === '' ? LoaderUtils.extractUrlBase(url12) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new FileLoader(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        const text = await loader.loadAsync(url12, onProgress12);
        const json = JSON.parse(text);
        const metadata = json.metadata;
        if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') throw new Error('THREE.ObjectLoader: Can\'t load ' + url12);
        return await scope.parseAsync(json);
    }
    parse(json, onLoad11) {
        const animations = this.parseAnimations(json.animations);
        const shapes = this.parseShapes(json.shapes);
        const geometries = this.parseGeometries(json.geometries, shapes);
        const images = this.parseImages(json.images, function() {
            if (onLoad11 !== undefined) onLoad11(object);
        });
        const textures = this.parseTextures(json.textures, images);
        const materials = this.parseMaterials(json.materials, textures);
        const object = this.parseObject(json.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json.skeletons, object);
        this.bindSkeletons(object, skeletons);
        //
        if (onLoad11 !== undefined) {
            let hasImages = false;
            for(const uuid in images)if (images[uuid] instanceof HTMLImageElement) {
                hasImages = true;
                break;
            }
            if (hasImages === false) onLoad11(object);
        }
        return object;
    }
    async parseAsync(json20) {
        const animations = this.parseAnimations(json20.animations);
        const shapes = this.parseShapes(json20.shapes);
        const geometries = this.parseGeometries(json20.geometries, shapes);
        const images = await this.parseImagesAsync(json20.images);
        const textures = this.parseTextures(json20.textures, images);
        const materials = this.parseMaterials(json20.materials, textures);
        const object = this.parseObject(json20.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json20.skeletons, object);
        this.bindSkeletons(object, skeletons);
        return object;
    }
    parseShapes(json21) {
        const shapes = {
        };
        if (json21 !== undefined) for(let i = 0, l = json21.length; i < l; i++){
            const shape = new Shape().fromJSON(json21[i]);
            shapes[shape.uuid] = shape;
        }
        return shapes;
    }
    parseSkeletons(json22, object10) {
        const skeletons = {
        };
        const bones = {
        };
        // generate bone lookup table
        object10.traverse(function(child) {
            if (child.isBone) bones[child.uuid] = child;
        });
        // create skeletons
        if (json22 !== undefined) for(let i = 0, l = json22.length; i < l; i++){
            const skeleton = new Skeleton().fromJSON(json22[i], bones);
            skeletons[skeleton.uuid] = skeleton;
        }
        return skeletons;
    }
    parseGeometries(json23, shapes6) {
        const geometries = {
        };
        if (json23 !== undefined) {
            const bufferGeometryLoader = new BufferGeometryLoader();
            for(let i = 0, l = json23.length; i < l; i++){
                let geometry;
                const data = json23[i];
                switch(data.type){
                    case 'BufferGeometry':
                    case 'InstancedBufferGeometry':
                        geometry = bufferGeometryLoader.parse(data);
                        break;
                    case 'Geometry':
                        console.error('THREE.ObjectLoader: The legacy Geometry type is no longer supported.');
                        break;
                    default:
                        if (data.type in Geometries) geometry = Geometries[data.type].fromJSON(data, shapes6);
                        else console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);
                }
                geometry.uuid = data.uuid;
                if (data.name !== undefined) geometry.name = data.name;
                if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;
                geometries[data.uuid] = geometry;
            }
        }
        return geometries;
    }
    parseMaterials(json24, textures) {
        const cache = {
        }; // MultiMaterial
        const materials = {
        };
        if (json24 !== undefined) {
            const loader = new MaterialLoader();
            loader.setTextures(textures);
            for(let i = 0, l = json24.length; i < l; i++){
                const data = json24[i];
                if (data.type === 'MultiMaterial') {
                    // Deprecated
                    const array = [];
                    for(let j = 0; j < data.materials.length; j++){
                        const material = data.materials[j];
                        if (cache[material.uuid] === undefined) cache[material.uuid] = loader.parse(material);
                        array.push(cache[material.uuid]);
                    }
                    materials[data.uuid] = array;
                } else {
                    if (cache[data.uuid] === undefined) cache[data.uuid] = loader.parse(data);
                    materials[data.uuid] = cache[data.uuid];
                }
            }
        }
        return materials;
    }
    parseAnimations(json25) {
        const animations = {
        };
        if (json25 !== undefined) for(let i = 0; i < json25.length; i++){
            const data = json25[i];
            const clip = AnimationClip.parse(data);
            animations[clip.uuid] = clip;
        }
        return animations;
    }
    parseImages(json26, onLoad12) {
        const scope = this;
        const images = {
        };
        let loader;
        function loadImage(url) {
            scope.manager.itemStart(url);
            return loader.load(url, function() {
                scope.manager.itemEnd(url);
            }, undefined, function() {
                scope.manager.itemError(url);
                scope.manager.itemEnd(url);
            });
        }
        function deserializeImage(image) {
            if (typeof image === 'string') {
                const url = image;
                const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                return loadImage(path);
            } else {
                if (image.data) return {
                    data: getTypedArray(image.type, image.data),
                    width: image.width,
                    height: image.height
                };
                else return null;
            }
        }
        if (json26 !== undefined && json26.length > 0) {
            const manager = new LoadingManager(onLoad12);
            loader = new ImageLoader(manager);
            loader.setCrossOrigin(this.crossOrigin);
            for(let i = 0, il = json26.length; i < il; i++){
                const image = json26[i];
                const url = image.url;
                if (Array.isArray(url)) {
                    // load array of images e.g CubeTexture
                    images[image.uuid] = [];
                    for(let j = 0, jl = url.length; j < jl; j++){
                        const currentUrl = url[j];
                        const deserializedImage = deserializeImage(currentUrl);
                        if (deserializedImage !== null) {
                            if (deserializedImage instanceof HTMLImageElement) images[image.uuid].push(deserializedImage);
                            else // special case: handle array of data textures for cube textures
                            images[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                        }
                    }
                } else {
                    // load single image
                    const deserializedImage = deserializeImage(image.url);
                    if (deserializedImage !== null) images[image.uuid] = deserializedImage;
                }
            }
        }
        return images;
    }
    async parseImagesAsync(json27) {
        const scope = this;
        const images = {
        };
        let loader;
        async function deserializeImage(image) {
            if (typeof image === 'string') {
                const url = image;
                const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                return await loader.loadAsync(path);
            } else {
                if (image.data) return {
                    data: getTypedArray(image.type, image.data),
                    width: image.width,
                    height: image.height
                };
                else return null;
            }
        }
        if (json27 !== undefined && json27.length > 0) {
            loader = new ImageLoader(this.manager);
            loader.setCrossOrigin(this.crossOrigin);
            for(let i = 0, il = json27.length; i < il; i++){
                const image = json27[i];
                const url = image.url;
                if (Array.isArray(url)) {
                    // load array of images e.g CubeTexture
                    images[image.uuid] = [];
                    for(let j = 0, jl = url.length; j < jl; j++){
                        const currentUrl = url[j];
                        const deserializedImage = await deserializeImage(currentUrl);
                        if (deserializedImage !== null) {
                            if (deserializedImage instanceof HTMLImageElement) images[image.uuid].push(deserializedImage);
                            else // special case: handle array of data textures for cube textures
                            images[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                        }
                    }
                } else {
                    // load single image
                    const deserializedImage = await deserializeImage(image.url);
                    if (deserializedImage !== null) images[image.uuid] = deserializedImage;
                }
            }
        }
        return images;
    }
    parseTextures(json28, images1) {
        function parseConstant(value, type) {
            if (typeof value === 'number') return value;
            console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);
            return type[value];
        }
        const textures = {
        };
        if (json28 !== undefined) for(let i = 0, l = json28.length; i < l; i++){
            const data = json28[i];
            if (data.image === undefined) console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
            if (images1[data.image] === undefined) console.warn('THREE.ObjectLoader: Undefined image', data.image);
            let texture;
            const image = images1[data.image];
            if (Array.isArray(image)) {
                texture = new CubeTexture(image);
                if (image.length === 6) texture.needsUpdate = true;
            } else {
                if (image && image.data) texture = new DataTexture(image.data, image.width, image.height);
                else texture = new Texture(image);
                if (image) texture.needsUpdate = true; // textures can have undefined image data
            }
            texture.uuid = data.uuid;
            if (data.name !== undefined) texture.name = data.name;
            if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
            if (data.offset !== undefined) texture.offset.fromArray(data.offset);
            if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
            if (data.center !== undefined) texture.center.fromArray(data.center);
            if (data.rotation !== undefined) texture.rotation = data.rotation;
            if (data.wrap !== undefined) {
                texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
                texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
            }
            if (data.format !== undefined) texture.format = data.format;
            if (data.type !== undefined) texture.type = data.type;
            if (data.encoding !== undefined) texture.encoding = data.encoding;
            if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
            if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
            if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;
            if (data.flipY !== undefined) texture.flipY = data.flipY;
            if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;
            if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;
            if (data.userData !== undefined) texture.userData = data.userData;
            textures[data.uuid] = texture;
        }
        return textures;
    }
    parseObject(data, geometries, materials1, textures2, animations) {
        let object;
        function getGeometry(name) {
            if (geometries[name] === undefined) console.warn('THREE.ObjectLoader: Undefined geometry', name);
            return geometries[name];
        }
        function getMaterial(name) {
            if (name === undefined) return undefined;
            if (Array.isArray(name)) {
                const array = [];
                for(let i = 0, l = name.length; i < l; i++){
                    const uuid = name[i];
                    if (materials1[uuid] === undefined) console.warn('THREE.ObjectLoader: Undefined material', uuid);
                    array.push(materials1[uuid]);
                }
                return array;
            }
            if (materials1[name] === undefined) console.warn('THREE.ObjectLoader: Undefined material', name);
            return materials1[name];
        }
        function getTexture(uuid) {
            if (textures2[uuid] === undefined) console.warn('THREE.ObjectLoader: Undefined texture', uuid);
            return textures2[uuid];
        }
        let geometry, material;
        switch(data.type){
            case 'Scene':
                object = new Scene();
                if (data.background !== undefined) {
                    if (Number.isInteger(data.background)) object.background = new Color(data.background);
                    else object.background = getTexture(data.background);
                }
                if (data.environment !== undefined) object.environment = getTexture(data.environment);
                if (data.fog !== undefined) {
                    if (data.fog.type === 'Fog') object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
                    else if (data.fog.type === 'FogExp2') object.fog = new FogExp2(data.fog.color, data.fog.density);
                }
                break;
            case 'PerspectiveCamera':
                object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
                if (data.focus !== undefined) object.focus = data.focus;
                if (data.zoom !== undefined) object.zoom = data.zoom;
                if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
                if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
                if (data.view !== undefined) object.view = Object.assign({
                }, data.view);
                break;
            case 'OrthographicCamera':
                object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
                if (data.zoom !== undefined) object.zoom = data.zoom;
                if (data.view !== undefined) object.view = Object.assign({
                }, data.view);
                break;
            case 'AmbientLight':
                object = new AmbientLight(data.color, data.intensity);
                break;
            case 'DirectionalLight':
                object = new DirectionalLight(data.color, data.intensity);
                break;
            case 'PointLight':
                object = new PointLight(data.color, data.intensity, data.distance, data.decay);
                break;
            case 'RectAreaLight':
                object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
                break;
            case 'SpotLight':
                object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
                break;
            case 'HemisphereLight':
                object = new HemisphereLight(data.color, data.groundColor, data.intensity);
                break;
            case 'LightProbe':
                object = new LightProbe().fromJSON(data);
                break;
            case 'SkinnedMesh':
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                object = new SkinnedMesh(geometry, material);
                if (data.bindMode !== undefined) object.bindMode = data.bindMode;
                if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
                if (data.skeleton !== undefined) object.skeleton = data.skeleton;
                break;
            case 'Mesh':
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                object = new Mesh(geometry, material);
                break;
            case 'InstancedMesh':
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                const count = data.count;
                const instanceMatrix = data.instanceMatrix;
                const instanceColor = data.instanceColor;
                object = new InstancedMesh(geometry, material, count);
                object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);
                if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);
                break;
            case 'LOD':
                object = new LOD();
                break;
            case 'Line':
                object = new Line(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case 'LineLoop':
                object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case 'LineSegments':
                object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case 'PointCloud':
            case 'Points':
                object = new Points(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case 'Sprite':
                object = new Sprite(getMaterial(data.material));
                break;
            case 'Group':
                object = new Group();
                break;
            case 'Bone':
                object = new Bone();
                break;
            default:
                object = new Object3D();
        }
        object.uuid = data.uuid;
        if (data.name !== undefined) object.name = data.name;
        if (data.matrix !== undefined) {
            object.matrix.fromArray(data.matrix);
            if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
            if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);
        } else {
            if (data.position !== undefined) object.position.fromArray(data.position);
            if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
            if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
            if (data.scale !== undefined) object.scale.fromArray(data.scale);
        }
        if (data.castShadow !== undefined) object.castShadow = data.castShadow;
        if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;
        if (data.shadow) {
            if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
            if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
            if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
            if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
            if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
        }
        if (data.visible !== undefined) object.visible = data.visible;
        if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
        if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
        if (data.userData !== undefined) object.userData = data.userData;
        if (data.layers !== undefined) object.layers.mask = data.layers;
        if (data.children !== undefined) {
            const children = data.children;
            for(let i = 0; i < children.length; i++)object.add(this.parseObject(children[i], geometries, materials1, textures2, animations));
        }
        if (data.animations !== undefined) {
            const objectAnimations = data.animations;
            for(let i = 0; i < objectAnimations.length; i++){
                const uuid = objectAnimations[i];
                object.animations.push(animations[uuid]);
            }
        }
        if (data.type === 'LOD') {
            if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
            const levels = data.levels;
            for(let l = 0; l < levels.length; l++){
                const level = levels[l];
                const child = object.getObjectByProperty('uuid', level.object);
                if (child !== undefined) object.addLevel(child, level.distance);
            }
        }
        return object;
    }
    bindSkeletons(object8, skeletons) {
        if (Object.keys(skeletons).length === 0) return;
        object8.traverse(function(child) {
            if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
                const skeleton = skeletons[child.skeleton];
                if (skeleton === undefined) console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);
                else child.bind(skeleton, child.bindMatrix);
            }
        });
    }
    /* DEPRECATED */ setTexturePath(value36) {
        console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');
        return this.setResourcePath(value36);
    }
}
const TEXTURE_MAPPING = {
    UVMapping: UVMapping,
    CubeReflectionMapping: CubeReflectionMapping,
    CubeRefractionMapping: CubeRefractionMapping,
    EquirectangularReflectionMapping: EquirectangularReflectionMapping,
    EquirectangularRefractionMapping: EquirectangularRefractionMapping,
    CubeUVReflectionMapping: CubeUVReflectionMapping,
    CubeUVRefractionMapping: CubeUVRefractionMapping
};
const TEXTURE_WRAPPING = {
    RepeatWrapping: RepeatWrapping,
    ClampToEdgeWrapping: ClampToEdgeWrapping,
    MirroredRepeatWrapping: MirroredRepeatWrapping
};
const TEXTURE_FILTER = {
    NearestFilter: NearestFilter,
    NearestMipmapNearestFilter: NearestMipmapNearestFilter,
    NearestMipmapLinearFilter: NearestMipmapLinearFilter,
    LinearFilter: LinearFilter,
    LinearMipmapNearestFilter: LinearMipmapNearestFilter,
    LinearMipmapLinearFilter: LinearMipmapLinearFilter
};
class ImageBitmapLoader extends Loader {
    constructor(manager11){
        super(manager11);
        if (typeof createImageBitmap === 'undefined') console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');
        if (typeof fetch === 'undefined') console.warn('THREE.ImageBitmapLoader: fetch() not supported.');
        this.options = {
            premultiplyAlpha: 'none'
        };
    }
    setOptions(options5) {
        this.options = options5;
        return this;
    }
    load(url15, onLoad13, onProgress13, onError11) {
        if (url15 === undefined) url15 = '';
        if (this.path !== undefined) url15 = this.path + url15;
        url15 = this.manager.resolveURL(url15);
        const scope = this;
        const cached = Cache.get(url15);
        if (cached !== undefined) {
            scope.manager.itemStart(url15);
            setTimeout(function() {
                if (onLoad13) onLoad13(cached);
                scope.manager.itemEnd(url15);
            }, 0);
            return cached;
        }
        const fetchOptions = {
        };
        fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';
        fetchOptions.headers = this.requestHeader;
        fetch(url15, fetchOptions).then(function(res) {
            return res.blob();
        }).then(function(blob) {
            return createImageBitmap(blob, Object.assign(scope.options, {
                colorSpaceConversion: 'none'
            }));
        }).then(function(imageBitmap) {
            Cache.add(url15, imageBitmap);
            if (onLoad13) onLoad13(imageBitmap);
            scope.manager.itemEnd(url15);
        }).catch(function(e) {
            if (onError11) onError11(e);
            scope.manager.itemError(url15);
            scope.manager.itemEnd(url15);
        });
        scope.manager.itemStart(url15);
    }
}
ImageBitmapLoader.prototype.isImageBitmapLoader = true;
let _context1;
const AudioContext = {
    getContext: function() {
        if (_context1 === undefined) _context1 = new (window.AudioContext || window.webkitAudioContext)();
        return _context1;
    },
    setContext: function(value) {
        _context1 = value;
    }
};
class AudioLoader extends Loader {
    constructor(manager12){
        super(manager12);
    }
    load(url14, onLoad14, onProgress14, onError12) {
        const scope = this;
        const loader = new FileLoader(this.manager);
        loader.setResponseType('arraybuffer');
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url14, function(buffer) {
            try {
                // Create a copy of the buffer. The `decodeAudioData` method
                // detaches the buffer when complete, preventing reuse.
                const bufferCopy = buffer.slice(0);
                const context = AudioContext.getContext();
                context.decodeAudioData(bufferCopy, function(audioBuffer) {
                    onLoad14(audioBuffer);
                });
            } catch (e) {
                if (onError12) onError12(e);
                else console.error(e);
                scope.manager.itemError(url14);
            }
        }, onProgress14, onError12);
    }
}
class HemisphereLightProbe extends LightProbe {
    constructor(skyColor1, groundColor1, intensity8 = 1){
        super(undefined, intensity8);
        const color1 = new Color().set(skyColor1);
        const color2 = new Color().set(groundColor1);
        const sky = new Vector3(color1.r, color1.g, color1.b);
        const ground = new Vector3(color2.r, color2.g, color2.b);
        // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
        const c0 = Math.sqrt(Math.PI);
        const c1 = c0 * Math.sqrt(0.75);
        this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
        this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
    }
}
HemisphereLightProbe.prototype.isHemisphereLightProbe = true;
class AmbientLightProbe extends LightProbe {
    constructor(color20, intensity9 = 1){
        super(undefined, intensity9);
        const color1 = new Color().set(color20);
        // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
        this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
    }
}
AmbientLightProbe.prototype.isAmbientLightProbe = true;
const _eyeRight = /*@__PURE__*/ new Matrix4();
const _eyeLeft = /*@__PURE__*/ new Matrix4();
const _projectionMatrix = /*@__PURE__*/ new Matrix4();
class StereoCamera {
    constructor(){
        this.type = 'StereoCamera';
        this.aspect = 1;
        this.eyeSep = 0.064;
        this.cameraL = new PerspectiveCamera();
        this.cameraL.layers.enable(1);
        this.cameraL.matrixAutoUpdate = false;
        this.cameraR = new PerspectiveCamera();
        this.cameraR.layers.enable(2);
        this.cameraR.matrixAutoUpdate = false;
        this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
        };
    }
    update(camera4) {
        const cache = this._cache;
        const needsUpdate = cache.focus !== camera4.focus || cache.fov !== camera4.fov || cache.aspect !== camera4.aspect * this.aspect || cache.near !== camera4.near || cache.far !== camera4.far || cache.zoom !== camera4.zoom || cache.eyeSep !== this.eyeSep;
        if (needsUpdate) {
            cache.focus = camera4.focus;
            cache.fov = camera4.fov;
            cache.aspect = camera4.aspect * this.aspect;
            cache.near = camera4.near;
            cache.far = camera4.far;
            cache.zoom = camera4.zoom;
            cache.eyeSep = this.eyeSep;
            // Off-axis stereoscopic effect based on
            // http://paulbourke.net/stereographics/stereorender/
            _projectionMatrix.copy(camera4.projectionMatrix);
            const eyeSepHalf = cache.eyeSep / 2;
            const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
            const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;
            let xmin, xmax;
            // translate xOffset
            _eyeLeft.elements[12] = -eyeSepHalf;
            _eyeRight.elements[12] = eyeSepHalf;
            // for left eye
            xmin = -ymax * cache.aspect + eyeSepOnProjection;
            xmax = ymax * cache.aspect + eyeSepOnProjection;
            _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
            _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraL.projectionMatrix.copy(_projectionMatrix);
            // for right eye
            xmin = -ymax * cache.aspect - eyeSepOnProjection;
            xmax = ymax * cache.aspect - eyeSepOnProjection;
            _projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
            _projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraR.projectionMatrix.copy(_projectionMatrix);
        }
        this.cameraL.matrixWorld.copy(camera4.matrixWorld).multiply(_eyeLeft);
        this.cameraR.matrixWorld.copy(camera4.matrixWorld).multiply(_eyeRight);
    }
}
class Clock {
    constructor(autoStart = true){
        this.autoStart = autoStart;
        this.startTime = 0;
        this.oldTime = 0;
        this.elapsedTime = 0;
        this.running = false;
    }
    start() {
        this.startTime = now();
        this.oldTime = this.startTime;
        this.elapsedTime = 0;
        this.running = true;
    }
    stop() {
        this.getElapsedTime();
        this.running = false;
        this.autoStart = false;
    }
    getElapsedTime() {
        this.getDelta();
        return this.elapsedTime;
    }
    getDelta() {
        let diff = 0;
        if (this.autoStart && !this.running) {
            this.start();
            return 0;
        }
        if (this.running) {
            const newTime = now();
            diff = (newTime - this.oldTime) / 1000;
            this.oldTime = newTime;
            this.elapsedTime += diff;
        }
        return diff;
    }
}
function now() {
    return (typeof performance === 'undefined' ? Date : performance).now(); // see #10732
}
const _position$1 = /*@__PURE__*/ new Vector3();
const _quaternion$1 = /*@__PURE__*/ new Quaternion();
const _scale$1 = /*@__PURE__*/ new Vector3();
const _orientation$1 = /*@__PURE__*/ new Vector3();
class AudioListener extends Object3D {
    constructor(){
        super();
        this.type = 'AudioListener';
        this.context = AudioContext.getContext();
        this.gain = this.context.createGain();
        this.gain.connect(this.context.destination);
        this.filter = null;
        this.timeDelta = 0;
        // private
        this._clock = new Clock();
    }
    getInput() {
        return this.gain;
    }
    removeFilter() {
        if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
            this.gain.connect(this.context.destination);
            this.filter = null;
        }
        return this;
    }
    getFilter() {
        return this.filter;
    }
    setFilter(value51) {
        if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
        } else this.gain.disconnect(this.context.destination);
        this.filter = value51;
        this.gain.connect(this.filter);
        this.filter.connect(this.context.destination);
        return this;
    }
    getMasterVolume() {
        return this.gain.gain.value;
    }
    setMasterVolume(value37) {
        this.gain.gain.setTargetAtTime(value37, this.context.currentTime, 0.01);
        return this;
    }
    updateMatrixWorld(force3) {
        super.updateMatrixWorld(force3);
        const listener = this.context.listener;
        const up = this.up;
        this.timeDelta = this._clock.getDelta();
        this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);
        _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);
        if (listener.positionX) {
            // code path for Chrome (see #14393)
            const endTime = this.context.currentTime + this.timeDelta;
            listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);
            listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);
            listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);
            listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);
            listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);
            listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);
            listener.upX.linearRampToValueAtTime(up.x, endTime);
            listener.upY.linearRampToValueAtTime(up.y, endTime);
            listener.upZ.linearRampToValueAtTime(up.z, endTime);
        } else {
            listener.setPosition(_position$1.x, _position$1.y, _position$1.z);
            listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);
        }
    }
}
class Audio extends Object3D {
    constructor(listener3){
        super();
        this.type = 'Audio';
        this.listener = listener3;
        this.context = listener3.context;
        this.gain = this.context.createGain();
        this.gain.connect(listener3.getInput());
        this.autoplay = false;
        this.buffer = null;
        this.detune = 0;
        this.loop = false;
        this.loopStart = 0;
        this.loopEnd = 0;
        this.offset = 0;
        this.duration = undefined;
        this.playbackRate = 1;
        this.isPlaying = false;
        this.hasPlaybackControl = true;
        this.source = null;
        this.sourceType = 'empty';
        this._startedAt = 0;
        this._progress = 0;
        this._connected = false;
        this.filters = [];
    }
    getOutput() {
        return this.gain;
    }
    setNodeSource(audioNode) {
        this.hasPlaybackControl = false;
        this.sourceType = 'audioNode';
        this.source = audioNode;
        this.connect();
        return this;
    }
    setMediaElementSource(mediaElement) {
        this.hasPlaybackControl = false;
        this.sourceType = 'mediaNode';
        this.source = this.context.createMediaElementSource(mediaElement);
        this.connect();
        return this;
    }
    setMediaStreamSource(mediaStream) {
        this.hasPlaybackControl = false;
        this.sourceType = 'mediaStreamNode';
        this.source = this.context.createMediaStreamSource(mediaStream);
        this.connect();
        return this;
    }
    setBuffer(audioBuffer) {
        this.buffer = audioBuffer;
        this.sourceType = 'buffer';
        if (this.autoplay) this.play();
        return this;
    }
    play(delay = 0) {
        if (this.isPlaying === true) {
            console.warn('THREE.Audio: Audio is already playing.');
            return;
        }
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        this._startedAt = this.context.currentTime + delay;
        const source = this.context.createBufferSource();
        source.buffer = this.buffer;
        source.loop = this.loop;
        source.loopStart = this.loopStart;
        source.loopEnd = this.loopEnd;
        source.onended = this.onEnded.bind(this);
        source.start(this._startedAt, this._progress + this.offset, this.duration);
        this.isPlaying = true;
        this.source = source;
        this.setDetune(this.detune);
        this.setPlaybackRate(this.playbackRate);
        return this.connect();
    }
    pause() {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        if (this.isPlaying === true) {
            // update current progress
            this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
            if (this.loop === true) // ensure _progress does not exceed duration with looped audios
            this._progress = this._progress % (this.duration || this.buffer.duration);
            this.source.stop();
            this.source.onended = null;
            this.isPlaying = false;
        }
        return this;
    }
    stop() {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        this._progress = 0;
        this.source.stop();
        this.source.onended = null;
        this.isPlaying = false;
        return this;
    }
    connect() {
        if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);
            for(let i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].connect(this.filters[i]);
            this.filters[this.filters.length - 1].connect(this.getOutput());
        } else this.source.connect(this.getOutput());
        this._connected = true;
        return this;
    }
    disconnect() {
        if (this.filters.length > 0) {
            this.source.disconnect(this.filters[0]);
            for(let i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].disconnect(this.filters[i]);
            this.filters[this.filters.length - 1].disconnect(this.getOutput());
        } else this.source.disconnect(this.getOutput());
        this._connected = false;
        return this;
    }
    getFilters() {
        return this.filters;
    }
    setFilters(value38) {
        if (!value38) value38 = [];
        if (this._connected === true) {
            this.disconnect();
            this.filters = value38.slice();
            this.connect();
        } else this.filters = value38.slice();
        return this;
    }
    setDetune(value39) {
        this.detune = value39;
        if (this.source.detune === undefined) return; // only set detune when available
        if (this.isPlaying === true) this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
        return this;
    }
    getDetune() {
        return this.detune;
    }
    getFilter() {
        return this.getFilters()[0];
    }
    setFilter(filter) {
        return this.setFilters(filter ? [
            filter
        ] : []);
    }
    setPlaybackRate(value40) {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        this.playbackRate = value40;
        if (this.isPlaying === true) this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
        return this;
    }
    getPlaybackRate() {
        return this.playbackRate;
    }
    onEnded() {
        this.isPlaying = false;
    }
    getLoop() {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return false;
        }
        return this.loop;
    }
    setLoop(value41) {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        this.loop = value41;
        if (this.isPlaying === true) this.source.loop = this.loop;
        return this;
    }
    setLoopStart(value42) {
        this.loopStart = value42;
        return this;
    }
    setLoopEnd(value43) {
        this.loopEnd = value43;
        return this;
    }
    getVolume() {
        return this.gain.gain.value;
    }
    setVolume(value44) {
        this.gain.gain.setTargetAtTime(value44, this.context.currentTime, 0.01);
        return this;
    }
}
const _position = /*@__PURE__*/ new Vector3();
const _quaternion = /*@__PURE__*/ new Quaternion();
const _scale = /*@__PURE__*/ new Vector3();
const _orientation = /*@__PURE__*/ new Vector3();
class PositionalAudio extends Audio {
    constructor(listener4){
        super(listener4);
        this.panner = this.context.createPanner();
        this.panner.panningModel = 'HRTF';
        this.panner.connect(this.gain);
    }
    getOutput() {
        return this.panner;
    }
    getRefDistance() {
        return this.panner.refDistance;
    }
    setRefDistance(value45) {
        this.panner.refDistance = value45;
        return this;
    }
    getRolloffFactor() {
        return this.panner.rolloffFactor;
    }
    setRolloffFactor(value46) {
        this.panner.rolloffFactor = value46;
        return this;
    }
    getDistanceModel() {
        return this.panner.distanceModel;
    }
    setDistanceModel(value47) {
        this.panner.distanceModel = value47;
        return this;
    }
    getMaxDistance() {
        return this.panner.maxDistance;
    }
    setMaxDistance(value48) {
        this.panner.maxDistance = value48;
        return this;
    }
    setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
        this.panner.coneInnerAngle = coneInnerAngle;
        this.panner.coneOuterAngle = coneOuterAngle;
        this.panner.coneOuterGain = coneOuterGain;
        return this;
    }
    updateMatrixWorld(force4) {
        super.updateMatrixWorld(force4);
        if (this.hasPlaybackControl === true && this.isPlaying === false) return;
        this.matrixWorld.decompose(_position, _quaternion, _scale);
        _orientation.set(0, 0, 1).applyQuaternion(_quaternion);
        const panner = this.panner;
        if (panner.positionX) {
            // code path for Chrome and Firefox (see #14393)
            const endTime = this.context.currentTime + this.listener.timeDelta;
            panner.positionX.linearRampToValueAtTime(_position.x, endTime);
            panner.positionY.linearRampToValueAtTime(_position.y, endTime);
            panner.positionZ.linearRampToValueAtTime(_position.z, endTime);
            panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);
            panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);
            panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);
        } else {
            panner.setPosition(_position.x, _position.y, _position.z);
            panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);
        }
    }
}
class AudioAnalyser {
    constructor(audio, fftSize = 2048){
        this.analyser = audio.context.createAnalyser();
        this.analyser.fftSize = fftSize;
        this.data = new Uint8Array(this.analyser.frequencyBinCount);
        audio.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
        this.analyser.getByteFrequencyData(this.data);
        return this.data;
    }
    getAverageFrequency() {
        let value = 0;
        const data = this.getFrequencyData();
        for(let i = 0; i < data.length; i++)value += data[i];
        return value / data.length;
    }
}
class PropertyMixer {
    constructor(binding, typeName, valueSize){
        this.binding = binding;
        this.valueSize = valueSize;
        let mixFunction, mixFunctionAdditive, setIdentity;
        // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
        //
        // interpolators can use .buffer as their .result
        // the data then goes to 'incoming'
        //
        // 'accu0' and 'accu1' are used frame-interleaved for
        // the cumulative result and are compared to detect
        // changes
        //
        // 'orig' stores the original state of the property
        //
        // 'add' is used for additive cumulative results
        //
        // 'work' is optional and is only present for quaternion types. It is used
        // to store intermediate quaternion multiplication results
        switch(typeName){
            case 'quaternion':
                mixFunction = this._slerp;
                mixFunctionAdditive = this._slerpAdditive;
                setIdentity = this._setAdditiveIdentityQuaternion;
                this.buffer = new Float64Array(valueSize * 6);
                this._workIndex = 5;
                break;
            case 'string':
            case 'bool':
                mixFunction = this._select;
                // Use the regular mix function and for additive on these types,
                // additive is not relevant for non-numeric types
                mixFunctionAdditive = this._select;
                setIdentity = this._setAdditiveIdentityOther;
                this.buffer = new Array(valueSize * 5);
                break;
            default:
                mixFunction = this._lerp;
                mixFunctionAdditive = this._lerpAdditive;
                setIdentity = this._setAdditiveIdentityNumeric;
                this.buffer = new Float64Array(valueSize * 5);
        }
        this._mixBufferRegion = mixFunction;
        this._mixBufferRegionAdditive = mixFunctionAdditive;
        this._setIdentity = setIdentity;
        this._origIndex = 3;
        this._addIndex = 4;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        this.useCount = 0;
        this.referenceCount = 0;
    }
    // accumulate data in the 'incoming' region into 'accu<i>'
    accumulate(accuIndex, weight) {
        // note: happily accumulating nothing when weight = 0, the caller knows
        // the weight and shouldn't have made the call in the first place
        const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
        let currentWeight = this.cumulativeWeight;
        if (currentWeight === 0) {
            // accuN := incoming * weight
            for(let i = 0; i !== stride; ++i)buffer[offset + i] = buffer[i];
            currentWeight = weight;
        } else {
            // accuN := accuN + incoming * weight
            currentWeight += weight;
            const mix = weight / currentWeight;
            this._mixBufferRegion(buffer, offset, 0, mix, stride);
        }
        this.cumulativeWeight = currentWeight;
    }
    // accumulate data in the 'incoming' region into 'add'
    accumulateAdditive(weight1) {
        const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
        if (this.cumulativeWeightAdditive === 0) // add = identity
        this._setIdentity();
        // add := add + incoming * weight
        this._mixBufferRegionAdditive(buffer, offset, 0, weight1, stride);
        this.cumulativeWeightAdditive += weight1;
    }
    // apply the state of 'accu<i>' to the binding when accus differ
    apply(accuIndex1) {
        const stride = this.valueSize, buffer = this.buffer, offset = accuIndex1 * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        if (weight < 1) {
            // accuN := accuN + original * ( 1 - cumulativeWeight )
            const originalValueOffset = stride * this._origIndex;
            this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
        }
        if (weightAdditive > 0) // accuN := accuN + additive accuN
        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
        for(let i = stride, e = stride + stride; i !== e; ++i)if (buffer[i] !== buffer[i + stride]) {
            // value has changed -> update scene graph
            binding.setValue(buffer, offset);
            break;
        }
    }
    // remember the state of the bound property and copy it to both accus
    saveOriginalState() {
        const binding = this.binding;
        const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
        binding.getValue(buffer, originalValueOffset);
        // accu[0..1] := orig -- initially detect changes against the original
        for(let i = stride, e = originalValueOffset; i !== e; ++i)buffer[i] = buffer[originalValueOffset + i % stride];
        // Add to identity for additive
        this._setIdentity();
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
    }
    // apply the state previously taken via 'saveOriginalState' to the binding
    restoreOriginalState() {
        const originalValueOffset = this.valueSize * 3;
        this.binding.setValue(this.buffer, originalValueOffset);
    }
    _setAdditiveIdentityNumeric() {
        const startIndex = this._addIndex * this.valueSize;
        const endIndex = startIndex + this.valueSize;
        for(let i = startIndex; i < endIndex; i++)this.buffer[i] = 0;
    }
    _setAdditiveIdentityQuaternion() {
        this._setAdditiveIdentityNumeric();
        this.buffer[this._addIndex * this.valueSize + 3] = 1;
    }
    _setAdditiveIdentityOther() {
        const startIndex = this._origIndex * this.valueSize;
        const targetIndex = this._addIndex * this.valueSize;
        for(let i = 0; i < this.valueSize; i++)this.buffer[targetIndex + i] = this.buffer[startIndex + i];
    }
    // mix functions
    _select(buffer23, dstOffset, srcOffset, t22, stride) {
        if (t22 >= 0.5) for(let i = 0; i !== stride; ++i)buffer23[dstOffset + i] = buffer23[srcOffset + i];
    }
    _slerp(buffer1, dstOffset3, srcOffset2, t23) {
        Quaternion.slerpFlat(buffer1, dstOffset3, buffer1, dstOffset3, buffer1, srcOffset2, t23);
    }
    _slerpAdditive(buffer2, dstOffset4, srcOffset3, t24, stride2) {
        const workOffset = this._workIndex * stride2;
        // Store result in intermediate buffer offset
        Quaternion.multiplyQuaternionsFlat(buffer2, workOffset, buffer2, dstOffset4, buffer2, srcOffset3);
        // Slerp to the intermediate result
        Quaternion.slerpFlat(buffer2, dstOffset4, buffer2, dstOffset4, buffer2, workOffset, t24);
    }
    _lerp(buffer3, dstOffset5, srcOffset4, t25, stride3) {
        const s = 1 - t25;
        for(let i = 0; i !== stride3; ++i){
            const j = dstOffset5 + i;
            buffer3[j] = buffer3[j] * s + buffer3[srcOffset4 + i] * t25;
        }
    }
    _lerpAdditive(buffer4, dstOffset6, srcOffset5, t26, stride4) {
        for(let i = 0; i !== stride4; ++i){
            const j = dstOffset6 + i;
            buffer4[j] = buffer4[j] + buffer4[srcOffset5 + i] * t26;
        }
    }
}
// Characters [].:/ are reserved for track binding syntax.
const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
const _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g');
// Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\.', '') + ']';
// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
const _directoryRe = /((?:WC+[\/:])*)/.source.replace('WC', _wordChar);
// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
const _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot);
// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
const _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar);
// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
const _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', _wordChar);
const _trackRe = new RegExp("^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');
const _supportedObjectNames = [
    'material',
    'materials',
    'bones'
];
class Composite {
    constructor(targetGroup, path, optionalParsedPath){
        const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
        this._targetGroup = targetGroup;
        this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    getValue(array38, offset27) {
        this.bind(); // bind all binding
        const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
        // and only call .getValue on the first
        if (binding !== undefined) binding.getValue(array38, offset27);
    }
    setValue(array36, offset28) {
        const bindings = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].setValue(array36, offset28);
    }
    bind() {
        const bindings = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].bind();
    }
    unbind() {
        const bindings = this._bindings;
        for(let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].unbind();
    }
}
// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
class PropertyBinding {
    constructor(rootNode, path4, parsedPath){
        this.path = path4;
        this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path4);
        this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
        this.rootNode = rootNode;
        // initial state of these methods that calls 'bind'
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
    }
    static create(root, path5, parsedPath1) {
        if (!(root && root.isAnimationObjectGroup)) return new PropertyBinding(root, path5, parsedPath1);
        else return new PropertyBinding.Composite(root, path5, parsedPath1);
    }
    /**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param {string} name Node name to be sanitized.
	 * @return {string}
	 */ static sanitizeNodeName(name16) {
        return name16.replace(/\s/g, '_').replace(_reservedRe, '');
    }
    static parseTrackName(trackName) {
        const matches = _trackRe.exec(trackName);
        if (!matches) throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);
        const results = {
            // directoryName: matches[ 1 ], // (tschw) currently unused
            nodeName: matches[2],
            objectName: matches[3],
            objectIndex: matches[4],
            propertyName: matches[5],
            propertyIndex: matches[6]
        };
        const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');
        if (lastDot !== undefined && lastDot !== -1) {
            const objectName = results.nodeName.substring(lastDot + 1);
            // Object names must be checked against an allowlist. Otherwise, there
            // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
            // 'bar' could be the objectName, or part of a nodeName (which can
            // include '.' characters).
            if (_supportedObjectNames.indexOf(objectName) !== -1) {
                results.nodeName = results.nodeName.substring(0, lastDot);
                results.objectName = objectName;
            }
        }
        if (results.propertyName === null || results.propertyName.length === 0) throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);
        return results;
    }
    static findNode(root1, nodeName) {
        if (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root1.name || nodeName === root1.uuid) return root1;
        // search into skeleton bones.
        if (root1.skeleton) {
            const bone = root1.skeleton.getBoneByName(nodeName);
            if (bone !== undefined) return bone;
        }
        // search into node subtree.
        if (root1.children) {
            const searchNodeSubtree = function(children) {
                for(let i = 0; i < children.length; i++){
                    const childNode = children[i];
                    if (childNode.name === nodeName || childNode.uuid === nodeName) return childNode;
                    const result = searchNodeSubtree(childNode.children);
                    if (result) return result;
                }
                return null;
            };
            const subTreeNode = searchNodeSubtree(root1.children);
            if (subTreeNode) return subTreeNode;
        }
        return null;
    }
    // these are used to "bind" a nonexistent property
    _getValue_unavailable() {
    }
    _setValue_unavailable() {
    }
    // Getters
    _getValue_direct(buffer5, offset29) {
        buffer5[offset29] = this.targetObject[this.propertyName];
    }
    _getValue_array(buffer6, offset30) {
        const source = this.resolvedProperty;
        for(let i = 0, n = source.length; i !== n; ++i)buffer6[offset30++] = source[i];
    }
    _getValue_arrayElement(buffer7, offset31) {
        buffer7[offset31] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(buffer8, offset32) {
        this.resolvedProperty.toArray(buffer8, offset32);
    }
    // Direct
    _setValue_direct(buffer9, offset33) {
        this.targetObject[this.propertyName] = buffer9[offset33];
    }
    _setValue_direct_setNeedsUpdate(buffer10, offset34) {
        this.targetObject[this.propertyName] = buffer10[offset34];
        this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(buffer11, offset35) {
        this.targetObject[this.propertyName] = buffer11[offset35];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // EntireArray
    _setValue_array(buffer12, offset36) {
        const dest = this.resolvedProperty;
        for(let i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer12[offset36++];
    }
    _setValue_array_setNeedsUpdate(buffer13, offset37) {
        const dest = this.resolvedProperty;
        for(let i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer13[offset37++];
        this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(buffer14, offset38) {
        const dest = this.resolvedProperty;
        for(let i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer14[offset38++];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // ArrayElement
    _setValue_arrayElement(buffer15, offset39) {
        this.resolvedProperty[this.propertyIndex] = buffer15[offset39];
    }
    _setValue_arrayElement_setNeedsUpdate(buffer16, offset40) {
        this.resolvedProperty[this.propertyIndex] = buffer16[offset40];
        this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer17, offset41) {
        this.resolvedProperty[this.propertyIndex] = buffer17[offset41];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // HasToFromArray
    _setValue_fromArray(buffer18, offset42) {
        this.resolvedProperty.fromArray(buffer18, offset42);
    }
    _setValue_fromArray_setNeedsUpdate(buffer19, offset43) {
        this.resolvedProperty.fromArray(buffer19, offset43);
        this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer20, offset44) {
        this.resolvedProperty.fromArray(buffer20, offset44);
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(targetArray, offset45) {
        this.bind();
        this.getValue(targetArray, offset45);
    }
    _setValue_unbound(sourceArray, offset46) {
        this.bind();
        this.setValue(sourceArray, offset46);
    }
    // create getter / setter pair for a property in the scene graph
    bind() {
        let targetObject = this.node;
        const parsedPath = this.parsedPath;
        const objectName = parsedPath.objectName;
        const propertyName = parsedPath.propertyName;
        let propertyIndex = parsedPath.propertyIndex;
        if (!targetObject) {
            targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
            this.node = targetObject;
        }
        // set fail state so we can just 'return' on error
        this.getValue = this._getValue_unavailable;
        this.setValue = this._setValue_unavailable;
        // ensure there is a value node
        if (!targetObject) {
            console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.');
            return;
        }
        if (objectName) {
            let objectIndex = parsedPath.objectIndex;
            // special cases were we need to reach deeper into the hierarchy to get the face materials....
            switch(objectName){
                case 'materials':
                    if (!targetObject.material) {
                        console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
                        return;
                    }
                    if (!targetObject.material.materials) {
                        console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);
                        return;
                    }
                    targetObject = targetObject.material.materials;
                    break;
                case 'bones':
                    if (!targetObject.skeleton) {
                        console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);
                        return;
                    }
                    // potential future optimization: skip this if propertyIndex is already an integer
                    // and convert the integer string to a true integer.
                    targetObject = targetObject.skeleton.bones;
                    // support resolving morphTarget names into indices.
                    for(let i = 0; i < targetObject.length; i++)if (targetObject[i].name === objectIndex) {
                        objectIndex = i;
                        break;
                    }
                    break;
                default:
                    if (targetObject[objectName] === undefined) {
                        console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);
                        return;
                    }
                    targetObject = targetObject[objectName];
            }
            if (objectIndex !== undefined) {
                if (targetObject[objectIndex] === undefined) {
                    console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);
                    return;
                }
                targetObject = targetObject[objectIndex];
            }
        }
        // resolve property
        const nodeProperty = targetObject[propertyName];
        if (nodeProperty === undefined) {
            const nodeName = parsedPath.nodeName;
            console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\'t found.', targetObject);
            return;
        }
        // determine versioning scheme
        let versioning = this.Versioning.None;
        this.targetObject = targetObject;
        if (targetObject.needsUpdate !== undefined) versioning = this.Versioning.NeedsUpdate;
        else if (targetObject.matrixWorldNeedsUpdate !== undefined) versioning = this.Versioning.MatrixWorldNeedsUpdate;
        // determine how the property gets bound
        let bindingType = this.BindingType.Direct;
        if (propertyIndex !== undefined) {
            // access a sub element of the property array (only primitives are supported right now)
            if (propertyName === 'morphTargetInfluences') {
                // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
                // support resolving morphTarget names into indices.
                if (!targetObject.geometry) {
                    console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);
                    return;
                }
                if (targetObject.geometry.isBufferGeometry) {
                    if (!targetObject.geometry.morphAttributes) {
                        console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);
                        return;
                    }
                    if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
                } else {
                    console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);
                    return;
                }
            }
            bindingType = this.BindingType.ArrayElement;
            this.resolvedProperty = nodeProperty;
            this.propertyIndex = propertyIndex;
        } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
            // must use copy for Object3D.Euler/Quaternion
            bindingType = this.BindingType.HasFromToArray;
            this.resolvedProperty = nodeProperty;
        } else if (Array.isArray(nodeProperty)) {
            bindingType = this.BindingType.EntireArray;
            this.resolvedProperty = nodeProperty;
        } else this.propertyName = propertyName;
        // select getter / setter
        this.getValue = this.GetterByBindingType[bindingType];
        this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
    unbind() {
        this.node = null;
        // back to the prototype version of getValue / setValue
        // note: avoiding to mutate the shape of 'this' via 'delete'
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
    }
}
PropertyBinding.Composite = Composite;
PropertyBinding.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
};
PropertyBinding.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
};
PropertyBinding.prototype.GetterByBindingType = [
    PropertyBinding.prototype._getValue_direct,
    PropertyBinding.prototype._getValue_array,
    PropertyBinding.prototype._getValue_arrayElement,
    PropertyBinding.prototype._getValue_toArray, 
];
PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
    [
        // Direct
        PropertyBinding.prototype._setValue_direct,
        PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
        PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate, 
    ],
    [
        // EntireArray
        PropertyBinding.prototype._setValue_array,
        PropertyBinding.prototype._setValue_array_setNeedsUpdate,
        PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate, 
    ],
    [
        // ArrayElement
        PropertyBinding.prototype._setValue_arrayElement,
        PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
        PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate, 
    ],
    [
        // HasToFromArray
        PropertyBinding.prototype._setValue_fromArray,
        PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
        PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate, 
    ]
];
/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 */ class AnimationObjectGroup {
    constructor(){
        this.uuid = generateUUID();
        // cached objects followed by the active ones
        this._objects = Array.prototype.slice.call(arguments);
        this.nCachedObjects_ = 0; // threshold
        // note: read by PropertyBinding.Composite
        const indices = {
        };
        this._indicesByUUID = indices; // for bookkeeping
        for(let i = 0, n = arguments.length; i !== n; ++i)indices[arguments[i].uuid] = i;
        this._paths = []; // inside: string
        this._parsedPaths = []; // inside: { we don't care, here }
        this._bindings = []; // inside: Array< PropertyBinding >
        this._bindingsIndicesByPath = {
        }; // inside: indices in these arrays
        const scope = this;
        this.stats = {
            objects: {
                get total () {
                    return scope._objects.length;
                },
                get inUse () {
                    return this.total - scope.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return scope._bindings.length;
            }
        };
    }
    add() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
        let knownObject = undefined, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
        for(let i = 0, n = arguments.length; i !== n; ++i){
            const object = arguments[i], uuid = object.uuid;
            let index = indicesByUUID[uuid];
            if (index === undefined) {
                // unknown object -> add it to the ACTIVE region
                index = nObjects++;
                indicesByUUID[uuid] = index;
                objects.push(object);
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j)bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
            } else if (index < nCachedObjects) {
                knownObject = objects[index];
                // move existing object to the ACTIVE region
                const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
                indicesByUUID[lastCachedObject.uuid] = index;
                objects[index] = lastCachedObject;
                indicesByUUID[uuid] = firstActiveIndex;
                objects[firstActiveIndex] = object;
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j){
                    const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex];
                    let binding = bindingsForPath[index];
                    bindingsForPath[index] = lastCached;
                    if (binding === undefined) // since we do not bother to create new bindings
                    // for objects that are cached, the binding may
                    // or may not exist
                    binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
                    bindingsForPath[firstActiveIndex] = binding;
                }
            } else if (objects[index] !== knownObject) console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
             // else the object is already where we want it to be
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    remove() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_;
        for(let i = 0, n = arguments.length; i !== n; ++i){
            const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== undefined && index >= nCachedObjects) {
                // move existing object into the CACHED region
                const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
                indicesByUUID[firstActiveObject.uuid] = index;
                objects[index] = firstActiveObject;
                indicesByUUID[uuid] = lastCachedIndex;
                objects[lastCachedIndex] = object;
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j){
                    const bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
                    bindingsForPath[index] = firstActive;
                    bindingsForPath[lastCachedIndex] = binding;
                }
            }
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    // remove & forget
    uncache() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
        for(let i = 0, n = arguments.length; i !== n; ++i){
            const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== undefined) {
                delete indicesByUUID[uuid];
                if (index < nCachedObjects) {
                    // object is cached, shrink the CACHED region
                    const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
                    // last cached object takes this object's place
                    indicesByUUID[lastCachedObject.uuid] = index;
                    objects[index] = lastCachedObject;
                    // last object goes to the activated slot and pop
                    indicesByUUID[lastObject.uuid] = firstActiveIndex;
                    objects[firstActiveIndex] = lastObject;
                    objects.pop();
                    // accounting is done, now do the same for all bindings
                    for(let j = 0, m = nBindings; j !== m; ++j){
                        const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
                        bindingsForPath[index] = lastCached;
                        bindingsForPath[firstActiveIndex] = last;
                        bindingsForPath.pop();
                    }
                } else {
                    // object is active, just swap with the last and pop
                    const lastIndex = --nObjects, lastObject = objects[lastIndex];
                    if (lastIndex > 0) indicesByUUID[lastObject.uuid] = index;
                    objects[index] = lastObject;
                    objects.pop();
                    // accounting is done, now do the same for all bindings
                    for(let j = 0, m = nBindings; j !== m; ++j){
                        const bindingsForPath = bindings[j];
                        bindingsForPath[index] = bindingsForPath[lastIndex];
                        bindingsForPath.pop();
                    }
                } // cached or active
            } // if object is known
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    // Internal interface used by befriended PropertyBinding.Composite:
    subscribe_(path6, parsedPath2) {
        // returns an array of bindings for the given path that is changed
        // according to the contained objects in the group
        const indicesByPath = this._bindingsIndicesByPath;
        let index = indicesByPath[path6];
        const bindings = this._bindings;
        if (index !== undefined) return bindings[index];
        const paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
        index = bindings.length;
        indicesByPath[path6] = index;
        paths.push(path6);
        parsedPaths.push(parsedPath2);
        bindings.push(bindingsForPath);
        for(let i = nCachedObjects, n = objects.length; i !== n; ++i){
            const object = objects[i];
            bindingsForPath[i] = new PropertyBinding(object, path6, parsedPath2);
        }
        return bindingsForPath;
    }
    unsubscribe_(path7) {
        // tells the group to forget about a property path and no longer
        // update the array previously obtained with 'subscribe_'
        const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path7];
        if (index !== undefined) {
            const paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path7[lastBindingsIndex];
            indicesByPath[lastBindingsPath] = index;
            bindings[index] = lastBindings;
            bindings.pop();
            parsedPaths[index] = parsedPaths[lastBindingsIndex];
            parsedPaths.pop();
            paths[index] = paths[lastBindingsIndex];
            paths.pop();
        }
    }
}
AnimationObjectGroup.prototype.isAnimationObjectGroup = true;
class AnimationAction {
    constructor(mixer, clip1, localRoot = null, blendMode1 = clip1.blendMode){
        this._mixer = mixer;
        this._clip = clip1;
        this._localRoot = localRoot;
        this.blendMode = blendMode1;
        const tracks = clip1.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
        const interpolantSettings = {
            endingStart: ZeroCurvatureEnding,
            endingEnd: ZeroCurvatureEnding
        };
        for(let i = 0; i !== nTracks; ++i){
            const interpolant = tracks[i].createInterpolant(null);
            interpolants[i] = interpolant;
            interpolant.settings = interpolantSettings;
        }
        this._interpolantSettings = interpolantSettings;
        this._interpolants = interpolants; // bound by the mixer
        // inside: PropertyMixer (managed by the mixer)
        this._propertyBindings = new Array(nTracks);
        this._cacheIndex = null; // for the memory manager
        this._byClipCacheIndex = null; // for the memory manager
        this._timeScaleInterpolant = null;
        this._weightInterpolant = null;
        this.loop = LoopRepeat;
        this._loopCount = -1;
        // global mixer time when the action is to be started
        // it's set back to 'null' upon start of the action
        this._startTime = null;
        // scaled local time of the action
        // gets clamped or wrapped to 0..clip.duration according to loop
        this.time = 0;
        this.timeScale = 1;
        this._effectiveTimeScale = 1;
        this.weight = 1;
        this._effectiveWeight = 1;
        this.repetitions = Infinity; // no. of repetitions when looping
        this.paused = false; // true -> zero effective time scale
        this.enabled = true; // false -> zero effective weight
        this.clampWhenFinished = false; // keep feeding the last frame?
        this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate
        this.zeroSlopeAtEnd = true; // clips for start, loop and end
    }
    // State & Scheduling
    play() {
        this._mixer._activateAction(this);
        return this;
    }
    stop() {
        this._mixer._deactivateAction(this);
        return this.reset();
    }
    reset() {
        this.paused = false;
        this.enabled = true;
        this.time = 0; // restart clip
        this._loopCount = -1; // forget previous loops
        this._startTime = null; // forget scheduling
        return this.stopFading().stopWarping();
    }
    isRunning() {
        return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    // return true when play has been called
    isScheduled() {
        return this._mixer._isActiveAction(this);
    }
    startAt(time) {
        this._startTime = time;
        return this;
    }
    setLoop(mode, repetitions) {
        this.loop = mode;
        this.repetitions = repetitions;
        return this;
    }
    // Weight
    // set the weight stopping any scheduled fading
    // although .enabled = false yields an effective weight of zero, this
    // method does *not* change .enabled, because it would be confusing
    setEffectiveWeight(weight2) {
        this.weight = weight2;
        // note: same logic as when updated at runtime
        this._effectiveWeight = this.enabled ? weight2 : 0;
        return this.stopFading();
    }
    // return the weight considering fading and .enabled
    getEffectiveWeight() {
        return this._effectiveWeight;
    }
    fadeIn(duration1) {
        return this._scheduleFading(duration1, 0, 1);
    }
    fadeOut(duration2) {
        return this._scheduleFading(duration2, 1, 0);
    }
    crossFadeFrom(fadeOutAction, duration3, warp) {
        fadeOutAction.fadeOut(duration3);
        this.fadeIn(duration3);
        if (warp) {
            const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
            fadeOutAction.warp(1, startEndRatio, duration3);
            this.warp(endStartRatio, 1, duration3);
        }
        return this;
    }
    crossFadeTo(fadeInAction, duration4, warp1) {
        return fadeInAction.crossFadeFrom(this, duration4, warp1);
    }
    stopFading() {
        const weightInterpolant = this._weightInterpolant;
        if (weightInterpolant !== null) {
            this._weightInterpolant = null;
            this._mixer._takeBackControlInterpolant(weightInterpolant);
        }
        return this;
    }
    // Time Scale Control
    // set the time scale stopping any scheduled warping
    // although .paused = true yields an effective time scale of zero, this
    // method does *not* change .paused, because it would be confusing
    setEffectiveTimeScale(timeScale1) {
        this.timeScale = timeScale1;
        this._effectiveTimeScale = this.paused ? 0 : timeScale1;
        return this.stopWarping();
    }
    // return the time scale considering warping and .paused
    getEffectiveTimeScale() {
        return this._effectiveTimeScale;
    }
    setDuration(duration5) {
        this.timeScale = this._clip.duration / duration5;
        return this.stopWarping();
    }
    syncWith(action) {
        this.time = action.time;
        this.timeScale = action.timeScale;
        return this.stopWarping();
    }
    halt(duration6) {
        return this.warp(this._effectiveTimeScale, 0, duration6);
    }
    warp(startTimeScale, endTimeScale, duration7) {
        const mixer = this._mixer, now = mixer.time, timeScale = this.timeScale;
        let interpolant = this._timeScaleInterpolant;
        if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._timeScaleInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now;
        times[1] = now + duration7;
        values[0] = startTimeScale / timeScale;
        values[1] = endTimeScale / timeScale;
        return this;
    }
    stopWarping() {
        const timeScaleInterpolant = this._timeScaleInterpolant;
        if (timeScaleInterpolant !== null) {
            this._timeScaleInterpolant = null;
            this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
        }
        return this;
    }
    // Object Accessors
    getMixer() {
        return this._mixer;
    }
    getClip() {
        return this._clip;
    }
    getRoot() {
        return this._localRoot || this._mixer._root;
    }
    // Interna
    _update(time1, deltaTime, timeDirection, accuIndex2) {
        // called by the mixer
        if (!this.enabled) {
            // call ._updateWeight() to update ._effectiveWeight
            this._updateWeight(time1);
            return;
        }
        const startTime = this._startTime;
        if (startTime !== null) {
            // check for scheduled start of action
            const timeRunning = (time1 - startTime) * timeDirection;
            if (timeRunning < 0 || timeDirection === 0) return; // yet to come / don't decide when delta = 0
            // start
            this._startTime = null; // unschedule
            deltaTime = timeDirection * timeRunning;
        }
        // apply time scale and advance time
        deltaTime *= this._updateTimeScale(time1);
        const clipTime = this._updateTime(deltaTime);
        // note: _updateTime may disable the action resulting in
        // an effective weight of 0
        const weight = this._updateWeight(time1);
        if (weight > 0) {
            const interpolants = this._interpolants;
            const propertyMixers = this._propertyBindings;
            switch(this.blendMode){
                case AdditiveAnimationBlendMode:
                    for(let j = 0, m = interpolants.length; j !== m; ++j){
                        interpolants[j].evaluate(clipTime);
                        propertyMixers[j].accumulateAdditive(weight);
                    }
                    break;
                case NormalAnimationBlendMode:
                default:
                    for(let j5 = 0, m33 = interpolants.length; j5 !== m33; ++j5){
                        interpolants[j5].evaluate(clipTime);
                        propertyMixers[j5].accumulate(accuIndex2, weight);
                    }
            }
        }
    }
    _updateWeight(time2) {
        let weight = 0;
        if (this.enabled) {
            weight = this.weight;
            const interpolant = this._weightInterpolant;
            if (interpolant !== null) {
                const interpolantValue = interpolant.evaluate(time2)[0];
                weight *= interpolantValue;
                if (time2 > interpolant.parameterPositions[1]) {
                    this.stopFading();
                    if (interpolantValue === 0) // faded out, disable
                    this.enabled = false;
                }
            }
        }
        this._effectiveWeight = weight;
        return weight;
    }
    _updateTimeScale(time3) {
        let timeScale = 0;
        if (!this.paused) {
            timeScale = this.timeScale;
            const interpolant = this._timeScaleInterpolant;
            if (interpolant !== null) {
                const interpolantValue = interpolant.evaluate(time3)[0];
                timeScale *= interpolantValue;
                if (time3 > interpolant.parameterPositions[1]) {
                    this.stopWarping();
                    if (timeScale === 0) // motion has halted, pause
                    this.paused = true;
                    else // warp done - apply final time scale
                    this.timeScale = timeScale;
                }
            }
        }
        this._effectiveTimeScale = timeScale;
        return timeScale;
    }
    _updateTime(deltaTime1) {
        const duration = this._clip.duration;
        const loop = this.loop;
        let time = this.time + deltaTime1;
        let loopCount = this._loopCount;
        const pingPong = loop === LoopPingPong;
        if (deltaTime1 === 0) {
            if (loopCount === -1) return time;
            return pingPong && (loopCount & 1) === 1 ? duration - time : time;
        }
        if (loop === LoopOnce) {
            if (loopCount === -1) {
                // just started
                this._loopCount = 0;
                this._setEndings(true, true, false);
            }
            handle_stop: {
                if (time >= duration) time = duration;
                else if (time < 0) time = 0;
                else {
                    this.time = time;
                    break handle_stop;
                }
                if (this.clampWhenFinished) this.paused = true;
                else this.enabled = false;
                this.time = time;
                this._mixer.dispatchEvent({
                    type: 'finished',
                    action: this,
                    direction: deltaTime1 < 0 ? -1 : 1
                });
            }
        } else {
            if (loopCount === -1) {
                // just started
                if (deltaTime1 >= 0) {
                    loopCount = 0;
                    this._setEndings(true, this.repetitions === 0, pingPong);
                } else // when looping in reverse direction, the initial
                // transition through zero counts as a repetition,
                // so leave loopCount at -1
                this._setEndings(this.repetitions === 0, true, pingPong);
            }
            if (time >= duration || time < 0) {
                // wrap around
                const loopDelta = Math.floor(time / duration); // signed
                time -= duration * loopDelta;
                loopCount += Math.abs(loopDelta);
                const pending = this.repetitions - loopCount;
                if (pending <= 0) {
                    // have to stop (switch state, clamp time, fire event)
                    if (this.clampWhenFinished) this.paused = true;
                    else this.enabled = false;
                    time = deltaTime1 > 0 ? duration : 0;
                    this.time = time;
                    this._mixer.dispatchEvent({
                        type: 'finished',
                        action: this,
                        direction: deltaTime1 > 0 ? 1 : -1
                    });
                } else {
                    // keep running
                    if (pending === 1) {
                        // entering the last round
                        const atStart = deltaTime1 < 0;
                        this._setEndings(atStart, !atStart, pingPong);
                    } else this._setEndings(false, false, pingPong);
                    this._loopCount = loopCount;
                    this.time = time;
                    this._mixer.dispatchEvent({
                        type: 'loop',
                        action: this,
                        loopDelta: loopDelta
                    });
                }
            } else this.time = time;
            if (pingPong && (loopCount & 1) === 1) // invert time for the "pong round"
            return duration - time;
        }
        return time;
    }
    _setEndings(atStart, atEnd, pingPong) {
        const settings = this._interpolantSettings;
        if (pingPong) {
            settings.endingStart = ZeroSlopeEnding;
            settings.endingEnd = ZeroSlopeEnding;
        } else {
            // assuming for LoopOnce atStart == atEnd == true
            if (atStart) settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
            else settings.endingStart = WrapAroundEnding;
            if (atEnd) settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
            else settings.endingEnd = WrapAroundEnding;
        }
    }
    _scheduleFading(duration8, weightNow, weightThen) {
        const mixer = this._mixer, now = mixer.time;
        let interpolant = this._weightInterpolant;
        if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._weightInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now;
        values[0] = weightNow;
        times[1] = now + duration8;
        values[1] = weightThen;
        return this;
    }
}
class AnimationMixer extends EventDispatcher {
    constructor(root2){
        super();
        this._root = root2;
        this._initMemoryManager();
        this._accuIndex = 0;
        this.time = 0;
        this.timeScale = 1;
    }
    _bindAction(action1, prototypeAction) {
        const root = action1._localRoot || this._root, tracks = action1._clip.tracks, nTracks = tracks.length, bindings = action1._propertyBindings, interpolants = action1._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
        let bindingsByName = bindingsByRoot[rootUuid];
        if (bindingsByName === undefined) {
            bindingsByName = {
            };
            bindingsByRoot[rootUuid] = bindingsByName;
        }
        for(let i = 0; i !== nTracks; ++i){
            const track = tracks[i], trackName = track.name;
            let binding = bindingsByName[trackName];
            if (binding !== undefined) bindings[i] = binding;
            else {
                binding = bindings[i];
                if (binding !== undefined) {
                    // existing binding, make sure the cache knows
                    if (binding._cacheIndex === null) {
                        ++binding.referenceCount;
                        this._addInactiveBinding(binding, rootUuid, trackName);
                    }
                    continue;
                }
                const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
                binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
                ++binding.referenceCount;
                this._addInactiveBinding(binding, rootUuid, trackName);
                bindings[i] = binding;
            }
            interpolants[i].resultBuffer = binding.buffer;
        }
    }
    _activateAction(action2) {
        if (!this._isActiveAction(action2)) {
            if (action2._cacheIndex === null) {
                // this action has been forgotten by the cache, but the user
                // appears to be still using it -> rebind
                const rootUuid = (action2._localRoot || this._root).uuid, clipUuid = action2._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
                this._bindAction(action2, actionsForClip && actionsForClip.knownActions[0]);
                this._addInactiveAction(action2, clipUuid, rootUuid);
            }
            const bindings = action2._propertyBindings;
            // increment reference counts / sort out state
            for(let i = 0, n = bindings.length; i !== n; ++i){
                const binding = bindings[i];
                if ((binding.useCount++) === 0) {
                    this._lendBinding(binding);
                    binding.saveOriginalState();
                }
            }
            this._lendAction(action2);
        }
    }
    _deactivateAction(action3) {
        if (this._isActiveAction(action3)) {
            const bindings = action3._propertyBindings;
            // decrement reference counts / sort out state
            for(let i = 0, n = bindings.length; i !== n; ++i){
                const binding = bindings[i];
                if (--binding.useCount === 0) {
                    binding.restoreOriginalState();
                    this._takeBackBinding(binding);
                }
            }
            this._takeBackAction(action3);
        }
    }
    // Memory manager
    _initMemoryManager() {
        this._actions = []; // 'nActiveActions' followed by inactive ones
        this._nActiveActions = 0;
        this._actionsByClip = {
        };
        // inside:
        // {
        // 	knownActions: Array< AnimationAction > - used as prototypes
        // 	actionByRoot: AnimationAction - lookup
        // }
        this._bindings = []; // 'nActiveBindings' followed by inactive ones
        this._nActiveBindings = 0;
        this._bindingsByRootAndName = {
        }; // inside: Map< name, PropertyMixer >
        this._controlInterpolants = []; // same game as above
        this._nActiveControlInterpolants = 0;
        const scope = this;
        this.stats = {
            actions: {
                get total () {
                    return scope._actions.length;
                },
                get inUse () {
                    return scope._nActiveActions;
                }
            },
            bindings: {
                get total () {
                    return scope._bindings.length;
                },
                get inUse () {
                    return scope._nActiveBindings;
                }
            },
            controlInterpolants: {
                get total () {
                    return scope._controlInterpolants.length;
                },
                get inUse () {
                    return scope._nActiveControlInterpolants;
                }
            }
        };
    }
    // Memory management for AnimationAction objects
    _isActiveAction(action4) {
        const index = action4._cacheIndex;
        return index !== null && index < this._nActiveActions;
    }
    _addInactiveAction(action5, clipUuid, rootUuid) {
        const actions = this._actions, actionsByClip = this._actionsByClip;
        let actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip === undefined) {
            actionsForClip = {
                knownActions: [
                    action5
                ],
                actionByRoot: {
                }
            };
            action5._byClipCacheIndex = 0;
            actionsByClip[clipUuid] = actionsForClip;
        } else {
            const knownActions = actionsForClip.knownActions;
            action5._byClipCacheIndex = knownActions.length;
            knownActions.push(action5);
        }
        action5._cacheIndex = actions.length;
        actions.push(action5);
        actionsForClip.actionByRoot[rootUuid] = action5;
    }
    _removeInactiveAction(action6) {
        const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action6._cacheIndex;
        lastInactiveAction._cacheIndex = cacheIndex;
        actions[cacheIndex] = lastInactiveAction;
        actions.pop();
        action6._cacheIndex = null;
        const clipUuid = action6._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action6._byClipCacheIndex;
        lastKnownAction._byClipCacheIndex = byClipCacheIndex;
        knownActionsForClip[byClipCacheIndex] = lastKnownAction;
        knownActionsForClip.pop();
        action6._byClipCacheIndex = null;
        const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action6._localRoot || this._root).uuid;
        delete actionByRoot[rootUuid];
        if (knownActionsForClip.length === 0) delete actionsByClip[clipUuid];
        this._removeInactiveBindingsForAction(action6);
    }
    _removeInactiveBindingsForAction(action7) {
        const bindings = action7._propertyBindings;
        for(let i = 0, n = bindings.length; i !== n; ++i){
            const binding = bindings[i];
            if (--binding.referenceCount === 0) this._removeInactiveBinding(binding);
        }
    }
    _lendAction(action8) {
        // [ active actions |  inactive actions  ]
        // [  active actions >| inactive actions ]
        //                 s        a
        //                  <-swap->
        //                 a        s
        const actions = this._actions, prevIndex = action8._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
        action8._cacheIndex = lastActiveIndex;
        actions[lastActiveIndex] = action8;
        firstInactiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = firstInactiveAction;
    }
    _takeBackAction(action9) {
        // [  active actions  | inactive actions ]
        // [ active actions |< inactive actions  ]
        //        a        s
        //         <-swap->
        //        s        a
        const actions = this._actions, prevIndex = action9._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
        action9._cacheIndex = firstInactiveIndex;
        actions[firstInactiveIndex] = action9;
        lastActiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = lastActiveAction;
    }
    // Memory management for PropertyMixer objects
    _addInactiveBinding(binding1, rootUuid1, trackName1) {
        const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
        let bindingByName = bindingsByRoot[rootUuid1];
        if (bindingByName === undefined) {
            bindingByName = {
            };
            bindingsByRoot[rootUuid1] = bindingByName;
        }
        bindingByName[trackName1] = binding1;
        binding1._cacheIndex = bindings.length;
        bindings.push(binding1);
    }
    _removeInactiveBinding(binding2) {
        const bindings = this._bindings, propBinding = binding2.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding2._cacheIndex;
        lastInactiveBinding._cacheIndex = cacheIndex;
        bindings[cacheIndex] = lastInactiveBinding;
        bindings.pop();
        delete bindingByName[trackName];
        if (Object.keys(bindingByName).length === 0) delete bindingsByRoot[rootUuid];
    }
    _lendBinding(binding3) {
        const bindings = this._bindings, prevIndex = binding3._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
        binding3._cacheIndex = lastActiveIndex;
        bindings[lastActiveIndex] = binding3;
        firstInactiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = firstInactiveBinding;
    }
    _takeBackBinding(binding4) {
        const bindings = this._bindings, prevIndex = binding4._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
        binding4._cacheIndex = firstInactiveIndex;
        bindings[firstInactiveIndex] = binding4;
        lastActiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = lastActiveBinding;
    }
    // Memory management of Interpolants for weight and time scale
    _lendControlInterpolant() {
        const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
        let interpolant = interpolants[lastActiveIndex];
        if (interpolant === undefined) {
            interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
            interpolant.__cacheIndex = lastActiveIndex;
            interpolants[lastActiveIndex] = interpolant;
        }
        return interpolant;
    }
    _takeBackControlInterpolant(interpolant) {
        const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
        interpolant.__cacheIndex = firstInactiveIndex;
        interpolants[firstInactiveIndex] = interpolant;
        lastActiveInterpolant.__cacheIndex = prevIndex;
        interpolants[prevIndex] = lastActiveInterpolant;
    }
    // return an action for a clip optionally using a custom root target
    // object (this method allocates a lot of dynamic memory in case a
    // previously unknown clip/root combination is specified)
    clipAction(clip2, optionalRoot, blendMode2) {
        const root = optionalRoot || this._root, rootUuid = root.uuid;
        let clipObject = typeof clip2 === 'string' ? AnimationClip.findByName(root, clip2) : clip2;
        const clipUuid = clipObject !== null ? clipObject.uuid : clip2;
        const actionsForClip = this._actionsByClip[clipUuid];
        let prototypeAction = null;
        if (blendMode2 === undefined) {
            if (clipObject !== null) blendMode2 = clipObject.blendMode;
            else blendMode2 = NormalAnimationBlendMode;
        }
        if (actionsForClip !== undefined) {
            const existingAction = actionsForClip.actionByRoot[rootUuid];
            if (existingAction !== undefined && existingAction.blendMode === blendMode2) return existingAction;
            // we know the clip, so we don't have to parse all
            // the bindings again but can just copy
            prototypeAction = actionsForClip.knownActions[0];
            // also, take the clip from the prototype action
            if (clipObject === null) clipObject = prototypeAction._clip;
        }
        // clip must be known when specified via string
        if (clipObject === null) return null;
        // allocate all resources required to run it
        const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode2);
        this._bindAction(newAction, prototypeAction);
        // and make the action known to the memory manager
        this._addInactiveAction(newAction, clipUuid, rootUuid);
        return newAction;
    }
    // get an existing action
    existingAction(clip3, optionalRoot1) {
        const root = optionalRoot1 || this._root, rootUuid = root.uuid, clipObject = typeof clip3 === 'string' ? AnimationClip.findByName(root, clip3) : clip3, clipUuid = clipObject ? clipObject.uuid : clip3, actionsForClip = this._actionsByClip[clipUuid];
        if (actionsForClip !== undefined) return actionsForClip.actionByRoot[rootUuid] || null;
        return null;
    }
    // deactivates all previously scheduled actions
    stopAllAction() {
        const actions = this._actions, nActions = this._nActiveActions;
        for(let i = nActions - 1; i >= 0; --i)actions[i].stop();
        return this;
    }
    // advance the time and update apply the animation
    update(deltaTime2) {
        deltaTime2 *= this.timeScale;
        const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime2, timeDirection = Math.sign(deltaTime2), accuIndex = this._accuIndex ^= 1;
        // run active actions
        for(let i = 0; i !== nActions; ++i){
            const action = actions[i];
            action._update(time, deltaTime2, timeDirection, accuIndex);
        }
        // update scene graph
        const bindings = this._bindings, nBindings = this._nActiveBindings;
        for(let i46 = 0; i46 !== nBindings; ++i46)bindings[i46].apply(accuIndex);
        return this;
    }
    // Allows you to seek to a specific time in an animation.
    setTime(timeInSeconds) {
        this.time = 0; // Zero out time attribute for AnimationMixer object;
        for(let i = 0; i < this._actions.length; i++)this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.
        return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
    }
    // return this mixer's root target object
    getRoot() {
        return this._root;
    }
    // free all resources specific to a particular clip
    uncacheClip(clip4) {
        const actions = this._actions, clipUuid = clip4.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip !== undefined) {
            // note: just calling _removeInactiveAction would mess up the
            // iteration state and also require updating the state we can
            // just throw away
            const actionsToRemove = actionsForClip.knownActions;
            for(let i = 0, n = actionsToRemove.length; i !== n; ++i){
                const action = actionsToRemove[i];
                this._deactivateAction(action);
                const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
                action._cacheIndex = null;
                action._byClipCacheIndex = null;
                lastInactiveAction._cacheIndex = cacheIndex;
                actions[cacheIndex] = lastInactiveAction;
                actions.pop();
                this._removeInactiveBindingsForAction(action);
            }
            delete actionsByClip[clipUuid];
        }
    }
    // free all resources specific to a particular root target object
    uncacheRoot(root3) {
        const rootUuid = root3.uuid, actionsByClip = this._actionsByClip;
        for(const clipUuid in actionsByClip){
            const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
            if (action !== undefined) {
                this._deactivateAction(action);
                this._removeInactiveAction(action);
            }
        }
        const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
        if (bindingByName !== undefined) for(const trackName in bindingByName){
            const binding = bindingByName[trackName];
            binding.restoreOriginalState();
            this._removeInactiveBinding(binding);
        }
    }
    // remove a targeted clip from the cache
    uncacheAction(clip5, optionalRoot2) {
        const action = this.existingAction(clip5, optionalRoot2);
        if (action !== null) {
            this._deactivateAction(action);
            this._removeInactiveAction(action);
        }
    }
}
AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);
class Uniform {
    constructor(value49){
        if (typeof value49 === 'string') {
            console.warn('THREE.Uniform: Type parameter is no longer needed.');
            value49 = arguments[1];
        }
        this.value = value49;
    }
    clone() {
        return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
    }
}
class InstancedInterleavedBuffer extends InterleavedBuffer {
    constructor(array37, stride5, meshPerAttribute1 = 1){
        super(array37, stride5);
        this.meshPerAttribute = meshPerAttribute1;
    }
    copy(source60) {
        super.copy(source60);
        this.meshPerAttribute = source60.meshPerAttribute;
        return this;
    }
    clone(data27) {
        const ib = super.clone(data27);
        ib.meshPerAttribute = this.meshPerAttribute;
        return ib;
    }
    toJSON(data28) {
        const json = super.toJSON(data28);
        json.isInstancedInterleavedBuffer = true;
        json.meshPerAttribute = this.meshPerAttribute;
        return json;
    }
}
InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;
class GLBufferAttribute {
    constructor(buffer21, type, itemSize13, elementSize, count4){
        this.buffer = buffer21;
        this.type = type;
        this.itemSize = itemSize13;
        this.elementSize = elementSize;
        this.count = count4;
        this.version = 0;
    }
    set needsUpdate(value50) {
        if (value50 === true) this.version++;
    }
    setBuffer(buffer22) {
        this.buffer = buffer22;
        return this;
    }
    setType(type11, elementSize1) {
        this.type = type11;
        this.elementSize = elementSize1;
        return this;
    }
    setItemSize(itemSize14) {
        this.itemSize = itemSize14;
        return this;
    }
    setCount(count5) {
        this.count = count5;
        return this;
    }
}
GLBufferAttribute.prototype.isGLBufferAttribute = true;
class Raycaster {
    constructor(origin2, direction5, near8 = 0, far8 = Infinity){
        this.ray = new Ray(origin2, direction5);
        // direction is assumed to be normalized (for accurate distance calculations)
        this.near = near8;
        this.far = far8;
        this.camera = null;
        this.layers = new Layers();
        this.params = {
            Mesh: {
            },
            Line: {
                threshold: 1
            },
            LOD: {
            },
            Points: {
                threshold: 1
            },
            Sprite: {
            }
        };
    }
    set(origin3, direction6) {
        // direction is assumed to be normalized (for accurate distance calculations)
        this.ray.set(origin3, direction6);
    }
    setFromCamera(coords, camera5) {
        if (camera5 && camera5.isPerspectiveCamera) {
            this.ray.origin.setFromMatrixPosition(camera5.matrixWorld);
            this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera5).sub(this.ray.origin).normalize();
            this.camera = camera5;
        } else if (camera5 && camera5.isOrthographicCamera) {
            this.ray.origin.set(coords.x, coords.y, (camera5.near + camera5.far) / (camera5.near - camera5.far)).unproject(camera5); // set origin in plane of camera
            this.ray.direction.set(0, 0, -1).transformDirection(camera5.matrixWorld);
            this.camera = camera5;
        } else console.error('THREE.Raycaster: Unsupported camera type: ' + camera5.type);
    }
    intersectObject(object9, recursive6 = true, intersects9 = []) {
        intersectObject(object9, this, intersects9, recursive6);
        intersects9.sort(ascSort);
        return intersects9;
    }
    intersectObjects(objects, recursive7 = true, intersects8 = []) {
        for(let i = 0, l = objects.length; i < l; i++)intersectObject(objects[i], this, intersects8, recursive7);
        intersects8.sort(ascSort);
        return intersects8;
    }
}
function ascSort(a, b) {
    return a.distance - b.distance;
}
function intersectObject(object, raycaster, intersects, recursive) {
    if (object.layers.test(raycaster.layers)) object.raycast(raycaster, intersects);
    if (recursive === true) {
        const children = object.children;
        for(let i = 0, l = children.length; i < l; i++)intersectObject(children[i], raycaster, intersects, true);
    }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */ class Spherical {
    constructor(radius15 = 1, phi1 = 0, theta = 0){
        this.radius = radius15;
        this.phi = phi1; // polar angle
        this.theta = theta; // azimuthal angle
        return this;
    }
    set(radius16, phi2, theta7) {
        this.radius = radius16;
        this.phi = phi2;
        this.theta = theta7;
        return this;
    }
    copy(other) {
        this.radius = other.radius;
        this.phi = other.phi;
        this.theta = other.theta;
        return this;
    }
    // restrict phi to be betwee EPS and PI-EPS
    makeSafe() {
        const EPS = 0.000001;
        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
        return this;
    }
    setFromVector3(v49) {
        return this.setFromCartesianCoords(v49.x, v49.y, v49.z);
    }
    setFromCartesianCoords(x36, y38, z25) {
        this.radius = Math.sqrt(x36 * x36 + y38 * y38 + z25 * z25);
        if (this.radius === 0) {
            this.theta = 0;
            this.phi = 0;
        } else {
            this.theta = Math.atan2(x36, z25);
            this.phi = Math.acos(clamp(y38 / this.radius, -1, 1));
        }
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 */ class Cylindrical {
    constructor(radius17 = 1, theta8 = 0, y35 = 0){
        this.radius = radius17; // distance from the origin to a point in the x-z plane
        this.theta = theta8; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
        this.y = y35; // height above the x-z plane
        return this;
    }
    set(radius18, theta9, y36) {
        this.radius = radius18;
        this.theta = theta9;
        this.y = y36;
        return this;
    }
    copy(other1) {
        this.radius = other1.radius;
        this.theta = other1.theta;
        this.y = other1.y;
        return this;
    }
    setFromVector3(v48) {
        return this.setFromCartesianCoords(v48.x, v48.y, v48.z);
    }
    setFromCartesianCoords(x35, y37, z24) {
        this.radius = Math.sqrt(x35 * x35 + z24 * z24);
        this.theta = Math.atan2(x35, z24);
        this.y = y37;
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const _vector$4 = /*@__PURE__*/ new Vector2();
class Box2 {
    constructor(min = new Vector2(Infinity, Infinity), max = new Vector2(-Infinity, -Infinity)){
        this.min = min;
        this.max = max;
    }
    set(min9, max9) {
        this.min.copy(min9);
        this.max.copy(max9);
        return this;
    }
    setFromPoints(points11) {
        this.makeEmpty();
        for(let i = 0, il = points11.length; i < il; i++)this.expandByPoint(points11[i]);
        return this;
    }
    setFromCenterAndSize(center, size8) {
        const halfSize = _vector$4.copy(size8).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(box12) {
        this.min.copy(box12.min);
        this.max.copy(box12.max);
        return this;
    }
    makeEmpty() {
        this.min.x = this.min.y = Infinity;
        this.max.x = this.max.y = -Infinity;
        return this;
    }
    isEmpty() {
        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
        return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(target35) {
        return this.isEmpty() ? target35.set(0, 0) : target35.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target36) {
        return this.isEmpty() ? target36.set(0, 0) : target36.subVectors(this.max, this.min);
    }
    expandByPoint(point29) {
        this.min.min(point29);
        this.max.max(point29);
        return this;
    }
    expandByVector(vector5) {
        this.min.sub(vector5);
        this.max.add(vector5);
        return this;
    }
    expandByScalar(scalar11) {
        this.min.addScalar(-scalar11);
        this.max.addScalar(scalar11);
        return this;
    }
    containsPoint(point23) {
        return point23.x < this.min.x || point23.x > this.max.x || point23.y < this.min.y || point23.y > this.max.y ? false : true;
    }
    containsBox(box13) {
        return this.min.x <= box13.min.x && box13.max.x <= this.max.x && this.min.y <= box13.min.y && box13.max.y <= this.max.y;
    }
    getParameter(point24, target37) {
        // This can potentially have a divide by zero if the box
        // has a size dimension of 0.
        return target37.set((point24.x - this.min.x) / (this.max.x - this.min.x), (point24.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(box14) {
        // using 4 splitting planes to rule out intersections
        return box14.max.x < this.min.x || box14.min.x > this.max.x || box14.max.y < this.min.y || box14.min.y > this.max.y ? false : true;
    }
    clampPoint(point25, target38) {
        return target38.copy(point25).clamp(this.min, this.max);
    }
    distanceToPoint(point26) {
        const clampedPoint = _vector$4.copy(point26).clamp(this.min, this.max);
        return clampedPoint.sub(point26).length();
    }
    intersect(box15) {
        this.min.max(box15.min);
        this.max.min(box15.max);
        return this;
    }
    union(box16) {
        this.min.min(box16.min);
        this.max.max(box16.max);
        return this;
    }
    translate(offset47) {
        this.min.add(offset47);
        this.max.add(offset47);
        return this;
    }
    equals(box17) {
        return box17.min.equals(this.min) && box17.max.equals(this.max);
    }
}
Box2.prototype.isBox2 = true;
const _startP = /*@__PURE__*/ new Vector3();
const _startEnd = /*@__PURE__*/ new Vector3();
class Line3 {
    constructor(start4 = new Vector3(), end = new Vector3()){
        this.start = start4;
        this.end = end;
    }
    set(start3, end1) {
        this.start.copy(start3);
        this.end.copy(end1);
        return this;
    }
    copy(line2) {
        this.start.copy(line2.start);
        this.end.copy(line2.end);
        return this;
    }
    getCenter(target39) {
        return target39.addVectors(this.start, this.end).multiplyScalar(0.5);
    }
    delta(target40) {
        return target40.subVectors(this.end, this.start);
    }
    distanceSq() {
        return this.start.distanceToSquared(this.end);
    }
    distance() {
        return this.start.distanceTo(this.end);
    }
    at(t27, target41) {
        return this.delta(target41).multiplyScalar(t27).add(this.start);
    }
    closestPointToPointParameter(point27, clampToLine) {
        _startP.subVectors(point27, this.start);
        _startEnd.subVectors(this.end, this.start);
        const startEnd2 = _startEnd.dot(_startEnd);
        const startEnd_startP = _startEnd.dot(_startP);
        let t = startEnd_startP / startEnd2;
        if (clampToLine) t = clamp(t, 0, 1);
        return t;
    }
    closestPointToPoint(point28, clampToLine1, target42) {
        const t = this.closestPointToPointParameter(point28, clampToLine1);
        return this.delta(target42).multiplyScalar(t).add(this.start);
    }
    applyMatrix4(matrix9) {
        this.start.applyMatrix4(matrix9);
        this.end.applyMatrix4(matrix9);
        return this;
    }
    equals(line3) {
        return line3.start.equals(this.start) && line3.end.equals(this.end);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const _vector$3 = /*@__PURE__*/ new Vector3();
class SpotLightHelper extends Object3D {
    constructor(light3, color22){
        super();
        this.light = light3;
        this.light.updateMatrixWorld();
        this.matrix = light3.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color22;
        const geometry = new BufferGeometry();
        const positions = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
        ];
        for(let i = 0, j = 1, l = 32; i < l; i++, j++){
            const p1 = i / l * Math.PI * 2;
            const p2 = j / l * Math.PI * 2;
            positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
        }
        geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
        const material = new LineBasicMaterial({
            fog: false,
            toneMapped: false
        });
        this.cone = new LineSegments(geometry, material);
        this.add(this.cone);
        this.update();
    }
    dispose() {
        this.cone.geometry.dispose();
        this.cone.material.dispose();
    }
    update() {
        this.light.updateMatrixWorld();
        const coneLength = this.light.distance ? this.light.distance : 1000;
        const coneWidth = coneLength * Math.tan(this.light.angle);
        this.cone.scale.set(coneWidth, coneWidth, coneLength);
        _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
        this.cone.lookAt(_vector$3);
        if (this.color !== undefined) this.cone.material.color.set(this.color);
        else this.cone.material.color.copy(this.light.color);
    }
}
const _vector$2 = /*@__PURE__*/ new Vector3();
const _boneMatrix = /*@__PURE__*/ new Matrix4();
const _matrixWorldInv = /*@__PURE__*/ new Matrix4();
class SkeletonHelper extends LineSegments {
    constructor(object11){
        const bones = getBoneList(object11);
        const geometry = new BufferGeometry();
        const vertices = [];
        const colors = [];
        const color1 = new Color(0, 0, 1);
        const color2 = new Color(0, 1, 0);
        for(let i = 0; i < bones.length; i++){
            const bone = bones[i];
            if (bone.parent && bone.parent.isBone) {
                vertices.push(0, 0, 0);
                vertices.push(0, 0, 0);
                colors.push(color1.r, color1.g, color1.b);
                colors.push(color2.r, color2.g, color2.b);
            }
        }
        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
        const material = new LineBasicMaterial({
            vertexColors: true,
            depthTest: false,
            depthWrite: false,
            toneMapped: false,
            transparent: true
        });
        super(geometry, material);
        this.type = 'SkeletonHelper';
        this.isSkeletonHelper = true;
        this.root = object11;
        this.bones = bones;
        this.matrix = object11.matrixWorld;
        this.matrixAutoUpdate = false;
    }
    updateMatrixWorld(force5) {
        const bones = this.bones;
        const geometry = this.geometry;
        const position = geometry.getAttribute('position');
        _matrixWorldInv.copy(this.root.matrixWorld).invert();
        for(let i = 0, j = 0; i < bones.length; i++){
            const bone = bones[i];
            if (bone.parent && bone.parent.isBone) {
                _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
                _vector$2.setFromMatrixPosition(_boneMatrix);
                position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);
                _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
                _vector$2.setFromMatrixPosition(_boneMatrix);
                position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);
                j += 2;
            }
        }
        geometry.getAttribute('position').needsUpdate = true;
        super.updateMatrixWorld(force5);
    }
}
function getBoneList(object) {
    const boneList = [];
    if (object && object.isBone) boneList.push(object);
    for(let i = 0; i < object.children.length; i++)boneList.push.apply(boneList, getBoneList(object.children[i]));
    return boneList;
}
class PointLightHelper extends Mesh {
    constructor(light4, sphereSize, color23){
        const geometry = new SphereGeometry(sphereSize, 4, 2);
        const material = new MeshBasicMaterial({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        super(geometry, material);
        this.light = light4;
        this.light.updateMatrixWorld();
        this.color = color23;
        this.type = 'PointLightHelper';
        this.matrix = this.light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.update();
    /*
	// TODO: delete this comment?
	const distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	const d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/ }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
    update() {
        if (this.color !== undefined) this.material.color.set(this.color);
        else this.material.color.copy(this.light.color);
    /*
		const d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/ }
}
const _vector$1 = /*@__PURE__*/ new Vector3();
const _color1 = /*@__PURE__*/ new Color();
const _color2 = /*@__PURE__*/ new Color();
class HemisphereLightHelper extends Object3D {
    constructor(light5, size3, color24){
        super();
        this.light = light5;
        this.light.updateMatrixWorld();
        this.matrix = light5.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color24;
        const geometry = new OctahedronGeometry(size3);
        geometry.rotateY(Math.PI * 0.5);
        this.material = new MeshBasicMaterial({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        if (this.color === undefined) this.material.vertexColors = true;
        const position = geometry.getAttribute('position');
        const colors = new Float32Array(position.count * 3);
        geometry.setAttribute('color', new BufferAttribute(colors, 3));
        this.add(new Mesh(geometry, this.material));
        this.update();
    }
    dispose() {
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
    }
    update() {
        const mesh = this.children[0];
        if (this.color !== undefined) this.material.color.set(this.color);
        else {
            const colors = mesh.geometry.getAttribute('color');
            _color1.copy(this.light.color);
            _color2.copy(this.light.groundColor);
            for(let i = 0, l = colors.count; i < l; i++){
                const color = i < l / 2 ? _color1 : _color2;
                colors.setXYZ(i, color.r, color.g, color.b);
            }
            colors.needsUpdate = true;
        }
        mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
    }
}
class GridHelper extends LineSegments {
    constructor(size4 = 10, divisions7 = 10, color110 = 4473924, color25 = 8947848){
        color110 = new Color(color110);
        color25 = new Color(color25);
        const center = divisions7 / 2;
        const step = size4 / divisions7;
        const halfSize = size4 / 2;
        const vertices = [], colors = [];
        for(let i = 0, j = 0, k = -halfSize; i <= divisions7; i++, k += step){
            vertices.push(-halfSize, 0, k, halfSize, 0, k);
            vertices.push(k, 0, -halfSize, k, 0, halfSize);
            const color = i === center ? color110 : color25;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
        }
        const geometry = new BufferGeometry();
        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
        const material = new LineBasicMaterial({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = 'GridHelper';
    }
}
class PolarGridHelper extends LineSegments {
    constructor(radius19 = 10, radials = 16, circles = 8, divisions8 = 64, color111 = 4473924, color26 = 8947848){
        color111 = new Color(color111);
        color26 = new Color(color26);
        const vertices = [];
        const colors = [];
        // create the radials
        for(let i = 0; i <= radials; i++){
            const v = i / radials * (Math.PI * 2);
            const x = Math.sin(v) * radius19;
            const z = Math.cos(v) * radius19;
            vertices.push(0, 0, 0);
            vertices.push(x, 0, z);
            const color = i & 1 ? color111 : color26;
            colors.push(color.r, color.g, color.b);
            colors.push(color.r, color.g, color.b);
        }
        // create the circles
        for(let i47 = 0; i47 <= circles; i47++){
            const color = i47 & 1 ? color111 : color26;
            const r = radius19 - radius19 / circles * i47;
            for(let j = 0; j < divisions8; j++){
                // first vertex
                let v = j / divisions8 * (Math.PI * 2);
                let x = Math.sin(v) * r;
                let z = Math.cos(v) * r;
                vertices.push(x, 0, z);
                colors.push(color.r, color.g, color.b);
                // second vertex
                v = (j + 1) / divisions8 * (Math.PI * 2);
                x = Math.sin(v) * r;
                z = Math.cos(v) * r;
                vertices.push(x, 0, z);
                colors.push(color.r, color.g, color.b);
            }
        }
        const geometry = new BufferGeometry();
        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
        const material = new LineBasicMaterial({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = 'PolarGridHelper';
    }
}
const _v1 = /*@__PURE__*/ new Vector3();
const _v2 = /*@__PURE__*/ new Vector3();
const _v3 = /*@__PURE__*/ new Vector3();
class DirectionalLightHelper extends Object3D {
    constructor(light6, size5, color27){
        super();
        this.light = light6;
        this.light.updateMatrixWorld();
        this.matrix = light6.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color27;
        if (size5 === undefined) size5 = 1;
        let geometry = new BufferGeometry();
        geometry.setAttribute('position', new Float32BufferAttribute([
            -size5,
            size5,
            0,
            size5,
            size5,
            0,
            size5,
            -size5,
            0,
            -size5,
            -size5,
            0,
            -size5,
            size5,
            0
        ], 3));
        const material = new LineBasicMaterial({
            fog: false,
            toneMapped: false
        });
        this.lightPlane = new Line(geometry, material);
        this.add(this.lightPlane);
        geometry = new BufferGeometry();
        geometry.setAttribute('position', new Float32BufferAttribute([
            0,
            0,
            0,
            0,
            0,
            1
        ], 3));
        this.targetLine = new Line(geometry, material);
        this.add(this.targetLine);
        this.update();
    }
    dispose() {
        this.lightPlane.geometry.dispose();
        this.lightPlane.material.dispose();
        this.targetLine.geometry.dispose();
        this.targetLine.material.dispose();
    }
    update() {
        _v1.setFromMatrixPosition(this.light.matrixWorld);
        _v2.setFromMatrixPosition(this.light.target.matrixWorld);
        _v3.subVectors(_v2, _v1);
        this.lightPlane.lookAt(_v2);
        if (this.color !== undefined) {
            this.lightPlane.material.color.set(this.color);
            this.targetLine.material.color.set(this.color);
        } else {
            this.lightPlane.material.color.copy(this.light.color);
            this.targetLine.material.color.copy(this.light.color);
        }
        this.targetLine.lookAt(_v2);
        this.targetLine.scale.z = _v3.length();
    }
}
const _vector = /*@__PURE__*/ new Vector3();
const _camera = /*@__PURE__*/ new Camera();
/**
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
 */ class CameraHelper extends LineSegments {
    constructor(camera6){
        const geometry = new BufferGeometry();
        const material = new LineBasicMaterial({
            color: 16777215,
            vertexColors: true,
            toneMapped: false
        });
        const vertices = [];
        const colors = [];
        const pointMap = {
        };
        // colors
        const colorFrustum = new Color(16755200);
        const colorCone = new Color(16711680);
        const colorUp = new Color(43775);
        const colorTarget = new Color(16777215);
        const colorCross = new Color(3355443);
        // near
        addLine('n1', 'n2', colorFrustum);
        addLine('n2', 'n4', colorFrustum);
        addLine('n4', 'n3', colorFrustum);
        addLine('n3', 'n1', colorFrustum);
        // far
        addLine('f1', 'f2', colorFrustum);
        addLine('f2', 'f4', colorFrustum);
        addLine('f4', 'f3', colorFrustum);
        addLine('f3', 'f1', colorFrustum);
        // sides
        addLine('n1', 'f1', colorFrustum);
        addLine('n2', 'f2', colorFrustum);
        addLine('n3', 'f3', colorFrustum);
        addLine('n4', 'f4', colorFrustum);
        // cone
        addLine('p', 'n1', colorCone);
        addLine('p', 'n2', colorCone);
        addLine('p', 'n3', colorCone);
        addLine('p', 'n4', colorCone);
        // up
        addLine('u1', 'u2', colorUp);
        addLine('u2', 'u3', colorUp);
        addLine('u3', 'u1', colorUp);
        // target
        addLine('c', 't', colorTarget);
        addLine('p', 'c', colorCross);
        // cross
        addLine('cn1', 'cn2', colorCross);
        addLine('cn3', 'cn4', colorCross);
        addLine('cf1', 'cf2', colorCross);
        addLine('cf3', 'cf4', colorCross);
        function addLine(a, b, color) {
            addPoint(a, color);
            addPoint(b, color);
        }
        function addPoint(id, color) {
            vertices.push(0, 0, 0);
            colors.push(color.r, color.g, color.b);
            if (pointMap[id] === undefined) pointMap[id] = [];
            pointMap[id].push(vertices.length / 3 - 1);
        }
        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
        super(geometry, material);
        this.type = 'CameraHelper';
        this.camera = camera6;
        if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();
        this.matrix = camera6.matrixWorld;
        this.matrixAutoUpdate = false;
        this.pointMap = pointMap;
        this.update();
    }
    update() {
        const geometry = this.geometry;
        const pointMap = this.pointMap;
        const w = 1, h = 1;
        // we need just camera projection matrix inverse
        // world matrix must be identity
        _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
        // center / target
        setPoint('c', pointMap, geometry, _camera, 0, 0, -1);
        setPoint('t', pointMap, geometry, _camera, 0, 0, 1);
        // near
        setPoint('n1', pointMap, geometry, _camera, -w, -h, -1);
        setPoint('n2', pointMap, geometry, _camera, w, -h, -1);
        setPoint('n3', pointMap, geometry, _camera, -w, h, -1);
        setPoint('n4', pointMap, geometry, _camera, w, h, -1);
        // far
        setPoint('f1', pointMap, geometry, _camera, -w, -h, 1);
        setPoint('f2', pointMap, geometry, _camera, w, -h, 1);
        setPoint('f3', pointMap, geometry, _camera, -w, h, 1);
        setPoint('f4', pointMap, geometry, _camera, w, h, 1);
        // up
        setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
        setPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
        setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1);
        // cross
        setPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);
        setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);
        setPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);
        setPoint('cf4', pointMap, geometry, _camera, 0, h, 1);
        setPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);
        setPoint('cn2', pointMap, geometry, _camera, w, 0, -1);
        setPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);
        setPoint('cn4', pointMap, geometry, _camera, 0, h, -1);
        geometry.getAttribute('position').needsUpdate = true;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
function setPoint(point, pointMap, geometry, camera, x, y, z) {
    _vector.set(x, y, z).unproject(camera);
    const points = pointMap[point];
    if (points !== undefined) {
        const position = geometry.getAttribute('position');
        for(let i = 0, l = points.length; i < l; i++)position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);
    }
}
const _box = /*@__PURE__*/ new Box3();
class BoxHelper extends LineSegments {
    constructor(object14, color32 = 16776960){
        const indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        const positions = new Float32Array(24);
        const geometry = new BufferGeometry();
        geometry.setIndex(new BufferAttribute(indices, 1));
        geometry.setAttribute('position', new BufferAttribute(positions, 3));
        super(geometry, new LineBasicMaterial({
            color: color32,
            toneMapped: false
        }));
        this.object = object14;
        this.type = 'BoxHelper';
        this.matrixAutoUpdate = false;
        this.update();
    }
    update(object12) {
        if (object12 !== undefined) console.warn('THREE.BoxHelper: .update() has no longer arguments.');
        if (this.object !== undefined) _box.setFromObject(this.object);
        if (_box.isEmpty()) return;
        const min = _box.min;
        const max = _box.max;
        /*
			5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/ const position = this.geometry.attributes.position;
        const array = position.array;
        array[0] = max.x;
        array[1] = max.y;
        array[2] = max.z;
        array[3] = min.x;
        array[4] = max.y;
        array[5] = max.z;
        array[6] = min.x;
        array[7] = min.y;
        array[8] = max.z;
        array[9] = max.x;
        array[10] = min.y;
        array[11] = max.z;
        array[12] = max.x;
        array[13] = max.y;
        array[14] = min.z;
        array[15] = min.x;
        array[16] = max.y;
        array[17] = min.z;
        array[18] = min.x;
        array[19] = min.y;
        array[20] = min.z;
        array[21] = max.x;
        array[22] = min.y;
        array[23] = min.z;
        position.needsUpdate = true;
        this.geometry.computeBoundingSphere();
    }
    setFromObject(object13) {
        this.object = object13;
        this.update();
        return this;
    }
    copy(source61) {
        LineSegments.prototype.copy.call(this, source61);
        this.object = source61.object;
        return this;
    }
}
class Box3Helper extends LineSegments {
    constructor(box18, color29 = 16776960){
        const indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        const positions = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            -1
        ];
        const geometry = new BufferGeometry();
        geometry.setIndex(new BufferAttribute(indices, 1));
        geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
        super(geometry, new LineBasicMaterial({
            color: color29,
            toneMapped: false
        }));
        this.box = box18;
        this.type = 'Box3Helper';
        this.geometry.computeBoundingSphere();
    }
    updateMatrixWorld(force6) {
        const box = this.box;
        if (box.isEmpty()) return;
        box.getCenter(this.position);
        box.getSize(this.scale);
        this.scale.multiplyScalar(0.5);
        super.updateMatrixWorld(force6);
    }
}
class PlaneHelper extends Line {
    constructor(plane8, size6 = 1, hex1 = 16776960){
        const color = hex1;
        const positions = [
            1,
            -1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ];
        const geometry = new BufferGeometry();
        geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
        geometry.computeBoundingSphere();
        super(geometry, new LineBasicMaterial({
            color: color,
            toneMapped: false
        }));
        this.type = 'PlaneHelper';
        this.plane = plane8;
        this.size = size6;
        const positions2 = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1
        ];
        const geometry2 = new BufferGeometry();
        geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));
        geometry2.computeBoundingSphere();
        this.add(new Mesh(geometry2, new MeshBasicMaterial({
            color: color,
            opacity: 0.2,
            transparent: true,
            depthWrite: false,
            toneMapped: false
        })));
    }
    updateMatrixWorld(force7) {
        let scale = -this.plane.constant;
        if (Math.abs(scale) < 0.00000001) scale = 0.00000001; // sign does not matter
        this.scale.set(0.5 * this.size, 0.5 * this.size, scale);
        this.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here
        this.lookAt(this.plane.normal);
        super.updateMatrixWorld(force7);
    }
}
const _axis = /*@__PURE__*/ new Vector3();
let _lineGeometry, _coneGeometry;
class ArrowHelper extends Object3D {
    // dir is assumed to be normalized
    constructor(dir = new Vector3(0, 0, 1), origin4 = new Vector3(0, 0, 0), length = 1, color30 = 16776960, headLength = length * 0.2, headWidth = headLength * 0.2){
        super();
        this.type = 'ArrowHelper';
        if (_lineGeometry === undefined) {
            _lineGeometry = new BufferGeometry();
            _lineGeometry.setAttribute('position', new Float32BufferAttribute([
                0,
                0,
                0,
                0,
                1,
                0
            ], 3));
            _coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);
            _coneGeometry.translate(0, -0.5, 0);
        }
        this.position.copy(origin4);
        this.line = new Line(_lineGeometry, new LineBasicMaterial({
            color: color30,
            toneMapped: false
        }));
        this.line.matrixAutoUpdate = false;
        this.add(this.line);
        this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({
            color: color30,
            toneMapped: false
        }));
        this.cone.matrixAutoUpdate = false;
        this.add(this.cone);
        this.setDirection(dir);
        this.setLength(length, headLength, headWidth);
    }
    setDirection(dir1) {
        // dir is assumed to be normalized
        if (dir1.y > 0.99999) this.quaternion.set(0, 0, 0, 1);
        else if (dir1.y < -0.99999) this.quaternion.set(1, 0, 0, 0);
        else {
            _axis.set(dir1.z, 0, -dir1.x).normalize();
            const radians = Math.acos(dir1.y);
            this.quaternion.setFromAxisAngle(_axis, radians);
        }
    }
    setLength(length4, headLength1 = length4 * 0.2, headWidth1 = headLength1 * 0.2) {
        this.line.scale.set(1, Math.max(0.0001, length4 - headLength1), 1); // see #17458
        this.line.updateMatrix();
        this.cone.scale.set(headWidth1, headLength1, headWidth1);
        this.cone.position.y = length4;
        this.cone.updateMatrix();
    }
    setColor(color31) {
        this.line.material.color.set(color31);
        this.cone.material.color.set(color31);
    }
    copy(source62) {
        super.copy(source62, false);
        this.line.copy(source62.line);
        this.cone.copy(source62.cone);
        return this;
    }
}
class AxesHelper extends LineSegments {
    constructor(size7 = 1){
        const vertices = [
            0,
            0,
            0,
            size7,
            0,
            0,
            0,
            0,
            0,
            0,
            size7,
            0,
            0,
            0,
            0,
            0,
            0,
            size7
        ];
        const colors = [
            1,
            0,
            0,
            1,
            0.6,
            0,
            0,
            1,
            0,
            0.6,
            1,
            0,
            0,
            0,
            1,
            0,
            0.6,
            1
        ];
        const geometry = new BufferGeometry();
        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
        const material = new LineBasicMaterial({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = 'AxesHelper';
    }
    setColors(xAxisColor, yAxisColor, zAxisColor) {
        const color = new Color();
        const array = this.geometry.attributes.color.array;
        color.set(xAxisColor);
        color.toArray(array, 0);
        color.toArray(array, 3);
        color.set(yAxisColor);
        color.toArray(array, 6);
        color.toArray(array, 9);
        color.set(zAxisColor);
        color.toArray(array, 12);
        color.toArray(array, 15);
        this.geometry.attributes.color.needsUpdate = true;
        return this;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class ShapePath {
    constructor(){
        this.type = 'ShapePath';
        this.color = new Color();
        this.subPaths = [];
        this.currentPath = null;
    }
    moveTo(x38, y40) {
        this.currentPath = new Path();
        this.subPaths.push(this.currentPath);
        this.currentPath.moveTo(x38, y40);
        return this;
    }
    lineTo(x37, y39) {
        this.currentPath.lineTo(x37, y39);
        return this;
    }
    quadraticCurveTo(aCPx1, aCPy1, aX8, aY8) {
        this.currentPath.quadraticCurveTo(aCPx1, aCPy1, aX8, aY8);
        return this;
    }
    bezierCurveTo(aCP1x1, aCP1y1, aCP2x1, aCP2y1, aX9, aY9) {
        this.currentPath.bezierCurveTo(aCP1x1, aCP1y1, aCP2x1, aCP2y1, aX9, aY9);
        return this;
    }
    splineThru(pts2) {
        this.currentPath.splineThru(pts2);
        return this;
    }
    toShapes(isCCW, noHoles) {
        function toShapesNoHoles(inSubpaths) {
            const shapes = [];
            for(let i = 0, l = inSubpaths.length; i < l; i++){
                const tmpPath = inSubpaths[i];
                const tmpShape = new Shape();
                tmpShape.curves = tmpPath.curves;
                shapes.push(tmpShape);
            }
            return shapes;
        }
        function isPointInsidePolygon(inPt, inPolygon) {
            const polyLen = inPolygon.length;
            // inPt on polygon contour => immediate success    or
            // toggling of inside/outside at every single! intersection point of an edge
            //  with the horizontal line through inPt, left of inPt
            //  not counting lowerY endpoints of edges and whole edges on that line
            let inside = false;
            for(let p = polyLen - 1, q = 0; q < polyLen; p = q++){
                let edgeLowPt = inPolygon[p];
                let edgeHighPt = inPolygon[q];
                let edgeDx = edgeHighPt.x - edgeLowPt.x;
                let edgeDy = edgeHighPt.y - edgeLowPt.y;
                if (Math.abs(edgeDy) > Number.EPSILON) {
                    // not parallel
                    if (edgeDy < 0) {
                        edgeLowPt = inPolygon[q];
                        edgeDx = -edgeDx;
                        edgeHighPt = inPolygon[p];
                        edgeDy = -edgeDy;
                    }
                    if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
                    if (inPt.y === edgeLowPt.y) {
                        if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
                    // continue;				// no intersection or edgeLowPt => doesn't count !!!
                    } else {
                        const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                        if (perpEdge === 0) return true; // inPt is on contour ?
                        if (perpEdge < 0) continue;
                        inside = !inside; // true intersection left of inPt
                    }
                } else {
                    // parallel or collinear
                    if (inPt.y !== edgeLowPt.y) continue; // parallel
                    // edge lies on the same horizontal line as inPt
                    if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
                // continue;
                }
            }
            return inside;
        }
        const isClockWise = ShapeUtils.isClockWise;
        const subPaths = this.subPaths;
        if (subPaths.length === 0) return [];
        if (noHoles === true) return toShapesNoHoles(subPaths);
        let solid, tmpPath1, tmpShape1;
        const shapes5 = [];
        if (subPaths.length === 1) {
            tmpPath1 = subPaths[0];
            tmpShape1 = new Shape();
            tmpShape1.curves = tmpPath1.curves;
            shapes5.push(tmpShape1);
            return shapes5;
        }
        let holesFirst = !isClockWise(subPaths[0].getPoints());
        holesFirst = isCCW ? !holesFirst : holesFirst;
        // console.log("Holes first", holesFirst);
        const betterShapeHoles = [];
        const newShapes = [];
        let newShapeHoles = [];
        let mainIdx = 0;
        let tmpPoints;
        newShapes[mainIdx] = undefined;
        newShapeHoles[mainIdx] = [];
        for(let i49 = 0, l8 = subPaths.length; i49 < l8; i49++){
            tmpPath1 = subPaths[i49];
            tmpPoints = tmpPath1.getPoints();
            solid = isClockWise(tmpPoints);
            solid = isCCW ? !solid : solid;
            if (solid) {
                if (!holesFirst && newShapes[mainIdx]) mainIdx++;
                newShapes[mainIdx] = {
                    s: new Shape(),
                    p: tmpPoints
                };
                newShapes[mainIdx].s.curves = tmpPath1.curves;
                if (holesFirst) mainIdx++;
                newShapeHoles[mainIdx] = [];
            //console.log('cw', i);
            } else newShapeHoles[mainIdx].push({
                h: tmpPath1,
                p: tmpPoints[0]
            });
        }
        // only Holes? -> probably all Shapes with wrong orientation
        if (!newShapes[0]) return toShapesNoHoles(subPaths);
        if (newShapes.length > 1) {
            let ambiguous = false;
            const toChange = [];
            for(let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++)betterShapeHoles[sIdx] = [];
            for(let sIdx1 = 0, sLen1 = newShapes.length; sIdx1 < sLen1; sIdx1++){
                const sho = newShapeHoles[sIdx1];
                for(let hIdx = 0; hIdx < sho.length; hIdx++){
                    const ho = sho[hIdx];
                    let hole_unassigned = true;
                    for(let s2Idx = 0; s2Idx < newShapes.length; s2Idx++)if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                        if (sIdx1 !== s2Idx) toChange.push({
                            froms: sIdx1,
                            tos: s2Idx,
                            hole: hIdx
                        });
                        if (hole_unassigned) {
                            hole_unassigned = false;
                            betterShapeHoles[s2Idx].push(ho);
                        } else ambiguous = true;
                    }
                    if (hole_unassigned) betterShapeHoles[sIdx1].push(ho);
                }
            }
            // console.log("ambiguous: ", ambiguous);
            if (toChange.length > 0) // console.log("to change: ", toChange);
            {
                if (!ambiguous) newShapeHoles = betterShapeHoles;
            }
        }
        let tmpHoles;
        for(let i48 = 0, il = newShapes.length; i48 < il; i48++){
            tmpShape1 = newShapes[i48].s;
            shapes5.push(tmpShape1);
            tmpHoles = newShapeHoles[i48];
            for(let j = 0, jl = tmpHoles.length; j < jl; j++)tmpShape1.holes.push(tmpHoles[j].h);
        }
        //console.log("shape", shapes);
        return shapes5;
    }
}
const _floatView = new Float32Array(1);
const _int32View = new Int32Array(_floatView.buffer);
class DataUtils {
    // Converts float32 to float16 (stored as uint16 value).
    static toHalfFloat(val) {
        if (val > 65504) {
            console.warn('THREE.DataUtils.toHalfFloat(): value exceeds 65504.');
            val = 65504; // maximum representable value in float16
        }
        // Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410
        /* This method is faster than the OpenEXR implementation (very often
		* used, eg. in Ogre), with the additional benefit of rounding, inspired
		* by James Tursa?s half-precision code. */ _floatView[0] = val;
        const x = _int32View[0];
        let bits = x >> 16 & 32768; /* Get the sign */ 
        let m = x >> 12 & 2047; /* Keep one extra bit for rounding */ 
        const e = x >> 23 & 255; /* Using int is faster here */ 
        /* If zero, or denormal, or exponent underflows too much for a denormal
			* half, return signed zero. */ if (e < 103) return bits;
        /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */ if (e > 142) {
            bits |= 31744;
            /* If exponent was 0xff and one mantissa bit was set, it means NaN,
						* not Inf, so make sure we set one mantissa bit too. */ bits |= (e == 255 ? 0 : 1) && x & 8388607;
            return bits;
        }
        /* If exponent underflows but not too much, return a denormal */ if (e < 113) {
            m |= 2048;
            /* Extra rounding may overflow and set mantissa to 0 and exponent
				* to 1, which is OK. */ bits |= (m >> 114 - e) + (m >> 113 - e & 1);
            return bits;
        }
        bits |= e - 112 << 10 | m >> 1;
        /* Extra rounding. An overflow will set mantissa to 0 and increment
			* the exponent, which is OK. */ bits += m & 1;
        return bits;
    }
}
const LineStrip = 0;
const LinePieces = 1;
const NoColors = 0;
const FaceColors = 1;
const VertexColors = 2;
function MeshFaceMaterial(materials) {
    console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');
    return materials;
}
function MultiMaterial(materials = []) {
    console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');
    materials.isMultiMaterial = true;
    materials.materials = materials;
    materials.clone = function() {
        return materials.slice();
    };
    return materials;
}
function PointCloud(geometry, material) {
    console.warn('THREE.PointCloud has been renamed to THREE.Points.');
    return new Points(geometry, material);
}
function Particle(material) {
    console.warn('THREE.Particle has been renamed to THREE.Sprite.');
    return new Sprite(material);
}
function ParticleSystem(geometry, material) {
    console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');
    return new Points(geometry, material);
}
function PointCloudMaterial(parameters) {
    console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');
    return new PointsMaterial(parameters);
}
function ParticleBasicMaterial(parameters) {
    console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');
    return new PointsMaterial(parameters);
}
function ParticleSystemMaterial(parameters) {
    console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');
    return new PointsMaterial(parameters);
}
function Vertex(x, y, z) {
    console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');
    return new Vector3(x, y, z);
}
//
function DynamicBufferAttribute(array, itemSize) {
    console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');
    return new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);
}
function Int8Attribute(array, itemSize) {
    console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');
    return new Int8BufferAttribute(array, itemSize);
}
function Uint8Attribute(array, itemSize) {
    console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');
    return new Uint8BufferAttribute(array, itemSize);
}
function Uint8ClampedAttribute(array, itemSize) {
    console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');
    return new Uint8ClampedBufferAttribute(array, itemSize);
}
function Int16Attribute(array, itemSize) {
    console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');
    return new Int16BufferAttribute(array, itemSize);
}
function Uint16Attribute(array, itemSize) {
    console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');
    return new Uint16BufferAttribute(array, itemSize);
}
function Int32Attribute(array, itemSize) {
    console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');
    return new Int32BufferAttribute(array, itemSize);
}
function Uint32Attribute(array, itemSize) {
    console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');
    return new Uint32BufferAttribute(array, itemSize);
}
function Float32Attribute(array, itemSize) {
    console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');
    return new Float32BufferAttribute(array, itemSize);
}
function Float64Attribute(array, itemSize) {
    console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');
    return new Float64BufferAttribute(array, itemSize);
}
//
Curve.create = function(construct, getPoint) {
    console.log('THREE.Curve.create() has been deprecated');
    construct.prototype = Object.create(Curve.prototype);
    construct.prototype.constructor = construct;
    construct.prototype.getPoint = getPoint;
    return construct;
};
//
Path.prototype.fromPoints = function(points) {
    console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');
    return this.setFromPoints(points);
};
//
function AxisHelper(size) {
    console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');
    return new AxesHelper(size);
}
function BoundingBoxHelper(object, color) {
    console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');
    return new BoxHelper(object, color);
}
function EdgesHelper(object, hex) {
    console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');
    return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({
        color: hex !== undefined ? hex : 16777215
    }));
}
GridHelper.prototype.setColors = function() {
    console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');
};
SkeletonHelper.prototype.update = function() {
    console.error('THREE.SkeletonHelper: update() no longer needs to be called.');
};
function WireframeHelper(object, hex) {
    console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');
    return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({
        color: hex !== undefined ? hex : 16777215
    }));
}
//
Loader.prototype.extractUrlBase = function(url) {
    console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');
    return LoaderUtils.extractUrlBase(url);
};
Loader.Handlers = {
    add: function() {
        console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');
    },
    get: function() {
        console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');
    }
};
function XHRLoader(manager) {
    console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');
    return new FileLoader(manager);
}
function BinaryTextureLoader(manager) {
    console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');
    return new DataTextureLoader(manager);
}
//
Box2.prototype.center = function(optionalTarget) {
    console.warn('THREE.Box2: .center() has been renamed to .getCenter().');
    return this.getCenter(optionalTarget);
};
Box2.prototype.empty = function() {
    console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');
    return this.isEmpty();
};
Box2.prototype.isIntersectionBox = function(box) {
    console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');
    return this.intersectsBox(box);
};
Box2.prototype.size = function(optionalTarget) {
    console.warn('THREE.Box2: .size() has been renamed to .getSize().');
    return this.getSize(optionalTarget);
};
//
Box3.prototype.center = function(optionalTarget) {
    console.warn('THREE.Box3: .center() has been renamed to .getCenter().');
    return this.getCenter(optionalTarget);
};
Box3.prototype.empty = function() {
    console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');
    return this.isEmpty();
};
Box3.prototype.isIntersectionBox = function(box) {
    console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');
    return this.intersectsBox(box);
};
Box3.prototype.isIntersectionSphere = function(sphere) {
    console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');
    return this.intersectsSphere(sphere);
};
Box3.prototype.size = function(optionalTarget) {
    console.warn('THREE.Box3: .size() has been renamed to .getSize().');
    return this.getSize(optionalTarget);
};
//
Sphere.prototype.empty = function() {
    console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');
    return this.isEmpty();
};
//
Frustum.prototype.setFromMatrix = function(m) {
    console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');
    return this.setFromProjectionMatrix(m);
};
//
Line3.prototype.center = function(optionalTarget) {
    console.warn('THREE.Line3: .center() has been renamed to .getCenter().');
    return this.getCenter(optionalTarget);
};
//
Matrix3.prototype.flattenToArrayOffset = function(array, offset) {
    console.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
    return this.toArray(array, offset);
};
Matrix3.prototype.multiplyVector3 = function(vector) {
    console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');
    return vector.applyMatrix3(this);
};
Matrix3.prototype.multiplyVector3Array = function() {
    console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');
};
Matrix3.prototype.applyToBufferAttribute = function(attribute) {
    console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');
    return attribute.applyMatrix3(this);
};
Matrix3.prototype.applyToVector3Array = function() {
    console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');
};
Matrix3.prototype.getInverse = function(matrix) {
    console.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
    return this.copy(matrix).invert();
};
//
Matrix4.prototype.extractPosition = function(m) {
    console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');
    return this.copyPosition(m);
};
Matrix4.prototype.flattenToArrayOffset = function(array, offset) {
    console.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
    return this.toArray(array, offset);
};
Matrix4.prototype.getPosition = function() {
    console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');
    return new Vector3().setFromMatrixColumn(this, 3);
};
Matrix4.prototype.setRotationFromQuaternion = function(q) {
    console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');
    return this.makeRotationFromQuaternion(q);
};
Matrix4.prototype.multiplyToArray = function() {
    console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');
};
Matrix4.prototype.multiplyVector3 = function(vector) {
    console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');
    return vector.applyMatrix4(this);
};
Matrix4.prototype.multiplyVector4 = function(vector) {
    console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');
    return vector.applyMatrix4(this);
};
Matrix4.prototype.multiplyVector3Array = function() {
    console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');
};
Matrix4.prototype.rotateAxis = function(v) {
    console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');
    v.transformDirection(this);
};
Matrix4.prototype.crossVector = function(vector) {
    console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');
    return vector.applyMatrix4(this);
};
Matrix4.prototype.translate = function() {
    console.error('THREE.Matrix4: .translate() has been removed.');
};
Matrix4.prototype.rotateX = function() {
    console.error('THREE.Matrix4: .rotateX() has been removed.');
};
Matrix4.prototype.rotateY = function() {
    console.error('THREE.Matrix4: .rotateY() has been removed.');
};
Matrix4.prototype.rotateZ = function() {
    console.error('THREE.Matrix4: .rotateZ() has been removed.');
};
Matrix4.prototype.rotateByAxis = function() {
    console.error('THREE.Matrix4: .rotateByAxis() has been removed.');
};
Matrix4.prototype.applyToBufferAttribute = function(attribute) {
    console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');
    return attribute.applyMatrix4(this);
};
Matrix4.prototype.applyToVector3Array = function() {
    console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');
};
Matrix4.prototype.makeFrustum = function(left, right, bottom, top, near, far) {
    console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');
    return this.makePerspective(left, right, top, bottom, near, far);
};
Matrix4.prototype.getInverse = function(matrix) {
    console.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
    return this.copy(matrix).invert();
};
//
Plane.prototype.isIntersectionLine = function(line) {
    console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');
    return this.intersectsLine(line);
};
//
Quaternion.prototype.multiplyVector3 = function(vector) {
    console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');
    return vector.applyQuaternion(this);
};
Quaternion.prototype.inverse = function() {
    console.warn('THREE.Quaternion: .inverse() has been renamed to invert().');
    return this.invert();
};
//
Ray.prototype.isIntersectionBox = function(box) {
    console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');
    return this.intersectsBox(box);
};
Ray.prototype.isIntersectionPlane = function(plane) {
    console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');
    return this.intersectsPlane(plane);
};
Ray.prototype.isIntersectionSphere = function(sphere) {
    console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');
    return this.intersectsSphere(sphere);
};
//
Triangle.prototype.area = function() {
    console.warn('THREE.Triangle: .area() has been renamed to .getArea().');
    return this.getArea();
};
Triangle.prototype.barycoordFromPoint = function(point, target) {
    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
    return this.getBarycoord(point, target);
};
Triangle.prototype.midpoint = function(target) {
    console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');
    return this.getMidpoint(target);
};
Triangle.prototypenormal = function(target) {
    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
    return this.getNormal(target);
};
Triangle.prototype.plane = function(target) {
    console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');
    return this.getPlane(target);
};
Triangle.barycoordFromPoint = function(point, a, b, c, target) {
    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
    return Triangle.getBarycoord(point, a, b, c, target);
};
Triangle.normal = function(a, b, c, target) {
    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
    return Triangle.getNormal(a, b, c, target);
};
//
Shape.prototype.extractAllPoints = function(divisions) {
    console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');
    return this.extractPoints(divisions);
};
Shape.prototype.extrude = function(options) {
    console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');
    return new ExtrudeGeometry(this, options);
};
Shape.prototype.makeGeometry = function(options) {
    console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');
    return new ShapeGeometry(this, options);
};
//
Vector2.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');
    return this.fromBufferAttribute(attribute, index, offset);
};
Vector2.prototype.distanceToManhattan = function(v) {
    console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
    return this.manhattanDistanceTo(v);
};
Vector2.prototype.lengthManhattan = function() {
    console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');
    return this.manhattanLength();
};
//
Vector3.prototype.setEulerFromRotationMatrix = function() {
    console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');
};
Vector3.prototype.setEulerFromQuaternion = function() {
    console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');
};
Vector3.prototype.getPositionFromMatrix = function(m) {
    console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');
    return this.setFromMatrixPosition(m);
};
Vector3.prototype.getScaleFromMatrix = function(m) {
    console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');
    return this.setFromMatrixScale(m);
};
Vector3.prototype.getColumnFromMatrix = function(index, matrix) {
    console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');
    return this.setFromMatrixColumn(matrix, index);
};
Vector3.prototype.applyProjection = function(m) {
    console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');
    return this.applyMatrix4(m);
};
Vector3.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');
    return this.fromBufferAttribute(attribute, index, offset);
};
Vector3.prototype.distanceToManhattan = function(v) {
    console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
    return this.manhattanDistanceTo(v);
};
Vector3.prototype.lengthManhattan = function() {
    console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');
    return this.manhattanLength();
};
//
Vector4.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');
    return this.fromBufferAttribute(attribute, index, offset);
};
Vector4.prototype.lengthManhattan = function() {
    console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');
    return this.manhattanLength();
};
//
Object3D.prototype.getChildByName = function(name) {
    console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');
    return this.getObjectByName(name);
};
Object3D.prototype.renderDepth = function() {
    console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');
};
Object3D.prototype.translate = function(distance, axis) {
    console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');
    return this.translateOnAxis(axis, distance);
};
Object3D.prototype.getWorldRotation = function() {
    console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');
};
Object3D.prototype.applyMatrix = function(matrix) {
    console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');
    return this.applyMatrix4(matrix);
};
Object.defineProperties(Object3D.prototype, {
    eulerOrder: {
        get: function() {
            console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
            return this.rotation.order;
        },
        set: function(value) {
            console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
            this.rotation.order = value;
        }
    },
    useQuaternion: {
        get: function() {
            console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
        },
        set: function() {
            console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
        }
    }
});
Mesh.prototype.setDrawMode = function() {
    console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
};
Object.defineProperties(Mesh.prototype, {
    drawMode: {
        get: function() {
            console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');
            return TrianglesDrawMode;
        },
        set: function() {
            console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
        }
    }
});
SkinnedMesh.prototype.initBones = function() {
    console.error('THREE.SkinnedMesh: initBones() has been removed.');
};
//
PerspectiveCamera.prototype.setLens = function(focalLength, filmGauge) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    if (filmGauge !== undefined) this.filmGauge = filmGauge;
    this.setFocalLength(focalLength);
};
//
Object.defineProperties(Light.prototype, {
    onlyShadow: {
        set: function() {
            console.warn('THREE.Light: .onlyShadow has been removed.');
        }
    },
    shadowCameraFov: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');
            this.shadow.camera.fov = value;
        }
    },
    shadowCameraLeft: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');
            this.shadow.camera.left = value;
        }
    },
    shadowCameraRight: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');
            this.shadow.camera.right = value;
        }
    },
    shadowCameraTop: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');
            this.shadow.camera.top = value;
        }
    },
    shadowCameraBottom: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');
            this.shadow.camera.bottom = value;
        }
    },
    shadowCameraNear: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');
            this.shadow.camera.near = value;
        }
    },
    shadowCameraFar: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');
            this.shadow.camera.far = value;
        }
    },
    shadowCameraVisible: {
        set: function() {
            console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');
        }
    },
    shadowBias: {
        set: function(value) {
            console.warn('THREE.Light: .shadowBias is now .shadow.bias.');
            this.shadow.bias = value;
        }
    },
    shadowDarkness: {
        set: function() {
            console.warn('THREE.Light: .shadowDarkness has been removed.');
        }
    },
    shadowMapWidth: {
        set: function(value) {
            console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');
            this.shadow.mapSize.width = value;
        }
    },
    shadowMapHeight: {
        set: function(value) {
            console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');
            this.shadow.mapSize.height = value;
        }
    }
});
//
Object.defineProperties(BufferAttribute.prototype, {
    length: {
        get: function() {
            console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');
            return this.array.length;
        }
    },
    dynamic: {
        get: function() {
            console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
            return this.usage === DynamicDrawUsage;
        },
        set: function() {
            console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
            this.setUsage(DynamicDrawUsage);
        }
    }
});
BufferAttribute.prototype.setDynamic = function(value) {
    console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');
    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
    return this;
};
BufferAttribute.prototype.copyIndicesArray = function() {
    console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');
}, BufferAttribute.prototype.setArray = function() {
    console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
};
//
BufferGeometry.prototype.addIndex = function(index) {
    console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');
    this.setIndex(index);
};
BufferGeometry.prototype.addAttribute = function(name, attribute) {
    console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');
    if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
        console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');
        return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
    }
    if (name === 'index') {
        console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');
        this.setIndex(attribute);
        return this;
    }
    return this.setAttribute(name, attribute);
};
BufferGeometry.prototype.addDrawCall = function(start, count, indexOffset) {
    if (indexOffset !== undefined) console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');
    console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');
    this.addGroup(start, count);
};
BufferGeometry.prototype.clearDrawCalls = function() {
    console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');
    this.clearGroups();
};
BufferGeometry.prototype.computeOffsets = function() {
    console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');
};
BufferGeometry.prototype.removeAttribute = function(name) {
    console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');
    return this.deleteAttribute(name);
};
BufferGeometry.prototype.applyMatrix = function(matrix) {
    console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');
    return this.applyMatrix4(matrix);
};
Object.defineProperties(BufferGeometry.prototype, {
    drawcalls: {
        get: function() {
            console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');
            return this.groups;
        }
    },
    offsets: {
        get: function() {
            console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');
            return this.groups;
        }
    }
});
InterleavedBuffer.prototype.setDynamic = function(value) {
    console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');
    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
    return this;
};
InterleavedBuffer.prototype.setArray = function() {
    console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
};
//
ExtrudeGeometry.prototype.getArrays = function() {
    console.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');
};
ExtrudeGeometry.prototype.addShapeList = function() {
    console.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');
};
ExtrudeGeometry.prototype.addShape = function() {
    console.error('THREE.ExtrudeGeometry: .addShape() has been removed.');
};
//
Scene.prototype.dispose = function() {
    console.error('THREE.Scene: .dispose() has been removed.');
};
//
Uniform.prototype.onUpdate = function() {
    console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');
    return this;
};
//
Object.defineProperties(Material.prototype, {
    wrapAround: {
        get: function() {
            console.warn('THREE.Material: .wrapAround has been removed.');
        },
        set: function() {
            console.warn('THREE.Material: .wrapAround has been removed.');
        }
    },
    overdraw: {
        get: function() {
            console.warn('THREE.Material: .overdraw has been removed.');
        },
        set: function() {
            console.warn('THREE.Material: .overdraw has been removed.');
        }
    },
    wrapRGB: {
        get: function() {
            console.warn('THREE.Material: .wrapRGB has been removed.');
            return new Color();
        }
    },
    shading: {
        get: function() {
            console.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
        },
        set: function(value) {
            console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
            this.flatShading = value === FlatShading;
        }
    },
    stencilMask: {
        get: function() {
            console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
            return this.stencilFuncMask;
        },
        set: function(value) {
            console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
            this.stencilFuncMask = value;
        }
    },
    vertexTangents: {
        get: function() {
            console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');
        },
        set: function() {
            console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');
        }
    }
});
Object.defineProperties(ShaderMaterial.prototype, {
    derivatives: {
        get: function() {
            console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
            return this.extensions.derivatives;
        },
        set: function(value) {
            console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
            this.extensions.derivatives = value;
        }
    }
});
//
WebGLRenderer.prototype.clearTarget = function(renderTarget, color, depth, stencil) {
    console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');
    this.setRenderTarget(renderTarget);
    this.clear(color, depth, stencil);
};
WebGLRenderer.prototype.animate = function(callback) {
    console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');
    this.setAnimationLoop(callback);
};
WebGLRenderer.prototype.getCurrentRenderTarget = function() {
    console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');
    return this.getRenderTarget();
};
WebGLRenderer.prototype.getMaxAnisotropy = function() {
    console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');
    return this.capabilities.getMaxAnisotropy();
};
WebGLRenderer.prototype.getPrecision = function() {
    console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');
    return this.capabilities.precision;
};
WebGLRenderer.prototype.resetGLState = function() {
    console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');
    return this.state.reset();
};
WebGLRenderer.prototype.supportsFloatTextures = function() {
    console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');
    return this.extensions.get('OES_texture_float');
};
WebGLRenderer.prototype.supportsHalfFloatTextures = function() {
    console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');
    return this.extensions.get('OES_texture_half_float');
};
WebGLRenderer.prototype.supportsStandardDerivatives = function() {
    console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');
    return this.extensions.get('OES_standard_derivatives');
};
WebGLRenderer.prototype.supportsCompressedTextureS3TC = function() {
    console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');
    return this.extensions.get('WEBGL_compressed_texture_s3tc');
};
WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function() {
    console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');
    return this.extensions.get('WEBGL_compressed_texture_pvrtc');
};
WebGLRenderer.prototype.supportsBlendMinMax = function() {
    console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');
    return this.extensions.get('EXT_blend_minmax');
};
WebGLRenderer.prototype.supportsVertexTextures = function() {
    console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');
    return this.capabilities.vertexTextures;
};
WebGLRenderer.prototype.supportsInstancedArrays = function() {
    console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');
    return this.extensions.get('ANGLE_instanced_arrays');
};
WebGLRenderer.prototype.enableScissorTest = function(boolean) {
    console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');
    this.setScissorTest(boolean);
};
WebGLRenderer.prototype.initMaterial = function() {
    console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');
};
WebGLRenderer.prototype.addPrePlugin = function() {
    console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');
};
WebGLRenderer.prototype.addPostPlugin = function() {
    console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');
};
WebGLRenderer.prototype.updateShadowMap = function() {
    console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');
};
WebGLRenderer.prototype.setFaceCulling = function() {
    console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');
};
WebGLRenderer.prototype.allocTextureUnit = function() {
    console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');
};
WebGLRenderer.prototype.setTexture = function() {
    console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');
};
WebGLRenderer.prototype.setTexture2D = function() {
    console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');
};
WebGLRenderer.prototype.setTextureCube = function() {
    console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');
};
WebGLRenderer.prototype.getActiveMipMapLevel = function() {
    console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');
    return this.getActiveMipmapLevel();
};
Object.defineProperties(WebGLRenderer.prototype, {
    shadowMapEnabled: {
        get: function() {
            return this.shadowMap.enabled;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');
            this.shadowMap.enabled = value;
        }
    },
    shadowMapType: {
        get: function() {
            return this.shadowMap.type;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');
            this.shadowMap.type = value;
        }
    },
    shadowMapCullFace: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
            return undefined;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
        }
    },
    context: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');
            return this.getContext();
        }
    },
    vr: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');
            return this.xr;
        }
    },
    gammaInput: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
            return false;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
        }
    },
    gammaOutput: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
            return false;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
            this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;
        }
    },
    toneMappingWhitePoint: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
            return 1;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
        }
    },
    gammaFactor: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');
            return 2;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');
        }
    }
});
Object.defineProperties(WebGLShadowMap.prototype, {
    cullFace: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
            return undefined;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
        }
    },
    renderReverseSided: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
            return undefined;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
        }
    },
    renderSingleSided: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
            return undefined;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
        }
    }
});
function WebGLRenderTargetCube(width, height, options) {
    console.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');
    return new WebGLCubeRenderTarget(width, options);
}
//
Object.defineProperties(WebGLRenderTarget.prototype, {
    wrapS: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
            return this.texture.wrapS;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
            this.texture.wrapS = value;
        }
    },
    wrapT: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
            return this.texture.wrapT;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
            this.texture.wrapT = value;
        }
    },
    magFilter: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
            return this.texture.magFilter;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
            this.texture.magFilter = value;
        }
    },
    minFilter: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
            return this.texture.minFilter;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
            this.texture.minFilter = value;
        }
    },
    anisotropy: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
            return this.texture.anisotropy;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
            this.texture.anisotropy = value;
        }
    },
    offset: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
            return this.texture.offset;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
            this.texture.offset = value;
        }
    },
    repeat: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
            return this.texture.repeat;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
            this.texture.repeat = value;
        }
    },
    format: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
            return this.texture.format;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
            this.texture.format = value;
        }
    },
    type: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
            return this.texture.type;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
            this.texture.type = value;
        }
    },
    generateMipmaps: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
            return this.texture.generateMipmaps;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
            this.texture.generateMipmaps = value;
        }
    }
});
//
Audio.prototype.load = function(file) {
    console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');
    const scope = this;
    const audioLoader = new AudioLoader();
    audioLoader.load(file, function(buffer) {
        scope.setBuffer(buffer);
    });
    return this;
};
AudioAnalyser.prototype.getData = function() {
    console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');
    return this.getFrequencyData();
};
//
CubeCamera.prototype.updateCubeMap = function(renderer, scene) {
    console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');
    return this.update(renderer, scene);
};
CubeCamera.prototype.clear = function(renderer, color, depth, stencil) {
    console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');
    return this.renderTarget.clear(renderer, color, depth, stencil);
};
ImageUtils.crossOrigin = undefined;
ImageUtils.loadTexture = function(url, mapping, onLoad, onError) {
    console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');
    const loader = new TextureLoader();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(url, onLoad, undefined, onError);
    if (mapping) texture.mapping = mapping;
    return texture;
};
ImageUtils.loadTextureCube = function(urls, mapping, onLoad, onError) {
    console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');
    const loader = new CubeTextureLoader();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(urls, onLoad, undefined, onError);
    if (mapping) texture.mapping = mapping;
    return texture;
};
ImageUtils.loadCompressedTexture = function() {
    console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');
};
ImageUtils.loadCompressedTextureCube = function() {
    console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');
};
//
function CanvasRenderer() {
    console.error('THREE.CanvasRenderer has been removed');
}
//
function JSONLoader() {
    console.error('THREE.JSONLoader has been removed.');
}
//
const SceneUtils = {
    createMultiMaterialObject: function() {
        console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
    },
    detach: function() {
        console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
    },
    attach: function() {
        console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
    }
};
//
function LensFlare() {
    console.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');
}
//
function ParametricGeometry() {
    console.error('THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js');
    return new BufferGeometry();
}
function TextGeometry() {
    console.error('THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js');
    return new BufferGeometry();
}
function FontLoader() {
    console.error('THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js');
}
function Font() {
    console.error('THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js');
}
function ImmediateRenderObject() {
    console.error('THREE.ImmediateRenderObject has been removed.');
}
if (typeof __THREE_DEVTOOLS__ !== 'undefined') __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {
    detail: {
        revision: REVISION
    }
}));
if (typeof window !== 'undefined') {
    if (window.__THREE__) console.warn('WARNING: Multiple instances of Three.js being imported.');
    else window.__THREE__ = REVISION;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ciiiV":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"6v8AY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "watchTowerLength", ()=>watchTowerLength
);
const watchTowersBlank = {
    name: [
        '',
        '',
        '',
        ''
    ],
    color: [
        'yellow',
        'red',
        'blue',
        'green'
    ]
};
const watchTowersGD = {
    name: [
        'Iahveh',
        'Adonai',
        'Eheieh',
        'Alga'
    ],
    color: [
        'yellow',
        'red',
        'blue',
        'green'
    ]
};
const watchTowersAngels = {
    name: [
        'Raphael',
        'Michael',
        'Gabriel',
        'Auriel'
    ],
    color: [
        'yellow',
        'red',
        'blue',
        'green'
    ]
};
const watchTowersQuillhoth = {
    name: [
        'Leviathan',
        'Belial',
        'Lucifer',
        'Satan'
    ],
    color: [
        'blue',
        'green',
        'yellow',
        'red'
    ]
};
const settings = {
    width: 640,
    height: 480,
    cycleLength: 1200,
    fps: 30,
    frameCapture: false,
    invertPentagrams: false,
    nsfw: false,
    watchTowers: watchTowersGD
};
const watchTowerLength = settings.cycleLength / 4;
exports.default = settings;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"c6zNm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pentagramLength", ()=>pentagramLength
);
parcelHelpers.export(exports, "choreographBody", ()=>choreographBody
);
parcelHelpers.export(exports, "stillArm", ()=>stillArm
);
parcelHelpers.export(exports, "choreographArm", ()=>choreographArm
);
var _three = require("three");
var _pentagram = require("./components/pentagram");
var _maps = require("./common/maps");
var _settings = require("./settings");
var _settingsDefault = parcelHelpers.interopDefault(_settings);
var _constants = require("./common/constants");
const pentagramLength = 2 * _settings.watchTowerLength / 3;
const choreographBody = (frame)=>{
    const midStepLength = _maps.linearMap(0.5, 0, 1, pentagramLength, _settings.watchTowerLength);
    const cycleFrame = frame % _settingsDefault.default.cycleLength;
    const watchTower = 3 - Math.floor(cycleFrame / _settings.watchTowerLength);
    const watchTowerFrame = cycleFrame % _settings.watchTowerLength;
    const bodyAngle = _maps.segmentedMap(watchTowerFrame, [
        pentagramLength,
        _settings.watchTowerLength
    ], [
        watchTower * _constants.HALF_PI,
        (watchTower - 1) * _constants.HALF_PI
    ]);
    const leftFootAngle = _maps.segmentedMap(watchTowerFrame, [
        pentagramLength,
        midStepLength
    ], [
        watchTower * _constants.HALF_PI,
        (watchTower - 1) * _constants.HALF_PI
    ]);
    const rightFootAngle = _maps.segmentedMap(watchTowerFrame, [
        midStepLength,
        _settings.watchTowerLength
    ], [
        watchTower * _constants.HALF_PI,
        (watchTower - 1) * _constants.HALF_PI
    ]);
    const layer = Math.floor(frame / _settingsDefault.default.cycleLength) % 3;
    const layerInfo = _settingsDefault.default.frameCapture ? {
        topFlames: layer === 0,
        baphomet: layer === 1,
        bottomFlames: layer === 2
    } : {
        topFlames: true,
        baphomet: true,
        bottomFlames: true
    };
    return {
        frame,
        bodyAngle,
        leftFootAngle,
        rightFootAngle,
        layerInfo
    };
};
const neutralLeft = new _three.Vector3(1, -4, 0);
const neutralRight = new _three.Vector3(-1, -4, 0);
const stillArm = neutralLeft;
const choreographArm = (watchTowerFrame)=>{
    const changeCoords = (pt)=>{
        return new _three.Vector3(pt.z, pt.y, -pt.x);
    };
    const pentagramStart = 0.05 * _settings.watchTowerLength;
    const pentagramEnd = 0.4 * _settings.watchTowerLength;
    const centreStart = 0.45 * _settings.watchTowerLength;
    const centreEnd = 0.65 * _settings.watchTowerLength;
    const finish = 0.75 * _settings.watchTowerLength;
    const frameSegments = [
        0,
        ...[
            0,
            1,
            2,
            3,
            4,
            5
        ].map((v)=>_maps.linearMap(v, 0, 5, pentagramStart, pentagramEnd)
        ),
        centreStart,
        centreEnd,
        finish, 
    ];
    const positionSegments = [
        neutralRight,
        ...[
            0,
            1,
            2,
            3,
            4,
            5
        ].map((v)=>changeCoords(_pentagram.getPointOnPentagon(v))
        ),
        changeCoords(_pentagram.pentagramCentre),
        changeCoords(_pentagram.pentagramCentre),
        neutralRight, 
    ];
    const pointAt = _maps.segmentedLinearMap3(watchTowerFrame, frameSegments, positionSegments);
    return pointAt;
};

},{"three":"64dkv","./components/pentagram":"pG1z5","./common/maps":"iTGDB","./settings":"6v8AY","./common/constants":"5al57","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"pG1z5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pentagramCentre", ()=>pentagramCentre
);
parcelHelpers.export(exports, "getPointOnPentagon", ()=>getPointOnPentagon
);
parcelHelpers.export(exports, "getPointOnPentagram", ()=>getPointOnPentagram
);
parcelHelpers.export(exports, "createPentagram", ()=>createPentagram
);
/* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _fire = require("../meshes/fire");
var _constants = require("../common/constants");
var _maps = require("../common/maps");
var _settings = require("../settings");
var _settingsDefault = parcelHelpers.interopDefault(_settings);
const pentagramCentre = new _three.Vector3(-2, 0, 0);
const getPointOnPentagon = (pt)=>{
    // map the point so the drawing starts in the right place
    const n = (pt - 1) % 5;
    const angle = 4 * _constants.PI * n / 5 + (_settingsDefault.default.invertPentagrams ? -_constants.HALF_PI : _constants.HALF_PI);
    const radius = 1.5;
    return new _three.Vector3(-2, radius * Math.sin(angle), radius * Math.cos(angle));
};
const getPointOnPentagram = (v)=>{
    const sideStart = Math.floor(v);
    const sideEnd = sideStart + 1;
    const start = getPointOnPentagon(sideStart);
    const end = getPointOnPentagon(sideEnd);
    return _maps.linearMap3(v, sideStart, sideEnd, start, end);
};
const createPentagram = ()=>{
    const flameCount = _settingsDefault.default.frameCapture ? 99 : 31;
    // eslint-disable-next-line immutable/no-let
    let state = {
        frame: 0,
        fires: Array.from(Array(flameCount)).map(()=>_fire.createFire()
        )
    };
    return (props)=>{
        // eslint-disable-next-line functional/no-expression-statement
        state.fires.forEach((fire, index)=>{
            const allFlamesCompleteFrame = _maps.linearMap(0.5, 0, 1, props.startFrame, props.endFrame);
            const flameStartFrame = _maps.linearMap(index, 0, state.fires.length, props.startFrame, allFlamesCompleteFrame);
            const flameCompleteFrame = flameStartFrame + (props.endFrame - props.startFrame) / 10;
            const flareStartFrame = _maps.linearMap(0.8, 0, 1, props.startFrame, props.endFrame);
            const flareEndFrame = _maps.linearMap(0.9, 0, 1, props.startFrame, props.endFrame);
            const flareMagnitude = 1;
            const flameOnMagnitude = 1.3;
            const flameOffMagnitude = 30;
            const flareGain = 0.2;
            const flameOnGain = 0.5;
            const flameOffGain = 5;
            const frameSegments = [
                flameStartFrame,
                flameCompleteFrame,
                flareStartFrame,
                flareEndFrame,
                props.endFrame, 
            ];
            const maps = [
                _maps.powerMap(2),
                _maps.linearMap,
                _maps.linearMap,
                _maps.powerMap(5)
            ];
            fire.material.uniforms.magnitude.value = _maps.segmentedMap(state.frame, frameSegments, [
                flameOffMagnitude,
                flameOnMagnitude,
                flameOnMagnitude,
                flareMagnitude,
                flameOffMagnitude, 
            ], maps);
            fire.material.uniforms.gain.value = _maps.segmentedMap(state.frame, frameSegments, [
                flameOffGain,
                flameOnGain,
                flameOnGain,
                flareGain,
                flameOffGain
            ], maps);
            if (state.frame >= props.startFrame && state.frame <= props.endFrame) fire.update(state.frame / 25);
        });
        state = {
            ...state,
            frame: (state.frame + 1) % _settingsDefault.default.cycleLength
        };
        const group = new _three.Group();
        if (props.startFrame <= state.frame && state.frame <= props.endFrame) {
            const scale = 0.4;
            group.setRotationFromEuler(new _three.Euler(0, props.angle, 0));
            state.fires.forEach((fire, index)=>{
                const subGroup = new _three.Group();
                subGroup.add(fire);
                subGroup.position.set(...getPointOnPentagram(5 * index / state.fires.length).toArray());
                subGroup.scale.set(scale, scale, scale);
                group.add(subGroup);
            });
        }
        return group;
    };
};

},{"three":"64dkv","../meshes/fire":"5DIkz","../common/constants":"5al57","../common/maps":"iTGDB","../settings":"6v8AY","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5DIkz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFire", ()=>createFire
);
/* eslint-disable @typescript-eslint/no-explicit-any */ var _fire = require("../THREE.Fire/Fire");
var _fireShader = require("../THREE.Fire/FireShader");
var _three = require("three");
const textureLoader = new _three.TextureLoader();
const tex = textureLoader.load('./THREE.Fire/Fire.png');
const createFire = ()=>new _three.Fire(tex)
;

},{"../THREE.Fire/Fire":"bsjkS","../THREE.Fire/FireShader":"c3faH","three":"64dkv","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bsjkS":[function(require,module,exports) {
/* eslint-disable no-tabs */ /* eslint-disable no-import-assign */ /**
 * @author mattatz / http://github.com/mattatz
 *
 * Ray tracing based real-time procedural volumetric fire object for three.js
 */ var _three = require("three");
var _fireShader = require("./FireShader");
class Fire extends _three.Mesh {
    constructor(fireTex, color){
        var fireMaterial = new _three.ShaderMaterial({
            defines: _three.FireShader.defines,
            uniforms: _three.UniformsUtils.clone(_three.FireShader.uniforms),
            vertexShader: _three.FireShader.vertexShader,
            fragmentShader: _three.FireShader.fragmentShader,
            transparent: true,
            depthWrite: false,
            depthTest: false
        });
        // initialize uniforms
        fireTex.magFilter = fireTex.minFilter = _three.LinearFilter;
        fireTex.wrapS = fireTex.wrapT = _three.ClampToEdgeWrapping;
        fireMaterial.uniforms.fireTex.value = fireTex;
        fireMaterial.uniforms.color.value = color || new _three.Color(15658734);
        fireMaterial.uniforms.invModelMatrix.value = new _three.Matrix4();
        fireMaterial.uniforms.scale.value = new _three.Vector3(1, 1, 1);
        fireMaterial.uniforms.seed.value = Math.random() * 19.19;
        super(new _three.BoxGeometry(1, 1, 1), fireMaterial);
    }
}
_three.Fire = Fire;
_three.Fire.prototype = Object.create(_three.Mesh.prototype);
_three.Fire.prototype.constructor = _three.Fire;
_three.Fire.prototype.update = function(time) {
    var invModelMatrix = this.material.uniforms.invModelMatrix.value;
    this.updateMatrixWorld();
    invModelMatrix.copy(this.matrixWorld).invert();
    if (time !== undefined) this.material.uniforms.time.value = time;
    this.material.uniforms.invModelMatrix.value = invModelMatrix;
    this.material.uniforms.scale.value = this.scale;
};

},{"three":"64dkv","./FireShader":"c3faH"}],"c3faH":[function(require,module,exports) {
/* eslint-disable no-tabs */ /* eslint-disable no-import-assign */ /* eslint-disable quotes */ /**
 * @author mattatz / http://mattatz.github.io
 *
 * Ray tracing based real-time procedural volumetric fire shader.
 *
 * Based on
 * Alfred et al. Real-Time procedural volumetric fire / http://dl.acm.org/citation.cfm?id=1230131
 * and
 * webgl-noise / https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl
 * and
 * primitive: blog | object space raymarching / https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl
 */ var _three = require("three");
_three.FireShader = {
    defines: {
        ITERATIONS: '20',
        OCTIVES: '3'
    },
    uniforms: {
        fireTex: {
            type: 't',
            value: null
        },
        color: {
            type: 'c',
            value: null
        },
        time: {
            type: 'f',
            value: 0
        },
        seed: {
            type: 'f',
            value: 0
        },
        invModelMatrix: {
            type: 'm4',
            value: null
        },
        scale: {
            type: 'v3',
            value: null
        },
        noiseScale: {
            type: 'v4',
            value: new _three.Vector4(1, 2, 1, 0.3)
        },
        magnitude: {
            type: 'f',
            value: 1.3
        },
        lacunarity: {
            type: 'f',
            value: 2
        },
        gain: {
            type: 'f',
            value: 0.5
        }
    },
    vertexShader: [
        'varying vec3 vWorldPos;',
        'void main() {',
        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
        'vWorldPos = (modelMatrix * vec4(position, 1.0)).xyz;',
        '}', 
    ].join('\n'),
    fragmentShader: [
        'uniform vec3 color;',
        'uniform float time;',
        'uniform float seed;',
        'uniform mat4 invModelMatrix;',
        'uniform vec3 scale;',
        'uniform vec4 noiseScale;',
        'uniform float magnitude;',
        'uniform float lacunarity;',
        'uniform float gain;',
        'uniform sampler2D fireTex;',
        'varying vec3 vWorldPos;',
        // GLSL simplex noise function by ashima / https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl
        // -------- simplex noise
        'vec3 mod289(vec3 x) {',
        'return x - floor(x * (1.0 / 289.0)) * 289.0;',
        '}',
        'vec4 mod289(vec4 x) {',
        'return x - floor(x * (1.0 / 289.0)) * 289.0;',
        '}',
        'vec4 permute(vec4 x) {',
        'return mod289(((x * 34.0) + 1.0) * x);',
        '}',
        'vec4 taylorInvSqrt(vec4 r) {',
        'return 1.79284291400159 - 0.85373472095314 * r;',
        '}',
        'float snoise(vec3 v) {',
        'const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);',
        'const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);',
        // First corner
        'vec3 i  = floor(v + dot(v, C.yyy));',
        'vec3 x0 = v - i + dot(i, C.xxx);',
        // Other corners
        'vec3 g = step(x0.yzx, x0.xyz);',
        'vec3 l = 1.0 - g;',
        'vec3 i1 = min(g.xyz, l.zxy);',
        'vec3 i2 = max(g.xyz, l.zxy);',
        //   x0 = x0 - 0.0 + 0.0 * C.xxx;
        //   x1 = x0 - i1  + 1.0 * C.xxx;
        //   x2 = x0 - i2  + 2.0 * C.xxx;
        //   x3 = x0 - 1.0 + 3.0 * C.xxx;
        'vec3 x1 = x0 - i1 + C.xxx;',
        'vec3 x2 = x0 - i2 + C.yyy;',
        'vec3 x3 = x0 - D.yyy;',
        // Permutations
        'i = mod289(i); ',
        'vec4 p = permute(permute(permute( ',
        'i.z + vec4(0.0, i1.z, i2.z, 1.0))',
        '+ i.y + vec4(0.0, i1.y, i2.y, 1.0)) ',
        '+ i.x + vec4(0.0, i1.x, i2.x, 1.0));',
        // Gradients: 7x7 points over a square, mapped onto an octahedron.
        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
        'float n_ = 0.142857142857;',
        'vec3  ns = n_ * D.wyz - D.xzx;',
        'vec4 j = p - 49.0 * floor(p * ns.z * ns.z);',
        'vec4 x_ = floor(j * ns.z);',
        'vec4 y_ = floor(j - 7.0 * x_);',
        'vec4 x = x_ * ns.x + ns.yyyy;',
        'vec4 y = y_ * ns.x + ns.yyyy;',
        'vec4 h = 1.0 - abs(x) - abs(y);',
        'vec4 b0 = vec4(x.xy, y.xy);',
        'vec4 b1 = vec4(x.zw, y.zw);',
        //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
        //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
        'vec4 s0 = floor(b0) * 2.0 + 1.0;',
        'vec4 s1 = floor(b1) * 2.0 + 1.0;',
        'vec4 sh = -step(h, vec4(0.0));',
        'vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;',
        'vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;',
        'vec3 p0 = vec3(a0.xy, h.x);',
        'vec3 p1 = vec3(a0.zw, h.y);',
        'vec3 p2 = vec3(a1.xy, h.z);',
        'vec3 p3 = vec3(a1.zw, h.w);',
        //Normalise gradients
        'vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));',
        'p0 *= norm.x;',
        'p1 *= norm.y;',
        'p2 *= norm.z;',
        'p3 *= norm.w;',
        // Mix final noise value
        'vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);',
        'm = m * m;',
        'return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));',
        '}',
        // simplex noise --------
        'float turbulence(vec3 p) {',
        'float sum = 0.0;',
        'float freq = 1.0;',
        'float amp = 1.0;',
        'for(int i = 0; i < OCTIVES; i++) {',
        'sum += abs(snoise(p * freq)) * amp;',
        'freq *= lacunarity;',
        'amp *= gain;',
        '}',
        'return sum;',
        '}',
        'vec4 samplerFire (vec3 p, vec4 scale) {',
        'vec2 st = vec2(sqrt(dot(p.xz, p.xz)), p.y);',
        'if(st.x <= 0.0 || st.x >= 1.0 || st.y <= 0.0 || st.y >= 1.0) return vec4(0.0);',
        'p.y -= (seed + time) * scale.w;',
        'p *= scale.xyz;',
        'st.y += sqrt(st.y) * magnitude * turbulence(p);',
        'if(st.y <= 0.0 || st.y >= 1.0) return vec4(0.0);',
        'return texture2D(fireTex, st);',
        '}',
        'vec3 localize(vec3 p) {',
        'return (invModelMatrix * vec4(p, 1.0)).xyz;',
        '}',
        'void main() {',
        'vec3 rayPos = vWorldPos;',
        'vec3 rayDir = normalize(rayPos - cameraPosition);',
        'float rayLen = 0.0288 * length(scale.xyz);',
        'vec4 col = vec4(0.0);',
        'for(int i = 0; i < ITERATIONS; i++) {',
        'rayPos += rayDir * rayLen;',
        'vec3 lp = localize(rayPos);',
        'lp.y += 0.5;',
        'lp.xz *= 2.0;',
        'col += samplerFire(lp, noiseScale);',
        '}',
        'col.a = col.r;',
        'gl_FragColor = col;',
        '}', 
    ].join('\n')
};

},{"three":"64dkv"}],"5al57":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PI", ()=>PI
);
parcelHelpers.export(exports, "TWO_PI", ()=>TWO_PI
);
parcelHelpers.export(exports, "HALF_PI", ()=>HALF_PI
);
parcelHelpers.export(exports, "QUARTER_PI", ()=>QUARTER_PI
);
parcelHelpers.export(exports, "EIGHTH_PI", ()=>EIGHTH_PI
);
const PI = Math.PI;
const TWO_PI = 2 * PI;
const HALF_PI = 0.5 * PI;
const QUARTER_PI = 0.25 * PI;
const EIGHTH_PI = 0.125 * PI;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"iTGDB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linearMap", ()=>linearMap
);
parcelHelpers.export(exports, "powerMap", ()=>powerMap
);
parcelHelpers.export(exports, "segmentedMap", ()=>segmentedMap
);
parcelHelpers.export(exports, "linearMap3", ()=>linearMap3
);
parcelHelpers.export(exports, "segmentedLinearMap3", ()=>segmentedLinearMap3
);
var _three = require("three");
const linearMap = (value, range1start, range1end, range2start, range2end)=>{
    return range2start + (range2end - range2start) * ((value - range1start) / (range1end - range1start));
};
const powerMap = (power)=>{
    return (value, range1start, range1end, range2start, range2end)=>{
        const linearRatio = (value - range1start) / (range1end - range1start);
        const ratio = Math.pow(linearRatio, power);
        return range2start + (range2end - range2start) * ratio;
    };
};
const segmentedMap = (value, range1, range2, _maps)=>{
    if (range1.length !== range2.length) throw new Error('segmentedMap range arrays not equal');
    const maps = _maps ? _maps : Array(range1.length - 1).fill(linearMap);
    if (maps.length !== range1.length - 1) throw new Error('segmentedMap maps array length must be one less that ranges length');
    const n = range1.findIndex((t)=>t > value
    );
    switch(n){
        case 0:
            return range2[0];
        case -1:
            return range2[range2.length - 1];
        default:
            return maps[n - 1](value, range1[n - 1], range1[n], range2[n - 1], range2[n]);
    }
};
const linearMap3 = (value, range1start, range1end, range2start, range2end)=>{
    return new _three.Vector3(linearMap(value, range1start, range1end, range2start.x, range2end.x), linearMap(value, range1start, range1end, range2start.y, range2end.y), linearMap(value, range1start, range1end, range2start.z, range2end.z));
};
const segmentedLinearMap3 = (value, range1, range2)=>{
    const result = new _three.Vector3(segmentedMap(value, range1, range2.map((v)=>v.x
    )), segmentedMap(value, range1, range2.map((v)=>v.y
    )), segmentedMap(value, range1, range2.map((v)=>v.z
    )));
    return result;
};

},{"three":"64dkv","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"lL7W3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAdornedHead", ()=>createAdornedHead
);
/* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _materials = require("../materials");
var _headHelpers = require("../headHelpers");
var _constants = require("../common/constants");
var _face = require("./face");
var _head = require("./head");
var _maps = require("../common/maps");
var _parametricGeometry = require("three/examples/jsm/geometries/ParametricGeometry");
const createAdornedHead = ()=>{
    const createHorn = (param)=>{
        const openHorn = (u, v, vec)=>{
            const width = param.maxWidth * (1 - u);
            const depth = param.maxDepth * (1 - u);
            const angle = _constants.TWO_PI * v;
            // eslint-disable-next-line functional/no-expression-statement
            _headHelpers.ellipticalToCartesian(1 + param.length * u, param.theta + width * Math.sin(angle), param.phi + depth * Math.cos(angle), vec);
            // eslint-disable-next-line functional/no-expression-statement
            vec = vec.applyAxisAngle(new _three.Vector3(0, 0, 1), param.bend * param.length * u);
        };
        const horn = new _parametricGeometry.ParametricGeometry(openHorn, 10, 10);
        return horn;
    };
    const horn1 = {
        theta: _constants.HALF_PI,
        phi: 0.625 * _constants.PI,
        maxWidth: 0.15,
        maxDepth: 0.1,
        length: 1,
        bend: 0.2
    };
    const leftHorn = new _three.Mesh(createHorn(horn1), _materials.skin(_materials.Surface.leftHorn));
    const rightHorn = new _three.Mesh(createHorn({
        ...horn1,
        phi: 0.375 * _constants.PI,
        bend: -horn1.bend
    }), _materials.skin(_materials.Surface.rightHorn));
    const hornGroup = new _three.Group().add(leftHorn).add(rightHorn);
    //
    // Antenna
    //
    const createAntenna = (beginning, middle, end, width)=>{
        const tubePath = new _three.Curve();
        tubePath.getPoint = (t)=>{
            if (t < 0.5) return new _three.Vector3(_maps.linearMap(t, 0, 0.5, beginning.x, middle.x), _maps.linearMap(t, 0, 0.5, beginning.y, middle.y), _maps.linearMap(t, 0, 0.5, beginning.z, middle.z));
            else return new _three.Vector3(_maps.linearMap(t, 0.5, 1, middle.x, end.x), _maps.linearMap(t, 0.5, 1, middle.y, end.y), _maps.linearMap(t, 0.5, 1, middle.z, end.z));
        };
        return new _three.TubeGeometry(tubePath, 20, width).clone();
    };
    const antennaPosition = new _three.Vector3(1, _headHelpers.headHeight + 0.8, 0);
    const antennaSize = 0.2;
    const antennaPole = createAntenna(new _three.Vector3(0, _headHelpers.headHeight, 0), new _three.Vector3(0.3, _headHelpers.headHeight + 1, 0), antennaPosition, 0.05);
    const antennaDot = new _three.SphereGeometry(antennaSize, 12, 12).translate(antennaPosition.x, antennaPosition.y, antennaPosition.z);
    const antenna = new _three.Group().add(new _three.Mesh(antennaPole, _materials.blackMaterial(_materials.Surface.skip))).add(new _three.Mesh(antennaDot, _materials.redMaterial(_materials.Surface.skip)));
    //
    // Create the face then return the finished head
    //
    const head = new _three.Group().add(_head.createHead()).add(hornGroup).add(antenna).add(_face.createFace());
    return head;
};

},{"three":"64dkv","../materials":"htVaV","../headHelpers":"bVpVU","../common/constants":"5al57","./face":"1Su97","./head":"8GvMX","../common/maps":"iTGDB","three/examples/jsm/geometries/ParametricGeometry":"evwQO","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"htVaV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Surface", ()=>Surface1
);
parcelHelpers.export(exports, "blackMaterial", ()=>blackMaterial
);
parcelHelpers.export(exports, "redMaterial", ()=>redMaterial
);
parcelHelpers.export(exports, "skin", ()=>skin
);
parcelHelpers.export(exports, "floorMaterial", ()=>floorMaterial
);
parcelHelpers.export(exports, "altarMaterial", ()=>altarMaterial
);
var _three = require("three");
var Surface1;
(function(Surface) {
    Surface[Surface["skip"] = 1] = "skip";
    Surface[Surface["body"] = 2] = "body";
    Surface[Surface["leftFoot"] = 3] = "leftFoot";
    Surface[Surface["rightFoot"] = 4] = "rightFoot";
    Surface[Surface["sphere"] = 5] = "sphere";
    Surface[Surface["cylinder"] = 6] = "cylinder";
    Surface[Surface["leftBreast"] = 7] = "leftBreast";
    Surface[Surface["rightBreast"] = 8] = "rightBreast";
    Surface[Surface["leftWing"] = 9] = "leftWing";
    Surface[Surface["rightWing"] = 10] = "rightWing";
    Surface[Surface["leftArm"] = 11] = "leftArm";
    Surface[Surface["rightArm"] = 12] = "rightArm";
    Surface[Surface["head"] = 13] = "head";
    Surface[Surface["leftEar"] = 14] = "leftEar";
    Surface[Surface["rightEar"] = 15] = "rightEar";
    Surface[Surface["leftHorn"] = 16] = "leftHorn";
    Surface[Surface["rightHorn"] = 17] = "rightHorn";
    Surface[Surface["floor"] = 18] = "floor";
    Surface[Surface["altar"] = 19] = "altar";
})(Surface1 || (Surface1 = {
}));
const opacity = (surface)=>{
    return surface / 255;
};
const blackMaterial = (surface)=>new _three.MeshBasicMaterial({
        color: 'black',
        opacity: opacity(surface),
        side: _three.DoubleSide
    })
;
const redMaterial = (surface)=>new _three.MeshBasicMaterial({
        color: 'red',
        opacity: opacity(surface),
        side: _three.DoubleSide
    })
;
const skin = (surface)=>new _three.MeshBasicMaterial({
        color: 4473924,
        opacity: opacity(surface),
        side: _three.DoubleSide
    })
;
const floorMaterial = new _three.MeshBasicMaterial({
    color: 13421772,
    opacity: opacity(Surface1.floor),
    side: _three.DoubleSide
});
const altarMaterial = new _three.MeshBasicMaterial({
    color: 8947848,
    opacity: opacity(Surface1.altar),
    side: _three.DoubleSide
});

},{"three":"64dkv","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"bVpVU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "headWidth", ()=>headWidth
);
parcelHelpers.export(exports, "headHeight", ()=>headHeight
);
parcelHelpers.export(exports, "headDepth", ()=>headDepth
);
parcelHelpers.export(exports, "ellipticalToCartesian", ()=>ellipticalToCartesian
);
parcelHelpers.export(exports, "createTube", ()=>createTube
);
parcelHelpers.export(exports, "createArc", ()=>createArc
);
/* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _maps = require("./common/maps");
const headWidth = 1.5;
const headHeight = 1;
const headDepth = 1;
const ellipticalToCartesian = (r, theta, phi, _vec)=>{
    const vec = _vec ? _vec : new _three.Vector3();
    return vec.set(r * headWidth * Math.sin(theta) * Math.cos(phi), r * headHeight * Math.sin(theta) * Math.sin(phi), r * headDepth * Math.cos(theta));
};
const createTube = (param)=>{
    const tubePath = new _three.Curve();
    tubePath.getPoint = (t)=>{
        const theta = _maps.linearMap(t, 0, 1, param.thetaStart, param.thetaEnd);
        const phi = _maps.linearMap(t, 0, 1, param.phiStart, param.phiEnd);
        return ellipticalToCartesian(1, theta, phi);
    };
    return new _three.TubeGeometry(tubePath, 100, param.radius, 100, false);
};
const createArc = (param)=>{
    const arcPath = new _three.Curve();
    arcPath.getPoint = (t)=>{
        const angle = _maps.linearMap(t, 0, 1, param.startAngle, param.finishAngle);
        return ellipticalToCartesian(1, param.centerTheta + param.thetaRadius * Math.cos(angle), param.centerPhi + param.phiRadius * Math.sin(angle));
    };
    return new _three.TubeGeometry(arcPath, 100, param.tubeRadius, 100, false);
};

},{"three":"64dkv","./common/maps":"iTGDB","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"1Su97":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFace", ()=>createFace
);
/* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _materials = require("../materials");
var _headHelpers = require("../headHelpers");
var _layers = require("../layers");
var _maps = require("../common/maps");
var _settings = require("../settings");
var _settingsDefault = parcelHelpers.interopDefault(_settings);
const PI = Math.PI;
const TWO_PI = 2 * PI;
const HALF_PI = 0.5 * PI;
const FIFTH_TAU = TWO_PI / 5;
const createFace = ()=>{
    //
    // Forehead pentagram
    //
    const vertices = _settingsDefault.default.invertPentagrams ? [
        0,
        1,
        2,
        3,
        4
    ] : [
        0.5,
        1.5,
        2.5,
        3.4,
        4.5
    ];
    const foreheadGroup = new _three.Group().add(...vertices.map((_v)=>{
        const theta = 0.75;
        const phi = HALF_PI;
        const r = 0.3;
        const v = _v + 0.5;
        const u = v + 2;
        return _headHelpers.createTube({
            thetaStart: theta + r * Math.cos(v * FIFTH_TAU),
            phiStart: phi + r * Math.sin(v * FIFTH_TAU),
            thetaEnd: theta + r * Math.cos(u * FIFTH_TAU),
            phiEnd: phi + r * Math.sin(u * FIFTH_TAU),
            radius: 0.02
        });
    }).map((geom)=>new _three.Mesh(geom, _materials.blackMaterial(_materials.Surface.head))
    ));
    //
    // Eyes
    //
    const lid = {
        thetaStart: 0.8,
        phiStart: 0.9,
        thetaEnd: 0.3,
        phiEnd: 0.9,
        radius: 0.04
    };
    const centerTheta = _maps.linearMap(1, 0, 2, lid.thetaStart, lid.thetaEnd);
    const centerPhi = _maps.linearMap(1, 0, 2, lid.phiStart, lid.phiEnd);
    const topLidRight = _headHelpers.createTube(lid);
    const bottomLidRight = _headHelpers.createArc({
        centerTheta,
        centerPhi,
        thetaRadius: 0.22,
        phiRadius: 0.33,
        tubeRadius: lid.radius,
        startAngle: PI,
        finishAngle: TWO_PI
    });
    const eyeballRight = _headHelpers.createTube({
        thetaStart: centerTheta - 0.05,
        phiStart: centerPhi - 0.05,
        thetaEnd: centerTheta + 0.05,
        phiEnd: centerPhi - 0.2,
        radius: lid.radius * 0.8
    });
    const topLidLeft = topLidRight.clone().scale(-1, 1, 1);
    const bottomLidLeft = bottomLidRight.clone().scale(-1, 1, 1);
    const eyeballLeft = eyeballRight.clone().scale(-1, 1, 1);
    const eyesGroup = new _three.Group().add(...[
        topLidLeft,
        topLidRight,
        bottomLidLeft,
        bottomLidRight
    ].map((geom)=>new _three.Mesh(geom, _materials.blackMaterial(_materials.Surface.head))
    )).add(...[
        eyeballLeft,
        eyeballRight
    ].map((geom)=>new _three.Mesh(geom, _materials.redMaterial(_materials.Surface.head))
    ));
    //
    // Nose
    //
    const thetaRadius = 0.2;
    const phiRadius = 0.5;
    const noseParams = {
        centerTheta: 0.2 + thetaRadius,
        centerPhi: -1.48 + phiRadius,
        thetaRadius,
        phiRadius,
        tubeRadius: 0.04,
        startAngle: HALF_PI + 0.9,
        finishAngle: PI + HALF_PI - 0.5
    };
    const noseLeft = _headHelpers.createArc(noseParams);
    const noseRight = noseLeft.clone().scale(-1, 1, 1);
    const nose = new _three.Group().add(...[
        noseLeft,
        noseRight
    ].map((geom)=>new _three.Mesh(geom, _materials.blackMaterial(_materials.Surface.head))
    ));
    //
    // Mouth
    //
    const mouth = new _three.Mesh(_headHelpers.createArc({
        centerTheta: 0,
        centerPhi: -HALF_PI,
        thetaRadius: 0.7,
        phiRadius: 0.7,
        tubeRadius: 0.04,
        startAngle: -0.9,
        finishAngle: 0.9
    }), _materials.blackMaterial(_materials.Surface.head));
    const face = new _three.Group().add(foreheadGroup).add(eyesGroup).add(nose).add(mouth);
    _layers.setLayerRecursive(face, _layers.Layer.main);
    return face;
};

},{"three":"64dkv","../materials":"htVaV","../headHelpers":"bVpVU","../layers":"igEJN","../common/maps":"iTGDB","../settings":"6v8AY","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"igEJN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Layer", ()=>Layer1
);
parcelHelpers.export(exports, "setLayerRecursive", ()=>setLayerRecursive
);
var Layer1;
(function(Layer) {
    Layer[Layer["main"] = 0] = "main";
    Layer[Layer["flamesBehind"] = 1] = "flamesBehind";
    Layer[Layer["flamesInfront"] = 2] = "flamesInfront";
})(Layer1 || (Layer1 = {
}));
const setLayerRecursive = (obj, layer)=>{
    obj.layers.set(layer);
    obj.children.forEach((child)=>setLayerRecursive(child, layer)
    );
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8GvMX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createHead", ()=>createHead
);
var _three = require("three");
var _materials = require("../materials");
var _geometry = require("../common/geometry");
const createHead = ()=>{
    const head = _geometry.createEllipsoid(1.5, 1, 1);
    // vector between center of head and center of ear
    const x = 1.44;
    const y = 0.6;
    const z = -0.3;
    const earParams = [
        0.4,
        0.4,
        0.25
    ];
    const leftEar = _geometry.createEllipsoid(...earParams).translate(x, y, z);
    const rightEar = _geometry.createEllipsoid(...earParams).translate(-x, y, z);
    return new _three.Group().add(new _three.Mesh(head, _materials.skin(_materials.Surface.head))).add(new _three.Mesh(leftEar, _materials.skin(_materials.Surface.leftEar))).add(new _three.Mesh(rightEar, _materials.skin(_materials.Surface.rightEar)));
};

},{"three":"64dkv","../materials":"htVaV","../common/geometry":"gjzhI","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gjzhI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createEllipsoid", ()=>createEllipsoid
);
parcelHelpers.export(exports, "createCylinder", ()=>createCylinder
);
var _three = require("three");
const createSphere = (radius)=>{
    const sphereSegments = 24;
    return new _three.SphereGeometry(radius, sphereSegments, sphereSegments);
};
const createEllipsoid = (x, y, z)=>{
    return createSphere(1).applyMatrix4(new _three.Matrix4().makeScale(x, y, z));
};
const createCylinder = (radius, height)=>{
    const radialSegments = 24;
    return new _three.CylinderGeometry(radius, radius, height, radialSegments);
};

},{"three":"64dkv","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"evwQO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ParametricGeometry", ()=>ParametricGeometry
);
/**
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html
 */ var _three = require("three");
class ParametricGeometry extends _three.BufferGeometry {
    constructor(func = (u, v, target)=>target.set(u, v, Math.cos(u) * Math.sin(v))
    , slices = 8, stacks = 8){
        super();
        this.type = 'ParametricGeometry';
        this.parameters = {
            func: func,
            slices: slices,
            stacks: stacks
        };
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        const EPS = 0.00001;
        const normal = new _three.Vector3();
        const p0 = new _three.Vector3(), p1 = new _three.Vector3();
        const pu = new _three.Vector3(), pv = new _three.Vector3();
        if (func.length < 3) console.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');
        // generate vertices, normals and uvs
        const sliceCount = slices + 1;
        for(let i = 0; i <= stacks; i++){
            const v = i / stacks;
            for(let j = 0; j <= slices; j++){
                const u = j / slices;
                // vertex
                func(u, v, p0);
                vertices.push(p0.x, p0.y, p0.z);
                // normal
                // approximate tangent vectors via finite differences
                if (u - EPS >= 0) {
                    func(u - EPS, v, p1);
                    pu.subVectors(p0, p1);
                } else {
                    func(u + EPS, v, p1);
                    pu.subVectors(p1, p0);
                }
                if (v - EPS >= 0) {
                    func(u, v - EPS, p1);
                    pv.subVectors(p0, p1);
                } else {
                    func(u, v + EPS, p1);
                    pv.subVectors(p1, p0);
                }
                // cross product of tangent vectors returns surface normal
                normal.crossVectors(pu, pv).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(u, v);
            }
        }
        // generate indices
        for(let i1 = 0; i1 < stacks; i1++)for(let j = 0; j < slices; j++){
            const a = i1 * sliceCount + j;
            const b = i1 * sliceCount + j + 1;
            const c = (i1 + 1) * sliceCount + j + 1;
            const d = (i1 + 1) * sliceCount + j;
            // faces one and two
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new _three.Float32BufferAttribute(vertices, 3));
        this.setAttribute('normal', new _three.Float32BufferAttribute(normals, 3));
        this.setAttribute('uv', new _three.Float32BufferAttribute(uvs, 2));
    }
}

},{"three":"64dkv","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"AcydV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBody", ()=>createBody
);
/* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _geometry = require("../common/geometry");
var _materials = require("../materials");
var _constants = require("../common/constants");
var _settings = require("../settings");
var _settingsDefault = parcelHelpers.interopDefault(_settings);
const createBody = ()=>{
    const createWing = (sign)=>{
        const quadParams = (p1, p2)=>{
            const perp = [
                p1[1] - p2[1],
                p2[0] - p1[0]
            ].map((n)=>0.7 * n
            );
            const mid = [
                0.5 * (p1[0] + p2[0]),
                0.5 * (p1[1] + p2[1])
            ];
            const c = [
                mid[0] + perp[0],
                mid[1] + perp[1]
            ];
            return [
                sign * c[0],
                c[1],
                sign * p2[0],
                p2[1]
            ];
        };
        const bladeStartX = 0.83;
        const bladeStartY = -1.2;
        const bladeEndX = 1.94;
        const bladeEndY = -0.28;
        const drop = 0.5;
        // Define the four points along the bottom of the wing (outside to inside: a, b, c, d)
        const a = [
            bladeEndX,
            bladeEndY
        ];
        const b = [
            bladeEndX,
            -0.9
        ];
        const c1 = [
            1.4,
            -1.4
        ];
        const d = [
            bladeStartX,
            bladeStartY - drop
        ];
        const shape = new _three.Shape().moveTo(sign * bladeStartX, bladeStartY - drop).lineTo(sign * bladeStartX, bladeStartY).bezierCurveTo(sign * bladeStartX, bladeStartY + 0.4, sign * bladeEndX, bladeEndY - 0.4, sign * bladeEndX, bladeEndY).quadraticCurveTo(...quadParams(a, b)).quadraticCurveTo(...quadParams(b, c1)).quadraticCurveTo(...quadParams(c1, d));
        const extrudeSettings = {
            steps: 1,
            depth: 0.05,
            bevelEnabled: false
        };
        return new _three.ExtrudeGeometry(shape, extrudeSettings);
    };
    // Body
    const bodyEllipsoid = _geometry.createEllipsoid(0.75, 1.8, 0.5).translate(0, -1.3, 0);
    const nsfw = (group)=>{
        const params = [
            0.35,
            -1.4,
            0.5
        ];
        const leftBreast = _geometry.createEllipsoid(0.25, 0.25, 0.25).translate(-params[0], params[1], params[2]);
        const rightBreast = _geometry.createEllipsoid(0.25, 0.25, 0.25).translate(params[0], params[1], params[2]);
        const height = 1;
        const rotation = _constants.QUARTER_PI;
        const translation = [
            0,
            -1.9,
            1.05
        ];
        const cylinder = _geometry.createCylinder(0.1, height).translate(0, -height / 2, 0).rotateX(rotation).translate(...translation);
        const sphere = _geometry.createEllipsoid(0.13, 0.13, 0.13).rotateX(rotation).translate(...translation);
        return group.add(new _three.Mesh(leftBreast, _materials.skin(_materials.Surface.leftBreast))).add(new _three.Mesh(rightBreast, _materials.skin(_materials.Surface.rightBreast))).add(new _three.Mesh(cylinder, _materials.skin(_materials.Surface.cylinder))).add(new _three.Mesh(sphere, _materials.skin(_materials.Surface.sphere)));
    };
    const bodyGroup = new _three.Group().add(new _three.Mesh(bodyEllipsoid, _materials.skin(_materials.Surface.body)));
    if (_settingsDefault.default.nsfw) nsfw(bodyGroup);
    // Combine
    return bodyGroup.add(new _three.Mesh(createWing(1), _materials.skin(_materials.Surface.leftWing))).add(new _three.Mesh(createWing(-1), _materials.skin(_materials.Surface.rightWing)));
};

},{"three":"64dkv","../common/geometry":"gjzhI","../materials":"htVaV","../common/constants":"5al57","../settings":"6v8AY","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"a2Zxh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFrameCaptureComponent", ()=>createFrameCaptureComponent
);
/* eslint-disable immutable/no-let */ /* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _jszip = require("jszip");
var _jszipDefault = parcelHelpers.interopDefault(_jszip);
var _fileSaver = require("file-saver");
const createFrameCaptureComponent = ()=>{
    let state = {
        frame: 0,
        zip: new _jszipDefault.default()
    };
    return (props)=>{
        if (state.frame >= props.startFrame && state.frame < props.endFrame) {
            const frameString = state.frame.toString().padStart(6, '0');
            props.getCanvas().toBlob((blob)=>{
                state.zip.file(`f${frameString}.png`, blob);
                const captureCount = props.endFrame - props.startFrame;
                if (Object.keys(state.zip.files).length >= captureCount) {
                    console.log(`Generating ${props.filename}`);
                    state.zip.generateAsync({
                        type: 'blob'
                    }).then((content)=>{
                        console.log('Frame capture complete');
                        _fileSaver.saveAs(content, props.filename);
                    });
                }
            });
        }
        state = {
            ...state,
            frame: state.frame + 1
        };
        return new _three.Group();
    };
};

},{"three":"64dkv","jszip":"4xNFN","file-saver":"9rIBV","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4xNFN":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
/*!

JSZip v3.7.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/ !function(t) {
    if ("object" == typeof exports && "undefined" != typeof module) module.exports = t();
    else if ("function" == typeof define && define.amd) define([], t);
    else ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).JSZip = t();
}(function() {
    return (function s(a, o, h) {
        function u(r, t2) {
            if (!o[r]) {
                if (!a[r]) {
                    var e = "function" == typeof require && undefined;
                    if (!t2 && e) return e(r, !0);
                    if (l) return l(r, !0);
                    var i = new Error("Cannot find module '" + r + "'");
                    throw i.code = "MODULE_NOT_FOUND", i;
                }
                var n = o[r] = {
                    exports: {
                    }
                };
                a[r][0].call(n.exports, function(t) {
                    var e = a[r][1][t];
                    return u(e || t);
                }, n, n.exports, s, a, o, h);
            }
            return o[r].exports;
        }
        for(var l = "function" == typeof require && undefined, t1 = 0; t1 < h.length; t1++)u(h[t1]);
        return u;
    })({
        1: [
            function(t3, e1, r1) {
                "use strict";
                var c = t3("./utils"), d1 = t3("./support"), p = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
                r1.encode = function(t) {
                    for(var e, r, i, n, s, a, o, h = [], u = 0, l = t.length, f = l, d = "string" !== c.getTypeOf(t); u < t.length;)f = l - u, i = d ? (e = t[u++], r = u < l ? t[u++] : 0, u < l ? t[u++] : 0) : (e = t.charCodeAt(u++), r = u < l ? t.charCodeAt(u++) : 0, u < l ? t.charCodeAt(u++) : 0), n = e >> 2, s = (3 & e) << 4 | r >> 4, a = 1 < f ? (15 & r) << 2 | i >> 6 : 64, o = 2 < f ? 63 & i : 64, h.push(p.charAt(n) + p.charAt(s) + p.charAt(a) + p.charAt(o));
                    return h.join("");
                }, r1.decode = function(t) {
                    var e, r, i, n, s, a, o = 0, h = 0, u = "data:";
                    if (t.substr(0, u.length) === u) throw new Error("Invalid base64 input, it looks like a data url.");
                    var l, f = 3 * (t = t.replace(/[^A-Za-z0-9\+\/\=]/g, "")).length / 4;
                    if (t.charAt(t.length - 1) === p.charAt(64) && f--, t.charAt(t.length - 2) === p.charAt(64) && f--, f % 1 != 0) throw new Error("Invalid base64 input, bad content length.");
                    for(l = d1.uint8array ? new Uint8Array(0 | f) : new Array(0 | f); o < t.length;)e = p.indexOf(t.charAt(o++)) << 2 | (n = p.indexOf(t.charAt(o++))) >> 4, r = (15 & n) << 4 | (s = p.indexOf(t.charAt(o++))) >> 2, i = (3 & s) << 6 | (a = p.indexOf(t.charAt(o++))), l[h++] = e, 64 !== s && (l[h++] = r), 64 !== a && (l[h++] = i);
                    return l;
                };
            },
            {
                "./support": 30,
                "./utils": 32
            }
        ],
        2: [
            function(t4, e2, r2) {
                "use strict";
                var i1 = t4("./external"), n1 = t4("./stream/DataWorker"), s = t4("./stream/Crc32Probe"), a = t4("./stream/DataLengthProbe");
                function o(t, e, r, i, n) {
                    this.compressedSize = t, this.uncompressedSize = e, this.crc32 = r, this.compression = i, this.compressedContent = n;
                }
                o.prototype = {
                    getContentWorker: function() {
                        var t = new n1(i1.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")), e = this;
                        return t.on("end", function() {
                            if (this.streamInfo.data_length !== e.uncompressedSize) throw new Error("Bug : uncompressed data size mismatch");
                        }), t;
                    },
                    getCompressedWorker: function() {
                        return new n1(i1.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
                    }
                }, o.createWorkerFrom = function(t, e, r) {
                    return t.pipe(new s).pipe(new a("uncompressedSize")).pipe(e.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression", e);
                }, e2.exports = o;
            },
            {
                "./external": 6,
                "./stream/Crc32Probe": 25,
                "./stream/DataLengthProbe": 26,
                "./stream/DataWorker": 27
            }
        ],
        3: [
            function(t, e, r) {
                "use strict";
                var i = t("./stream/GenericWorker");
                r.STORE = {
                    magic: "\0\0",
                    compressWorker: function(t) {
                        return new i("STORE compression");
                    },
                    uncompressWorker: function() {
                        return new i("STORE decompression");
                    }
                }, r.DEFLATE = t("./flate");
            },
            {
                "./flate": 7,
                "./stream/GenericWorker": 28
            }
        ],
        4: [
            function(t5, e3, r3) {
                "use strict";
                var i2 = t5("./utils");
                var o = function() {
                    for(var t, e = [], r = 0; r < 256; r++){
                        t = r;
                        for(var i = 0; i < 8; i++)t = 1 & t ? 3988292384 ^ t >>> 1 : t >>> 1;
                        e[r] = t;
                    }
                    return e;
                }();
                e3.exports = function(t6, e) {
                    return void 0 !== t6 && t6.length ? "string" !== i2.getTypeOf(t6) ? (function(t, e, r, i) {
                        var n = o, s = i + r;
                        t ^= -1;
                        for(var a = i; a < s; a++)t = t >>> 8 ^ n[255 & (t ^ e[a])];
                        return -1 ^ t;
                    })(0 | e, t6, t6.length, 0) : (function(t, e, r, i) {
                        var n = o, s = i + r;
                        t ^= -1;
                        for(var a = i; a < s; a++)t = t >>> 8 ^ n[255 & (t ^ e.charCodeAt(a))];
                        return -1 ^ t;
                    })(0 | e, t6, t6.length, 0) : 0;
                };
            },
            {
                "./utils": 32
            }
        ],
        5: [
            function(t, e, r) {
                "use strict";
                r.base64 = !1, r.binary = !1, r.dir = !1, r.createFolders = !0, r.date = null, r.compression = null, r.compressionOptions = null, r.comment = null, r.unixPermissions = null, r.dosPermissions = null;
            },
            {
            }
        ],
        6: [
            function(t, e, r) {
                "use strict";
                var i = null;
                i = "undefined" != typeof Promise ? Promise : t("lie"), e.exports = {
                    Promise: i
                };
            },
            {
                lie: 37
            }
        ],
        7: [
            function(t7, e4, r) {
                "use strict";
                var i = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array, n = t7("pako"), s = t7("./utils"), a = t7("./stream/GenericWorker"), o = i ? "uint8array" : "array";
                function h(t, e) {
                    a.call(this, "FlateWorker/" + t), this._pako = null, this._pakoAction = t, this._pakoOptions = e, this.meta = {
                    };
                }
                r.magic = "\b\0", s.inherits(h, a), h.prototype.processChunk = function(t) {
                    this.meta = t.meta, null === this._pako && this._createPako(), this._pako.push(s.transformTo(o, t.data), !1);
                }, h.prototype.flush = function() {
                    a.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], !0);
                }, h.prototype.cleanUp = function() {
                    a.prototype.cleanUp.call(this), this._pako = null;
                }, h.prototype._createPako = function() {
                    this._pako = new n[this._pakoAction]({
                        raw: !0,
                        level: this._pakoOptions.level || -1
                    });
                    var e = this;
                    this._pako.onData = function(t) {
                        e.push({
                            data: t,
                            meta: e.meta
                        });
                    };
                }, r.compressWorker = function(t) {
                    return new h("Deflate", t);
                }, r.uncompressWorker = function() {
                    return new h("Inflate", {
                    });
                };
            },
            {
                "./stream/GenericWorker": 28,
                "./utils": 32,
                pako: 38
            }
        ],
        8: [
            function(t8, e5, r4) {
                "use strict";
                function A(t, e) {
                    var r, i = "";
                    for(r = 0; r < e; r++)i += String.fromCharCode(255 & t), t >>>= 8;
                    return i;
                }
                function i3(t9, e6, r5, i, n, s) {
                    var a, o, h = t9.file, u = t9.compression, l = s !== O.utf8encode, f = I.transformTo("string", s(h.name)), d = I.transformTo("string", O.utf8encode(h.name)), c = h.comment, p = I.transformTo("string", s(c)), m = I.transformTo("string", O.utf8encode(c)), _ = d.length !== h.name.length, g = m.length !== c.length, b = "", v = "", y = "", w = h.dir, k = h.date, x = {
                        crc32: 0,
                        compressedSize: 0,
                        uncompressedSize: 0
                    };
                    e6 && !r5 || (x.crc32 = t9.crc32, x.compressedSize = t9.compressedSize, x.uncompressedSize = t9.uncompressedSize);
                    var S = 0;
                    e6 && (S |= 8), l || !_ && !g || (S |= 2048);
                    var z = 0, C = 0;
                    w && (z |= 16), "UNIX" === n ? (C = 798, z |= (function(t, e) {
                        var r = t;
                        return t || (r = e ? 16893 : 33204), (65535 & r) << 16;
                    })(h.unixPermissions, w)) : (C = 20, z |= (function(t) {
                        return 63 & (t || 0);
                    })(h.dosPermissions)), a = k.getUTCHours(), a <<= 6, a |= k.getUTCMinutes(), a <<= 5, a |= k.getUTCSeconds() / 2, o = k.getUTCFullYear() - 1980, o <<= 4, o |= k.getUTCMonth() + 1, o <<= 5, o |= k.getUTCDate(), _ && (v = A(1, 1) + A(B(f), 4) + d, b += "up" + A(v.length, 2) + v), g && (y = A(1, 1) + A(B(p), 4) + m, b += "uc" + A(y.length, 2) + y);
                    var E = "";
                    return E += "\n\0", E += A(S, 2), E += u.magic, E += A(a, 2), E += A(o, 2), E += A(x.crc32, 4), E += A(x.compressedSize, 4), E += A(x.uncompressedSize, 4), E += A(f.length, 2), E += A(b.length, 2), {
                        fileRecord: R.LOCAL_FILE_HEADER + E + f + b,
                        dirRecord: R.CENTRAL_FILE_HEADER + A(C, 2) + E + A(p.length, 2) + "\0\0\0\0" + A(z, 4) + A(i, 4) + f + b + p
                    };
                }
                var I = t8("../utils"), n2 = t8("../stream/GenericWorker"), O = t8("../utf8"), B = t8("../crc32"), R = t8("../signature");
                function s1(t, e, r, i) {
                    n2.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = e, this.zipPlatform = r, this.encodeFileName = i, this.streamFiles = t, this.accumulate = !1, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
                }
                I.inherits(s1, n2), s1.prototype.push = function(t) {
                    var e = t.meta.percent || 0, r = this.entriesCount, i = this._sources.length;
                    this.accumulate ? this.contentBuffer.push(t) : (this.bytesWritten += t.data.length, n2.prototype.push.call(this, {
                        data: t.data,
                        meta: {
                            currentFile: this.currentFile,
                            percent: r ? (e + 100 * (r - i - 1)) / r : 100
                        }
                    }));
                }, s1.prototype.openedSource = function(t) {
                    this.currentSourceOffset = this.bytesWritten, this.currentFile = t.file.name;
                    var e = this.streamFiles && !t.file.dir;
                    if (e) {
                        var r = i3(t, e, !1, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
                        this.push({
                            data: r.fileRecord,
                            meta: {
                                percent: 0
                            }
                        });
                    } else this.accumulate = !0;
                }, s1.prototype.closedSource = function(t10) {
                    this.accumulate = !1;
                    var e = this.streamFiles && !t10.file.dir, r = i3(t10, e, !0, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
                    if (this.dirRecords.push(r.dirRecord), e) this.push({
                        data: function(t) {
                            return R.DATA_DESCRIPTOR + A(t.crc32, 4) + A(t.compressedSize, 4) + A(t.uncompressedSize, 4);
                        }(t10),
                        meta: {
                            percent: 100
                        }
                    });
                    else for(this.push({
                        data: r.fileRecord,
                        meta: {
                            percent: 0
                        }
                    }); this.contentBuffer.length;)this.push(this.contentBuffer.shift());
                    this.currentFile = null;
                }, s1.prototype.flush = function() {
                    for(var t11 = this.bytesWritten, e7 = 0; e7 < this.dirRecords.length; e7++)this.push({
                        data: this.dirRecords[e7],
                        meta: {
                            percent: 100
                        }
                    });
                    var r6 = this.bytesWritten - t11, i4 = function(t, e, r, i, n) {
                        var s = I.transformTo("string", n(i));
                        return R.CENTRAL_DIRECTORY_END + "\0\0\0\0" + A(t, 2) + A(t, 2) + A(e, 4) + A(r, 4) + A(s.length, 2) + s;
                    }(this.dirRecords.length, r6, t11, this.zipComment, this.encodeFileName);
                    this.push({
                        data: i4,
                        meta: {
                            percent: 100
                        }
                    });
                }, s1.prototype.prepareNextSource = function() {
                    this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
                }, s1.prototype.registerPrevious = function(t12) {
                    this._sources.push(t12);
                    var e = this;
                    return t12.on("data", function(t) {
                        e.processChunk(t);
                    }), t12.on("end", function() {
                        e.closedSource(e.previous.streamInfo), e._sources.length ? e.prepareNextSource() : e.end();
                    }), t12.on("error", function(t) {
                        e.error(t);
                    }), this;
                }, s1.prototype.resume = function() {
                    return !!n2.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), !0) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), !0));
                }, s1.prototype.error = function(t) {
                    var e = this._sources;
                    if (!n2.prototype.error.call(this, t)) return !1;
                    for(var r = 0; r < e.length; r++)try {
                        e[r].error(t);
                    } catch (t13) {
                    }
                    return !0;
                }, s1.prototype.lock = function() {
                    n2.prototype.lock.call(this);
                    for(var t = this._sources, e = 0; e < t.length; e++)t[e].lock();
                }, e5.exports = s1;
            },
            {
                "../crc32": 4,
                "../signature": 23,
                "../stream/GenericWorker": 28,
                "../utf8": 31,
                "../utils": 32
            }
        ],
        9: [
            function(t14, e8, r7) {
                "use strict";
                var u = t14("../compressions"), i5 = t14("./ZipFileWorker");
                r7.generateWorker = function(t15, a, e9) {
                    var o = new i5(a.streamFiles, e9, a.platform, a.encodeFileName), h = 0;
                    try {
                        t15.forEach(function(t16, e10) {
                            h++;
                            var r8 = function(t, e) {
                                var r = t || e, i = u[r];
                                if (!i) throw new Error(r + " is not a valid compression method !");
                                return i;
                            }(e10.options.compression, a.compression), i6 = e10.options.compressionOptions || a.compressionOptions || {
                            }, n = e10.dir, s = e10.date;
                            e10._compressWorker(r8, i6).withStreamInfo("file", {
                                name: t16,
                                dir: n,
                                date: s,
                                comment: e10.comment || "",
                                unixPermissions: e10.unixPermissions,
                                dosPermissions: e10.dosPermissions
                            }).pipe(o);
                        }), o.entriesCount = h;
                    } catch (t) {
                        o.error(t);
                    }
                    return o;
                };
            },
            {
                "../compressions": 3,
                "./ZipFileWorker": 8
            }
        ],
        10: [
            function(t17, e11, r) {
                "use strict";
                function i() {
                    if (!(this instanceof i)) return new i;
                    if (arguments.length) throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
                    this.files = Object.create(null), this.comment = null, this.root = "", this.clone = function() {
                        var t = new i;
                        for(var e in this)"function" != typeof this[e] && (t[e] = this[e]);
                        return t;
                    };
                }
                (i.prototype = t17("./object")).loadAsync = t17("./load"), i.support = t17("./support"), i.defaults = t17("./defaults"), i.version = "3.7.1", i.loadAsync = function(t, e) {
                    return (new i).loadAsync(t, e);
                }, i.external = t17("./external"), e11.exports = i;
            },
            {
                "./defaults": 5,
                "./external": 6,
                "./load": 11,
                "./object": 15,
                "./support": 30
            }
        ],
        11: [
            function(t18, e12, r9) {
                "use strict";
                var i7 = t18("./utils"), n3 = t18("./external"), o = t18("./utf8"), h = t18("./zipEntries"), s2 = t18("./stream/Crc32Probe"), u = t18("./nodejsUtils");
                function l(i) {
                    return new n3.Promise(function(t19, e) {
                        var r = i.decompressed.getContentWorker().pipe(new s2);
                        r.on("error", function(t) {
                            e(t);
                        }).on("end", function() {
                            r.streamInfo.crc32 !== i.decompressed.crc32 ? e(new Error("Corrupted zip : CRC32 mismatch")) : t19();
                        }).resume();
                    });
                }
                e12.exports = function(t20, s) {
                    var a = this;
                    return s = i7.extend(s || {
                    }, {
                        base64: !1,
                        checkCRC32: !1,
                        optimizedBinaryString: !1,
                        createFolders: !1,
                        decodeFileName: o.utf8decode
                    }), u.isNode && u.isStream(t20) ? n3.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : i7.prepareContent("the loaded zip file", t20, !0, s.optimizedBinaryString, s.base64).then(function(t) {
                        var e = new h(s);
                        return e.load(t), e;
                    }).then(function(t) {
                        var e = [
                            n3.Promise.resolve(t)
                        ], r = t.files;
                        if (s.checkCRC32) for(var i = 0; i < r.length; i++)e.push(l(r[i]));
                        return n3.Promise.all(e);
                    }).then(function(t) {
                        for(var e = t.shift(), r = e.files, i = 0; i < r.length; i++){
                            var n = r[i];
                            a.file(n.fileNameStr, n.decompressed, {
                                binary: !0,
                                optimizedBinaryString: !0,
                                date: n.date,
                                dir: n.dir,
                                comment: n.fileCommentStr.length ? n.fileCommentStr : null,
                                unixPermissions: n.unixPermissions,
                                dosPermissions: n.dosPermissions,
                                createFolders: s.createFolders
                            });
                        }
                        return e.zipComment.length && (a.comment = e.zipComment), a;
                    });
                };
            },
            {
                "./external": 6,
                "./nodejsUtils": 14,
                "./stream/Crc32Probe": 25,
                "./utf8": 31,
                "./utils": 32,
                "./zipEntries": 33
            }
        ],
        12: [
            function(t21, e13, r) {
                "use strict";
                var i = t21("../utils"), n = t21("../stream/GenericWorker");
                function s(t, e) {
                    n.call(this, "Nodejs stream input adapter for " + t), this._upstreamEnded = !1, this._bindStream(e);
                }
                i.inherits(s, n), s.prototype._bindStream = function(t22) {
                    var e = this;
                    (this._stream = t22).pause(), t22.on("data", function(t) {
                        e.push({
                            data: t,
                            meta: {
                                percent: 0
                            }
                        });
                    }).on("error", function(t) {
                        e.isPaused ? this.generatedError = t : e.error(t);
                    }).on("end", function() {
                        e.isPaused ? e._upstreamEnded = !0 : e.end();
                    });
                }, s.prototype.pause = function() {
                    return !!n.prototype.pause.call(this) && (this._stream.pause(), !0);
                }, s.prototype.resume = function() {
                    return !!n.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), !0);
                }, e13.exports = s;
            },
            {
                "../stream/GenericWorker": 28,
                "../utils": 32
            }
        ],
        13: [
            function(t23, e14, r10) {
                "use strict";
                var n = t23("readable-stream").Readable;
                function i8(t24, e15, r) {
                    n.call(this, e15), this._helper = t24;
                    var i = this;
                    t24.on("data", function(t, e) {
                        i.push(t) || i._helper.pause(), r && r(e);
                    }).on("error", function(t) {
                        i.emit("error", t);
                    }).on("end", function() {
                        i.push(null);
                    });
                }
                t23("../utils").inherits(i8, n), i8.prototype._read = function() {
                    this._helper.resume();
                }, e14.exports = i8;
            },
            {
                "../utils": 32,
                "readable-stream": 16
            }
        ],
        14: [
            function(t25, e16, r) {
                "use strict";
                e16.exports = {
                    isNode: "undefined" != typeof Buffer,
                    newBufferFrom: function(t, e) {
                        if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(t, e);
                        if ("number" == typeof t) throw new Error('The "data" argument must not be a number');
                        return new Buffer(t, e);
                    },
                    allocBuffer: function(t) {
                        if (Buffer.alloc) return Buffer.alloc(t);
                        var e = new Buffer(t);
                        return e.fill(0), e;
                    },
                    isBuffer: function(t) {
                        return Buffer.isBuffer(t);
                    },
                    isStream: function(t) {
                        return t && "function" == typeof t.on && "function" == typeof t.pause && "function" == typeof t.resume;
                    }
                };
            },
            {
            }
        ],
        15: [
            function(t26, e17, r11) {
                "use strict";
                function s3(t, e, r) {
                    var i, n = u.getTypeOf(e), s = u.extend(r || {
                    }, f);
                    s.date = s.date || new Date, null !== s.compression && (s.compression = s.compression.toUpperCase()), "string" == typeof s.unixPermissions && (s.unixPermissions = parseInt(s.unixPermissions, 8)), s.unixPermissions && 16384 & s.unixPermissions && (s.dir = !0), s.dosPermissions && 16 & s.dosPermissions && (s.dir = !0), s.dir && (t = g(t)), s.createFolders && (i = _(t)) && b.call(this, i, !0);
                    var a = "string" === n && !1 === s.binary && !1 === s.base64;
                    r && void 0 !== r.binary || (s.binary = !a), (e instanceof d && 0 === e.uncompressedSize || s.dir || !e || 0 === e.length) && (s.base64 = !1, s.binary = !0, e = "", s.compression = "STORE", n = "string");
                    var o = null;
                    o = e instanceof d || e instanceof l ? e : p.isNode && p.isStream(e) ? new m(t, e) : u.prepareContent(t, e, s.binary, s.optimizedBinaryString, s.base64);
                    var h = new c(t, o, s);
                    this.files[t] = h;
                }
                var n4 = t26("./utf8"), u = t26("./utils"), l = t26("./stream/GenericWorker"), a1 = t26("./stream/StreamHelper"), f = t26("./defaults"), d = t26("./compressedObject"), c = t26("./zipObject"), o1 = t26("./generate"), p = t26("./nodejsUtils"), m = t26("./nodejs/NodejsStreamInputAdapter"), _ = function(t) {
                    "/" === t.slice(-1) && (t = t.substring(0, t.length - 1));
                    var e = t.lastIndexOf("/");
                    return 0 < e ? t.substring(0, e) : "";
                }, g = function(t) {
                    return "/" !== t.slice(-1) && (t += "/"), t;
                }, b = function(t, e) {
                    return e = void 0 !== e ? e : f.createFolders, t = g(t), this.files[t] || s3.call(this, t, null, {
                        dir: !0,
                        createFolders: e
                    }), this.files[t];
                };
                function h1(t) {
                    return "[object RegExp]" === Object.prototype.toString.call(t);
                }
                var i9 = {
                    load: function() {
                        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
                    },
                    forEach: function(t) {
                        var e, r, i;
                        for(e in this.files)i = this.files[e], (r = e.slice(this.root.length, e.length)) && e.slice(0, this.root.length) === this.root && t(r, i);
                    },
                    filter: function(r) {
                        var i = [];
                        return this.forEach(function(t, e) {
                            r(t, e) && i.push(e);
                        }), i;
                    },
                    file: function(t27, e18, r) {
                        if (1 !== arguments.length) return t27 = this.root + t27, s3.call(this, t27, e18, r), this;
                        if (h1(t27)) {
                            var i = t27;
                            return this.filter(function(t, e) {
                                return !e.dir && i.test(t);
                            });
                        }
                        var n = this.files[this.root + t27];
                        return n && !n.dir ? n : null;
                    },
                    folder: function(r) {
                        if (!r) return this;
                        if (h1(r)) return this.filter(function(t, e) {
                            return e.dir && r.test(t);
                        });
                        var t28 = this.root + r, e19 = b.call(this, t28), i = this.clone();
                        return i.root = e19.name, i;
                    },
                    remove: function(r) {
                        r = this.root + r;
                        var t = this.files[r];
                        if (t || ("/" !== r.slice(-1) && (r += "/"), t = this.files[r]), t && !t.dir) delete this.files[r];
                        else for(var e20 = this.filter(function(t, e) {
                            return e.name.slice(0, r.length) === r;
                        }), i = 0; i < e20.length; i++)delete this.files[e20[i].name];
                        return this;
                    },
                    generate: function(t) {
                        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
                    },
                    generateInternalStream: function(t) {
                        var e, r = {
                        };
                        try {
                            if ((r = u.extend(t || {
                            }, {
                                streamFiles: !1,
                                compression: "STORE",
                                compressionOptions: null,
                                type: "",
                                platform: "DOS",
                                comment: null,
                                mimeType: "application/zip",
                                encodeFileName: n4.utf8encode
                            })).type = r.type.toLowerCase(), r.compression = r.compression.toUpperCase(), "binarystring" === r.type && (r.type = "string"), !r.type) throw new Error("No output type specified.");
                            u.checkSupport(r.type), "darwin" !== r.platform && "freebsd" !== r.platform && "linux" !== r.platform && "sunos" !== r.platform || (r.platform = "UNIX"), "win32" === r.platform && (r.platform = "DOS");
                            var i = r.comment || this.comment || "";
                            e = o1.generateWorker(this, r, i);
                        } catch (t29) {
                            (e = new l("error")).error(t29);
                        }
                        return new a1(e, r.type || "string", r.mimeType);
                    },
                    generateAsync: function(t, e) {
                        return this.generateInternalStream(t).accumulate(e);
                    },
                    generateNodeStream: function(t, e) {
                        return (t = t || {
                        }).type || (t.type = "nodebuffer"), this.generateInternalStream(t).toNodejsStream(e);
                    }
                };
                e17.exports = i9;
            },
            {
                "./compressedObject": 2,
                "./defaults": 5,
                "./generate": 9,
                "./nodejs/NodejsStreamInputAdapter": 12,
                "./nodejsUtils": 14,
                "./stream/GenericWorker": 28,
                "./stream/StreamHelper": 29,
                "./utf8": 31,
                "./utils": 32,
                "./zipObject": 35
            }
        ],
        16: [
            function(t, e, r) {
                e.exports = t("stream");
            },
            {
                stream: void 0
            }
        ],
        17: [
            function(t30, e21, r12) {
                "use strict";
                var i10 = t30("./DataReader");
                function n5(t) {
                    i10.call(this, t);
                    for(var e = 0; e < this.data.length; e++)t[e] = 255 & t[e];
                }
                t30("../utils").inherits(n5, i10), n5.prototype.byteAt = function(t) {
                    return this.data[this.zero + t];
                }, n5.prototype.lastIndexOfSignature = function(t) {
                    for(var e = t.charCodeAt(0), r = t.charCodeAt(1), i = t.charCodeAt(2), n = t.charCodeAt(3), s = this.length - 4; 0 <= s; --s)if (this.data[s] === e && this.data[s + 1] === r && this.data[s + 2] === i && this.data[s + 3] === n) return s - this.zero;
                    return -1;
                }, n5.prototype.readAndCheckSignature = function(t) {
                    var e = t.charCodeAt(0), r = t.charCodeAt(1), i = t.charCodeAt(2), n = t.charCodeAt(3), s = this.readData(4);
                    return e === s[0] && r === s[1] && i === s[2] && n === s[3];
                }, n5.prototype.readData = function(t) {
                    if (this.checkOffset(t), 0 === t) return [];
                    var e = this.data.slice(this.zero + this.index, this.zero + this.index + t);
                    return this.index += t, e;
                }, e21.exports = n5;
            },
            {
                "../utils": 32,
                "./DataReader": 18
            }
        ],
        18: [
            function(t31, e22, r13) {
                "use strict";
                var i = t31("../utils");
                function n(t) {
                    this.data = t, this.length = t.length, this.index = 0, this.zero = 0;
                }
                n.prototype = {
                    checkOffset: function(t) {
                        this.checkIndex(this.index + t);
                    },
                    checkIndex: function(t) {
                        if (this.length < this.zero + t || t < 0) throw new Error("End of data reached (data length = " + this.length + ", asked index = " + t + "). Corrupted zip ?");
                    },
                    setIndex: function(t) {
                        this.checkIndex(t), this.index = t;
                    },
                    skip: function(t) {
                        this.setIndex(this.index + t);
                    },
                    byteAt: function(t) {
                    },
                    readInt: function(t) {
                        var e, r = 0;
                        for(this.checkOffset(t), e = this.index + t - 1; e >= this.index; e--)r = (r << 8) + this.byteAt(e);
                        return this.index += t, r;
                    },
                    readString: function(t) {
                        return i.transformTo("string", this.readData(t));
                    },
                    readData: function(t) {
                    },
                    lastIndexOfSignature: function(t) {
                    },
                    readAndCheckSignature: function(t) {
                    },
                    readDate: function() {
                        var t = this.readInt(4);
                        return new Date(Date.UTC(1980 + (t >> 25 & 127), (t >> 21 & 15) - 1, t >> 16 & 31, t >> 11 & 31, t >> 5 & 63, (31 & t) << 1));
                    }
                }, e22.exports = n;
            },
            {
                "../utils": 32
            }
        ],
        19: [
            function(t32, e23, r) {
                "use strict";
                var i = t32("./Uint8ArrayReader");
                function n(t) {
                    i.call(this, t);
                }
                t32("../utils").inherits(n, i), n.prototype.readData = function(t) {
                    this.checkOffset(t);
                    var e = this.data.slice(this.zero + this.index, this.zero + this.index + t);
                    return this.index += t, e;
                }, e23.exports = n;
            },
            {
                "../utils": 32,
                "./Uint8ArrayReader": 21
            }
        ],
        20: [
            function(t33, e24, r) {
                "use strict";
                var i = t33("./DataReader");
                function n(t) {
                    i.call(this, t);
                }
                t33("../utils").inherits(n, i), n.prototype.byteAt = function(t) {
                    return this.data.charCodeAt(this.zero + t);
                }, n.prototype.lastIndexOfSignature = function(t) {
                    return this.data.lastIndexOf(t) - this.zero;
                }, n.prototype.readAndCheckSignature = function(t) {
                    return t === this.readData(4);
                }, n.prototype.readData = function(t) {
                    this.checkOffset(t);
                    var e = this.data.slice(this.zero + this.index, this.zero + this.index + t);
                    return this.index += t, e;
                }, e24.exports = n;
            },
            {
                "../utils": 32,
                "./DataReader": 18
            }
        ],
        21: [
            function(t34, e25, r) {
                "use strict";
                var i = t34("./ArrayReader");
                function n(t) {
                    i.call(this, t);
                }
                t34("../utils").inherits(n, i), n.prototype.readData = function(t) {
                    if (this.checkOffset(t), 0 === t) return new Uint8Array(0);
                    var e = this.data.subarray(this.zero + this.index, this.zero + this.index + t);
                    return this.index += t, e;
                }, e25.exports = n;
            },
            {
                "../utils": 32,
                "./ArrayReader": 17
            }
        ],
        22: [
            function(t35, e26, r) {
                "use strict";
                var i = t35("../utils"), n = t35("../support"), s = t35("./ArrayReader"), a = t35("./StringReader"), o = t35("./NodeBufferReader"), h = t35("./Uint8ArrayReader");
                e26.exports = function(t) {
                    var e = i.getTypeOf(t);
                    return i.checkSupport(e), "string" !== e || n.uint8array ? "nodebuffer" === e ? new o(t) : n.uint8array ? new h(i.transformTo("uint8array", t)) : new s(i.transformTo("array", t)) : new a(t);
                };
            },
            {
                "../support": 30,
                "../utils": 32,
                "./ArrayReader": 17,
                "./NodeBufferReader": 19,
                "./StringReader": 20,
                "./Uint8ArrayReader": 21
            }
        ],
        23: [
            function(t, e, r) {
                "use strict";
                r.LOCAL_FILE_HEADER = "PK", r.CENTRAL_FILE_HEADER = "PK", r.CENTRAL_DIRECTORY_END = "PK", r.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK", r.ZIP64_CENTRAL_DIRECTORY_END = "PK", r.DATA_DESCRIPTOR = "PK\b";
            },
            {
            }
        ],
        24: [
            function(t36, e, r) {
                "use strict";
                var i = t36("./GenericWorker"), n = t36("../utils");
                function s(t) {
                    i.call(this, "ConvertWorker to " + t), this.destType = t;
                }
                n.inherits(s, i), s.prototype.processChunk = function(t) {
                    this.push({
                        data: n.transformTo(this.destType, t.data),
                        meta: t.meta
                    });
                }, e.exports = s;
            },
            {
                "../utils": 32,
                "./GenericWorker": 28
            }
        ],
        25: [
            function(t37, e, r) {
                "use strict";
                var i = t37("./GenericWorker"), n = t37("../crc32");
                function s() {
                    i.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
                }
                t37("../utils").inherits(s, i), s.prototype.processChunk = function(t) {
                    this.streamInfo.crc32 = n(t.data, this.streamInfo.crc32 || 0), this.push(t);
                }, e.exports = s;
            },
            {
                "../crc32": 4,
                "../utils": 32,
                "./GenericWorker": 28
            }
        ],
        26: [
            function(t38, e27, r) {
                "use strict";
                var i = t38("../utils"), n = t38("./GenericWorker");
                function s(t) {
                    n.call(this, "DataLengthProbe for " + t), this.propName = t, this.withStreamInfo(t, 0);
                }
                i.inherits(s, n), s.prototype.processChunk = function(t) {
                    if (t) {
                        var e = this.streamInfo[this.propName] || 0;
                        this.streamInfo[this.propName] = e + t.data.length;
                    }
                    n.prototype.processChunk.call(this, t);
                }, e27.exports = s;
            },
            {
                "../utils": 32,
                "./GenericWorker": 28
            }
        ],
        27: [
            function(t39, e28, r) {
                "use strict";
                var i = t39("../utils"), n = t39("./GenericWorker");
                function s(t40) {
                    n.call(this, "DataWorker");
                    var e = this;
                    this.dataIsReady = !1, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = !1, t40.then(function(t) {
                        e.dataIsReady = !0, e.data = t, e.max = t && t.length || 0, e.type = i.getTypeOf(t), e.isPaused || e._tickAndRepeat();
                    }, function(t) {
                        e.error(t);
                    });
                }
                i.inherits(s, n), s.prototype.cleanUp = function() {
                    n.prototype.cleanUp.call(this), this.data = null;
                }, s.prototype.resume = function() {
                    return !!n.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = !0, i.delay(this._tickAndRepeat, [], this)), !0);
                }, s.prototype._tickAndRepeat = function() {
                    this._tickScheduled = !1, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (i.delay(this._tickAndRepeat, [], this), this._tickScheduled = !0));
                }, s.prototype._tick = function() {
                    if (this.isPaused || this.isFinished) return !1;
                    var t = null, e = Math.min(this.max, this.index + 16384);
                    if (this.index >= this.max) return this.end();
                    switch(this.type){
                        case "string":
                            t = this.data.substring(this.index, e);
                            break;
                        case "uint8array":
                            t = this.data.subarray(this.index, e);
                            break;
                        case "array":
                        case "nodebuffer":
                            t = this.data.slice(this.index, e);
                    }
                    return this.index = e, this.push({
                        data: t,
                        meta: {
                            percent: this.max ? this.index / this.max * 100 : 0
                        }
                    });
                }, e28.exports = s;
            },
            {
                "../utils": 32,
                "./GenericWorker": 28
            }
        ],
        28: [
            function(t41, e29, r14) {
                "use strict";
                function i(t) {
                    this.name = t || "default", this.streamInfo = {
                    }, this.generatedError = null, this.extraStreamInfo = {
                    }, this.isPaused = !0, this.isFinished = !1, this.isLocked = !1, this._listeners = {
                        data: [],
                        end: [],
                        error: []
                    }, this.previous = null;
                }
                i.prototype = {
                    push: function(t) {
                        this.emit("data", t);
                    },
                    end: function() {
                        if (this.isFinished) return !1;
                        this.flush();
                        try {
                            this.emit("end"), this.cleanUp(), this.isFinished = !0;
                        } catch (t) {
                            this.emit("error", t);
                        }
                        return !0;
                    },
                    error: function(t) {
                        return !this.isFinished && (this.isPaused ? this.generatedError = t : (this.isFinished = !0, this.emit("error", t), this.previous && this.previous.error(t), this.cleanUp()), !0);
                    },
                    on: function(t, e) {
                        return this._listeners[t].push(e), this;
                    },
                    cleanUp: function() {
                        this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
                    },
                    emit: function(t, e) {
                        if (this._listeners[t]) for(var r = 0; r < this._listeners[t].length; r++)this._listeners[t][r].call(this, e);
                    },
                    pipe: function(t) {
                        return t.registerPrevious(this);
                    },
                    registerPrevious: function(t42) {
                        if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
                        this.streamInfo = t42.streamInfo, this.mergeStreamInfo(), this.previous = t42;
                        var e = this;
                        return t42.on("data", function(t) {
                            e.processChunk(t);
                        }), t42.on("end", function() {
                            e.end();
                        }), t42.on("error", function(t) {
                            e.error(t);
                        }), this;
                    },
                    pause: function() {
                        return !this.isPaused && !this.isFinished && (this.isPaused = !0, this.previous && this.previous.pause(), !0);
                    },
                    resume: function() {
                        if (!this.isPaused || this.isFinished) return !1;
                        var t = this.isPaused = !1;
                        return this.generatedError && (this.error(this.generatedError), t = !0), this.previous && this.previous.resume(), !t;
                    },
                    flush: function() {
                    },
                    processChunk: function(t) {
                        this.push(t);
                    },
                    withStreamInfo: function(t, e) {
                        return this.extraStreamInfo[t] = e, this.mergeStreamInfo(), this;
                    },
                    mergeStreamInfo: function() {
                        for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t) && (this.streamInfo[t] = this.extraStreamInfo[t]);
                    },
                    lock: function() {
                        if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
                        this.isLocked = !0, this.previous && this.previous.lock();
                    },
                    toString: function() {
                        var t = "Worker " + this.name;
                        return this.previous ? this.previous + " -> " + t : t;
                    }
                }, e29.exports = i;
            },
            {
            }
        ],
        29: [
            function(t44, e30, r15) {
                "use strict";
                var h = t44("../utils"), n6 = t44("./ConvertWorker"), s4 = t44("./GenericWorker"), u = t44("../base64"), i11 = t44("../support"), a2 = t44("../external"), o2 = null;
                if (i11.nodestream) try {
                    o2 = t44("../nodejs/NodejsStreamOutputAdapter");
                } catch (t43) {
                }
                function l(t45, o) {
                    return new a2.Promise(function(e31, r16) {
                        var i12 = [], n7 = t45._internalType, s5 = t45._outputType, a = t45._mimeType;
                        t45.on("data", function(t, e) {
                            i12.push(t), o && o(e);
                        }).on("error", function(t) {
                            i12 = [], r16(t);
                        }).on("end", function() {
                            try {
                                var t46 = function(t, e, r) {
                                    switch(t){
                                        case "blob":
                                            return h.newBlob(h.transformTo("arraybuffer", e), r);
                                        case "base64":
                                            return u.encode(e);
                                        default:
                                            return h.transformTo(t, e);
                                    }
                                }(s5, function(t, e) {
                                    var r, i = 0, n = null, s = 0;
                                    for(r = 0; r < e.length; r++)s += e[r].length;
                                    switch(t){
                                        case "string":
                                            return e.join("");
                                        case "array":
                                            return Array.prototype.concat.apply([], e);
                                        case "uint8array":
                                            for(n = new Uint8Array(s), r = 0; r < e.length; r++)n.set(e[r], i), i += e[r].length;
                                            return n;
                                        case "nodebuffer":
                                            return Buffer.concat(e);
                                        default:
                                            throw new Error("concat : unsupported type '" + t + "'");
                                    }
                                }(n7, i12), a);
                                e31(t46);
                            } catch (t) {
                                r16(t);
                            }
                            i12 = [];
                        }).resume();
                    });
                }
                function f(t, e, r) {
                    var i = e;
                    switch(e){
                        case "blob":
                        case "arraybuffer":
                            i = "uint8array";
                            break;
                        case "base64":
                            i = "string";
                    }
                    try {
                        this._internalType = i, this._outputType = e, this._mimeType = r, h.checkSupport(i), this._worker = t.pipe(new n6(i)), t.lock();
                    } catch (t47) {
                        this._worker = new s4("error"), this._worker.error(t47);
                    }
                }
                f.prototype = {
                    accumulate: function(t) {
                        return l(this, t);
                    },
                    on: function(t48, e) {
                        var r = this;
                        return "data" === t48 ? this._worker.on(t48, function(t) {
                            e.call(r, t.data, t.meta);
                        }) : this._worker.on(t48, function() {
                            h.delay(e, arguments, r);
                        }), this;
                    },
                    resume: function() {
                        return h.delay(this._worker.resume, [], this._worker), this;
                    },
                    pause: function() {
                        return this._worker.pause(), this;
                    },
                    toNodejsStream: function(t) {
                        if (h.checkSupport("nodestream"), "nodebuffer" !== this._outputType) throw new Error(this._outputType + " is not supported by this method");
                        return new o2(this, {
                            objectMode: "nodebuffer" !== this._outputType
                        }, t);
                    }
                }, e30.exports = f;
            },
            {
                "../base64": 1,
                "../external": 6,
                "../nodejs/NodejsStreamOutputAdapter": 13,
                "../support": 30,
                "../utils": 32,
                "./ConvertWorker": 24,
                "./GenericWorker": 28
            }
        ],
        30: [
            function(t, e, r) {
                "use strict";
                if (r.base64 = !0, r.array = !0, r.string = !0, r.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array, r.nodebuffer = "undefined" != typeof Buffer, r.uint8array = "undefined" != typeof Uint8Array, "undefined" == typeof ArrayBuffer) r.blob = !1;
                else {
                    var i = new ArrayBuffer(0);
                    try {
                        r.blob = 0 === new Blob([
                            i
                        ], {
                            type: "application/zip"
                        }).size;
                    } catch (t) {
                        try {
                            var n = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder);
                            n.append(i), r.blob = 0 === n.getBlob("application/zip").size;
                        } catch (t) {
                            r.blob = !1;
                        }
                    }
                }
                try {
                    r.nodestream = !!t("readable-stream").Readable;
                } catch (t49) {
                    r.nodestream = !1;
                }
            },
            {
                "readable-stream": 16
            }
        ],
        31: [
            function(t50, e32, s6) {
                "use strict";
                for(var o3 = t50("./utils"), h = t50("./support"), r17 = t50("./nodejsUtils"), i13 = t50("./stream/GenericWorker"), u = new Array(256), n8 = 0; n8 < 256; n8++)u[n8] = 252 <= n8 ? 6 : 248 <= n8 ? 5 : 240 <= n8 ? 4 : 224 <= n8 ? 3 : 192 <= n8 ? 2 : 1;
                u[254] = u[254] = 1;
                function a3() {
                    i13.call(this, "utf-8 decode"), this.leftOver = null;
                }
                function l() {
                    i13.call(this, "utf-8 encode");
                }
                s6.utf8encode = function(t51) {
                    return h.nodebuffer ? r17.newBufferFrom(t51, "utf-8") : (function(t) {
                        var e, r, i, n, s, a = t.length, o = 0;
                        for(n = 0; n < a; n++)55296 == (64512 & (r = t.charCodeAt(n))) && n + 1 < a && 56320 == (64512 & (i = t.charCodeAt(n + 1))) && (r = 65536 + (r - 55296 << 10) + (i - 56320), n++), o += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4;
                        for(e = h.uint8array ? new Uint8Array(o) : new Array(o), n = s = 0; s < o; n++)55296 == (64512 & (r = t.charCodeAt(n))) && n + 1 < a && 56320 == (64512 & (i = t.charCodeAt(n + 1))) && (r = 65536 + (r - 55296 << 10) + (i - 56320), n++), r < 128 ? e[s++] = r : (r < 2048 ? e[s++] = 192 | r >>> 6 : (r < 65536 ? e[s++] = 224 | r >>> 12 : (e[s++] = 240 | r >>> 18, e[s++] = 128 | r >>> 12 & 63), e[s++] = 128 | r >>> 6 & 63), e[s++] = 128 | 63 & r);
                        return e;
                    })(t51);
                }, s6.utf8decode = function(t52) {
                    return h.nodebuffer ? o3.transformTo("nodebuffer", t52).toString("utf-8") : (function(t) {
                        var e, r, i, n, s = t.length, a = new Array(2 * s);
                        for(e = r = 0; e < s;)if ((i = t[e++]) < 128) a[r++] = i;
                        else if (4 < (n = u[i])) a[r++] = 65533, e += n - 1;
                        else {
                            for(i &= 2 === n ? 31 : 3 === n ? 15 : 7; 1 < n && e < s;)i = i << 6 | 63 & t[e++], n--;
                            1 < n ? a[r++] = 65533 : i < 65536 ? a[r++] = i : (i -= 65536, a[r++] = 55296 | i >> 10 & 1023, a[r++] = 56320 | 1023 & i);
                        }
                        return a.length !== r && (a.subarray ? a = a.subarray(0, r) : a.length = r), o3.applyFromCharCode(a);
                    })(t52 = o3.transformTo(h.uint8array ? "uint8array" : "array", t52));
                }, o3.inherits(a3, i13), a3.prototype.processChunk = function(t53) {
                    var e33 = o3.transformTo(h.uint8array ? "uint8array" : "array", t53.data);
                    if (this.leftOver && this.leftOver.length) {
                        if (h.uint8array) {
                            var r = e33;
                            (e33 = new Uint8Array(r.length + this.leftOver.length)).set(this.leftOver, 0), e33.set(r, this.leftOver.length);
                        } else e33 = this.leftOver.concat(e33);
                        this.leftOver = null;
                    }
                    var i = function(t, e) {
                        var r;
                        for((e = e || t.length) > t.length && (e = t.length), r = e - 1; 0 <= r && 128 == (192 & t[r]);)r--;
                        return r < 0 ? e : 0 === r ? e : r + u[t[r]] > e ? r : e;
                    }(e33), n = e33;
                    i !== e33.length && (h.uint8array ? (n = e33.subarray(0, i), this.leftOver = e33.subarray(i, e33.length)) : (n = e33.slice(0, i), this.leftOver = e33.slice(i, e33.length))), this.push({
                        data: s6.utf8decode(n),
                        meta: t53.meta
                    });
                }, a3.prototype.flush = function() {
                    this.leftOver && this.leftOver.length && (this.push({
                        data: s6.utf8decode(this.leftOver),
                        meta: {
                        }
                    }), this.leftOver = null);
                }, s6.Utf8DecodeWorker = a3, o3.inherits(l, i13), l.prototype.processChunk = function(t) {
                    this.push({
                        data: s6.utf8encode(t.data),
                        meta: t.meta
                    });
                }, s6.Utf8EncodeWorker = l;
            },
            {
                "./nodejsUtils": 14,
                "./stream/GenericWorker": 28,
                "./support": 30,
                "./utils": 32
            }
        ],
        32: [
            function(t54, e34, a) {
                "use strict";
                var o = t54("./support"), h = t54("./base64"), r18 = t54("./nodejsUtils"), i14 = t54("set-immediate-shim"), u = t54("./external");
                function n9(t) {
                    return t;
                }
                function l(t, e) {
                    for(var r = 0; r < t.length; ++r)e[r] = 255 & t.charCodeAt(r);
                    return e;
                }
                a.newBlob = function(e, r) {
                    a.checkSupport("blob");
                    try {
                        return new Blob([
                            e
                        ], {
                            type: r
                        });
                    } catch (t) {
                        try {
                            var i = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder);
                            return i.append(e), i.getBlob(r);
                        } catch (t) {
                            throw new Error("Bug : can't construct the Blob.");
                        }
                    }
                };
                var s7 = {
                    stringifyByChunk: function(t, e, r) {
                        var i = [], n = 0, s = t.length;
                        if (s <= r) return String.fromCharCode.apply(null, t);
                        for(; n < s;)"array" === e || "nodebuffer" === e ? i.push(String.fromCharCode.apply(null, t.slice(n, Math.min(n + r, s)))) : i.push(String.fromCharCode.apply(null, t.subarray(n, Math.min(n + r, s)))), n += r;
                        return i.join("");
                    },
                    stringifyByChar: function(t) {
                        for(var e = "", r = 0; r < t.length; r++)e += String.fromCharCode(t[r]);
                        return e;
                    },
                    applyCanBeUsed: {
                        uint8array: function() {
                            try {
                                return o.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;
                            } catch (t) {
                                return !1;
                            }
                        }(),
                        nodebuffer: function() {
                            try {
                                return o.nodebuffer && 1 === String.fromCharCode.apply(null, r18.allocBuffer(1)).length;
                            } catch (t) {
                                return !1;
                            }
                        }()
                    }
                };
                function f(t) {
                    var e = 65536, r = a.getTypeOf(t), i = !0;
                    if ("uint8array" === r ? i = s7.applyCanBeUsed.uint8array : "nodebuffer" === r && (i = s7.applyCanBeUsed.nodebuffer), i) for(; 1 < e;)try {
                        return s7.stringifyByChunk(t, r, e);
                    } catch (t55) {
                        e = Math.floor(e / 2);
                    }
                    return s7.stringifyByChar(t);
                }
                function d(t, e) {
                    for(var r = 0; r < t.length; r++)e[r] = t[r];
                    return e;
                }
                a.applyFromCharCode = f;
                var c = {
                };
                c.string = {
                    string: n9,
                    array: function(t) {
                        return l(t, new Array(t.length));
                    },
                    arraybuffer: function(t) {
                        return c.string.uint8array(t).buffer;
                    },
                    uint8array: function(t) {
                        return l(t, new Uint8Array(t.length));
                    },
                    nodebuffer: function(t) {
                        return l(t, r18.allocBuffer(t.length));
                    }
                }, c.array = {
                    string: f,
                    array: n9,
                    arraybuffer: function(t) {
                        return new Uint8Array(t).buffer;
                    },
                    uint8array: function(t) {
                        return new Uint8Array(t);
                    },
                    nodebuffer: function(t) {
                        return r18.newBufferFrom(t);
                    }
                }, c.arraybuffer = {
                    string: function(t) {
                        return f(new Uint8Array(t));
                    },
                    array: function(t) {
                        return d(new Uint8Array(t), new Array(t.byteLength));
                    },
                    arraybuffer: n9,
                    uint8array: function(t) {
                        return new Uint8Array(t);
                    },
                    nodebuffer: function(t) {
                        return r18.newBufferFrom(new Uint8Array(t));
                    }
                }, c.uint8array = {
                    string: f,
                    array: function(t) {
                        return d(t, new Array(t.length));
                    },
                    arraybuffer: function(t) {
                        return t.buffer;
                    },
                    uint8array: n9,
                    nodebuffer: function(t) {
                        return r18.newBufferFrom(t);
                    }
                }, c.nodebuffer = {
                    string: f,
                    array: function(t) {
                        return d(t, new Array(t.length));
                    },
                    arraybuffer: function(t) {
                        return c.nodebuffer.uint8array(t).buffer;
                    },
                    uint8array: function(t) {
                        return d(t, new Uint8Array(t.length));
                    },
                    nodebuffer: n9
                }, a.transformTo = function(t, e) {
                    if (e = e || "", !t) return e;
                    a.checkSupport(t);
                    var r = a.getTypeOf(e);
                    return c[r][t](e);
                }, a.getTypeOf = function(t) {
                    return "string" == typeof t ? "string" : "[object Array]" === Object.prototype.toString.call(t) ? "array" : o.nodebuffer && r18.isBuffer(t) ? "nodebuffer" : o.uint8array && t instanceof Uint8Array ? "uint8array" : o.arraybuffer && t instanceof ArrayBuffer ? "arraybuffer" : void 0;
                }, a.checkSupport = function(t) {
                    if (!o[t.toLowerCase()]) throw new Error(t + " is not supported by this platform");
                }, a.MAX_VALUE_16BITS = 65535, a.MAX_VALUE_32BITS = -1, a.pretty = function(t) {
                    var e, r, i = "";
                    for(r = 0; r < (t || "").length; r++)i += "\\x" + ((e = t.charCodeAt(r)) < 16 ? "0" : "") + e.toString(16).toUpperCase();
                    return i;
                }, a.delay = function(t, e, r) {
                    i14(function() {
                        t.apply(r || null, e || []);
                    });
                }, a.inherits = function(t, e) {
                    function r() {
                    }
                    r.prototype = e.prototype, t.prototype = new r;
                }, a.extend = function() {
                    var t, e, r = {
                    };
                    for(t = 0; t < arguments.length; t++)for(e in arguments[t])arguments[t].hasOwnProperty(e) && void 0 === r[e] && (r[e] = arguments[t][e]);
                    return r;
                }, a.prepareContent = function(r19, t56, i15, n, s) {
                    return u.Promise.resolve(t56).then(function(i) {
                        return o.blob && (i instanceof Blob || -1 !== [
                            "[object File]",
                            "[object Blob]"
                        ].indexOf(Object.prototype.toString.call(i))) && "undefined" != typeof FileReader ? new u.Promise(function(e, r) {
                            var t57 = new FileReader;
                            t57.onload = function(t) {
                                e(t.target.result);
                            }, t57.onerror = function(t) {
                                r(t.target.error);
                            }, t57.readAsArrayBuffer(i);
                        }) : i;
                    }).then(function(t58) {
                        var e = a.getTypeOf(t58);
                        return e ? ("arraybuffer" === e ? t58 = a.transformTo("uint8array", t58) : "string" === e && (s ? t58 = h.decode(t58) : i15 && !0 !== n && (t58 = (function(t) {
                            return l(t, o.uint8array ? new Uint8Array(t.length) : new Array(t.length));
                        })(t58))), t58) : u.Promise.reject(new Error("Can't read the data of '" + r19 + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
                    });
                };
            },
            {
                "./base64": 1,
                "./external": 6,
                "./nodejsUtils": 14,
                "./support": 30,
                "set-immediate-shim": 54
            }
        ],
        33: [
            function(t59, e35, r20) {
                "use strict";
                var i16 = t59("./reader/readerFor"), n = t59("./utils"), s = t59("./signature"), a = t59("./zipEntry"), o = (t59("./utf8"), t59("./support"));
                function h(t) {
                    this.files = [], this.loadOptions = t;
                }
                h.prototype = {
                    checkSignature: function(t) {
                        if (!this.reader.readAndCheckSignature(t)) {
                            this.reader.index -= 4;
                            var e = this.reader.readString(4);
                            throw new Error("Corrupted zip or bug: unexpected signature (" + n.pretty(e) + ", expected " + n.pretty(t) + ")");
                        }
                    },
                    isSignature: function(t, e) {
                        var r = this.reader.index;
                        this.reader.setIndex(t);
                        var i = this.reader.readString(4) === e;
                        return this.reader.setIndex(r), i;
                    },
                    readBlockEndOfCentral: function() {
                        this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
                        var t = this.reader.readData(this.zipCommentLength), e = o.uint8array ? "uint8array" : "array", r = n.transformTo(e, t);
                        this.zipComment = this.loadOptions.decodeFileName(r);
                    },
                    readBlockZip64EndOfCentral: function() {
                        this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {
                        };
                        for(var t, e, r, i = this.zip64EndOfCentralSize - 44; 0 < i;)t = this.reader.readInt(2), e = this.reader.readInt(4), r = this.reader.readData(e), this.zip64ExtensibleData[t] = {
                            id: t,
                            length: e,
                            value: r
                        };
                    },
                    readBlockZip64EndOfCentralLocator: function() {
                        if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount) throw new Error("Multi-volumes zip are not supported");
                    },
                    readLocalFiles: function() {
                        var t, e;
                        for(t = 0; t < this.files.length; t++)e = this.files[t], this.reader.setIndex(e.localHeaderOffset), this.checkSignature(s.LOCAL_FILE_HEADER), e.readLocalPart(this.reader), e.handleUTF8(), e.processAttributes();
                    },
                    readCentralDir: function() {
                        var t;
                        for(this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(t = new a({
                            zip64: this.zip64
                        }, this.loadOptions)).readCentralPart(this.reader), this.files.push(t);
                        if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length) throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
                    },
                    readEndOfCentral: function() {
                        var t = this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);
                        if (t < 0) throw !this.isSignature(0, s.LOCAL_FILE_HEADER) ? new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html") : new Error("Corrupted zip: can't find end of central directory");
                        this.reader.setIndex(t);
                        var e = t;
                        if (this.checkSignature(s.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === n.MAX_VALUE_16BITS || this.diskWithCentralDirStart === n.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === n.MAX_VALUE_16BITS || this.centralDirRecords === n.MAX_VALUE_16BITS || this.centralDirSize === n.MAX_VALUE_32BITS || this.centralDirOffset === n.MAX_VALUE_32BITS) {
                            if (this.zip64 = !0, (t = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
                            if (this.reader.setIndex(t), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
                            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
                        }
                        var r = this.centralDirOffset + this.centralDirSize;
                        this.zip64 && (r += 20, r += 12 + this.zip64EndOfCentralSize);
                        var i = e - r;
                        if (0 < i) this.isSignature(e, s.CENTRAL_FILE_HEADER) || (this.reader.zero = i);
                        else if (i < 0) throw new Error("Corrupted zip: missing " + Math.abs(i) + " bytes.");
                    },
                    prepareReader: function(t) {
                        this.reader = i16(t);
                    },
                    load: function(t) {
                        this.prepareReader(t), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
                    }
                }, e35.exports = h;
            },
            {
                "./reader/readerFor": 22,
                "./signature": 23,
                "./support": 30,
                "./utf8": 31,
                "./utils": 32,
                "./zipEntry": 34
            }
        ],
        34: [
            function(t60, e36, r21) {
                "use strict";
                var i17 = t60("./reader/readerFor"), s = t60("./utils"), n10 = t60("./compressedObject"), a = t60("./crc32"), o = t60("./utf8"), h = t60("./compressions"), u = t60("./support");
                function l(t, e) {
                    this.options = t, this.loadOptions = e;
                }
                l.prototype = {
                    isEncrypted: function() {
                        return 1 == (1 & this.bitFlag);
                    },
                    useUTF8: function() {
                        return 2048 == (2048 & this.bitFlag);
                    },
                    readLocalPart: function(t61) {
                        var e37, r;
                        if (t61.skip(22), this.fileNameLength = t61.readInt(2), r = t61.readInt(2), this.fileName = t61.readData(this.fileNameLength), t61.skip(r), -1 === this.compressedSize || -1 === this.uncompressedSize) throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
                        if (null === (e37 = (function(t) {
                            for(var e in h)if (h.hasOwnProperty(e) && h[e].magic === t) return h[e];
                            return null;
                        })(this.compressionMethod))) throw new Error("Corrupted zip : compression " + s.pretty(this.compressionMethod) + " unknown (inner file : " + s.transformTo("string", this.fileName) + ")");
                        this.decompressed = new n10(this.compressedSize, this.uncompressedSize, this.crc32, e37, t61.readData(this.compressedSize));
                    },
                    readCentralPart: function(t) {
                        this.versionMadeBy = t.readInt(2), t.skip(2), this.bitFlag = t.readInt(2), this.compressionMethod = t.readString(2), this.date = t.readDate(), this.crc32 = t.readInt(4), this.compressedSize = t.readInt(4), this.uncompressedSize = t.readInt(4);
                        var e = t.readInt(2);
                        if (this.extraFieldsLength = t.readInt(2), this.fileCommentLength = t.readInt(2), this.diskNumberStart = t.readInt(2), this.internalFileAttributes = t.readInt(2), this.externalFileAttributes = t.readInt(4), this.localHeaderOffset = t.readInt(4), this.isEncrypted()) throw new Error("Encrypted zip are not supported");
                        t.skip(e), this.readExtraFields(t), this.parseZIP64ExtraField(t), this.fileComment = t.readData(this.fileCommentLength);
                    },
                    processAttributes: function() {
                        this.unixPermissions = null, this.dosPermissions = null;
                        var t = this.versionMadeBy >> 8;
                        this.dir = !!(16 & this.externalFileAttributes), 0 == t && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == t && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = !0);
                    },
                    parseZIP64ExtraField: function(t) {
                        if (this.extraFields[1]) {
                            var e = i17(this.extraFields[1].value);
                            this.uncompressedSize === s.MAX_VALUE_32BITS && (this.uncompressedSize = e.readInt(8)), this.compressedSize === s.MAX_VALUE_32BITS && (this.compressedSize = e.readInt(8)), this.localHeaderOffset === s.MAX_VALUE_32BITS && (this.localHeaderOffset = e.readInt(8)), this.diskNumberStart === s.MAX_VALUE_32BITS && (this.diskNumberStart = e.readInt(4));
                        }
                    },
                    readExtraFields: function(t) {
                        var e, r, i, n = t.index + this.extraFieldsLength;
                        for(this.extraFields || (this.extraFields = {
                        }); t.index + 4 < n;)e = t.readInt(2), r = t.readInt(2), i = t.readData(r), this.extraFields[e] = {
                            id: e,
                            length: r,
                            value: i
                        };
                        t.setIndex(n);
                    },
                    handleUTF8: function() {
                        var t = u.uint8array ? "uint8array" : "array";
                        if (this.useUTF8()) this.fileNameStr = o.utf8decode(this.fileName), this.fileCommentStr = o.utf8decode(this.fileComment);
                        else {
                            var e = this.findExtraFieldUnicodePath();
                            if (null !== e) this.fileNameStr = e;
                            else {
                                var r = s.transformTo(t, this.fileName);
                                this.fileNameStr = this.loadOptions.decodeFileName(r);
                            }
                            var i = this.findExtraFieldUnicodeComment();
                            if (null !== i) this.fileCommentStr = i;
                            else {
                                var n = s.transformTo(t, this.fileComment);
                                this.fileCommentStr = this.loadOptions.decodeFileName(n);
                            }
                        }
                    },
                    findExtraFieldUnicodePath: function() {
                        var t = this.extraFields[28789];
                        if (t) {
                            var e = i17(t.value);
                            return 1 !== e.readInt(1) ? null : a(this.fileName) !== e.readInt(4) ? null : o.utf8decode(e.readData(t.length - 5));
                        }
                        return null;
                    },
                    findExtraFieldUnicodeComment: function() {
                        var t = this.extraFields[25461];
                        if (t) {
                            var e = i17(t.value);
                            return 1 !== e.readInt(1) ? null : a(this.fileComment) !== e.readInt(4) ? null : o.utf8decode(e.readData(t.length - 5));
                        }
                        return null;
                    }
                }, e36.exports = l;
            },
            {
                "./compressedObject": 2,
                "./compressions": 3,
                "./crc32": 4,
                "./reader/readerFor": 22,
                "./support": 30,
                "./utf8": 31,
                "./utils": 32
            }
        ],
        35: [
            function(t62, e38, r22) {
                "use strict";
                function i18(t, e, r) {
                    this.name = t, this.dir = r.dir, this.date = r.date, this.comment = r.comment, this.unixPermissions = r.unixPermissions, this.dosPermissions = r.dosPermissions, this._data = e, this._dataBinary = r.binary, this.options = {
                        compression: r.compression,
                        compressionOptions: r.compressionOptions
                    };
                }
                var s = t62("./stream/StreamHelper"), n11 = t62("./stream/DataWorker"), a = t62("./utf8"), o = t62("./compressedObject"), h = t62("./stream/GenericWorker");
                i18.prototype = {
                    internalStream: function(t) {
                        var e = null, r = "string";
                        try {
                            if (!t) throw new Error("No output type specified.");
                            var i = "string" === (r = t.toLowerCase()) || "text" === r;
                            "binarystring" !== r && "text" !== r || (r = "string"), e = this._decompressWorker();
                            var n = !this._dataBinary;
                            n && !i && (e = e.pipe(new a.Utf8EncodeWorker)), !n && i && (e = e.pipe(new a.Utf8DecodeWorker));
                        } catch (t63) {
                            (e = new h("error")).error(t63);
                        }
                        return new s(e, r, "");
                    },
                    async: function(t, e) {
                        return this.internalStream(t).accumulate(e);
                    },
                    nodeStream: function(t, e) {
                        return this.internalStream(t || "nodebuffer").toNodejsStream(e);
                    },
                    _compressWorker: function(t, e) {
                        if (this._data instanceof o && this._data.compression.magic === t.magic) return this._data.getCompressedWorker();
                        var r = this._decompressWorker();
                        return this._dataBinary || (r = r.pipe(new a.Utf8EncodeWorker)), o.createWorkerFrom(r, t, e);
                    },
                    _decompressWorker: function() {
                        return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof h ? this._data : new n11(this._data);
                    }
                };
                for(var u = [
                    "asText",
                    "asBinary",
                    "asNodeBuffer",
                    "asUint8Array",
                    "asArrayBuffer"
                ], l = function() {
                    throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
                }, f = 0; f < u.length; f++)i18.prototype[u[f]] = l;
                e38.exports = i18;
            },
            {
                "./compressedObject": 2,
                "./stream/DataWorker": 27,
                "./stream/GenericWorker": 28,
                "./stream/StreamHelper": 29,
                "./utf8": 31
            }
        ],
        36: [
            function(t64, l, e39) {
                (function(e40) {
                    var r23, i, t65 = e40.MutationObserver || e40.WebKitMutationObserver;
                    if (t65) {
                        var n = 0, s = new t65(u), a = e40.document.createTextNode("");
                        s.observe(a, {
                            characterData: !0
                        }), r23 = function() {
                            a.data = n = ++n % 2;
                        };
                    } else if (e40.setImmediate || void 0 === e40.MessageChannel) r23 = "document" in e40 && "onreadystatechange" in e40.document.createElement("script") ? function() {
                        var t = e40.document.createElement("script");
                        t.onreadystatechange = function() {
                            u(), t.onreadystatechange = null, t.parentNode.removeChild(t), t = null;
                        }, e40.document.documentElement.appendChild(t);
                    } : function() {
                        setTimeout(u, 0);
                    };
                    else {
                        var o = new e40.MessageChannel;
                        o.port1.onmessage = u, r23 = function() {
                            o.port2.postMessage(0);
                        };
                    }
                    var h = [];
                    function u() {
                        var t, e;
                        i = !0;
                        for(var r = h.length; r;){
                            for(e = h, h = [], t = -1; ++t < r;)e[t]();
                            r = h.length;
                        }
                        i = !1;
                    }
                    l.exports = function(t) {
                        1 !== h.push(t) || i || r23();
                    };
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {
                });
            },
            {
            }
        ],
        37: [
            function(t66, e41, r24) {
                "use strict";
                var n12 = t66("immediate");
                function u() {
                }
                var l = {
                }, s8 = [
                    "REJECTED"
                ], a4 = [
                    "FULFILLED"
                ], i19 = [
                    "PENDING"
                ];
                function o4(t) {
                    if ("function" != typeof t) throw new TypeError("resolver must be a function");
                    this.state = i19, this.queue = [], this.outcome = void 0, t !== u && c(this, t);
                }
                function h2(t, e, r) {
                    this.promise = t, "function" == typeof e && (this.onFulfilled = e, this.callFulfilled = this.otherCallFulfilled), "function" == typeof r && (this.onRejected = r, this.callRejected = this.otherCallRejected);
                }
                function f(e, r, i) {
                    n12(function() {
                        var t;
                        try {
                            t = r(i);
                        } catch (t67) {
                            return l.reject(e, t67);
                        }
                        t === e ? l.reject(e, new TypeError("Cannot resolve promise with itself")) : l.resolve(e, t);
                    });
                }
                function d(t) {
                    var e = t && t.then;
                    if (t && ("object" == typeof t || "function" == typeof t) && "function" == typeof e) return function() {
                        e.apply(t, arguments);
                    };
                }
                function c(e, t68) {
                    var r = !1;
                    function i(t) {
                        r || (r = !0, l.reject(e, t));
                    }
                    function n(t) {
                        r || (r = !0, l.resolve(e, t));
                    }
                    var s = p(function() {
                        t68(n, i);
                    });
                    "error" === s.status && i(s.value);
                }
                function p(t, e) {
                    var r = {
                    };
                    try {
                        r.value = t(e), r.status = "success";
                    } catch (t69) {
                        r.status = "error", r.value = t69;
                    }
                    return r;
                }
                (e41.exports = o4).prototype.finally = function(e) {
                    if ("function" != typeof e) return this;
                    var r = this.constructor;
                    return this.then(function(t) {
                        return r.resolve(e()).then(function() {
                            return t;
                        });
                    }, function(t) {
                        return r.resolve(e()).then(function() {
                            throw t;
                        });
                    });
                }, o4.prototype.catch = function(t) {
                    return this.then(null, t);
                }, o4.prototype.then = function(t, e) {
                    if ("function" != typeof t && this.state === a4 || "function" != typeof e && this.state === s8) return this;
                    var r = new this.constructor(u);
                    this.state !== i19 ? f(r, this.state === a4 ? t : e, this.outcome) : this.queue.push(new h2(r, t, e));
                    return r;
                }, h2.prototype.callFulfilled = function(t) {
                    l.resolve(this.promise, t);
                }, h2.prototype.otherCallFulfilled = function(t) {
                    f(this.promise, this.onFulfilled, t);
                }, h2.prototype.callRejected = function(t) {
                    l.reject(this.promise, t);
                }, h2.prototype.otherCallRejected = function(t) {
                    f(this.promise, this.onRejected, t);
                }, l.resolve = function(t, e) {
                    var r = p(d, e);
                    if ("error" === r.status) return l.reject(t, r.value);
                    var i = r.value;
                    if (i) c(t, i);
                    else {
                        t.state = a4, t.outcome = e;
                        for(var n = -1, s = t.queue.length; ++n < s;)t.queue[n].callFulfilled(e);
                    }
                    return t;
                }, l.reject = function(t, e) {
                    t.state = s8, t.outcome = e;
                    for(var r = -1, i = t.queue.length; ++r < i;)t.queue[r].callRejected(e);
                    return t;
                }, o4.resolve = function(t) {
                    if (t instanceof this) return t;
                    return l.resolve(new this(u), t);
                }, o4.reject = function(t) {
                    var e = new this(u);
                    return l.reject(e, t);
                }, o4.all = function(t70) {
                    var r = this;
                    if ("[object Array]" !== Object.prototype.toString.call(t70)) return this.reject(new TypeError("must be an array"));
                    var i = t70.length, n = !1;
                    if (!i) return this.resolve([]);
                    var s = new Array(i), a = 0, e = -1, o = new this(u);
                    for(; ++e < i;)h(t70[e], e);
                    function h(t71, e) {
                        r.resolve(t71).then(function(t) {
                            s[e] = t, ++a !== i || n || (n = !0, l.resolve(o, s));
                        }, function(t) {
                            n || (n = !0, l.reject(o, t));
                        });
                    }
                    return o;
                }, o4.race = function(t72) {
                    var e = this;
                    if ("[object Array]" !== Object.prototype.toString.call(t72)) return this.reject(new TypeError("must be an array"));
                    var r = t72.length, i = !1;
                    if (!r) return this.resolve([]);
                    var n = -1, s = new this(u);
                    for(; ++n < r;)a = t72[n], e.resolve(a).then(function(t) {
                        i || (i = !0, l.resolve(s, t));
                    }, function(t) {
                        i || (i = !0, l.reject(s, t));
                    });
                    var a;
                    return s;
                };
            },
            {
                immediate: 36
            }
        ],
        38: [
            function(t, e, r) {
                "use strict";
                var i = {
                };
                (0, t("./lib/utils/common").assign)(i, t("./lib/deflate"), t("./lib/inflate"), t("./lib/zlib/constants")), e.exports = i;
            },
            {
                "./lib/deflate": 39,
                "./lib/inflate": 40,
                "./lib/utils/common": 41,
                "./lib/zlib/constants": 44
            }
        ],
        39: [
            function(t73, e42, r25) {
                "use strict";
                var a = t73("./zlib/deflate"), o = t73("./utils/common"), h = t73("./utils/strings"), n13 = t73("./zlib/messages"), s9 = t73("./zlib/zstream"), u = Object.prototype.toString, l = 0, f = -1, d = 0, c = 8;
                function p(t) {
                    if (!(this instanceof p)) return new p(t);
                    this.options = o.assign({
                        level: f,
                        method: c,
                        chunkSize: 16384,
                        windowBits: 15,
                        memLevel: 8,
                        strategy: d,
                        to: ""
                    }, t || {
                    });
                    var e = this.options;
                    e.raw && 0 < e.windowBits ? e.windowBits = -e.windowBits : e.gzip && 0 < e.windowBits && e.windowBits < 16 && (e.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new s9, this.strm.avail_out = 0;
                    var r = a.deflateInit2(this.strm, e.level, e.method, e.windowBits, e.memLevel, e.strategy);
                    if (r !== l) throw new Error(n13[r]);
                    if (e.header && a.deflateSetHeader(this.strm, e.header), e.dictionary) {
                        var i;
                        if (i = "string" == typeof e.dictionary ? h.string2buf(e.dictionary) : "[object ArrayBuffer]" === u.call(e.dictionary) ? new Uint8Array(e.dictionary) : e.dictionary, (r = a.deflateSetDictionary(this.strm, i)) !== l) throw new Error(n13[r]);
                        this._dict_set = !0;
                    }
                }
                function i20(t, e) {
                    var r = new p(e);
                    if (r.push(t, !0), r.err) throw r.msg || n13[r.err];
                    return r.result;
                }
                p.prototype.push = function(t, e) {
                    var r, i, n = this.strm, s = this.options.chunkSize;
                    if (this.ended) return !1;
                    i = e === ~~e ? e : !0 === e ? 4 : 0, "string" == typeof t ? n.input = h.string2buf(t) : "[object ArrayBuffer]" === u.call(t) ? n.input = new Uint8Array(t) : n.input = t, n.next_in = 0, n.avail_in = n.input.length;
                    do {
                        if (0 === n.avail_out && (n.output = new o.Buf8(s), n.next_out = 0, n.avail_out = s), 1 !== (r = a.deflate(n, i)) && r !== l) return this.onEnd(r), this.ended = !0, false;
                        0 !== n.avail_out && (0 !== n.avail_in || 4 !== i && 2 !== i) || ("string" === this.options.to ? this.onData(h.buf2binstring(o.shrinkBuf(n.output, n.next_out))) : this.onData(o.shrinkBuf(n.output, n.next_out)));
                    }while ((0 < n.avail_in || 0 === n.avail_out) && 1 !== r)
                    return 4 === i ? (r = a.deflateEnd(this.strm), this.onEnd(r), this.ended = !0, r === l) : 2 !== i || (this.onEnd(l), n.avail_out = 0, true);
                }, p.prototype.onData = function(t) {
                    this.chunks.push(t);
                }, p.prototype.onEnd = function(t) {
                    t === l && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = o.flattenChunks(this.chunks)), this.chunks = [], this.err = t, this.msg = this.strm.msg;
                }, r25.Deflate = p, r25.deflate = i20, r25.deflateRaw = function(t, e) {
                    return (e = e || {
                    }).raw = !0, i20(t, e);
                }, r25.gzip = function(t, e) {
                    return (e = e || {
                    }).gzip = !0, i20(t, e);
                };
            },
            {
                "./utils/common": 41,
                "./utils/strings": 42,
                "./zlib/deflate": 46,
                "./zlib/messages": 51,
                "./zlib/zstream": 53
            }
        ],
        40: [
            function(t74, e43, r26) {
                "use strict";
                var d = t74("./zlib/inflate"), c = t74("./utils/common"), p = t74("./utils/strings"), m = t74("./zlib/constants"), i21 = t74("./zlib/messages"), n14 = t74("./zlib/zstream"), s10 = t74("./zlib/gzheader"), _ = Object.prototype.toString;
                function a5(t) {
                    if (!(this instanceof a5)) return new a5(t);
                    this.options = c.assign({
                        chunkSize: 16384,
                        windowBits: 0,
                        to: ""
                    }, t || {
                    });
                    var e = this.options;
                    e.raw && 0 <= e.windowBits && e.windowBits < 16 && (e.windowBits = -e.windowBits, 0 === e.windowBits && (e.windowBits = -15)), !(0 <= e.windowBits && e.windowBits < 16) || t && t.windowBits || (e.windowBits += 32), 15 < e.windowBits && e.windowBits < 48 && 0 == (15 & e.windowBits) && (e.windowBits |= 15), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new n14, this.strm.avail_out = 0;
                    var r = d.inflateInit2(this.strm, e.windowBits);
                    if (r !== m.Z_OK) throw new Error(i21[r]);
                    this.header = new s10, d.inflateGetHeader(this.strm, this.header);
                }
                function o5(t, e) {
                    var r = new a5(e);
                    if (r.push(t, !0), r.err) throw r.msg || i21[r.err];
                    return r.result;
                }
                a5.prototype.push = function(t, e) {
                    var r, i, n, s, a, o, h = this.strm, u = this.options.chunkSize, l = this.options.dictionary, f = !1;
                    if (this.ended) return !1;
                    i = e === ~~e ? e : !0 === e ? m.Z_FINISH : m.Z_NO_FLUSH, "string" == typeof t ? h.input = p.binstring2buf(t) : "[object ArrayBuffer]" === _.call(t) ? h.input = new Uint8Array(t) : h.input = t, h.next_in = 0, h.avail_in = h.input.length;
                    do {
                        if (0 === h.avail_out && (h.output = new c.Buf8(u), h.next_out = 0, h.avail_out = u), (r = d.inflate(h, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && l && (o = "string" == typeof l ? p.string2buf(l) : "[object ArrayBuffer]" === _.call(l) ? new Uint8Array(l) : l, r = d.inflateSetDictionary(this.strm, o)), r === m.Z_BUF_ERROR && !0 === f && (r = m.Z_OK, f = !1), r !== m.Z_STREAM_END && r !== m.Z_OK) return this.onEnd(r), this.ended = !0, false;
                        h.next_out && (0 !== h.avail_out && r !== m.Z_STREAM_END && (0 !== h.avail_in || i !== m.Z_FINISH && i !== m.Z_SYNC_FLUSH) || ("string" === this.options.to ? (n = p.utf8border(h.output, h.next_out), s = h.next_out - n, a = p.buf2string(h.output, n), h.next_out = s, h.avail_out = u - s, s && c.arraySet(h.output, h.output, n, s, 0), this.onData(a)) : this.onData(c.shrinkBuf(h.output, h.next_out)))), 0 === h.avail_in && 0 === h.avail_out && (f = !0);
                    }while ((0 < h.avail_in || 0 === h.avail_out) && r !== m.Z_STREAM_END)
                    return r === m.Z_STREAM_END && (i = m.Z_FINISH), i === m.Z_FINISH ? (r = d.inflateEnd(this.strm), this.onEnd(r), this.ended = !0, r === m.Z_OK) : i !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK), h.avail_out = 0, true);
                }, a5.prototype.onData = function(t) {
                    this.chunks.push(t);
                }, a5.prototype.onEnd = function(t) {
                    t === m.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = c.flattenChunks(this.chunks)), this.chunks = [], this.err = t, this.msg = this.strm.msg;
                }, r26.Inflate = a5, r26.inflate = o5, r26.inflateRaw = function(t, e) {
                    return (e = e || {
                    }).raw = !0, o5(t, e);
                }, r26.ungzip = o5;
            },
            {
                "./utils/common": 41,
                "./utils/strings": 42,
                "./zlib/constants": 44,
                "./zlib/gzheader": 47,
                "./zlib/inflate": 49,
                "./zlib/messages": 51,
                "./zlib/zstream": 53
            }
        ],
        41: [
            function(t75, e44, r27) {
                "use strict";
                var i22 = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
                r27.assign = function(t) {
                    for(var e = Array.prototype.slice.call(arguments, 1); e.length;){
                        var r = e.shift();
                        if (r) {
                            if ("object" != typeof r) throw new TypeError(r + "must be non-object");
                            for(var i in r)r.hasOwnProperty(i) && (t[i] = r[i]);
                        }
                    }
                    return t;
                }, r27.shrinkBuf = function(t, e) {
                    return t.length === e ? t : t.subarray ? t.subarray(0, e) : (t.length = e, t);
                };
                var n15 = {
                    arraySet: function(t, e, r, i, n) {
                        if (e.subarray && t.subarray) t.set(e.subarray(r, r + i), n);
                        else for(var s = 0; s < i; s++)t[n + s] = e[r + s];
                    },
                    flattenChunks: function(t) {
                        var e, r, i, n, s, a;
                        for(e = i = 0, r = t.length; e < r; e++)i += t[e].length;
                        for(a = new Uint8Array(i), e = n = 0, r = t.length; e < r; e++)s = t[e], a.set(s, n), n += s.length;
                        return a;
                    }
                }, s11 = {
                    arraySet: function(t, e, r, i, n) {
                        for(var s = 0; s < i; s++)t[n + s] = e[r + s];
                    },
                    flattenChunks: function(t) {
                        return [].concat.apply([], t);
                    }
                };
                r27.setTyped = function(t) {
                    t ? (r27.Buf8 = Uint8Array, r27.Buf16 = Uint16Array, r27.Buf32 = Int32Array, r27.assign(r27, n15)) : (r27.Buf8 = Array, r27.Buf16 = Array, r27.Buf32 = Array, r27.assign(r27, s11));
                }, r27.setTyped(i22);
            },
            {
            }
        ],
        42: [
            function(t78, e45, r28) {
                "use strict";
                var h = t78("./common"), n16 = !0, s12 = !0;
                try {
                    String.fromCharCode.apply(null, [
                        0
                    ]);
                } catch (t76) {
                    n16 = !1;
                }
                try {
                    String.fromCharCode.apply(null, new Uint8Array(1));
                } catch (t77) {
                    s12 = !1;
                }
                for(var u = new h.Buf8(256), i23 = 0; i23 < 256; i23++)u[i23] = 252 <= i23 ? 6 : 248 <= i23 ? 5 : 240 <= i23 ? 4 : 224 <= i23 ? 3 : 192 <= i23 ? 2 : 1;
                function l(t, e) {
                    if (e < 65537 && (t.subarray && s12 || !t.subarray && n16)) return String.fromCharCode.apply(null, h.shrinkBuf(t, e));
                    for(var r = "", i = 0; i < e; i++)r += String.fromCharCode(t[i]);
                    return r;
                }
                u[254] = u[254] = 1, r28.string2buf = function(t) {
                    var e, r, i, n, s, a = t.length, o = 0;
                    for(n = 0; n < a; n++)55296 == (64512 & (r = t.charCodeAt(n))) && n + 1 < a && 56320 == (64512 & (i = t.charCodeAt(n + 1))) && (r = 65536 + (r - 55296 << 10) + (i - 56320), n++), o += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4;
                    for(e = new h.Buf8(o), n = s = 0; s < o; n++)55296 == (64512 & (r = t.charCodeAt(n))) && n + 1 < a && 56320 == (64512 & (i = t.charCodeAt(n + 1))) && (r = 65536 + (r - 55296 << 10) + (i - 56320), n++), r < 128 ? e[s++] = r : (r < 2048 ? e[s++] = 192 | r >>> 6 : (r < 65536 ? e[s++] = 224 | r >>> 12 : (e[s++] = 240 | r >>> 18, e[s++] = 128 | r >>> 12 & 63), e[s++] = 128 | r >>> 6 & 63), e[s++] = 128 | 63 & r);
                    return e;
                }, r28.buf2binstring = function(t) {
                    return l(t, t.length);
                }, r28.binstring2buf = function(t) {
                    for(var e = new h.Buf8(t.length), r = 0, i = e.length; r < i; r++)e[r] = t.charCodeAt(r);
                    return e;
                }, r28.buf2string = function(t, e) {
                    var r, i, n, s, a = e || t.length, o = new Array(2 * a);
                    for(r = i = 0; r < a;)if ((n = t[r++]) < 128) o[i++] = n;
                    else if (4 < (s = u[n])) o[i++] = 65533, r += s - 1;
                    else {
                        for(n &= 2 === s ? 31 : 3 === s ? 15 : 7; 1 < s && r < a;)n = n << 6 | 63 & t[r++], s--;
                        1 < s ? o[i++] = 65533 : n < 65536 ? o[i++] = n : (n -= 65536, o[i++] = 55296 | n >> 10 & 1023, o[i++] = 56320 | 1023 & n);
                    }
                    return l(o, i);
                }, r28.utf8border = function(t, e) {
                    var r;
                    for((e = e || t.length) > t.length && (e = t.length), r = e - 1; 0 <= r && 128 == (192 & t[r]);)r--;
                    return r < 0 ? e : 0 === r ? e : r + u[t[r]] > e ? r : e;
                };
            },
            {
                "./common": 41
            }
        ],
        43: [
            function(t79, e46, r29) {
                "use strict";
                e46.exports = function(t, e, r, i) {
                    for(var n = 65535 & t | 0, s = t >>> 16 & 65535 | 0, a = 0; 0 !== r;){
                        for(r -= a = 2000 < r ? 2000 : r; s = s + (n = n + e[i++] | 0) | 0, --a;);
                        n %= 65521, s %= 65521;
                    }
                    return n | s << 16 | 0;
                };
            },
            {
            }
        ],
        44: [
            function(t, e, r) {
                "use strict";
                e.exports = {
                    Z_NO_FLUSH: 0,
                    Z_PARTIAL_FLUSH: 1,
                    Z_SYNC_FLUSH: 2,
                    Z_FULL_FLUSH: 3,
                    Z_FINISH: 4,
                    Z_BLOCK: 5,
                    Z_TREES: 6,
                    Z_OK: 0,
                    Z_STREAM_END: 1,
                    Z_NEED_DICT: 2,
                    Z_ERRNO: -1,
                    Z_STREAM_ERROR: -2,
                    Z_DATA_ERROR: -3,
                    Z_BUF_ERROR: -5,
                    Z_NO_COMPRESSION: 0,
                    Z_BEST_SPEED: 1,
                    Z_BEST_COMPRESSION: 9,
                    Z_DEFAULT_COMPRESSION: -1,
                    Z_FILTERED: 1,
                    Z_HUFFMAN_ONLY: 2,
                    Z_RLE: 3,
                    Z_FIXED: 4,
                    Z_DEFAULT_STRATEGY: 0,
                    Z_BINARY: 0,
                    Z_TEXT: 1,
                    Z_UNKNOWN: 2,
                    Z_DEFLATED: 8
                };
            },
            {
            }
        ],
        45: [
            function(t80, e47, r30) {
                "use strict";
                var o = function() {
                    for(var t, e = [], r = 0; r < 256; r++){
                        t = r;
                        for(var i = 0; i < 8; i++)t = 1 & t ? 3988292384 ^ t >>> 1 : t >>> 1;
                        e[r] = t;
                    }
                    return e;
                }();
                e47.exports = function(t, e, r, i) {
                    var n = o, s = i + r;
                    t ^= -1;
                    for(var a = i; a < s; a++)t = t >>> 8 ^ n[255 & (t ^ e[a])];
                    return -1 ^ t;
                };
            },
            {
            }
        ],
        46: [
            function(t81, e48, r31) {
                "use strict";
                var h3, d2 = t81("../utils/common"), u1 = t81("./trees"), c1 = t81("./adler32"), p1 = t81("./crc32"), i24 = t81("./messages"), l1 = 0, f1 = 4, m = 0, _ = -2, g = -1, b = 4, n17 = 2, v = 8, y = 9, s13 = 286, a6 = 30, o6 = 19, w = 2 * s13 + 1, k = 15, x = 3, S = 258, z = S + x + 1, C = 42, E = 113, A = 1, I = 2, O = 3, B = 4;
                function R(t, e) {
                    return t.msg = i24[e], e;
                }
                function T(t) {
                    return (t << 1) - (4 < t ? 9 : 0);
                }
                function D(t) {
                    for(var e = t.length; 0 <= --e;)t[e] = 0;
                }
                function F(t) {
                    var e = t.state, r = e.pending;
                    r > t.avail_out && (r = t.avail_out), 0 !== r && (d2.arraySet(t.output, e.pending_buf, e.pending_out, r, t.next_out), t.next_out += r, e.pending_out += r, t.total_out += r, t.avail_out -= r, e.pending -= r, 0 === e.pending && (e.pending_out = 0));
                }
                function N(t, e) {
                    u1._tr_flush_block(t, 0 <= t.block_start ? t.block_start : -1, t.strstart - t.block_start, e), t.block_start = t.strstart, F(t.strm);
                }
                function U(t, e) {
                    t.pending_buf[t.pending++] = e;
                }
                function P(t, e) {
                    t.pending_buf[t.pending++] = e >>> 8 & 255, t.pending_buf[t.pending++] = 255 & e;
                }
                function L(t, e) {
                    var r, i, n = t.max_chain_length, s = t.strstart, a = t.prev_length, o = t.nice_match, h = t.strstart > t.w_size - z ? t.strstart - (t.w_size - z) : 0, u = t.window, l = t.w_mask, f = t.prev, d = t.strstart + S, c = u[s + a - 1], p = u[s + a];
                    t.prev_length >= t.good_match && (n >>= 2), o > t.lookahead && (o = t.lookahead);
                    do if (u[(r = e) + a] === p && u[r + a - 1] === c && u[r] === u[s] && u[++r] === u[s + 1]) {
                        s += 2, r++;
                        do ;
                        while (u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && u[++s] === u[++r] && s < d)
                        if (i = S - (d - s), s = d - S, a < i) {
                            if (t.match_start = e, o <= (a = i)) break;
                            c = u[s + a - 1], p = u[s + a];
                        }
                    }
                    while ((e = f[e & l]) > h && 0 != --n)
                    return a <= t.lookahead ? a : t.lookahead;
                }
                function j(t) {
                    var e, r, i, n, s, a, o, h, u, l, f = t.w_size;
                    do {
                        if (n = t.window_size - t.lookahead - t.strstart, t.strstart >= f + (f - z)) {
                            for(d2.arraySet(t.window, t.window, f, f, 0), t.match_start -= f, t.strstart -= f, t.block_start -= f, e = r = t.hash_size; i = t.head[--e], t.head[e] = f <= i ? i - f : 0, --r;);
                            for(e = r = f; i = t.prev[--e], t.prev[e] = f <= i ? i - f : 0, --r;);
                            n += f;
                        }
                        if (0 === t.strm.avail_in) break;
                        if (a = t.strm, o = t.window, h = t.strstart + t.lookahead, u = n, l = void 0, l = a.avail_in, u < l && (l = u), r = 0 === l ? 0 : (a.avail_in -= l, d2.arraySet(o, a.input, a.next_in, l, h), 1 === a.state.wrap ? a.adler = c1(a.adler, o, l, h) : 2 === a.state.wrap && (a.adler = p1(a.adler, o, l, h)), a.next_in += l, a.total_in += l, l), t.lookahead += r, t.lookahead + t.insert >= x) for(s = t.strstart - t.insert, t.ins_h = t.window[s], t.ins_h = (t.ins_h << t.hash_shift ^ t.window[s + 1]) & t.hash_mask; t.insert && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[s + x - 1]) & t.hash_mask, t.prev[s & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = s, s++, t.insert--, !(t.lookahead + t.insert < x)););
                    }while (t.lookahead < z && 0 !== t.strm.avail_in)
                }
                function Z(t, e) {
                    for(var r, i;;){
                        if (t.lookahead < z) {
                            if (j(t), t.lookahead < z && e === l1) return A;
                            if (0 === t.lookahead) break;
                        }
                        if (r = 0, t.lookahead >= x && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + x - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart), 0 !== r && t.strstart - r <= t.w_size - z && (t.match_length = L(t, r)), t.match_length >= x) {
                            if (i = u1._tr_tally(t, t.strstart - t.match_start, t.match_length - x), t.lookahead -= t.match_length, t.match_length <= t.max_lazy_match && t.lookahead >= x) {
                                for(t.match_length--; t.strstart++, t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + x - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart, 0 != --t.match_length;);
                                t.strstart++;
                            } else t.strstart += t.match_length, t.match_length = 0, t.ins_h = t.window[t.strstart], t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + 1]) & t.hash_mask;
                        } else i = u1._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++;
                        if (i && (N(t, !1), 0 === t.strm.avail_out)) return A;
                    }
                    return t.insert = t.strstart < x - 1 ? t.strstart : x - 1, e === f1 ? (N(t, !0), 0 === t.strm.avail_out ? O : B) : t.last_lit && (N(t, !1), 0 === t.strm.avail_out) ? A : I;
                }
                function W(t, e) {
                    for(var r, i, n;;){
                        if (t.lookahead < z) {
                            if (j(t), t.lookahead < z && e === l1) return A;
                            if (0 === t.lookahead) break;
                        }
                        if (r = 0, t.lookahead >= x && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + x - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart), t.prev_length = t.match_length, t.prev_match = t.match_start, t.match_length = x - 1, 0 !== r && t.prev_length < t.max_lazy_match && t.strstart - r <= t.w_size - z && (t.match_length = L(t, r), t.match_length <= 5 && (1 === t.strategy || t.match_length === x && 4096 < t.strstart - t.match_start) && (t.match_length = x - 1)), t.prev_length >= x && t.match_length <= t.prev_length) {
                            for(n = t.strstart + t.lookahead - x, i = u1._tr_tally(t, t.strstart - 1 - t.prev_match, t.prev_length - x), t.lookahead -= t.prev_length - 1, t.prev_length -= 2; ++t.strstart <= n && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + x - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart), 0 != --t.prev_length;);
                            if (t.match_available = 0, t.match_length = x - 1, t.strstart++, i && (N(t, !1), 0 === t.strm.avail_out)) return A;
                        } else if (t.match_available) {
                            if ((i = u1._tr_tally(t, 0, t.window[t.strstart - 1])) && N(t, !1), t.strstart++, t.lookahead--, 0 === t.strm.avail_out) return A;
                        } else t.match_available = 1, t.strstart++, t.lookahead--;
                    }
                    return t.match_available && (i = u1._tr_tally(t, 0, t.window[t.strstart - 1]), t.match_available = 0), t.insert = t.strstart < x - 1 ? t.strstart : x - 1, e === f1 ? (N(t, !0), 0 === t.strm.avail_out ? O : B) : t.last_lit && (N(t, !1), 0 === t.strm.avail_out) ? A : I;
                }
                function M(t, e, r, i, n) {
                    this.good_length = t, this.max_lazy = e, this.nice_length = r, this.max_chain = i, this.func = n;
                }
                function H() {
                    this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new d2.Buf16(2 * w), this.dyn_dtree = new d2.Buf16(2 * (2 * a6 + 1)), this.bl_tree = new d2.Buf16(2 * (2 * o6 + 1)), D(this.dyn_ltree), D(this.dyn_dtree), D(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new d2.Buf16(k + 1), this.heap = new d2.Buf16(2 * s13 + 1), D(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new d2.Buf16(2 * s13 + 1), D(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
                }
                function G(t) {
                    var e;
                    return t && t.state ? (t.total_in = t.total_out = 0, t.data_type = n17, (e = t.state).pending = 0, e.pending_out = 0, e.wrap < 0 && (e.wrap = -e.wrap), e.status = e.wrap ? C : E, t.adler = 2 === e.wrap ? 0 : 1, e.last_flush = l1, u1._tr_init(e), m) : R(t, _);
                }
                function K(t82) {
                    var e = G(t82);
                    return e === m && (function(t) {
                        t.window_size = 2 * t.w_size, D(t.head), t.max_lazy_match = h3[t.level].max_lazy, t.good_match = h3[t.level].good_length, t.nice_match = h3[t.level].nice_length, t.max_chain_length = h3[t.level].max_chain, t.strstart = 0, t.block_start = 0, t.lookahead = 0, t.insert = 0, t.match_length = t.prev_length = x - 1, t.match_available = 0, t.ins_h = 0;
                    })(t82.state), e;
                }
                function Y(t, e, r, i, n, s) {
                    if (!t) return _;
                    var a = 1;
                    if (e === g && (e = 6), i < 0 ? (a = 0, i = -i) : 15 < i && (a = 2, i -= 16), n < 1 || y < n || r !== v || i < 8 || 15 < i || e < 0 || 9 < e || s < 0 || b < s) return R(t, _);
                    8 === i && (i = 9);
                    var o = new H;
                    return (t.state = o).strm = t, o.wrap = a, o.gzhead = null, o.w_bits = i, o.w_size = 1 << o.w_bits, o.w_mask = o.w_size - 1, o.hash_bits = n + 7, o.hash_size = 1 << o.hash_bits, o.hash_mask = o.hash_size - 1, o.hash_shift = ~~((o.hash_bits + x - 1) / x), o.window = new d2.Buf8(2 * o.w_size), o.head = new d2.Buf16(o.hash_size), o.prev = new d2.Buf16(o.w_size), o.lit_bufsize = 1 << n + 6, o.pending_buf_size = 4 * o.lit_bufsize, o.pending_buf = new d2.Buf8(o.pending_buf_size), o.d_buf = 1 * o.lit_bufsize, o.l_buf = 3 * o.lit_bufsize, o.level = e, o.strategy = s, o.method = r, K(t);
                }
                h3 = [
                    new M(0, 0, 0, 0, function(t, e) {
                        var r = 65535;
                        for(r > t.pending_buf_size - 5 && (r = t.pending_buf_size - 5);;){
                            if (t.lookahead <= 1) {
                                if (j(t), 0 === t.lookahead && e === l1) return A;
                                if (0 === t.lookahead) break;
                            }
                            t.strstart += t.lookahead, t.lookahead = 0;
                            var i = t.block_start + r;
                            if ((0 === t.strstart || t.strstart >= i) && (t.lookahead = t.strstart - i, t.strstart = i, N(t, !1), 0 === t.strm.avail_out)) return A;
                            if (t.strstart - t.block_start >= t.w_size - z && (N(t, !1), 0 === t.strm.avail_out)) return A;
                        }
                        return t.insert = 0, e === f1 ? (N(t, !0), 0 === t.strm.avail_out ? O : B) : (t.strstart > t.block_start && (N(t, !1), t.strm.avail_out), A);
                    }),
                    new M(4, 4, 8, 4, Z),
                    new M(4, 5, 16, 8, Z),
                    new M(4, 6, 32, 32, Z),
                    new M(4, 4, 16, 16, W),
                    new M(8, 16, 32, 32, W),
                    new M(8, 16, 128, 128, W),
                    new M(8, 32, 128, 256, W),
                    new M(32, 128, 258, 1024, W),
                    new M(32, 258, 258, 4096, W)
                ], r31.deflateInit = function(t, e) {
                    return Y(t, e, v, 15, 8, 0);
                }, r31.deflateInit2 = Y, r31.deflateReset = K, r31.deflateResetKeep = G, r31.deflateSetHeader = function(t, e) {
                    return t && t.state ? 2 !== t.state.wrap ? _ : (t.state.gzhead = e, m) : _;
                }, r31.deflate = function(t83, e49) {
                    var r32, i25, n18, s14;
                    if (!t83 || !t83.state || 5 < e49 || e49 < 0) return t83 ? R(t83, _) : _;
                    if (i25 = t83.state, !t83.output || !t83.input && 0 !== t83.avail_in || 666 === i25.status && e49 !== f1) return R(t83, 0 === t83.avail_out ? -5 : _);
                    if (i25.strm = t83, r32 = i25.last_flush, i25.last_flush = e49, i25.status === C) {
                        if (2 === i25.wrap) t83.adler = 0, U(i25, 31), U(i25, 139), U(i25, 8), i25.gzhead ? (U(i25, (i25.gzhead.text ? 1 : 0) + (i25.gzhead.hcrc ? 2 : 0) + (i25.gzhead.extra ? 4 : 0) + (i25.gzhead.name ? 8 : 0) + (i25.gzhead.comment ? 16 : 0)), U(i25, 255 & i25.gzhead.time), U(i25, i25.gzhead.time >> 8 & 255), U(i25, i25.gzhead.time >> 16 & 255), U(i25, i25.gzhead.time >> 24 & 255), U(i25, 9 === i25.level ? 2 : 2 <= i25.strategy || i25.level < 2 ? 4 : 0), U(i25, 255 & i25.gzhead.os), i25.gzhead.extra && i25.gzhead.extra.length && (U(i25, 255 & i25.gzhead.extra.length), U(i25, i25.gzhead.extra.length >> 8 & 255)), i25.gzhead.hcrc && (t83.adler = p1(t83.adler, i25.pending_buf, i25.pending, 0)), i25.gzindex = 0, i25.status = 69) : (U(i25, 0), U(i25, 0), U(i25, 0), U(i25, 0), U(i25, 0), U(i25, 9 === i25.level ? 2 : 2 <= i25.strategy || i25.level < 2 ? 4 : 0), U(i25, 3), i25.status = E);
                        else {
                            var a = v + (i25.w_bits - 8 << 4) << 8;
                            a |= (2 <= i25.strategy || i25.level < 2 ? 0 : i25.level < 6 ? 1 : 6 === i25.level ? 2 : 3) << 6, 0 !== i25.strstart && (a |= 32), a += 31 - a % 31, i25.status = E, P(i25, a), 0 !== i25.strstart && (P(i25, t83.adler >>> 16), P(i25, 65535 & t83.adler)), t83.adler = 1;
                        }
                    }
                    if (69 === i25.status) {
                        if (i25.gzhead.extra) {
                            for(n18 = i25.pending; i25.gzindex < (65535 & i25.gzhead.extra.length) && (i25.pending !== i25.pending_buf_size || (i25.gzhead.hcrc && i25.pending > n18 && (t83.adler = p1(t83.adler, i25.pending_buf, i25.pending - n18, n18)), F(t83), n18 = i25.pending, i25.pending !== i25.pending_buf_size));)U(i25, 255 & i25.gzhead.extra[i25.gzindex]), i25.gzindex++;
                            i25.gzhead.hcrc && i25.pending > n18 && (t83.adler = p1(t83.adler, i25.pending_buf, i25.pending - n18, n18)), i25.gzindex === i25.gzhead.extra.length && (i25.gzindex = 0, i25.status = 73);
                        } else i25.status = 73;
                    }
                    if (73 === i25.status) {
                        if (i25.gzhead.name) {
                            n18 = i25.pending;
                            do {
                                if (i25.pending === i25.pending_buf_size && (i25.gzhead.hcrc && i25.pending > n18 && (t83.adler = p1(t83.adler, i25.pending_buf, i25.pending - n18, n18)), F(t83), n18 = i25.pending, i25.pending === i25.pending_buf_size)) {
                                    s14 = 1;
                                    break;
                                }
                                s14 = i25.gzindex < i25.gzhead.name.length ? 255 & i25.gzhead.name.charCodeAt(i25.gzindex++) : 0, U(i25, s14);
                            }while (0 !== s14)
                            i25.gzhead.hcrc && i25.pending > n18 && (t83.adler = p1(t83.adler, i25.pending_buf, i25.pending - n18, n18)), 0 === s14 && (i25.gzindex = 0, i25.status = 91);
                        } else i25.status = 91;
                    }
                    if (91 === i25.status) {
                        if (i25.gzhead.comment) {
                            n18 = i25.pending;
                            do {
                                if (i25.pending === i25.pending_buf_size && (i25.gzhead.hcrc && i25.pending > n18 && (t83.adler = p1(t83.adler, i25.pending_buf, i25.pending - n18, n18)), F(t83), n18 = i25.pending, i25.pending === i25.pending_buf_size)) {
                                    s14 = 1;
                                    break;
                                }
                                s14 = i25.gzindex < i25.gzhead.comment.length ? 255 & i25.gzhead.comment.charCodeAt(i25.gzindex++) : 0, U(i25, s14);
                            }while (0 !== s14)
                            i25.gzhead.hcrc && i25.pending > n18 && (t83.adler = p1(t83.adler, i25.pending_buf, i25.pending - n18, n18)), 0 === s14 && (i25.status = 103);
                        } else i25.status = 103;
                    }
                    if (103 === i25.status && (i25.gzhead.hcrc ? (i25.pending + 2 > i25.pending_buf_size && F(t83), i25.pending + 2 <= i25.pending_buf_size && (U(i25, 255 & t83.adler), U(i25, t83.adler >> 8 & 255), t83.adler = 0, i25.status = E)) : i25.status = E), 0 !== i25.pending) {
                        if (F(t83), 0 === t83.avail_out) return i25.last_flush = -1, m;
                    } else if (0 === t83.avail_in && T(e49) <= T(r32) && e49 !== f1) return R(t83, -5);
                    if (666 === i25.status && 0 !== t83.avail_in) return R(t83, -5);
                    if (0 !== t83.avail_in || 0 !== i25.lookahead || e49 !== l1 && 666 !== i25.status) {
                        var o = 2 === i25.strategy ? function(t, e) {
                            for(var r;;){
                                if (0 === t.lookahead && (j(t), 0 === t.lookahead)) {
                                    if (e === l1) return A;
                                    break;
                                }
                                if (t.match_length = 0, r = u1._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++, r && (N(t, !1), 0 === t.strm.avail_out)) return A;
                            }
                            return t.insert = 0, e === f1 ? (N(t, !0), 0 === t.strm.avail_out ? O : B) : t.last_lit && (N(t, !1), 0 === t.strm.avail_out) ? A : I;
                        }(i25, e49) : 3 === i25.strategy ? function(t, e) {
                            for(var r, i, n, s, a = t.window;;){
                                if (t.lookahead <= S) {
                                    if (j(t), t.lookahead <= S && e === l1) return A;
                                    if (0 === t.lookahead) break;
                                }
                                if (t.match_length = 0, t.lookahead >= x && 0 < t.strstart && (i = a[n = t.strstart - 1]) === a[++n] && i === a[++n] && i === a[++n]) {
                                    s = t.strstart + S;
                                    do ;
                                    while (i === a[++n] && i === a[++n] && i === a[++n] && i === a[++n] && i === a[++n] && i === a[++n] && i === a[++n] && i === a[++n] && n < s)
                                    t.match_length = S - (s - n), t.match_length > t.lookahead && (t.match_length = t.lookahead);
                                }
                                if (t.match_length >= x ? (r = u1._tr_tally(t, 1, t.match_length - x), t.lookahead -= t.match_length, t.strstart += t.match_length, t.match_length = 0) : (r = u1._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++), r && (N(t, !1), 0 === t.strm.avail_out)) return A;
                            }
                            return t.insert = 0, e === f1 ? (N(t, !0), 0 === t.strm.avail_out ? O : B) : t.last_lit && (N(t, !1), 0 === t.strm.avail_out) ? A : I;
                        }(i25, e49) : h3[i25.level].func(i25, e49);
                        if (o !== O && o !== B || (i25.status = 666), o === A || o === O) return 0 === t83.avail_out && (i25.last_flush = -1), m;
                        if (o === I && (1 === e49 ? u1._tr_align(i25) : 5 !== e49 && (u1._tr_stored_block(i25, 0, 0, !1), 3 === e49 && (D(i25.head), 0 === i25.lookahead && (i25.strstart = 0, i25.block_start = 0, i25.insert = 0))), F(t83), 0 === t83.avail_out)) return i25.last_flush = -1, m;
                    }
                    return e49 !== f1 ? m : i25.wrap <= 0 ? 1 : (2 === i25.wrap ? (U(i25, 255 & t83.adler), U(i25, t83.adler >> 8 & 255), U(i25, t83.adler >> 16 & 255), U(i25, t83.adler >> 24 & 255), U(i25, 255 & t83.total_in), U(i25, t83.total_in >> 8 & 255), U(i25, t83.total_in >> 16 & 255), U(i25, t83.total_in >> 24 & 255)) : (P(i25, t83.adler >>> 16), P(i25, 65535 & t83.adler)), F(t83), 0 < i25.wrap && (i25.wrap = -i25.wrap), 0 !== i25.pending ? m : 1);
                }, r31.deflateEnd = function(t) {
                    var e;
                    return t && t.state ? (e = t.state.status) !== C && 69 !== e && 73 !== e && 91 !== e && 103 !== e && e !== E && 666 !== e ? R(t, _) : (t.state = null, e === E ? R(t, -3) : m) : _;
                }, r31.deflateSetDictionary = function(t, e) {
                    var r, i, n, s, a, o, h, u, l = e.length;
                    if (!t || !t.state) return _;
                    if (2 === (s = (r = t.state).wrap) || 1 === s && r.status !== C || r.lookahead) return _;
                    for(1 === s && (t.adler = c1(t.adler, e, l, 0)), r.wrap = 0, l >= r.w_size && (0 === s && (D(r.head), r.strstart = 0, r.block_start = 0, r.insert = 0), u = new d2.Buf8(r.w_size), d2.arraySet(u, e, l - r.w_size, r.w_size, 0), e = u, l = r.w_size), a = t.avail_in, o = t.next_in, h = t.input, t.avail_in = l, t.next_in = 0, t.input = e, j(r); r.lookahead >= x;){
                        for(i = r.strstart, n = r.lookahead - (x - 1); r.ins_h = (r.ins_h << r.hash_shift ^ r.window[i + x - 1]) & r.hash_mask, r.prev[i & r.w_mask] = r.head[r.ins_h], r.head[r.ins_h] = i, i++, --n;);
                        r.strstart = i, r.lookahead = x - 1, j(r);
                    }
                    return r.strstart += r.lookahead, r.block_start = r.strstart, r.insert = r.lookahead, r.lookahead = 0, r.match_length = r.prev_length = x - 1, r.match_available = 0, t.next_in = o, t.input = h, t.avail_in = a, r.wrap = s, m;
                }, r31.deflateInfo = "pako deflate (from Nodeca project)";
            },
            {
                "../utils/common": 41,
                "./adler32": 43,
                "./crc32": 45,
                "./messages": 51,
                "./trees": 52
            }
        ],
        47: [
            function(t, e, r) {
                "use strict";
                e.exports = function() {
                    this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
                };
            },
            {
            }
        ],
        48: [
            function(t84, e50, r33) {
                "use strict";
                e50.exports = function(t, e) {
                    var r, i, n, s, a, o, h, u, l, f, d, c, p, m, _, g, b, v, y, w, k, x, S, z, C;
                    r = t.state, i = t.next_in, z = t.input, n = i + (t.avail_in - 5), s = t.next_out, C = t.output, a = s - (e - t.avail_out), o = s + (t.avail_out - 257), h = r.dmax, u = r.wsize, l = r.whave, f = r.wnext, d = r.window, c = r.hold, p = r.bits, m = r.lencode, _ = r.distcode, g = (1 << r.lenbits) - 1, b = (1 << r.distbits) - 1;
                    t: do {
                        p < 15 && (c += z[i++] << p, p += 8, c += z[i++] << p, p += 8), v = m[c & g];
                        e: for(;;){
                            if (c >>>= y = v >>> 24, p -= y, 0 === (y = v >>> 16 & 255)) C[s++] = 65535 & v;
                            else {
                                if (!(16 & y)) {
                                    if (0 == (64 & y)) {
                                        v = m[(65535 & v) + (c & (1 << y) - 1)];
                                        continue e;
                                    }
                                    if (32 & y) {
                                        r.mode = 12;
                                        break t;
                                    }
                                    t.msg = "invalid literal/length code", r.mode = 30;
                                    break t;
                                }
                                w = 65535 & v, (y &= 15) && (p < y && (c += z[i++] << p, p += 8), w += c & (1 << y) - 1, c >>>= y, p -= y), p < 15 && (c += z[i++] << p, p += 8, c += z[i++] << p, p += 8), v = _[c & b];
                                r: for(;;){
                                    if (c >>>= y = v >>> 24, p -= y, !(16 & (y = v >>> 16 & 255))) {
                                        if (0 == (64 & y)) {
                                            v = _[(65535 & v) + (c & (1 << y) - 1)];
                                            continue r;
                                        }
                                        t.msg = "invalid distance code", r.mode = 30;
                                        break t;
                                    }
                                    if (k = 65535 & v, p < (y &= 15) && (c += z[i++] << p, (p += 8) < y && (c += z[i++] << p, p += 8)), h < (k += c & (1 << y) - 1)) {
                                        t.msg = "invalid distance too far back", r.mode = 30;
                                        break t;
                                    }
                                    if (c >>>= y, p -= y, (y = s - a) < k) {
                                        if (l < (y = k - y) && r.sane) {
                                            t.msg = "invalid distance too far back", r.mode = 30;
                                            break t;
                                        }
                                        if (S = d, (x = 0) === f) {
                                            if (x += u - y, y < w) {
                                                for(w -= y; C[s++] = d[x++], --y;);
                                                x = s - k, S = C;
                                            }
                                        } else if (f < y) {
                                            if (x += u + f - y, (y -= f) < w) {
                                                for(w -= y; C[s++] = d[x++], --y;);
                                                if (x = 0, f < w) {
                                                    for(w -= y = f; C[s++] = d[x++], --y;);
                                                    x = s - k, S = C;
                                                }
                                            }
                                        } else if (x += f - y, y < w) {
                                            for(w -= y; C[s++] = d[x++], --y;);
                                            x = s - k, S = C;
                                        }
                                        for(; 2 < w;)C[s++] = S[x++], C[s++] = S[x++], C[s++] = S[x++], w -= 3;
                                        w && (C[s++] = S[x++], 1 < w && (C[s++] = S[x++]));
                                    } else {
                                        for(x = s - k; C[s++] = C[x++], C[s++] = C[x++], C[s++] = C[x++], 2 < (w -= 3););
                                        w && (C[s++] = C[x++], 1 < w && (C[s++] = C[x++]));
                                    }
                                    break;
                                }
                            }
                            break;
                        }
                    }while (i < n && s < o)
                    i -= w = p >> 3, c &= (1 << (p -= w << 3)) - 1, t.next_in = i, t.next_out = s, t.avail_in = i < n ? n - i + 5 : 5 - (i - n), t.avail_out = s < o ? o - s + 257 : 257 - (s - o), r.hold = c, r.bits = p;
                };
            },
            {
            }
        ],
        49: [
            function(t85, e51, r34) {
                "use strict";
                var I = t85("../utils/common"), O = t85("./adler32"), B = t85("./crc32"), R = t85("./inffast"), T = t85("./inftrees"), D = 1, F = 2, N = 0, U = -2, P = 1, i26 = 852, n19 = 592;
                function L(t) {
                    return (t >>> 24 & 255) + (t >>> 8 & 65280) + ((65280 & t) << 8) + ((255 & t) << 24);
                }
                function s15() {
                    this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I.Buf16(320), this.work = new I.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
                }
                function a7(t) {
                    var e;
                    return t && t.state ? (e = t.state, t.total_in = t.total_out = e.total = 0, t.msg = "", e.wrap && (t.adler = 1 & e.wrap), e.mode = P, e.last = 0, e.havedict = 0, e.dmax = 32768, e.head = null, e.hold = 0, e.bits = 0, e.lencode = e.lendyn = new I.Buf32(i26), e.distcode = e.distdyn = new I.Buf32(n19), e.sane = 1, e.back = -1, N) : U;
                }
                function o7(t) {
                    var e;
                    return t && t.state ? ((e = t.state).wsize = 0, e.whave = 0, e.wnext = 0, a7(t)) : U;
                }
                function h4(t, e) {
                    var r, i;
                    return t && t.state ? (i = t.state, e < 0 ? (r = 0, e = -e) : (r = 1 + (e >> 4), e < 48 && (e &= 15)), e && (e < 8 || 15 < e) ? U : (null !== i.window && i.wbits !== e && (i.window = null), i.wrap = r, i.wbits = e, o7(t))) : U;
                }
                function u2(t, e) {
                    var r, i;
                    return t ? (i = new s15, (t.state = i).window = null, (r = h4(t, e)) !== N && (t.state = null), r) : U;
                }
                var l2, f2, d3 = !0;
                function j(t) {
                    if (d3) {
                        var e;
                        for(l2 = new I.Buf32(512), f2 = new I.Buf32(32), e = 0; e < 144;)t.lens[e++] = 8;
                        for(; e < 256;)t.lens[e++] = 9;
                        for(; e < 280;)t.lens[e++] = 7;
                        for(; e < 288;)t.lens[e++] = 8;
                        for(T(D, t.lens, 0, 288, l2, 0, t.work, {
                            bits: 9
                        }), e = 0; e < 32;)t.lens[e++] = 5;
                        T(F, t.lens, 0, 32, f2, 0, t.work, {
                            bits: 5
                        }), d3 = !1;
                    }
                    t.lencode = l2, t.lenbits = 9, t.distcode = f2, t.distbits = 5;
                }
                function Z(t, e, r, i) {
                    var n, s = t.state;
                    return null === s.window && (s.wsize = 1 << s.wbits, s.wnext = 0, s.whave = 0, s.window = new I.Buf8(s.wsize)), i >= s.wsize ? (I.arraySet(s.window, e, r - s.wsize, s.wsize, 0), s.wnext = 0, s.whave = s.wsize) : (i < (n = s.wsize - s.wnext) && (n = i), I.arraySet(s.window, e, r - i, n, s.wnext), (i -= n) ? (I.arraySet(s.window, e, r - i, i, 0), s.wnext = i, s.whave = s.wsize) : (s.wnext += n, s.wnext === s.wsize && (s.wnext = 0), s.whave < s.wsize && (s.whave += n))), 0;
                }
                r34.inflateReset = o7, r34.inflateReset2 = h4, r34.inflateResetKeep = a7, r34.inflateInit = function(t) {
                    return u2(t, 15);
                }, r34.inflateInit2 = u2, r34.inflate = function(t, e) {
                    var r, i, n, s, a, o, h, u, l, f, d, c, p, m, _, g, b, v, y, w, k, x, S, z, C = 0, E = new I.Buf8(4), A = [
                        16,
                        17,
                        18,
                        0,
                        8,
                        7,
                        9,
                        6,
                        10,
                        5,
                        11,
                        4,
                        12,
                        3,
                        13,
                        2,
                        14,
                        1,
                        15
                    ];
                    if (!t || !t.state || !t.output || !t.input && 0 !== t.avail_in) return U;
                    12 === (r = t.state).mode && (r.mode = 13), a = t.next_out, n = t.output, h = t.avail_out, s = t.next_in, i = t.input, o = t.avail_in, u = r.hold, l = r.bits, f = o, d = h, x = N;
                    t: for(;;)switch(r.mode){
                        case P:
                            if (0 === r.wrap) {
                                r.mode = 13;
                                break;
                            }
                            for(; l < 16;){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            if (2 & r.wrap && 35615 === u) {
                                E[r.check = 0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0), l = u = 0, r.mode = 2;
                                break;
                            }
                            if (r.flags = 0, r.head && (r.head.done = !1), !(1 & r.wrap) || (((255 & u) << 8) + (u >> 8)) % 31) {
                                t.msg = "incorrect header check", r.mode = 30;
                                break;
                            }
                            if (8 != (15 & u)) {
                                t.msg = "unknown compression method", r.mode = 30;
                                break;
                            }
                            if (l -= 4, k = 8 + (15 & (u >>>= 4)), 0 === r.wbits) r.wbits = k;
                            else if (k > r.wbits) {
                                t.msg = "invalid window size", r.mode = 30;
                                break;
                            }
                            r.dmax = 1 << k, t.adler = r.check = 1, r.mode = 512 & u ? 10 : 12, l = u = 0;
                            break;
                        case 2:
                            for(; l < 16;){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            if (r.flags = u, 8 != (255 & r.flags)) {
                                t.msg = "unknown compression method", r.mode = 30;
                                break;
                            }
                            if (57344 & r.flags) {
                                t.msg = "unknown header flags set", r.mode = 30;
                                break;
                            }
                            r.head && (r.head.text = u >> 8 & 1), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0)), l = u = 0, r.mode = 3;
                        case 3:
                            for(; l < 32;){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            r.head && (r.head.time = u), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, E[2] = u >>> 16 & 255, E[3] = u >>> 24 & 255, r.check = B(r.check, E, 4, 0)), l = u = 0, r.mode = 4;
                        case 4:
                            for(; l < 16;){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            r.head && (r.head.xflags = 255 & u, r.head.os = u >> 8), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0)), l = u = 0, r.mode = 5;
                        case 5:
                            if (1024 & r.flags) {
                                for(; l < 16;){
                                    if (0 === o) break t;
                                    o--, u += i[s++] << l, l += 8;
                                }
                                r.length = u, r.head && (r.head.extra_len = u), 512 & r.flags && (E[0] = 255 & u, E[1] = u >>> 8 & 255, r.check = B(r.check, E, 2, 0)), l = u = 0;
                            } else r.head && (r.head.extra = null);
                            r.mode = 6;
                        case 6:
                            if (1024 & r.flags && (o < (c = r.length) && (c = o), c && (r.head && (k = r.head.extra_len - r.length, r.head.extra || (r.head.extra = new Array(r.head.extra_len)), I.arraySet(r.head.extra, i, s, c, k)), 512 & r.flags && (r.check = B(r.check, i, c, s)), o -= c, s += c, r.length -= c), r.length)) break t;
                            r.length = 0, r.mode = 7;
                        case 7:
                            if (2048 & r.flags) {
                                if (0 === o) break t;
                                for(c = 0; k = i[s + c++], r.head && k && r.length < 65536 && (r.head.name += String.fromCharCode(k)), k && c < o;);
                                if (512 & r.flags && (r.check = B(r.check, i, c, s)), o -= c, s += c, k) break t;
                            } else r.head && (r.head.name = null);
                            r.length = 0, r.mode = 8;
                        case 8:
                            if (4096 & r.flags) {
                                if (0 === o) break t;
                                for(c = 0; k = i[s + c++], r.head && k && r.length < 65536 && (r.head.comment += String.fromCharCode(k)), k && c < o;);
                                if (512 & r.flags && (r.check = B(r.check, i, c, s)), o -= c, s += c, k) break t;
                            } else r.head && (r.head.comment = null);
                            r.mode = 9;
                        case 9:
                            if (512 & r.flags) {
                                for(; l < 16;){
                                    if (0 === o) break t;
                                    o--, u += i[s++] << l, l += 8;
                                }
                                if (u !== (65535 & r.check)) {
                                    t.msg = "header crc mismatch", r.mode = 30;
                                    break;
                                }
                                l = u = 0;
                            }
                            r.head && (r.head.hcrc = r.flags >> 9 & 1, r.head.done = !0), t.adler = r.check = 0, r.mode = 12;
                            break;
                        case 10:
                            for(; l < 32;){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            t.adler = r.check = L(u), l = u = 0, r.mode = 11;
                        case 11:
                            if (0 === r.havedict) return t.next_out = a, t.avail_out = h, t.next_in = s, t.avail_in = o, r.hold = u, r.bits = l, 2;
                            t.adler = r.check = 1, r.mode = 12;
                        case 12:
                            if (5 === e || 6 === e) break t;
                        case 13:
                            if (r.last) {
                                u >>>= 7 & l, l -= 7 & l, r.mode = 27;
                                break;
                            }
                            for(; l < 3;){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            switch(r.last = 1 & u, l -= 1, 3 & (u >>>= 1)){
                                case 0:
                                    r.mode = 14;
                                    break;
                                case 1:
                                    if (j(r), r.mode = 20, 6 !== e) break;
                                    u >>>= 2, l -= 2;
                                    break t;
                                case 2:
                                    r.mode = 17;
                                    break;
                                case 3:
                                    t.msg = "invalid block type", r.mode = 30;
                            }
                            u >>>= 2, l -= 2;
                            break;
                        case 14:
                            for(u >>>= 7 & l, l -= 7 & l; l < 32;){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            if ((65535 & u) != (u >>> 16 ^ 65535)) {
                                t.msg = "invalid stored block lengths", r.mode = 30;
                                break;
                            }
                            if (r.length = 65535 & u, l = u = 0, r.mode = 15, 6 === e) break t;
                        case 15:
                            r.mode = 16;
                        case 16:
                            if (c = r.length) {
                                if (o < c && (c = o), h < c && (c = h), 0 === c) break t;
                                I.arraySet(n, i, s, c, a), o -= c, s += c, h -= c, a += c, r.length -= c;
                                break;
                            }
                            r.mode = 12;
                            break;
                        case 17:
                            for(; l < 14;){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            if (r.nlen = 257 + (31 & u), u >>>= 5, l -= 5, r.ndist = 1 + (31 & u), u >>>= 5, l -= 5, r.ncode = 4 + (15 & u), u >>>= 4, l -= 4, 286 < r.nlen || 30 < r.ndist) {
                                t.msg = "too many length or distance symbols", r.mode = 30;
                                break;
                            }
                            r.have = 0, r.mode = 18;
                        case 18:
                            for(; r.have < r.ncode;){
                                for(; l < 3;){
                                    if (0 === o) break t;
                                    o--, u += i[s++] << l, l += 8;
                                }
                                r.lens[A[r.have++]] = 7 & u, u >>>= 3, l -= 3;
                            }
                            for(; r.have < 19;)r.lens[A[r.have++]] = 0;
                            if (r.lencode = r.lendyn, r.lenbits = 7, S = {
                                bits: r.lenbits
                            }, x = T(0, r.lens, 0, 19, r.lencode, 0, r.work, S), r.lenbits = S.bits, x) {
                                t.msg = "invalid code lengths set", r.mode = 30;
                                break;
                            }
                            r.have = 0, r.mode = 19;
                        case 19:
                            for(; r.have < r.nlen + r.ndist;){
                                for(; g = (C = r.lencode[u & (1 << r.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l);){
                                    if (0 === o) break t;
                                    o--, u += i[s++] << l, l += 8;
                                }
                                if (b < 16) u >>>= _, l -= _, r.lens[r.have++] = b;
                                else {
                                    if (16 === b) {
                                        for(z = _ + 2; l < z;){
                                            if (0 === o) break t;
                                            o--, u += i[s++] << l, l += 8;
                                        }
                                        if (u >>>= _, l -= _, 0 === r.have) {
                                            t.msg = "invalid bit length repeat", r.mode = 30;
                                            break;
                                        }
                                        k = r.lens[r.have - 1], c = 3 + (3 & u), u >>>= 2, l -= 2;
                                    } else if (17 === b) {
                                        for(z = _ + 3; l < z;){
                                            if (0 === o) break t;
                                            o--, u += i[s++] << l, l += 8;
                                        }
                                        l -= _, k = 0, c = 3 + (7 & (u >>>= _)), u >>>= 3, l -= 3;
                                    } else {
                                        for(z = _ + 7; l < z;){
                                            if (0 === o) break t;
                                            o--, u += i[s++] << l, l += 8;
                                        }
                                        l -= _, k = 0, c = 11 + (127 & (u >>>= _)), u >>>= 7, l -= 7;
                                    }
                                    if (r.have + c > r.nlen + r.ndist) {
                                        t.msg = "invalid bit length repeat", r.mode = 30;
                                        break;
                                    }
                                    for(; c--;)r.lens[r.have++] = k;
                                }
                            }
                            if (30 === r.mode) break;
                            if (0 === r.lens[256]) {
                                t.msg = "invalid code -- missing end-of-block", r.mode = 30;
                                break;
                            }
                            if (r.lenbits = 9, S = {
                                bits: r.lenbits
                            }, x = T(D, r.lens, 0, r.nlen, r.lencode, 0, r.work, S), r.lenbits = S.bits, x) {
                                t.msg = "invalid literal/lengths set", r.mode = 30;
                                break;
                            }
                            if (r.distbits = 6, r.distcode = r.distdyn, S = {
                                bits: r.distbits
                            }, x = T(F, r.lens, r.nlen, r.ndist, r.distcode, 0, r.work, S), r.distbits = S.bits, x) {
                                t.msg = "invalid distances set", r.mode = 30;
                                break;
                            }
                            if (r.mode = 20, 6 === e) break t;
                        case 20:
                            r.mode = 21;
                        case 21:
                            if (6 <= o && 258 <= h) {
                                t.next_out = a, t.avail_out = h, t.next_in = s, t.avail_in = o, r.hold = u, r.bits = l, R(t, d), a = t.next_out, n = t.output, h = t.avail_out, s = t.next_in, i = t.input, o = t.avail_in, u = r.hold, l = r.bits, 12 === r.mode && (r.back = -1);
                                break;
                            }
                            for(r.back = 0; g = (C = r.lencode[u & (1 << r.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l);){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            if (g && 0 == (240 & g)) {
                                for(v = _, y = g, w = b; g = (C = r.lencode[w + ((u & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l);){
                                    if (0 === o) break t;
                                    o--, u += i[s++] << l, l += 8;
                                }
                                u >>>= v, l -= v, r.back += v;
                            }
                            if (u >>>= _, l -= _, r.back += _, r.length = b, 0 === g) {
                                r.mode = 26;
                                break;
                            }
                            if (32 & g) {
                                r.back = -1, r.mode = 12;
                                break;
                            }
                            if (64 & g) {
                                t.msg = "invalid literal/length code", r.mode = 30;
                                break;
                            }
                            r.extra = 15 & g, r.mode = 22;
                        case 22:
                            if (r.extra) {
                                for(z = r.extra; l < z;){
                                    if (0 === o) break t;
                                    o--, u += i[s++] << l, l += 8;
                                }
                                r.length += u & (1 << r.extra) - 1, u >>>= r.extra, l -= r.extra, r.back += r.extra;
                            }
                            r.was = r.length, r.mode = 23;
                        case 23:
                            for(; g = (C = r.distcode[u & (1 << r.distbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l);){
                                if (0 === o) break t;
                                o--, u += i[s++] << l, l += 8;
                            }
                            if (0 == (240 & g)) {
                                for(v = _, y = g, w = b; g = (C = r.distcode[w + ((u & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l);){
                                    if (0 === o) break t;
                                    o--, u += i[s++] << l, l += 8;
                                }
                                u >>>= v, l -= v, r.back += v;
                            }
                            if (u >>>= _, l -= _, r.back += _, 64 & g) {
                                t.msg = "invalid distance code", r.mode = 30;
                                break;
                            }
                            r.offset = b, r.extra = 15 & g, r.mode = 24;
                        case 24:
                            if (r.extra) {
                                for(z = r.extra; l < z;){
                                    if (0 === o) break t;
                                    o--, u += i[s++] << l, l += 8;
                                }
                                r.offset += u & (1 << r.extra) - 1, u >>>= r.extra, l -= r.extra, r.back += r.extra;
                            }
                            if (r.offset > r.dmax) {
                                t.msg = "invalid distance too far back", r.mode = 30;
                                break;
                            }
                            r.mode = 25;
                        case 25:
                            if (0 === h) break t;
                            if (c = d - h, r.offset > c) {
                                if ((c = r.offset - c) > r.whave && r.sane) {
                                    t.msg = "invalid distance too far back", r.mode = 30;
                                    break;
                                }
                                p = c > r.wnext ? (c -= r.wnext, r.wsize - c) : r.wnext - c, c > r.length && (c = r.length), m = r.window;
                            } else m = n, p = a - r.offset, c = r.length;
                            for(h < c && (c = h), h -= c, r.length -= c; n[a++] = m[p++], --c;);
                            0 === r.length && (r.mode = 21);
                            break;
                        case 26:
                            if (0 === h) break t;
                            n[a++] = r.length, h--, r.mode = 21;
                            break;
                        case 27:
                            if (r.wrap) {
                                for(; l < 32;){
                                    if (0 === o) break t;
                                    o--, u |= i[s++] << l, l += 8;
                                }
                                if (d -= h, t.total_out += d, r.total += d, d && (t.adler = r.check = r.flags ? B(r.check, n, d, a - d) : O(r.check, n, d, a - d)), d = h, (r.flags ? u : L(u)) !== r.check) {
                                    t.msg = "incorrect data check", r.mode = 30;
                                    break;
                                }
                                l = u = 0;
                            }
                            r.mode = 28;
                        case 28:
                            if (r.wrap && r.flags) {
                                for(; l < 32;){
                                    if (0 === o) break t;
                                    o--, u += i[s++] << l, l += 8;
                                }
                                if (u !== (4294967295 & r.total)) {
                                    t.msg = "incorrect length check", r.mode = 30;
                                    break;
                                }
                                l = u = 0;
                            }
                            r.mode = 29;
                        case 29:
                            x = 1;
                            break t;
                        case 30:
                            x = -3;
                            break t;
                        case 31:
                            return -4;
                        case 32:
                        default:
                            return U;
                    }
                    return t.next_out = a, t.avail_out = h, t.next_in = s, t.avail_in = o, r.hold = u, r.bits = l, (r.wsize || d !== t.avail_out && r.mode < 30 && (r.mode < 27 || 4 !== e)) && Z(t, t.output, t.next_out, d - t.avail_out) ? (r.mode = 31, -4) : (f -= t.avail_in, d -= t.avail_out, t.total_in += f, t.total_out += d, r.total += d, r.wrap && d && (t.adler = r.check = r.flags ? B(r.check, n, d, t.next_out - d) : O(r.check, n, d, t.next_out - d)), t.data_type = r.bits + (r.last ? 64 : 0) + (12 === r.mode ? 128 : 0) + (20 === r.mode || 15 === r.mode ? 256 : 0), (0 == f && 0 === d || 4 === e) && x === N && (x = -5), x);
                }, r34.inflateEnd = function(t) {
                    if (!t || !t.state) return U;
                    var e = t.state;
                    return e.window && (e.window = null), t.state = null, N;
                }, r34.inflateGetHeader = function(t, e) {
                    var r;
                    return t && t.state ? 0 == (2 & (r = t.state).wrap) ? U : ((r.head = e).done = !1, N) : U;
                }, r34.inflateSetDictionary = function(t, e) {
                    var r, i = e.length;
                    return t && t.state ? 0 !== (r = t.state).wrap && 11 !== r.mode ? U : 11 === r.mode && O(1, e, i, 0) !== r.check ? -3 : Z(t, e, i, i) ? (r.mode = 31, -4) : (r.havedict = 1, N) : U;
                }, r34.inflateInfo = "pako inflate (from Nodeca project)";
            },
            {
                "../utils/common": 41,
                "./adler32": 43,
                "./crc32": 45,
                "./inffast": 48,
                "./inftrees": 50
            }
        ],
        50: [
            function(t86, e52, r) {
                "use strict";
                var D = t86("../utils/common"), F = [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    13,
                    15,
                    17,
                    19,
                    23,
                    27,
                    31,
                    35,
                    43,
                    51,
                    59,
                    67,
                    83,
                    99,
                    115,
                    131,
                    163,
                    195,
                    227,
                    258,
                    0,
                    0
                ], N = [
                    16,
                    16,
                    16,
                    16,
                    16,
                    16,
                    16,
                    16,
                    17,
                    17,
                    17,
                    17,
                    18,
                    18,
                    18,
                    18,
                    19,
                    19,
                    19,
                    19,
                    20,
                    20,
                    20,
                    20,
                    21,
                    21,
                    21,
                    21,
                    16,
                    72,
                    78
                ], U = [
                    1,
                    2,
                    3,
                    4,
                    5,
                    7,
                    9,
                    13,
                    17,
                    25,
                    33,
                    49,
                    65,
                    97,
                    129,
                    193,
                    257,
                    385,
                    513,
                    769,
                    1025,
                    1537,
                    2049,
                    3073,
                    4097,
                    6145,
                    8193,
                    12289,
                    16385,
                    24577,
                    0,
                    0
                ], P = [
                    16,
                    16,
                    16,
                    16,
                    17,
                    17,
                    18,
                    18,
                    19,
                    19,
                    20,
                    20,
                    21,
                    21,
                    22,
                    22,
                    23,
                    23,
                    24,
                    24,
                    25,
                    25,
                    26,
                    26,
                    27,
                    27,
                    28,
                    28,
                    29,
                    29,
                    64,
                    64
                ];
                e52.exports = function(t, e, r, i, n, s, a, o) {
                    var h, u, l, f, d, c, p, m, _, g = o.bits, b = 0, v = 0, y = 0, w = 0, k = 0, x = 0, S = 0, z = 0, C = 0, E = 0, A = null, I = 0, O = new D.Buf16(16), B = new D.Buf16(16), R = null, T = 0;
                    for(b = 0; b <= 15; b++)O[b] = 0;
                    for(v = 0; v < i; v++)O[e[r + v]]++;
                    for(k = g, w = 15; 1 <= w && 0 === O[w]; w--);
                    if (w < k && (k = w), 0 === w) return n[s++] = 20971520, n[s++] = 20971520, o.bits = 1, 0;
                    for(y = 1; y < w && 0 === O[y]; y++);
                    for(k < y && (k = y), b = z = 1; b <= 15; b++)if (z <<= 1, (z -= O[b]) < 0) return -1;
                    if (0 < z && (0 === t || 1 !== w)) return -1;
                    for(B[1] = 0, b = 1; b < 15; b++)B[b + 1] = B[b] + O[b];
                    for(v = 0; v < i; v++)0 !== e[r + v] && (a[B[e[r + v]]++] = v);
                    if (c = 0 === t ? (A = R = a, 19) : 1 === t ? (A = F, I -= 257, R = N, T -= 257, 256) : (A = U, R = P, -1), b = y, d = s, S = v = E = 0, l = -1, f = (C = 1 << (x = k)) - 1, 1 === t && 852 < C || 2 === t && 592 < C) return 1;
                    for(;;){
                        for(p = b - S, _ = a[v] < c ? (m = 0, a[v]) : a[v] > c ? (m = R[T + a[v]], A[I + a[v]]) : (m = 96, 0), h = 1 << b - S, y = u = 1 << x; n[d + (E >> S) + (u -= h)] = p << 24 | m << 16 | _ | 0, 0 !== u;);
                        for(h = 1 << b - 1; E & h;)h >>= 1;
                        if (0 !== h ? (E &= h - 1, E += h) : E = 0, v++, 0 == --O[b]) {
                            if (b === w) break;
                            b = e[r + a[v]];
                        }
                        if (k < b && (E & f) !== l) {
                            for(0 === S && (S = k), d += y, z = 1 << (x = b - S); x + S < w && !((z -= O[x + S]) <= 0);)x++, z <<= 1;
                            if (C += 1 << x, 1 === t && 852 < C || 2 === t && 592 < C) return 1;
                            n[l = E & f] = k << 24 | x << 16 | d - s | 0;
                        }
                    }
                    return 0 !== E && (n[d + E] = b - S << 24 | 4194304), o.bits = k, 0;
                };
            },
            {
                "../utils/common": 41
            }
        ],
        51: [
            function(t, e, r) {
                "use strict";
                e.exports = {
                    2: "need dictionary",
                    1: "stream end",
                    0: "",
                    "-1": "file error",
                    "-2": "stream error",
                    "-3": "data error",
                    "-4": "insufficient memory",
                    "-5": "buffer error",
                    "-6": "incompatible version"
                };
            },
            {
            }
        ],
        52: [
            function(t87, e53, r35) {
                "use strict";
                var n20 = t87("../utils/common"), o8 = 0, h5 = 1;
                function i27(t) {
                    for(var e = t.length; 0 <= --e;)t[e] = 0;
                }
                var s16 = 0, a8 = 29, u3 = 256, l3 = u3 + 1 + a8, f3 = 30, d4 = 19, _ = 2 * l3 + 1, g = 15, c2 = 16, p2 = 7, m1 = 256, b = 16, v = 17, y = 18, w = [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    0
                ], k = [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3,
                    3,
                    4,
                    4,
                    5,
                    5,
                    6,
                    6,
                    7,
                    7,
                    8,
                    8,
                    9,
                    9,
                    10,
                    10,
                    11,
                    11,
                    12,
                    12,
                    13,
                    13
                ], x = [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    3,
                    7
                ], S = [
                    16,
                    17,
                    18,
                    0,
                    8,
                    7,
                    9,
                    6,
                    10,
                    5,
                    11,
                    4,
                    12,
                    3,
                    13,
                    2,
                    14,
                    1,
                    15
                ], z = new Array(2 * (l3 + 2));
                i27(z);
                var C = new Array(2 * f3);
                i27(C);
                var E = new Array(512);
                i27(E);
                var A = new Array(256);
                i27(A);
                var I = new Array(a8);
                i27(I);
                var O, B, R, T = new Array(f3);
                function D(t, e, r, i, n) {
                    this.static_tree = t, this.extra_bits = e, this.extra_base = r, this.elems = i, this.max_length = n, this.has_stree = t && t.length;
                }
                function F(t, e) {
                    this.dyn_tree = t, this.max_code = 0, this.stat_desc = e;
                }
                function N(t) {
                    return t < 256 ? E[t] : E[256 + (t >>> 7)];
                }
                function U(t, e) {
                    t.pending_buf[t.pending++] = 255 & e, t.pending_buf[t.pending++] = e >>> 8 & 255;
                }
                function P(t, e, r) {
                    t.bi_valid > c2 - r ? (t.bi_buf |= e << t.bi_valid & 65535, U(t, t.bi_buf), t.bi_buf = e >> c2 - t.bi_valid, t.bi_valid += r - c2) : (t.bi_buf |= e << t.bi_valid & 65535, t.bi_valid += r);
                }
                function L(t, e, r) {
                    P(t, r[2 * e], r[2 * e + 1]);
                }
                function j(t, e) {
                    for(var r = 0; r |= 1 & t, t >>>= 1, r <<= 1, 0 < --e;);
                    return r >>> 1;
                }
                function Z(t, e, r) {
                    var i, n, s = new Array(g + 1), a = 0;
                    for(i = 1; i <= g; i++)s[i] = a = a + r[i - 1] << 1;
                    for(n = 0; n <= e; n++){
                        var o = t[2 * n + 1];
                        0 !== o && (t[2 * n] = j(s[o]++, o));
                    }
                }
                function W(t) {
                    var e;
                    for(e = 0; e < l3; e++)t.dyn_ltree[2 * e] = 0;
                    for(e = 0; e < f3; e++)t.dyn_dtree[2 * e] = 0;
                    for(e = 0; e < d4; e++)t.bl_tree[2 * e] = 0;
                    t.dyn_ltree[2 * m1] = 1, t.opt_len = t.static_len = 0, t.last_lit = t.matches = 0;
                }
                function M(t) {
                    8 < t.bi_valid ? U(t, t.bi_buf) : 0 < t.bi_valid && (t.pending_buf[t.pending++] = t.bi_buf), t.bi_buf = 0, t.bi_valid = 0;
                }
                function H(t, e, r, i) {
                    var n = 2 * e, s = 2 * r;
                    return t[n] < t[s] || t[n] === t[s] && i[e] <= i[r];
                }
                function G(t, e, r) {
                    for(var i = t.heap[r], n = r << 1; n <= t.heap_len && (n < t.heap_len && H(e, t.heap[n + 1], t.heap[n], t.depth) && n++, !H(e, i, t.heap[n], t.depth));)t.heap[r] = t.heap[n], r = n, n <<= 1;
                    t.heap[r] = i;
                }
                function K(t, e, r) {
                    var i, n, s, a, o = 0;
                    if (0 !== t.last_lit) for(; i = t.pending_buf[t.d_buf + 2 * o] << 8 | t.pending_buf[t.d_buf + 2 * o + 1], n = t.pending_buf[t.l_buf + o], o++, 0 === i ? L(t, n, e) : (L(t, (s = A[n]) + u3 + 1, e), 0 !== (a = w[s]) && P(t, n -= I[s], a), L(t, s = N(--i), r), 0 !== (a = k[s]) && P(t, i -= T[s], a)), o < t.last_lit;);
                    L(t, m1, e);
                }
                function Y(t88, e54) {
                    var r36, i28, n21, s17 = e54.dyn_tree, a9 = e54.stat_desc.static_tree, o9 = e54.stat_desc.has_stree, h6 = e54.stat_desc.elems, u4 = -1;
                    for(t88.heap_len = 0, t88.heap_max = _, r36 = 0; r36 < h6; r36++)0 !== s17[2 * r36] ? (t88.heap[++t88.heap_len] = u4 = r36, t88.depth[r36] = 0) : s17[2 * r36 + 1] = 0;
                    for(; t88.heap_len < 2;)s17[2 * (n21 = t88.heap[++t88.heap_len] = u4 < 2 ? ++u4 : 0)] = 1, t88.depth[n21] = 0, t88.opt_len--, o9 && (t88.static_len -= a9[2 * n21 + 1]);
                    for(e54.max_code = u4, r36 = t88.heap_len >> 1; 1 <= r36; r36--)G(t88, s17, r36);
                    for(n21 = h6; r36 = t88.heap[1], t88.heap[1] = t88.heap[t88.heap_len--], G(t88, s17, 1), i28 = t88.heap[1], t88.heap[--t88.heap_max] = r36, t88.heap[--t88.heap_max] = i28, s17[2 * n21] = s17[2 * r36] + s17[2 * i28], t88.depth[n21] = (t88.depth[r36] >= t88.depth[i28] ? t88.depth[r36] : t88.depth[i28]) + 1, s17[2 * r36 + 1] = s17[2 * i28 + 1] = n21, t88.heap[1] = n21++, G(t88, s17, 1), 2 <= t88.heap_len;);
                    t88.heap[--t88.heap_max] = t88.heap[1], (function(t, e) {
                        var r, i, n, s, a, o, h = e.dyn_tree, u = e.max_code, l = e.stat_desc.static_tree, f = e.stat_desc.has_stree, d = e.stat_desc.extra_bits, c = e.stat_desc.extra_base, p = e.stat_desc.max_length, m = 0;
                        for(s = 0; s <= g; s++)t.bl_count[s] = 0;
                        for(h[2 * t.heap[t.heap_max] + 1] = 0, r = t.heap_max + 1; r < _; r++)p < (s = h[2 * h[2 * (i = t.heap[r]) + 1] + 1] + 1) && (s = p, m++), h[2 * i + 1] = s, u < i || (t.bl_count[s]++, a = 0, c <= i && (a = d[i - c]), o = h[2 * i], t.opt_len += o * (s + a), f && (t.static_len += o * (l[2 * i + 1] + a)));
                        if (0 !== m) {
                            do {
                                for(s = p - 1; 0 === t.bl_count[s];)s--;
                                t.bl_count[s]--, t.bl_count[s + 1] += 2, t.bl_count[p]--, m -= 2;
                            }while (0 < m)
                            for(s = p; 0 !== s; s--)for(i = t.bl_count[s]; 0 !== i;)u < (n = t.heap[--r]) || (h[2 * n + 1] !== s && (t.opt_len += (s - h[2 * n + 1]) * h[2 * n], h[2 * n + 1] = s), i--);
                        }
                    })(t88, e54), Z(s17, u4, t88.bl_count);
                }
                function X(t, e, r) {
                    var i, n, s = -1, a = e[1], o = 0, h = 7, u = 4;
                    for(0 === a && (h = 138, u = 3), e[2 * (r + 1) + 1] = 65535, i = 0; i <= r; i++)n = a, a = e[2 * (i + 1) + 1], ++o < h && n === a || (o < u ? t.bl_tree[2 * n] += o : 0 !== n ? (n !== s && t.bl_tree[2 * n]++, t.bl_tree[2 * b]++) : o <= 10 ? t.bl_tree[2 * v]++ : t.bl_tree[2 * y]++, s = n, u = (o = 0) === a ? (h = 138, 3) : n === a ? (h = 6, 3) : (h = 7, 4));
                }
                function V(t, e, r) {
                    var i, n, s = -1, a = e[1], o = 0, h = 7, u = 4;
                    for(0 === a && (h = 138, u = 3), i = 0; i <= r; i++)if (n = a, a = e[2 * (i + 1) + 1], !(++o < h && n === a)) {
                        if (o < u) for(; L(t, n, t.bl_tree), 0 != --o;);
                        else 0 !== n ? (n !== s && (L(t, n, t.bl_tree), o--), L(t, b, t.bl_tree), P(t, o - 3, 2)) : o <= 10 ? (L(t, v, t.bl_tree), P(t, o - 3, 3)) : (L(t, y, t.bl_tree), P(t, o - 11, 7));
                        s = n, u = (o = 0) === a ? (h = 138, 3) : n === a ? (h = 6, 3) : (h = 7, 4);
                    }
                }
                i27(T);
                var q = !1;
                function J(t89, e55, r37, i29) {
                    P(t89, (s16 << 1) + (i29 ? 1 : 0), 3), (function(t, e, r, i) {
                        M(t), i && (U(t, r), U(t, ~r)), n20.arraySet(t.pending_buf, t.window, e, r, t.pending), t.pending += r;
                    })(t89, e55, r37, !0);
                }
                r35._tr_init = function(t90) {
                    q || ((function() {
                        var t, e, r, i, n, s = new Array(g + 1);
                        for(i = r = 0; i < a8 - 1; i++)for(I[i] = r, t = 0; t < 1 << w[i]; t++)A[r++] = i;
                        for(A[r - 1] = i, i = n = 0; i < 16; i++)for(T[i] = n, t = 0; t < 1 << k[i]; t++)E[n++] = i;
                        for(n >>= 7; i < f3; i++)for(T[i] = n << 7, t = 0; t < 1 << k[i] - 7; t++)E[256 + n++] = i;
                        for(e = 0; e <= g; e++)s[e] = 0;
                        for(t = 0; t <= 143;)z[2 * t + 1] = 8, t++, s[8]++;
                        for(; t <= 255;)z[2 * t + 1] = 9, t++, s[9]++;
                        for(; t <= 279;)z[2 * t + 1] = 7, t++, s[7]++;
                        for(; t <= 287;)z[2 * t + 1] = 8, t++, s[8]++;
                        for(Z(z, l3 + 1, s), t = 0; t < f3; t++)C[2 * t + 1] = 5, C[2 * t] = j(t, 5);
                        O = new D(z, w, u3 + 1, l3, g), B = new D(C, k, 0, f3, g), R = new D(new Array(0), x, 0, d4, p2);
                    })(), q = !0), t90.l_desc = new F(t90.dyn_ltree, O), t90.d_desc = new F(t90.dyn_dtree, B), t90.bl_desc = new F(t90.bl_tree, R), t90.bi_buf = 0, t90.bi_valid = 0, W(t90);
                }, r35._tr_stored_block = J, r35._tr_flush_block = function(t91, e56, r38, i30) {
                    var n22, s, a = 0;
                    0 < t91.level ? (2 === t91.strm.data_type && (t91.strm.data_type = (function(t) {
                        var e, r = 4093624447;
                        for(e = 0; e <= 31; e++, r >>>= 1)if (1 & r && 0 !== t.dyn_ltree[2 * e]) return o8;
                        if (0 !== t.dyn_ltree[18] || 0 !== t.dyn_ltree[20] || 0 !== t.dyn_ltree[26]) return h5;
                        for(e = 32; e < u3; e++)if (0 !== t.dyn_ltree[2 * e]) return h5;
                        return o8;
                    })(t91)), Y(t91, t91.l_desc), Y(t91, t91.d_desc), a = (function(t) {
                        var e;
                        for(X(t, t.dyn_ltree, t.l_desc.max_code), X(t, t.dyn_dtree, t.d_desc.max_code), Y(t, t.bl_desc), e = d4 - 1; 3 <= e && 0 === t.bl_tree[2 * S[e] + 1]; e--);
                        return t.opt_len += 3 * (e + 1) + 5 + 5 + 4, e;
                    })(t91), n22 = t91.opt_len + 3 + 7 >>> 3, (s = t91.static_len + 3 + 7 >>> 3) <= n22 && (n22 = s)) : n22 = s = r38 + 5, r38 + 4 <= n22 && -1 !== e56 ? J(t91, e56, r38, i30) : 4 === t91.strategy || s === n22 ? (P(t91, 2 + (i30 ? 1 : 0), 3), K(t91, z, C)) : (P(t91, 4 + (i30 ? 1 : 0), 3), (function(t, e, r, i) {
                        var n;
                        for(P(t, e - 257, 5), P(t, r - 1, 5), P(t, i - 4, 4), n = 0; n < i; n++)P(t, t.bl_tree[2 * S[n] + 1], 3);
                        V(t, t.dyn_ltree, e - 1), V(t, t.dyn_dtree, r - 1);
                    })(t91, t91.l_desc.max_code + 1, t91.d_desc.max_code + 1, a + 1), K(t91, t91.dyn_ltree, t91.dyn_dtree)), W(t91), i30 && M(t91);
                }, r35._tr_tally = function(t, e, r) {
                    return t.pending_buf[t.d_buf + 2 * t.last_lit] = e >>> 8 & 255, t.pending_buf[t.d_buf + 2 * t.last_lit + 1] = 255 & e, t.pending_buf[t.l_buf + t.last_lit] = 255 & r, t.last_lit++, 0 === e ? t.dyn_ltree[2 * r]++ : (t.matches++, e--, t.dyn_ltree[2 * (A[r] + u3 + 1)]++, t.dyn_dtree[2 * N(e)]++), t.last_lit === t.lit_bufsize - 1;
                }, r35._tr_align = function(t92) {
                    P(t92, 2, 3), L(t92, m1, z), (function(t) {
                        16 === t.bi_valid ? (U(t, t.bi_buf), t.bi_buf = 0, t.bi_valid = 0) : 8 <= t.bi_valid && (t.pending_buf[t.pending++] = 255 & t.bi_buf, t.bi_buf >>= 8, t.bi_valid -= 8);
                    })(t92);
                };
            },
            {
                "../utils/common": 41
            }
        ],
        53: [
            function(t, e, r) {
                "use strict";
                e.exports = function() {
                    this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
                };
            },
            {
            }
        ],
        54: [
            function(t93, e, r) {
                "use strict";
                e.exports = "function" == typeof setImmediate ? setImmediate : function() {
                    var t = [].slice.apply(arguments);
                    t.splice(1, 0, 0), setTimeout.apply(null, t);
                };
            },
            {
            }
        ]
    }, {
    }, [
        10
    ])(10);
});

},{"buffer":"bOetu"}],"bOetu":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
var base64 = require('base64-js');
var ieee754 = require('ieee754');
var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 2147483647;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = byteLength1(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength1(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength1;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return utf8Slice(this, start, end);
        case 'ascii':
            return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return latin1Slice(this, start, end);
        case 'base64':
            return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i1;
    if (dir) {
        var foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 256))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"base64-js":"nR26C","ieee754":"ljh7N"}],"nR26C":[function(require,module,exports) {
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i1 = 0, len1 = code.length; i1 < len1; ++i1){
    lookup[i1] = code[i1];
    revLookup[code.charCodeAt(i1)] = i1;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}

},{}],"ljh7N":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"9rIBV":[function(require,module,exports) {
var global = arguments[3];
(function(a, b) {
    if ("function" == typeof define && define.amd) define([], b);
    else if ("undefined" != typeof exports) b();
    else b(), a.FileSaver = {
    };
})(this, function() {
    "use strict";
    function b1(a, b) {
        return "undefined" == typeof b ? b = {
            autoBom: !1
        } : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"), b = {
            autoBom: !b
        }), b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob([
            "\uFEFF",
            a
        ], {
            type: a.type
        }) : a;
    }
    function c1(a, b, c) {
        var d = new XMLHttpRequest;
        d.open("GET", a), d.responseType = "blob", d.onload = function() {
            g1(d.response, b, c);
        }, d.onerror = function() {
            console.error("could not download file");
        }, d.send();
    }
    function d1(a) {
        var b = new XMLHttpRequest;
        b.open("HEAD", a, !1);
        try {
            b.send();
        } catch (a2) {
        }
        return 200 <= b.status && 299 >= b.status;
    }
    function e1(a) {
        try {
            a.dispatchEvent(new MouseEvent("click"));
        } catch (c) {
            var b = document.createEvent("MouseEvents");
            b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);
        }
    }
    var f1 = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0, a1 = f1.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), g1 = f1.saveAs || ("object" != typeof window || window !== f1 ? function() {
    } : "download" in HTMLAnchorElement.prototype && !a1 ? function(b, g, h) {
        var i = f1.URL || f1.webkitURL, j = document.createElement("a");
        g = g || b.name || "download", j.download = g, j.rel = "noopener", "string" == typeof b ? (j.href = b, j.origin === location.origin ? e1(j) : d1(j.href) ? c1(b, g, h) : e1(j, j.target = "_blank")) : (j.href = i.createObjectURL(b), setTimeout(function() {
            i.revokeObjectURL(j.href);
        }, 40000), setTimeout(function() {
            e1(j);
        }, 0));
    } : "msSaveOrOpenBlob" in navigator ? function(f, g, h) {
        if (g = g || f.name || "download", "string" != typeof f) navigator.msSaveOrOpenBlob(b1(f, h), g);
        else if (d1(f)) c1(f, g, h);
        else {
            var i = document.createElement("a");
            i.href = f, i.target = "_blank", setTimeout(function() {
                e1(i);
            });
        }
    } : function(b, d, e, g) {
        if (g = g || open("", "_blank"), g && (g.document.title = g.document.body.innerText = "downloading..."), "string" == typeof b) return c1(b, d, e);
        var h = "application/octet-stream" === b.type, i = /constructor/i.test(f1.HTMLElement) || f1.safari, j = /CriOS\/[\d]+/.test(navigator.userAgent);
        if ((j || h && i || a1) && "undefined" != typeof FileReader) {
            var k = new FileReader;
            k.onloadend = function() {
                var a = k.result;
                a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"), g ? g.location.href = a : location = a, g = null;
            }, k.readAsDataURL(b);
        } else {
            var l = f1.URL || f1.webkitURL, m = l.createObjectURL(b);
            g ? g.location = m : location.href = m, g = null, setTimeout(function() {
                l.revokeObjectURL(m);
            }, 40000);
        }
    });
    f1.saveAs = g1.saveAs = g1, "undefined" != typeof module && (module.exports = g1);
});

},{}],"b2ScT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLetteringComponent", ()=>createLetteringComponent
);
/* eslint-disable immutable/no-let */ /* eslint-disable functional/no-expression-statement */ var _maps = require("./common/maps");
var _settings = require("./settings");
var _settingsDefault = parcelHelpers.interopDefault(_settings);
var _p5 = require("p5");
var _p5Default = parcelHelpers.interopDefault(_p5);
const colors = {
    blue: [
        0,
        0,
        255
    ],
    green: [
        0,
        255,
        0
    ],
    yellow: [
        255,
        255,
        0
    ],
    red: [
        255,
        0,
        0
    ]
};
const frameSegments = [
    _maps.linearMap(0.5, 0, 1, 0, _settings.watchTowerLength),
    _maps.linearMap(0.6, 0, 1, 0, _settings.watchTowerLength),
    _maps.linearMap(0.7, 0, 1, 0, _settings.watchTowerLength),
    _maps.linearMap(0.8, 0, 1, 0, _settings.watchTowerLength), 
];
const createLetteringComponentWithCallbacks = (frameRendered)=>new Promise((resolve)=>{
        new _p5Default.default((p)=>{
            let backgroundPixels = null;
            const render = ()=>{
                p.loop();
            };
            p.setup = ()=>{
                const renderer = p.createCanvas(_settingsDefault.default.width, _settingsDefault.default.height);
                p.noLoop();
                resolve({
                    render,
                    domElement: renderer.elt
                });
            };
            p.draw = ()=>{
                if (!backgroundPixels) {
                    p.loadPixels();
                    backgroundPixels = Array(p.pixels.length).fill(0);
                }
                p.pixels = backgroundPixels;
                p.updatePixels();
                const watchTowerIndex = Math.floor(p.frameCount / _settings.watchTowerLength) % _settingsDefault.default.watchTowers.color.length;
                const watchTowerFrame = p.frameCount % _settings.watchTowerLength;
                const watchTowerColor = _settingsDefault.default.watchTowers.color[watchTowerIndex];
                const text = _settingsDefault.default.watchTowers.name[watchTowerIndex].toUpperCase();
                const textHeight = 60;
                p.textFont('Impact');
                p.textSize(textHeight);
                const textWidthExtra = 50;
                const gText = p.createGraphics(p.textWidth(text) + textWidthExtra, textHeight);
                const alpha = _maps.segmentedMap(watchTowerFrame, frameSegments, [
                    0,
                    255,
                    255,
                    0
                ]);
                const color = colors[watchTowerColor];
                gText.textFont('Impact', textHeight);
                gText.fill(...color, alpha);
                const textSize = _maps.segmentedMap(watchTowerFrame, frameSegments, [
                    0,
                    1,
                    1,
                    2
                ]);
                gText.text(text, 0, gText.height);
                const textWidth = gText.width * textSize;
                const yBase = 25;
                const yAdj = 280;
                const y = _maps.segmentedMap(watchTowerFrame, frameSegments, [
                    yBase + yAdj,
                    yBase,
                    yBase,
                    yBase - yAdj, 
                ]);
                p.image(gText, 0.5 * (p.width - textWidth + textWidthExtra), y, textWidth, gText.height * textSize);
                p.noLoop();
                frameRendered();
            };
        });
    })
;
const createLetteringComponent = async ()=>{
    let resolveFrame = null;
    const { render , domElement  } = await createLetteringComponentWithCallbacks(()=>{
        if (resolveFrame) resolveFrame();
    });
    return {
        render: ()=>new Promise((resolve)=>{
                resolveFrame = resolve;
                render();
            })
        ,
        domElement
    };
};

},{"./common/maps":"iTGDB","./settings":"6v8AY","p5":"6OEec","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"6OEec":[function(require,module,exports) {
var global = arguments[3];
/*! p5.js v1.3.1 March 28, 2021 */ !function(e) {
    if ("object" == typeof exports && "undefined" != typeof module) module.exports = e();
    else if ("function" == typeof define && define.amd) define([], e);
    else ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).p5 = e();
}(function() {
    return (function i(a, s, l) {
        function u(t, e2) {
            if (!s[t]) {
                if (!a[t]) {
                    var r = "function" == typeof require && undefined;
                    if (!e2 && r) return r(t, !0);
                    if (c) return c(t, !0);
                    var n = new Error("Cannot find module '" + t + "'");
                    throw n.code = "MODULE_NOT_FOUND", n;
                }
                var o = s[t] = {
                    exports: {
                    }
                };
                a[t][0].call(o.exports, function(e) {
                    return u(a[t][1][e] || e);
                }, o, o.exports, i, a, s, l);
            }
            return s[t].exports;
        }
        for(var c = "function" == typeof require && undefined, e1 = 0; e1 < l.length; e1++)u(l[e1]);
        return u;
    })({
        1: [
            function(e3, t1, r1) {
                "use strict";
                r1.byteLength = function(e) {
                    var t = d(e), r = t[0], n = t[1];
                    return 3 * (r + n) / 4 - n;
                }, r1.toByteArray = function(e4) {
                    var t2, r, n = d(e4), o = n[0], i = n[1], a = new c(function(e, t) {
                        return 3 * (e + t) / 4 - t;
                    }(o, i)), s = 0, l = 0 < i ? o - 4 : o;
                    for(r = 0; r < l; r += 4)t2 = u[e4.charCodeAt(r)] << 18 | u[e4.charCodeAt(r + 1)] << 12 | u[e4.charCodeAt(r + 2)] << 6 | u[e4.charCodeAt(r + 3)], a[s++] = t2 >> 16 & 255, a[s++] = t2 >> 8 & 255, a[s++] = 255 & t2;
                    2 === i && (t2 = u[e4.charCodeAt(r)] << 2 | u[e4.charCodeAt(r + 1)] >> 4, a[s++] = 255 & t2);
                    1 === i && (t2 = u[e4.charCodeAt(r)] << 10 | u[e4.charCodeAt(r + 1)] << 4 | u[e4.charCodeAt(r + 2)] >> 2, a[s++] = t2 >> 8 & 255, a[s++] = 255 & t2);
                    return a;
                }, r1.fromByteArray = function(e) {
                    for(var t, r = e.length, n = r % 3, o = [], i = 0, a = r - n; i < a; i += 16383)o.push(l1(e, i, a < i + 16383 ? a : i + 16383));
                    1 == n ? (t = e[r - 1], o.push(s[t >> 2] + s[t << 4 & 63] + "==")) : 2 == n && (t = (e[r - 2] << 8) + e[r - 1], o.push(s[t >> 10] + s[t >> 4 & 63] + s[t << 2 & 63] + "="));
                    return o.join("");
                };
                for(var s = [], u = [], c = "undefined" != typeof Uint8Array ? Uint8Array : Array, n1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", o1 = 0, i1 = n1.length; o1 < i1; ++o1)s[o1] = n1[o1], u[n1.charCodeAt(o1)] = o1;
                function d(e) {
                    var t = e.length;
                    if (0 < t % 4) throw new Error("Invalid string. Length must be a multiple of 4");
                    var r = e.indexOf("=");
                    return -1 === r && (r = t), [
                        r,
                        r === t ? 0 : 4 - r % 4
                    ];
                }
                function l1(e, t, r) {
                    for(var n, o, i = [], a = t; a < r; a += 3)n = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), i.push(s[(o = n) >> 18 & 63] + s[o >> 12 & 63] + s[o >> 6 & 63] + s[63 & o]);
                    return i.join("");
                }
                u["-".charCodeAt(0)] = 62, u["_".charCodeAt(0)] = 63;
            },
            {
            }
        ],
        2: [
            function(e, t, r) {
            },
            {
            }
        ],
        3: [
            function(e, t, r) {
                arguments[4][2][0].apply(r, arguments);
            },
            {
                dup: 2
            }
        ],
        4: [
            function(U, e5, N) {
                (function(d1) {
                    var n2 = U("base64-js"), i2 = U("ieee754"), e6 = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
                    N.Buffer = d1, N.SlowBuffer = function(e) {
                        +e != e && (e = 0);
                        return d1.alloc(+e);
                    }, N.INSPECT_MAX_BYTES = 50;
                    var r2 = 2147483647;
                    function a1(e) {
                        if (r2 < e) throw new RangeError('The value "' + e + '" is invalid for option "size"');
                        var t = new Uint8Array(e);
                        return Object.setPrototypeOf(t, d1.prototype), t;
                    }
                    function d1(e, t, r) {
                        if ("number" != typeof e) return o2(e, t, r);
                        if ("string" == typeof t) throw new TypeError('The "string" argument must be of type string. Received type number');
                        return l2(e);
                    }
                    function o2(e7, t4, r3) {
                        if ("string" == typeof e7) return (function(e, t) {
                            "string" == typeof t && "" !== t || (t = "utf8");
                            if (!d1.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);
                            var r = 0 | f1(e, t), n = a1(r), o = n.write(e, t);
                            o !== r && (n = n.slice(0, o));
                            return n;
                        })(e7, t4);
                        if (ArrayBuffer.isView(e7)) return u1(e7);
                        if (null == e7) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e7);
                        if (R(e7, ArrayBuffer) || e7 && R(e7.buffer, ArrayBuffer)) return (function(e, t, r) {
                            if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
                            if (e.byteLength < t + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
                            var n;
                            n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r);
                            return Object.setPrototypeOf(n, d1.prototype), n;
                        })(e7, t4, r3);
                        if ("number" == typeof e7) throw new TypeError('The "value" argument must not be of type number. Received type number');
                        var n3 = e7.valueOf && e7.valueOf();
                        if (null != n3 && n3 !== e7) return d1.from(n3, t4, r3);
                        var o3 = function(e) {
                            if (d1.isBuffer(e)) {
                                var t = 0 | c1(e.length), r = a1(t);
                                return 0 === r.length || e.copy(r, 0, 0, t), r;
                            }
                            if (void 0 !== e.length) return "number" != typeof e.length || D(e.length) ? a1(0) : u1(e);
                            if ("Buffer" === e.type && Array.isArray(e.data)) return u1(e.data);
                        }(e7);
                        if (o3) return o3;
                        if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e7[Symbol.toPrimitive]) return d1.from(e7[Symbol.toPrimitive]("string"), t4, r3);
                        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e7);
                    }
                    function s1(e) {
                        if ("number" != typeof e) throw new TypeError('"size" argument must be of type number');
                        if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
                    }
                    function l2(e) {
                        return s1(e), a1(e < 0 ? 0 : 0 | c1(e));
                    }
                    function u1(e) {
                        for(var t = e.length < 0 ? 0 : 0 | c1(e.length), r = a1(t), n = 0; n < t; n += 1)r[n] = 255 & e[n];
                        return r;
                    }
                    function c1(e) {
                        if (r2 <= e) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + r2.toString(16) + " bytes");
                        return 0 | e;
                    }
                    function f1(e, t) {
                        if (d1.isBuffer(e)) return e.length;
                        if (ArrayBuffer.isView(e) || R(e, ArrayBuffer)) return e.byteLength;
                        if ("string" != typeof e) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
                        var r = e.length, n = 2 < arguments.length && !0 === arguments[2];
                        if (!n && 0 === r) return 0;
                        for(var o = !1;;)switch(t){
                            case "ascii":
                            case "latin1":
                            case "binary":
                                return r;
                            case "utf8":
                            case "utf-8":
                                return P(e).length;
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return 2 * r;
                            case "hex":
                                return r >>> 1;
                            case "base64":
                                return k(e).length;
                            default:
                                if (o) return n ? -1 : P(e).length;
                                t = ("" + t).toLowerCase(), o = !0;
                        }
                    }
                    function h(e, t, r) {
                        var n = e[t];
                        e[t] = e[r], e[r] = n;
                    }
                    function p(e, t, r, n, o) {
                        if (0 === e.length) return -1;
                        if ("string" == typeof r ? (n = r, r = 0) : 2147483647 < r ? r = 2147483647 : r < -2147483648 && (r = -2147483648), D(r = +r) && (r = o ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
                            if (o) return -1;
                            r = e.length - 1;
                        } else if (r < 0) {
                            if (!o) return -1;
                            r = 0;
                        }
                        if ("string" == typeof t && (t = d1.from(t, n)), d1.isBuffer(t)) return 0 === t.length ? -1 : y(e, t, r, n, o);
                        if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? o ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : y(e, [
                            t
                        ], r, n, o);
                        throw new TypeError("val must be string, number or Buffer");
                    }
                    function y(e8, t5, r, n, o) {
                        var i, a = 1, s = e8.length, l = t5.length;
                        if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
                            if (e8.length < 2 || t5.length < 2) return -1;
                            s /= a = 2, l /= 2, r /= 2;
                        }
                        function u(e, t) {
                            return 1 === a ? e[t] : e.readUInt16BE(t * a);
                        }
                        if (o) {
                            var c = -1;
                            for(i = r; i < s; i++)if (u(e8, i) === u(t5, -1 === c ? 0 : i - c)) {
                                if (-1 === c && (c = i), i - c + 1 === l) return c * a;
                            } else -1 !== c && (i -= i - c), c = -1;
                        } else for(s < r + l && (r = s - l), i = r; 0 <= i; i--){
                            for(var d = !0, f = 0; f < l; f++)if (u(e8, i + f) !== u(t5, f)) {
                                d = !1;
                                break;
                            }
                            if (d) return i;
                        }
                        return -1;
                    }
                    function m(e, t, r, n) {
                        r = Number(r) || 0;
                        var o = e.length - r;
                        n ? o < (n = Number(n)) && (n = o) : n = o;
                        var i = t.length;
                        i / 2 < n && (n = i / 2);
                        for(var a = 0; a < n; ++a){
                            var s = parseInt(t.substr(2 * a, 2), 16);
                            if (D(s)) return a;
                            e[r + a] = s;
                        }
                        return a;
                    }
                    function g(e9, t6, r4, n) {
                        return A(function(e) {
                            for(var t = [], r = 0; r < e.length; ++r)t.push(255 & e.charCodeAt(r));
                            return t;
                        }(t6), e9, r4, n);
                    }
                    function v(e10, t7, r5, n4) {
                        return A(function(e, t) {
                            for(var r, n, o, i = [], a = 0; a < e.length && !((t -= 2) < 0); ++a)r = e.charCodeAt(a), n = r >> 8, o = r % 256, i.push(o), i.push(n);
                            return i;
                        }(t7, e10.length - r5), e10, r5, n4);
                    }
                    function b(e, t, r) {
                        return 0 === t && r === e.length ? n2.fromByteArray(e) : n2.fromByteArray(e.slice(t, r));
                    }
                    function _(e11, t8, r6) {
                        r6 = Math.min(e11.length, r6);
                        for(var n5 = [], o = t8; o < r6;){
                            var i, a, s, l, u = e11[o], c = null, d = 239 < u ? 4 : 223 < u ? 3 : 191 < u ? 2 : 1;
                            if (o + d <= r6) switch(d){
                                case 1:
                                    u < 128 && (c = u);
                                    break;
                                case 2:
                                    128 == (192 & (i = e11[o + 1])) && 127 < (l = (31 & u) << 6 | 63 & i) && (c = l);
                                    break;
                                case 3:
                                    i = e11[o + 1], a = e11[o + 2], 128 == (192 & i) && 128 == (192 & a) && 2047 < (l = (15 & u) << 12 | (63 & i) << 6 | 63 & a) && (l < 55296 || 57343 < l) && (c = l);
                                    break;
                                case 4:
                                    i = e11[o + 1], a = e11[o + 2], s = e11[o + 3], 128 == (192 & i) && 128 == (192 & a) && 128 == (192 & s) && 65535 < (l = (15 & u) << 18 | (63 & i) << 12 | (63 & a) << 6 | 63 & s) && l < 1114112 && (c = l);
                            }
                            null === c ? (c = 65533, d = 1) : 65535 < c && (c -= 65536, n5.push(c >>> 10 & 1023 | 55296), c = 56320 | 1023 & c), n5.push(c), o += d;
                        }
                        return (function(e) {
                            var t = e.length;
                            if (t <= x) return String.fromCharCode.apply(String, e);
                            var r = "", n = 0;
                            for(; n < t;)r += String.fromCharCode.apply(String, e.slice(n, n += x));
                            return r;
                        })(n5);
                    }
                    N.kMaxLength = r2, (d1.TYPED_ARRAY_SUPPORT = (function() {
                        try {
                            var e = new Uint8Array(1), t = {
                                foo: function() {
                                    return 42;
                                }
                            };
                            return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), 42 === e.foo();
                        } catch (e) {
                            return !1;
                        }
                    })()) || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(d1.prototype, "parent", {
                        enumerable: !0,
                        get: function() {
                            if (d1.isBuffer(this)) return this.buffer;
                        }
                    }), Object.defineProperty(d1.prototype, "offset", {
                        enumerable: !0,
                        get: function() {
                            if (d1.isBuffer(this)) return this.byteOffset;
                        }
                    }), "undefined" != typeof Symbol && null != Symbol.species && d1[Symbol.species] === d1 && Object.defineProperty(d1, Symbol.species, {
                        value: null,
                        configurable: !0,
                        enumerable: !1,
                        writable: !1
                    }), d1.poolSize = 8192, d1.from = function(e, t, r) {
                        return o2(e, t, r);
                    }, Object.setPrototypeOf(d1.prototype, Uint8Array.prototype), Object.setPrototypeOf(d1, Uint8Array), d1.alloc = function(e, t, r) {
                        var n, o, i;
                        return o = t, i = r, s1(n = e), n <= 0 ? a1(n) : void 0 !== o ? "string" == typeof i ? a1(n).fill(o, i) : a1(n).fill(o) : a1(n);
                    }, d1.allocUnsafe = function(e) {
                        return l2(e);
                    }, d1.allocUnsafeSlow = function(e) {
                        return l2(e);
                    }, d1.isBuffer = function(e) {
                        return null != e && !0 === e._isBuffer && e !== d1.prototype;
                    }, d1.compare = function(e, t) {
                        if (R(e, Uint8Array) && (e = d1.from(e, e.offset, e.byteLength)), R(t, Uint8Array) && (t = d1.from(t, t.offset, t.byteLength)), !d1.isBuffer(e) || !d1.isBuffer(t)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                        if (e === t) return 0;
                        for(var r = e.length, n = t.length, o = 0, i = Math.min(r, n); o < i; ++o)if (e[o] !== t[o]) {
                            r = e[o], n = t[o];
                            break;
                        }
                        return r < n ? -1 : n < r ? 1 : 0;
                    }, d1.isEncoding = function(e) {
                        switch(String(e).toLowerCase()){
                            case "hex":
                            case "utf8":
                            case "utf-8":
                            case "ascii":
                            case "latin1":
                            case "binary":
                            case "base64":
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return !0;
                            default:
                                return !1;
                        }
                    }, d1.concat = function(e, t) {
                        if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
                        if (0 === e.length) return d1.alloc(0);
                        var r;
                        if (void 0 === t) for(r = t = 0; r < e.length; ++r)t += e[r].length;
                        var n = d1.allocUnsafe(t), o = 0;
                        for(r = 0; r < e.length; ++r){
                            var i = e[r];
                            if (R(i, Uint8Array) && (i = d1.from(i)), !d1.isBuffer(i)) throw new TypeError('"list" argument must be an Array of Buffers');
                            i.copy(n, o), o += i.length;
                        }
                        return n;
                    }, d1.byteLength = f1, d1.prototype._isBuffer = !0, d1.prototype.swap16 = function() {
                        var e = this.length;
                        if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                        for(var t = 0; t < e; t += 2)h(this, t, t + 1);
                        return this;
                    }, d1.prototype.swap32 = function() {
                        var e = this.length;
                        if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                        for(var t = 0; t < e; t += 4)h(this, t, t + 3), h(this, t + 1, t + 2);
                        return this;
                    }, d1.prototype.swap64 = function() {
                        var e = this.length;
                        if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                        for(var t = 0; t < e; t += 8)h(this, t, t + 7), h(this, t + 1, t + 6), h(this, t + 2, t + 5), h(this, t + 3, t + 4);
                        return this;
                    }, d1.prototype.toLocaleString = d1.prototype.toString = function() {
                        var e12 = this.length;
                        return 0 === e12 ? "" : 0 === arguments.length ? _(this, 0, e12) : (function(e, t, r) {
                            var n = !1;
                            if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
                            if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
                            if ((r >>>= 0) <= (t >>>= 0)) return "";
                            for(e = e || "utf8";;)switch(e){
                                case "hex":
                                    return j(this, t, r);
                                case "utf8":
                                case "utf-8":
                                    return _(this, t, r);
                                case "ascii":
                                    return w(this, t, r);
                                case "latin1":
                                case "binary":
                                    return S(this, t, r);
                                case "base64":
                                    return b(this, t, r);
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return M(this, t, r);
                                default:
                                    if (n) throw new TypeError("Unknown encoding: " + e);
                                    e = (e + "").toLowerCase(), n = !0;
                            }
                        }).apply(this, arguments);
                    }, d1.prototype.equals = function(e) {
                        if (!d1.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
                        return this === e || 0 === d1.compare(this, e);
                    }, d1.prototype.inspect = function() {
                        var e = "", t = N.INSPECT_MAX_BYTES;
                        return e = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim(), this.length > t && (e += " ... "), "<Buffer " + e + ">";
                    }, e6 && (d1.prototype[e6] = d1.prototype.inspect), d1.prototype.compare = function(e, t, r, n, o) {
                        if (R(e, Uint8Array) && (e = d1.from(e, e.offset, e.byteLength)), !d1.isBuffer(e)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);
                        if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === o && (o = this.length), t < 0 || r > e.length || n < 0 || o > this.length) throw new RangeError("out of range index");
                        if (o <= n && r <= t) return 0;
                        if (o <= n) return -1;
                        if (r <= t) return 1;
                        if (this === e) return 0;
                        for(var i = (o >>>= 0) - (n >>>= 0), a = (r >>>= 0) - (t >>>= 0), s = Math.min(i, a), l = this.slice(n, o), u = e.slice(t, r), c = 0; c < s; ++c)if (l[c] !== u[c]) {
                            i = l[c], a = u[c];
                            break;
                        }
                        return i < a ? -1 : a < i ? 1 : 0;
                    }, d1.prototype.includes = function(e, t, r) {
                        return -1 !== this.indexOf(e, t, r);
                    }, d1.prototype.indexOf = function(e, t, r) {
                        return p(this, e, t, r, !0);
                    }, d1.prototype.lastIndexOf = function(e, t, r) {
                        return p(this, e, t, r, !1);
                    }, d1.prototype.write = function(e, t, r, n) {
                        if (void 0 === t) n = "utf8", r = this.length, t = 0;
                        else if (void 0 === r && "string" == typeof t) n = t, r = this.length, t = 0;
                        else {
                            if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                            t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
                        }
                        var o = this.length - t;
                        if ((void 0 === r || o < r) && (r = o), 0 < e.length && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
                        n = n || "utf8";
                        for(var i, a, s, l, u, c, d = !1;;)switch(n){
                            case "hex":
                                return m(this, e, t, r);
                            case "utf8":
                            case "utf-8":
                                return u = t, c = r, A(P(e, (l = this).length - u), l, u, c);
                            case "ascii":
                                return g(this, e, t, r);
                            case "latin1":
                            case "binary":
                                return g(this, e, t, r);
                            case "base64":
                                return i = this, a = t, s = r, A(k(e), i, a, s);
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return v(this, e, t, r);
                            default:
                                if (d) throw new TypeError("Unknown encoding: " + n);
                                n = ("" + n).toLowerCase(), d = !0;
                        }
                    }, d1.prototype.toJSON = function() {
                        return {
                            type: "Buffer",
                            data: Array.prototype.slice.call(this._arr || this, 0)
                        };
                    };
                    var x = 4096;
                    function w(e, t, r) {
                        var n = "";
                        r = Math.min(e.length, r);
                        for(var o = t; o < r; ++o)n += String.fromCharCode(127 & e[o]);
                        return n;
                    }
                    function S(e, t, r) {
                        var n = "";
                        r = Math.min(e.length, r);
                        for(var o = t; o < r; ++o)n += String.fromCharCode(e[o]);
                        return n;
                    }
                    function j(e, t, r) {
                        var n = e.length;
                        (!t || t < 0) && (t = 0), (!r || r < 0 || n < r) && (r = n);
                        for(var o = "", i = t; i < r; ++i)o += I[e[i]];
                        return o;
                    }
                    function M(e, t, r) {
                        for(var n = e.slice(t, r), o = "", i = 0; i < n.length; i += 2)o += String.fromCharCode(n[i] + 256 * n[i + 1]);
                        return o;
                    }
                    function E(e, t, r) {
                        if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
                        if (r < e + t) throw new RangeError("Trying to access beyond buffer length");
                    }
                    function T(e, t, r, n, o, i) {
                        if (!d1.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
                        if (o < t || t < i) throw new RangeError('"value" argument is out of bounds');
                        if (r + n > e.length) throw new RangeError("Index out of range");
                    }
                    function O(e, t, r, n) {
                        if (r + n > e.length) throw new RangeError("Index out of range");
                        if (r < 0) throw new RangeError("Index out of range");
                    }
                    function C(e, t, r, n, o) {
                        return t = +t, r >>>= 0, o || O(e, 0, r, 4), i2.write(e, t, r, n, 23, 4), r + 4;
                    }
                    function L(e, t, r, n, o) {
                        return t = +t, r >>>= 0, o || O(e, 0, r, 8), i2.write(e, t, r, n, 52, 8), r + 8;
                    }
                    d1.prototype.slice = function(e, t) {
                        var r = this.length;
                        (e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : r < e && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : r < t && (t = r), t < e && (t = e);
                        var n = this.subarray(e, t);
                        return Object.setPrototypeOf(n, d1.prototype), n;
                    }, d1.prototype.readUIntLE = function(e, t, r) {
                        e >>>= 0, t >>>= 0, r || E(e, t, this.length);
                        for(var n = this[e], o = 1, i = 0; ++i < t && (o *= 256);)n += this[e + i] * o;
                        return n;
                    }, d1.prototype.readUIntBE = function(e, t, r) {
                        e >>>= 0, t >>>= 0, r || E(e, t, this.length);
                        for(var n = this[e + --t], o = 1; 0 < t && (o *= 256);)n += this[e + --t] * o;
                        return n;
                    }, d1.prototype.readUInt8 = function(e, t) {
                        return e >>>= 0, t || E(e, 1, this.length), this[e];
                    }, d1.prototype.readUInt16LE = function(e, t) {
                        return e >>>= 0, t || E(e, 2, this.length), this[e] | this[e + 1] << 8;
                    }, d1.prototype.readUInt16BE = function(e, t) {
                        return e >>>= 0, t || E(e, 2, this.length), this[e] << 8 | this[e + 1];
                    }, d1.prototype.readUInt32LE = function(e, t) {
                        return e >>>= 0, t || E(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
                    }, d1.prototype.readUInt32BE = function(e, t) {
                        return e >>>= 0, t || E(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
                    }, d1.prototype.readIntLE = function(e, t, r) {
                        e >>>= 0, t >>>= 0, r || E(e, t, this.length);
                        for(var n = this[e], o = 1, i = 0; ++i < t && (o *= 256);)n += this[e + i] * o;
                        return (o *= 128) <= n && (n -= Math.pow(2, 8 * t)), n;
                    }, d1.prototype.readIntBE = function(e, t, r) {
                        e >>>= 0, t >>>= 0, r || E(e, t, this.length);
                        for(var n = t, o = 1, i = this[e + --n]; 0 < n && (o *= 256);)i += this[e + --n] * o;
                        return (o *= 128) <= i && (i -= Math.pow(2, 8 * t)), i;
                    }, d1.prototype.readInt8 = function(e, t) {
                        return e >>>= 0, t || E(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
                    }, d1.prototype.readInt16LE = function(e, t) {
                        e >>>= 0, t || E(e, 2, this.length);
                        var r = this[e] | this[e + 1] << 8;
                        return 32768 & r ? 4294901760 | r : r;
                    }, d1.prototype.readInt16BE = function(e, t) {
                        e >>>= 0, t || E(e, 2, this.length);
                        var r = this[e + 1] | this[e] << 8;
                        return 32768 & r ? 4294901760 | r : r;
                    }, d1.prototype.readInt32LE = function(e, t) {
                        return e >>>= 0, t || E(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
                    }, d1.prototype.readInt32BE = function(e, t) {
                        return e >>>= 0, t || E(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
                    }, d1.prototype.readFloatLE = function(e, t) {
                        return e >>>= 0, t || E(e, 4, this.length), i2.read(this, e, !0, 23, 4);
                    }, d1.prototype.readFloatBE = function(e, t) {
                        return e >>>= 0, t || E(e, 4, this.length), i2.read(this, e, !1, 23, 4);
                    }, d1.prototype.readDoubleLE = function(e, t) {
                        return e >>>= 0, t || E(e, 8, this.length), i2.read(this, e, !0, 52, 8);
                    }, d1.prototype.readDoubleBE = function(e, t) {
                        return e >>>= 0, t || E(e, 8, this.length), i2.read(this, e, !1, 52, 8);
                    }, d1.prototype.writeUIntLE = function(e, t, r, n) {
                        e = +e, t >>>= 0, r >>>= 0, n || T(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
                        var o = 1, i = 0;
                        for(this[t] = 255 & e; ++i < r && (o *= 256);)this[t + i] = e / o & 255;
                        return t + r;
                    }, d1.prototype.writeUIntBE = function(e, t, r, n) {
                        e = +e, t >>>= 0, r >>>= 0, n || T(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
                        var o = r - 1, i = 1;
                        for(this[t + o] = 255 & e; 0 <= --o && (i *= 256);)this[t + o] = e / i & 255;
                        return t + r;
                    }, d1.prototype.writeUInt8 = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;
                    }, d1.prototype.writeUInt16LE = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
                    }, d1.prototype.writeUInt16BE = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
                    }, d1.prototype.writeUInt32LE = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e, t + 4;
                    }, d1.prototype.writeUInt32BE = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
                    }, d1.prototype.writeIntLE = function(e, t, r, n) {
                        if (e = +e, t >>>= 0, !n) {
                            var o = Math.pow(2, 8 * r - 1);
                            T(this, e, t, r, o - 1, -o);
                        }
                        var i = 0, a = 1, s = 0;
                        for(this[t] = 255 & e; ++i < r && (a *= 256);)e < 0 && 0 === s && 0 !== this[t + i - 1] && (s = 1), this[t + i] = (e / a >> 0) - s & 255;
                        return t + r;
                    }, d1.prototype.writeIntBE = function(e, t, r, n) {
                        if (e = +e, t >>>= 0, !n) {
                            var o = Math.pow(2, 8 * r - 1);
                            T(this, e, t, r, o - 1, -o);
                        }
                        var i = r - 1, a = 1, s = 0;
                        for(this[t + i] = 255 & e; 0 <= --i && (a *= 256);)e < 0 && 0 === s && 0 !== this[t + i + 1] && (s = 1), this[t + i] = (e / a >> 0) - s & 255;
                        return t + r;
                    }, d1.prototype.writeInt8 = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
                    }, d1.prototype.writeInt16LE = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
                    }, d1.prototype.writeInt16BE = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
                    }, d1.prototype.writeInt32LE = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;
                    }, d1.prototype.writeInt32BE = function(e, t, r) {
                        return e = +e, t >>>= 0, r || T(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
                    }, d1.prototype.writeFloatLE = function(e, t, r) {
                        return C(this, e, t, !0, r);
                    }, d1.prototype.writeFloatBE = function(e, t, r) {
                        return C(this, e, t, !1, r);
                    }, d1.prototype.writeDoubleLE = function(e, t, r) {
                        return L(this, e, t, !0, r);
                    }, d1.prototype.writeDoubleBE = function(e, t, r) {
                        return L(this, e, t, !1, r);
                    }, d1.prototype.copy = function(e, t, r, n) {
                        if (!d1.isBuffer(e)) throw new TypeError("argument should be a Buffer");
                        if (r = r || 0, n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t = t || 0, 0 < n && n < r && (n = r), n === r) return 0;
                        if (0 === e.length || 0 === this.length) return 0;
                        if (t < 0) throw new RangeError("targetStart out of bounds");
                        if (r < 0 || r >= this.length) throw new RangeError("Index out of range");
                        if (n < 0) throw new RangeError("sourceEnd out of bounds");
                        n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
                        var o = n - r;
                        if (this === e && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(t, r, n);
                        else if (this === e && r < t && t < n) for(var i = o - 1; 0 <= i; --i)e[i + t] = this[i + r];
                        else Uint8Array.prototype.set.call(e, this.subarray(r, n), t);
                        return o;
                    }, d1.prototype.fill = function(e, t, r, n) {
                        if ("string" == typeof e) {
                            if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
                            if ("string" == typeof n && !d1.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
                            if (1 === e.length) {
                                var o = e.charCodeAt(0);
                                ("utf8" === n && o < 128 || "latin1" === n) && (e = o);
                            }
                        } else "number" == typeof e ? e &= 255 : "boolean" == typeof e && (e = Number(e));
                        if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
                        if (r <= t) return this;
                        var i;
                        if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, "number" == typeof (e = e || 0)) for(i = t; i < r; ++i)this[i] = e;
                        else {
                            var a = d1.isBuffer(e) ? e : d1.from(e, n), s = a.length;
                            if (0 === s) throw new TypeError('The value "' + e + '" is invalid for argument "value"');
                            for(i = 0; i < r - t; ++i)this[i + t] = a[i % s];
                        }
                        return this;
                    };
                    var t3 = /[^+/0-9A-Za-z-_]/g;
                    function P(e, t) {
                        var r;
                        t = t || 1 / 0;
                        for(var n = e.length, o = null, i = [], a = 0; a < n; ++a){
                            if (55295 < (r = e.charCodeAt(a)) && r < 57344) {
                                if (!o) {
                                    if (56319 < r) {
                                        -1 < (t -= 3) && i.push(239, 191, 189);
                                        continue;
                                    }
                                    if (a + 1 === n) {
                                        -1 < (t -= 3) && i.push(239, 191, 189);
                                        continue;
                                    }
                                    o = r;
                                    continue;
                                }
                                if (r < 56320) {
                                    -1 < (t -= 3) && i.push(239, 191, 189), o = r;
                                    continue;
                                }
                                r = 65536 + (o - 55296 << 10 | r - 56320);
                            } else o && -1 < (t -= 3) && i.push(239, 191, 189);
                            if (o = null, r < 128) {
                                if (--t < 0) break;
                                i.push(r);
                            } else if (r < 2048) {
                                if ((t -= 2) < 0) break;
                                i.push(r >> 6 | 192, 63 & r | 128);
                            } else if (r < 65536) {
                                if ((t -= 3) < 0) break;
                                i.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
                            } else {
                                if (!(r < 1114112)) throw new Error("Invalid code point");
                                if ((t -= 4) < 0) break;
                                i.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
                            }
                        }
                        return i;
                    }
                    function k(e13) {
                        return n2.toByteArray(function(e) {
                            if ((e = (e = e.split("=")[0]).trim().replace(t3, "")).length < 2) return "";
                            for(; e.length % 4 != 0;)e += "=";
                            return e;
                        }(e13));
                    }
                    function A(e, t, r, n) {
                        for(var o = 0; o < n && !(o + r >= t.length || o >= e.length); ++o)t[o + r] = e[o];
                        return o;
                    }
                    function R(e, t) {
                        return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;
                    }
                    function D(e) {
                        return e != e;
                    }
                    var I = function() {
                        for(var e = "0123456789abcdef", t = new Array(256), r = 0; r < 16; ++r)for(var n = 16 * r, o = 0; o < 16; ++o)t[n + o] = e[r] + e[o];
                        return t;
                    }();
                }).call(this, U("buffer").Buffer);
            },
            {
                "base64-js": 1,
                buffer: 4,
                ieee754: 233
            }
        ],
        5: [
            function(e14, t, r) {
                t.exports = function(e) {
                    if ("function" != typeof e) throw TypeError(String(e) + " is not a function");
                    return e;
                };
            },
            {
            }
        ],
        6: [
            function(e15, t, r) {
                var n = e15("../internals/is-object");
                t.exports = function(e) {
                    if (!n(e) && null !== e) throw TypeError("Can't set " + String(e) + " as a prototype");
                    return e;
                };
            },
            {
                "../internals/is-object": 73
            }
        ],
        7: [
            function(e, t, r) {
                var n = e("../internals/well-known-symbol"), o = e("../internals/object-create"), i = e("../internals/object-define-property"), a = n("unscopables"), s = Array.prototype;
                null == s[a] && i.f(s, a, {
                    configurable: !0,
                    value: o(null)
                }), t.exports = function(e) {
                    s[a][e] = !0;
                };
            },
            {
                "../internals/object-create": 89,
                "../internals/object-define-property": 91,
                "../internals/well-known-symbol": 145
            }
        ],
        8: [
            function(e16, t9, r7) {
                "use strict";
                var n = e16("../internals/string-multibyte").charAt;
                t9.exports = function(e, t, r) {
                    return t + (r ? n(e, t).length : 1);
                };
            },
            {
                "../internals/string-multibyte": 122
            }
        ],
        9: [
            function(e17, t10, r8) {
                t10.exports = function(e, t, r) {
                    if (!(e instanceof t)) throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
                    return e;
                };
            },
            {
            }
        ],
        10: [
            function(e18, t, r) {
                var n = e18("../internals/is-object");
                t.exports = function(e) {
                    if (!n(e)) throw TypeError(String(e) + " is not an object");
                    return e;
                };
            },
            {
                "../internals/is-object": 73
            }
        ],
        11: [
            function(e, t, r) {
                t.exports = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView;
            },
            {
            }
        ],
        12: [
            function(e19, t11, r9) {
                "use strict";
                function n6(e) {
                    return l(e) && u(L, c(e));
                }
                var o4, i = e19("../internals/array-buffer-native"), a = e19("../internals/descriptors"), s = e19("../internals/global"), l = e19("../internals/is-object"), u = e19("../internals/has"), c = e19("../internals/classof"), d = e19("../internals/create-non-enumerable-property"), f = e19("../internals/redefine"), h = e19("../internals/object-define-property").f, p = e19("../internals/object-get-prototype-of"), y = e19("../internals/object-set-prototype-of"), m = e19("../internals/well-known-symbol"), g = e19("../internals/uid"), v = s.Int8Array, b = v && v.prototype, _ = s.Uint8ClampedArray, x = _ && _.prototype, w = v && p(v), S = b && p(b), j = Object.prototype, M = j.isPrototypeOf, E = m("toStringTag"), T = g("TYPED_ARRAY_TAG"), O = i && !!y && "Opera" !== c(s.opera), C = !1, L = {
                    Int8Array: 1,
                    Uint8Array: 1,
                    Uint8ClampedArray: 1,
                    Int16Array: 2,
                    Uint16Array: 2,
                    Int32Array: 4,
                    Uint32Array: 4,
                    Float32Array: 4,
                    Float64Array: 8
                };
                for(o4 in L)s[o4] || (O = !1);
                if ((!O || "function" != typeof w || w === Function.prototype) && (w = function() {
                    throw TypeError("Incorrect invocation");
                }, O)) for(o4 in L)s[o4] && y(s[o4], w);
                if ((!O || !S || S === j) && (S = w.prototype, O)) for(o4 in L)s[o4] && y(s[o4].prototype, S);
                if (O && p(x) !== S && y(x, S), a && !u(S, E)) for(o4 in C = !0, h(S, E, {
                    get: function() {
                        return l(this) ? this[T] : void 0;
                    }
                }), L)s[o4] && d(s[o4], T, o4);
                t11.exports = {
                    NATIVE_ARRAY_BUFFER_VIEWS: O,
                    TYPED_ARRAY_TAG: C && T,
                    aTypedArray: function(e) {
                        if (n6(e)) return e;
                        throw TypeError("Target is not a typed array");
                    },
                    aTypedArrayConstructor: function(e) {
                        if (y) {
                            if (M.call(w, e)) return e;
                        } else for(var t in L)if (u(L, o4)) {
                            var r = s[t];
                            if (r && (e === r || M.call(r, e))) return e;
                        }
                        throw TypeError("Target is not a typed array constructor");
                    },
                    exportTypedArrayMethod: function(e, t, r) {
                        if (a) {
                            if (r) for(var n in L){
                                var o = s[n];
                                o && u(o.prototype, e) && delete o.prototype[e];
                            }
                            S[e] && !r || f(S, e, r ? t : O && b[e] || t);
                        }
                    },
                    exportTypedArrayStaticMethod: function(e, t, r) {
                        var n, o;
                        if (a) {
                            if (y) {
                                if (r) for(n in L)(o = s[n]) && u(o, e) && delete o[e];
                                if (w[e] && !r) return;
                                try {
                                    return f(w, e, r ? t : O && v[e] || t);
                                } catch (e) {
                                }
                            }
                            for(n in L)!(o = s[n]) || o[e] && !r || f(o, e, t);
                        }
                    },
                    isView: function(e) {
                        var t = c(e);
                        return "DataView" === t || u(L, t);
                    },
                    isTypedArray: n6,
                    TypedArray: w,
                    TypedArrayPrototype: S
                };
            },
            {
                "../internals/array-buffer-native": 11,
                "../internals/classof": 29,
                "../internals/create-non-enumerable-property": 37,
                "../internals/descriptors": 42,
                "../internals/global": 58,
                "../internals/has": 59,
                "../internals/is-object": 73,
                "../internals/object-define-property": 91,
                "../internals/object-get-prototype-of": 96,
                "../internals/object-set-prototype-of": 100,
                "../internals/redefine": 107,
                "../internals/uid": 142,
                "../internals/well-known-symbol": 145
            }
        ],
        13: [
            function(e20, t12, r10) {
                "use strict";
                function n7(e) {
                    return [
                        255 & e
                    ];
                }
                function o5(e) {
                    return [
                        255 & e,
                        e >> 8 & 255
                    ];
                }
                function i3(e) {
                    return [
                        255 & e,
                        e >> 8 & 255,
                        e >> 16 & 255,
                        e >> 24 & 255
                    ];
                }
                function a2(e) {
                    return e[3] << 24 | e[2] << 16 | e[1] << 8 | e[0];
                }
                function s2(e) {
                    return V(e, 23, 4);
                }
                function l3(e) {
                    return V(e, 52, 8);
                }
                function u(e, t) {
                    E(e[R], t, {
                        get: function() {
                            return L(this)[t];
                        }
                    });
                }
                function c2(e, t, r, n) {
                    var o = x(r), i = L(e);
                    if (o + t > i.byteLength) throw G(D);
                    var a = L(i.buffer).bytes, s = o + i.byteOffset, l = a.slice(s, s + t);
                    return n ? l : l.reverse();
                }
                function d2(e, t, r, n, o, i) {
                    var a = x(r), s = L(e);
                    if (a + t > s.byteLength) throw G(D);
                    for(var l = L(s.buffer).bytes, u = a + s.byteOffset, c = n(+o), d = 0; d < t; d++)l[u + d] = c[i ? d : t - d - 1];
                }
                var f = e20("../internals/global"), h = e20("../internals/descriptors"), p = e20("../internals/array-buffer-native"), y = e20("../internals/create-non-enumerable-property"), m = e20("../internals/redefine-all"), g = e20("../internals/fails"), v = e20("../internals/an-instance"), b = e20("../internals/to-integer"), _ = e20("../internals/to-length"), x = e20("../internals/to-index"), w = e20("../internals/ieee754"), S = e20("../internals/object-get-prototype-of"), j = e20("../internals/object-set-prototype-of"), M = e20("../internals/object-get-own-property-names").f, E = e20("../internals/object-define-property").f, T = e20("../internals/array-fill"), O = e20("../internals/set-to-string-tag"), C = e20("../internals/internal-state"), L = C.get, P = C.set, k = "ArrayBuffer", A = "DataView", R = "prototype", D = "Wrong index", I = f[k], U = I, N = f[A], F = N && N[R], B = Object.prototype, G = f.RangeError, V = w.pack, z = w.unpack;
                if (p) {
                    if (!g(function() {
                        I(1);
                    }) || !g(function() {
                        new I(-1);
                    }) || g(function() {
                        return new I, new I(1.5), new I(NaN), I.name != k;
                    })) {
                        for(var H, q = (U = function(e) {
                            return v(this, U), new I(x(e));
                        })[R] = I[R], W = M(I), X = 0; W.length > X;)(H = W[X++]) in U || y(U, H, I[H]);
                        q.constructor = U;
                    }
                    j && S(F) !== B && j(F, B);
                    var Y = new N(new U(2)), Z = F.setInt8;
                    Y.setInt8(0, 2147483648), Y.setInt8(1, 2147483649), !Y.getInt8(0) && Y.getInt8(1) || m(F, {
                        setInt8: function(e, t) {
                            Z.call(this, e, t << 24 >> 24);
                        },
                        setUint8: function(e, t) {
                            Z.call(this, e, t << 24 >> 24);
                        }
                    }, {
                        unsafe: !0
                    });
                } else U = function(e) {
                    v(this, U, k);
                    var t = x(e);
                    P(this, {
                        bytes: T.call(new Array(t), 0),
                        byteLength: t
                    }), h || (this.byteLength = t);
                }, N = function(e, t, r) {
                    v(this, N, A), v(e, U, A);
                    var n = L(e).byteLength, o = b(t);
                    if (o < 0 || n < o) throw G("Wrong offset");
                    if (n < o + (r = void 0 === r ? n - o : _(r))) throw G("Wrong length");
                    P(this, {
                        buffer: e,
                        byteLength: r,
                        byteOffset: o
                    }), h || (this.buffer = e, this.byteLength = r, this.byteOffset = o);
                }, h && (u(U, "byteLength"), u(N, "buffer"), u(N, "byteLength"), u(N, "byteOffset")), m(N[R], {
                    getInt8: function(e) {
                        return c2(this, 1, e)[0] << 24 >> 24;
                    },
                    getUint8: function(e) {
                        return c2(this, 1, e)[0];
                    },
                    getInt16: function(e, t) {
                        var r = c2(this, 2, e, 1 < arguments.length ? t : void 0);
                        return (r[1] << 8 | r[0]) << 16 >> 16;
                    },
                    getUint16: function(e, t) {
                        var r = c2(this, 2, e, 1 < arguments.length ? t : void 0);
                        return r[1] << 8 | r[0];
                    },
                    getInt32: function(e, t) {
                        return a2(c2(this, 4, e, 1 < arguments.length ? t : void 0));
                    },
                    getUint32: function(e, t) {
                        return a2(c2(this, 4, e, 1 < arguments.length ? t : void 0)) >>> 0;
                    },
                    getFloat32: function(e, t) {
                        return z(c2(this, 4, e, 1 < arguments.length ? t : void 0), 23);
                    },
                    getFloat64: function(e, t) {
                        return z(c2(this, 8, e, 1 < arguments.length ? t : void 0), 52);
                    },
                    setInt8: function(e, t) {
                        d2(this, 1, e, n7, t);
                    },
                    setUint8: function(e, t) {
                        d2(this, 1, e, n7, t);
                    },
                    setInt16: function(e, t, r) {
                        d2(this, 2, e, o5, t, 2 < arguments.length ? r : void 0);
                    },
                    setUint16: function(e, t, r) {
                        d2(this, 2, e, o5, t, 2 < arguments.length ? r : void 0);
                    },
                    setInt32: function(e, t, r) {
                        d2(this, 4, e, i3, t, 2 < arguments.length ? r : void 0);
                    },
                    setUint32: function(e, t, r) {
                        d2(this, 4, e, i3, t, 2 < arguments.length ? r : void 0);
                    },
                    setFloat32: function(e, t, r) {
                        d2(this, 4, e, s2, t, 2 < arguments.length ? r : void 0);
                    },
                    setFloat64: function(e, t, r) {
                        d2(this, 8, e, l3, t, 2 < arguments.length ? r : void 0);
                    }
                });
                O(U, k), O(N, A), t12.exports = {
                    ArrayBuffer: U,
                    DataView: N
                };
            },
            {
                "../internals/an-instance": 9,
                "../internals/array-buffer-native": 11,
                "../internals/array-fill": 15,
                "../internals/create-non-enumerable-property": 37,
                "../internals/descriptors": 42,
                "../internals/fails": 50,
                "../internals/global": 58,
                "../internals/ieee754": 64,
                "../internals/internal-state": 69,
                "../internals/object-define-property": 91,
                "../internals/object-get-own-property-names": 94,
                "../internals/object-get-prototype-of": 96,
                "../internals/object-set-prototype-of": 100,
                "../internals/redefine-all": 106,
                "../internals/set-to-string-tag": 116,
                "../internals/to-index": 130,
                "../internals/to-integer": 132,
                "../internals/to-length": 133
            }
        ],
        14: [
            function(e21, t13, r11) {
                "use strict";
                var c = e21("../internals/to-object"), d = e21("../internals/to-absolute-index"), f = e21("../internals/to-length"), h = Math.min;
                t13.exports = [].copyWithin || function(e, t, r) {
                    var n = c(this), o = f(n.length), i = d(e, o), a = d(t, o), s = 2 < arguments.length ? r : void 0, l = h((void 0 === s ? o : d(s, o)) - a, o - i), u = 1;
                    for(a < i && i < a + l && (u = -1, a += l - 1, i += l - 1); 0 < l--;)a in n ? n[i] = n[a] : delete n[i], i += u, a += u;
                    return n;
                };
            },
            {
                "../internals/to-absolute-index": 129,
                "../internals/to-length": 133,
                "../internals/to-object": 134
            }
        ],
        15: [
            function(e22, t14, r12) {
                "use strict";
                var u = e22("../internals/to-object"), c = e22("../internals/to-absolute-index"), d = e22("../internals/to-length");
                t14.exports = function(e, t, r) {
                    for(var n = u(this), o = d(n.length), i = arguments.length, a = c(1 < i ? t : void 0, o), s = 2 < i ? r : void 0, l = void 0 === s ? o : c(s, o); a < l;)n[a++] = e;
                    return n;
                };
            },
            {
                "../internals/to-absolute-index": 129,
                "../internals/to-length": 133,
                "../internals/to-object": 134
            }
        ],
        16: [
            function(e23, t15, r) {
                "use strict";
                var n = e23("../internals/array-iteration").forEach, o = e23("../internals/array-method-is-strict"), i = e23("../internals/array-method-uses-to-length"), a = o("forEach"), s = i("forEach");
                t15.exports = a && s ? [].forEach : function(e, t) {
                    return n(this, e, 1 < arguments.length ? t : void 0);
                };
            },
            {
                "../internals/array-iteration": 19,
                "../internals/array-method-is-strict": 22,
                "../internals/array-method-uses-to-length": 23
            }
        ],
        17: [
            function(e24, t16, r13) {
                "use strict";
                var m = e24("../internals/function-bind-context"), g = e24("../internals/to-object"), v = e24("../internals/call-with-safe-iteration-closing"), b = e24("../internals/is-array-iterator-method"), _ = e24("../internals/to-length"), x = e24("../internals/create-property"), w = e24("../internals/get-iterator-method");
                t16.exports = function(e, t, r) {
                    var n, o, i, a, s, l, u = g(e), c = "function" == typeof this ? this : Array, d = arguments.length, f = 1 < d ? t : void 0, h = void 0 !== f, p = w(u), y = 0;
                    if (h && (f = m(f, 2 < d ? r : void 0, 2)), null == p || c == Array && b(p)) for(o = new c(n = _(u.length)); y < n; y++)l = h ? f(u[y], y) : u[y], x(o, y, l);
                    else for(s = (a = p.call(u)).next, o = new c; !(i = s.call(a)).done; y++)l = h ? v(a, f, [
                        i.value,
                        y
                    ], !0) : i.value, x(o, y, l);
                    return o.length = y, o;
                };
            },
            {
                "../internals/call-with-safe-iteration-closing": 26,
                "../internals/create-property": 39,
                "../internals/function-bind-context": 53,
                "../internals/get-iterator-method": 56,
                "../internals/is-array-iterator-method": 70,
                "../internals/to-length": 133,
                "../internals/to-object": 134
            }
        ],
        18: [
            function(e25, t17, r14) {
                function n8(s) {
                    return function(e, t, r) {
                        var n, o = l(e), i = u(o.length), a = c(r, i);
                        if (s && t != t) {
                            for(; a < i;)if ((n = o[a++]) != n) return !0;
                        } else for(; a < i; a++)if ((s || a in o) && o[a] === t) return s || a || 0;
                        return !s && -1;
                    };
                }
                var l = e25("../internals/to-indexed-object"), u = e25("../internals/to-length"), c = e25("../internals/to-absolute-index");
                t17.exports = {
                    includes: n8(!0),
                    indexOf: n8(!1)
                };
            },
            {
                "../internals/to-absolute-index": 129,
                "../internals/to-indexed-object": 131,
                "../internals/to-length": 133
            }
        ],
        19: [
            function(e26, t18, r15) {
                function n9(h) {
                    var p = 1 == h, y = 2 == h, m = 3 == h, g = 4 == h, v = 6 == h, b = 5 == h || v;
                    return function(e, t, r, n) {
                        for(var o, i, a = w(e), s = x(a), l = _(t, r, 3), u = S(s.length), c = 0, d = n || j, f = p ? d(e, u) : y ? d(e, 0) : void 0; c < u; c++)if ((b || c in s) && (i = l(o = s[c], c, a), h)) {
                            if (p) f[c] = i;
                            else if (i) switch(h){
                                case 3:
                                    return !0;
                                case 5:
                                    return o;
                                case 6:
                                    return c;
                                case 2:
                                    M.call(f, o);
                            }
                            else if (g) return !1;
                        }
                        return v ? -1 : m || g ? g : f;
                    };
                }
                var _ = e26("../internals/function-bind-context"), x = e26("../internals/indexed-object"), w = e26("../internals/to-object"), S = e26("../internals/to-length"), j = e26("../internals/array-species-create"), M = [].push;
                t18.exports = {
                    forEach: n9(0),
                    map: n9(1),
                    filter: n9(2),
                    some: n9(3),
                    every: n9(4),
                    find: n9(5),
                    findIndex: n9(6)
                };
            },
            {
                "../internals/array-species-create": 25,
                "../internals/function-bind-context": 53,
                "../internals/indexed-object": 65,
                "../internals/to-length": 133,
                "../internals/to-object": 134
            }
        ],
        20: [
            function(e27, t19, r16) {
                "use strict";
                var i = e27("../internals/to-indexed-object"), a = e27("../internals/to-integer"), s = e27("../internals/to-length"), n10 = e27("../internals/array-method-is-strict"), o6 = e27("../internals/array-method-uses-to-length"), l = Math.min, u = [].lastIndexOf, c = !!u && 1 / [
                    1
                ].lastIndexOf(1, -0) < 0, d = n10("lastIndexOf"), f = o6("indexOf", {
                    ACCESSORS: !0,
                    1: 0
                }), h = c || !d || !f;
                t19.exports = h ? function(e, t) {
                    if (c) return u.apply(this, arguments) || 0;
                    var r = i(this), n = s(r.length), o = n - 1;
                    for(1 < arguments.length && (o = l(o, a(t))), o < 0 && (o = n + o); 0 <= o; o--)if (o in r && r[o] === e) return o || 0;
                    return -1;
                } : u;
            },
            {
                "../internals/array-method-is-strict": 22,
                "../internals/array-method-uses-to-length": 23,
                "../internals/to-indexed-object": 131,
                "../internals/to-integer": 132,
                "../internals/to-length": 133
            }
        ],
        21: [
            function(e28, t, r) {
                var n = e28("../internals/fails"), o = e28("../internals/well-known-symbol"), i = e28("../internals/engine-v8-version"), a = o("species");
                t.exports = function(t) {
                    return 51 <= i || !n(function() {
                        var e = [];
                        return (e.constructor = {
                        })[a] = function() {
                            return {
                                foo: 1
                            };
                        }, 1 !== e[t](Boolean).foo;
                    });
                };
            },
            {
                "../internals/engine-v8-version": 47,
                "../internals/fails": 50,
                "../internals/well-known-symbol": 145
            }
        ],
        22: [
            function(e, t20, r17) {
                "use strict";
                var n = e("../internals/fails");
                t20.exports = function(e, t) {
                    var r = [][e];
                    return !!r && n(function() {
                        r.call(null, t || function() {
                            throw 1;
                        }, 1);
                    });
                };
            },
            {
                "../internals/fails": 50
            }
        ],
        23: [
            function(e29, t21, r18) {
                function a(e) {
                    throw e;
                }
                var s = e29("../internals/descriptors"), l = e29("../internals/fails"), u = e29("../internals/has"), c = Object.defineProperty, d = {
                };
                t21.exports = function(e30, t) {
                    if (u(d, e30)) return d[e30];
                    var r = [][e30], n = !!u(t = t || {
                    }, "ACCESSORS") && t.ACCESSORS, o = u(t, 0) ? t[0] : a, i = u(t, 1) ? t[1] : void 0;
                    return d[e30] = !!r && !l(function() {
                        if (n && !s) return !0;
                        var e = {
                            length: -1
                        };
                        n ? c(e, 1, {
                            enumerable: !0,
                            get: a
                        }) : e[1] = 1, r.call(e, o, i);
                    });
                };
            },
            {
                "../internals/descriptors": 42,
                "../internals/fails": 50,
                "../internals/has": 59
            }
        ],
        24: [
            function(e31, t22, r19) {
                function n11(u) {
                    return function(e, t, r, n) {
                        c(t);
                        var o = d(e), i = f(o), a = h(o.length), s = u ? a - 1 : 0, l = u ? -1 : 1;
                        if (r < 2) for(;;){
                            if (s in i) {
                                n = i[s], s += l;
                                break;
                            }
                            if (s += l, u ? s < 0 : a <= s) throw TypeError("Reduce of empty array with no initial value");
                        }
                        for(; u ? 0 <= s : s < a; s += l)s in i && (n = t(n, i[s], s, o));
                        return n;
                    };
                }
                var c = e31("../internals/a-function"), d = e31("../internals/to-object"), f = e31("../internals/indexed-object"), h = e31("../internals/to-length");
                t22.exports = {
                    left: n11(!1),
                    right: n11(!0)
                };
            },
            {
                "../internals/a-function": 5,
                "../internals/indexed-object": 65,
                "../internals/to-length": 133,
                "../internals/to-object": 134
            }
        ],
        25: [
            function(e32, t23, r20) {
                var n = e32("../internals/is-object"), o = e32("../internals/is-array"), i = e32("../internals/well-known-symbol")("species");
                t23.exports = function(e, t) {
                    var r;
                    return o(e) && ("function" != typeof (r = e.constructor) || r !== Array && !o(r.prototype) ? n(r) && null === (r = r[i]) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === t ? 0 : t);
                };
            },
            {
                "../internals/is-array": 71,
                "../internals/is-object": 73,
                "../internals/well-known-symbol": 145
            }
        ],
        26: [
            function(e33, t24, r21) {
                var i = e33("../internals/an-object");
                t24.exports = function(t, e, r, n) {
                    try {
                        return n ? e(i(r)[0], r[1]) : e(r);
                    } catch (e34) {
                        var o = t.return;
                        throw void 0 !== o && i(o.call(t)), e34;
                    }
                };
            },
            {
                "../internals/an-object": 10
            }
        ],
        27: [
            function(e36, t25, r22) {
                var o = e36("../internals/well-known-symbol")("iterator"), i = !1;
                try {
                    var n = 0, a = {
                        next: function() {
                            return {
                                done: !!n++
                            };
                        },
                        return: function() {
                            i = !0;
                        }
                    };
                    a[o] = function() {
                        return this;
                    }, Array.from(a, function() {
                        throw 2;
                    });
                } catch (e35) {
                }
                t25.exports = function(e, t) {
                    if (!t && !i) return !1;
                    var r = !1;
                    try {
                        var n = {
                        };
                        n[o] = function() {
                            return {
                                next: function() {
                                    return {
                                        done: r = !0
                                    };
                                }
                            };
                        }, e(n);
                    } catch (e37) {
                    }
                    return r;
                };
            },
            {
                "../internals/well-known-symbol": 145
            }
        ],
        28: [
            function(e38, t, r) {
                var n = {
                }.toString;
                t.exports = function(e) {
                    return n.call(e).slice(8, -1);
                };
            },
            {
            }
        ],
        29: [
            function(e39, t26, r23) {
                var n12 = e39("../internals/to-string-tag-support"), o = e39("../internals/classof-raw"), i = e39("../internals/well-known-symbol")("toStringTag"), a = "Arguments" == o(function() {
                    return arguments;
                }());
                t26.exports = n12 ? o : function(e40) {
                    var t, r, n;
                    return void 0 === e40 ? "Undefined" : null === e40 ? "Null" : "string" == typeof (r = function(e, t) {
                        try {
                            return e[t];
                        } catch (e41) {
                        }
                    }(t = Object(e40), i)) ? r : a ? o(t) : "Object" == (n = o(t)) && "function" == typeof t.callee ? "Arguments" : n;
                };
            },
            {
                "../internals/classof-raw": 28,
                "../internals/to-string-tag-support": 138,
                "../internals/well-known-symbol": 145
            }
        ],
        30: [
            function(e42, t27, r24) {
                "use strict";
                var u = e42("../internals/object-define-property").f, c = e42("../internals/object-create"), d = e42("../internals/redefine-all"), f = e42("../internals/function-bind-context"), h = e42("../internals/an-instance"), p = e42("../internals/iterate"), a3 = e42("../internals/define-iterator"), s3 = e42("../internals/set-species"), y = e42("../internals/descriptors"), m = e42("../internals/internal-metadata").fastKey, n13 = e42("../internals/internal-state"), g = n13.set, v = n13.getterFor;
                t27.exports = {
                    getConstructor: function(e43, r25, n14, o7) {
                        function i4(e, t, r) {
                            var n, o, i = s(e), a = l(e, t);
                            return a ? a.value = r : (i.last = a = {
                                index: o = m(t, !0),
                                key: t,
                                value: r,
                                previous: n = i.last,
                                next: void 0,
                                removed: !1
                            }, i.first || (i.first = a), n && (n.next = a), y ? i.size++ : e.size++, "F" !== o && (i.index[o] = a)), e;
                        }
                        var a4 = e43(function(e, t) {
                            h(e, a4, r25), g(e, {
                                type: r25,
                                index: c(null),
                                first: void 0,
                                last: void 0,
                                size: 0
                            }), y || (e.size = 0), null != t && p(t, e[o7], e, n14);
                        }), s = v(r25), l = function(e, t) {
                            var r, n = s(e), o = m(t);
                            if ("F" !== o) return n.index[o];
                            for(r = n.first; r; r = r.next)if (r.key == t) return r;
                        };
                        return d(a4.prototype, {
                            clear: function() {
                                for(var e = s(this), t = e.index, r = e.first; r;)r.removed = !0, r.previous && (r.previous = r.previous.next = void 0), delete t[r.index], r = r.next;
                                e.first = e.last = void 0, y ? e.size = 0 : this.size = 0;
                            },
                            delete: function(e) {
                                var t = s(this), r = l(this, e);
                                if (r) {
                                    var n = r.next, o = r.previous;
                                    delete t.index[r.index], r.removed = !0, o && (o.next = n), n && (n.previous = o), t.first == r && (t.first = n), t.last == r && (t.last = o), y ? t.size-- : this.size--;
                                }
                                return !!r;
                            },
                            forEach: function(e, t) {
                                for(var r, n = s(this), o = f(e, 1 < arguments.length ? t : void 0, 3); r = r ? r.next : n.first;)for(o(r.value, r.key, this); r && r.removed;)r = r.previous;
                            },
                            has: function(e) {
                                return !!l(this, e);
                            }
                        }), d(a4.prototype, n14 ? {
                            get: function(e) {
                                var t = l(this, e);
                                return t && t.value;
                            },
                            set: function(e, t) {
                                return i4(this, 0 === e ? 0 : e, t);
                            }
                        } : {
                            add: function(e) {
                                return i4(this, e = 0 === e ? 0 : e, e);
                            }
                        }), y && u(a4.prototype, "size", {
                            get: function() {
                                return s(this).size;
                            }
                        }), a4;
                    },
                    setStrong: function(e44, t28, r26) {
                        var n = t28 + " Iterator", o = v(t28), i = v(n);
                        a3(e44, t28, function(e, t) {
                            g(this, {
                                type: n,
                                target: e,
                                state: o(e),
                                kind: t,
                                last: void 0
                            });
                        }, function() {
                            for(var e = i(this), t = e.kind, r = e.last; r && r.removed;)r = r.previous;
                            return e.target && (e.last = r = r ? r.next : e.state.first) ? "keys" == t ? {
                                value: r.key,
                                done: !1
                            } : "values" == t ? {
                                value: r.value,
                                done: !1
                            } : {
                                value: [
                                    r.key,
                                    r.value
                                ],
                                done: !1
                            } : {
                                value: e.target = void 0,
                                done: !0
                            };
                        }, r26 ? "entries" : "values", !r26, !0), s3(t28);
                    }
                };
            },
            {
                "../internals/an-instance": 9,
                "../internals/define-iterator": 40,
                "../internals/descriptors": 42,
                "../internals/function-bind-context": 53,
                "../internals/internal-metadata": 68,
                "../internals/internal-state": 69,
                "../internals/iterate": 76,
                "../internals/object-create": 89,
                "../internals/object-define-property": 91,
                "../internals/redefine-all": 106,
                "../internals/set-species": 115
            }
        ],
        31: [
            function(e45, t29, r27) {
                "use strict";
                var m = e45("../internals/export"), g = e45("../internals/global"), v = e45("../internals/is-forced"), b = e45("../internals/redefine"), _ = e45("../internals/internal-metadata"), x = e45("../internals/iterate"), w = e45("../internals/an-instance"), S = e45("../internals/is-object"), j = e45("../internals/fails"), M = e45("../internals/check-correctness-of-iteration"), E = e45("../internals/set-to-string-tag"), T = e45("../internals/inherit-if-required");
                t29.exports = function(n, e46, t30) {
                    function r28(e47) {
                        var r = l[e47];
                        b(l, e47, "add" == e47 ? function(e) {
                            return r.call(this, 0 === e ? 0 : e), this;
                        } : "delete" == e47 ? function(e) {
                            return !(i && !S(e)) && r.call(this, 0 === e ? 0 : e);
                        } : "get" == e47 ? function(e) {
                            return i && !S(e) ? void 0 : r.call(this, 0 === e ? 0 : e);
                        } : "has" == e47 ? function(e) {
                            return !(i && !S(e)) && r.call(this, 0 === e ? 0 : e);
                        } : function(e, t) {
                            return r.call(this, 0 === e ? 0 : e, t), this;
                        });
                    }
                    var o = -1 !== n.indexOf("Map"), i = -1 !== n.indexOf("Weak"), a = o ? "set" : "add", s = g[n], l = s && s.prototype, u = s, c = {
                    };
                    if (v(n, "function" != typeof s || !(i || l.forEach && !j(function() {
                        (new s).entries().next();
                    })))) u = t30.getConstructor(e46, n, o, a), _.REQUIRED = !0;
                    else if (v(n, !0)) {
                        var d = new u, f = d[a](i ? {
                        } : -0, 1) != d, h = j(function() {
                            d.has(1);
                        }), p = M(function(e) {
                            new s(e);
                        }), y = !i && j(function() {
                            for(var e = new s, t = 5; t--;)e[a](t, t);
                            return !e.has(-0);
                        });
                        p || (((u = e46(function(e, t) {
                            w(e, u, n);
                            var r = T(new s, e, u);
                            return null != t && x(t, r[a], r, o), r;
                        })).prototype = l).constructor = u), (h || y) && (r28("delete"), r28("has"), o && r28("get")), (y || f) && r28(a), i && l.clear && delete l.clear;
                    }
                    return c[n] = u, m({
                        global: !0,
                        forced: u != s
                    }, c), E(u, n), i || t30.setStrong(u, n, o), u;
                };
            },
            {
                "../internals/an-instance": 9,
                "../internals/check-correctness-of-iteration": 27,
                "../internals/export": 49,
                "../internals/fails": 50,
                "../internals/global": 58,
                "../internals/inherit-if-required": 66,
                "../internals/internal-metadata": 68,
                "../internals/is-forced": 72,
                "../internals/is-object": 73,
                "../internals/iterate": 76,
                "../internals/redefine": 107,
                "../internals/set-to-string-tag": 116
            }
        ],
        32: [
            function(e48, t31, r29) {
                var s = e48("../internals/has"), l = e48("../internals/own-keys"), u = e48("../internals/object-get-own-property-descriptor"), c = e48("../internals/object-define-property");
                t31.exports = function(e, t) {
                    for(var r = l(t), n = c.f, o = u.f, i = 0; i < r.length; i++){
                        var a = r[i];
                        s(e, a) || n(e, a, o(t, a));
                    }
                };
            },
            {
                "../internals/has": 59,
                "../internals/object-define-property": 91,
                "../internals/object-get-own-property-descriptor": 92,
                "../internals/own-keys": 102
            }
        ],
        33: [
            function(e, t, r30) {
                var n = e("../internals/well-known-symbol")("match");
                t.exports = function(t) {
                    var r = /./;
                    try {
                        "/./"[t](r);
                    } catch (e) {
                        try {
                            return r[n] = !1, "/./"[t](r);
                        } catch (e) {
                        }
                    }
                    return !1;
                };
            },
            {
                "../internals/well-known-symbol": 145
            }
        ],
        34: [
            function(e49, t, r) {
                var n = e49("../internals/fails");
                t.exports = !n(function() {
                    function e() {
                    }
                    return e.prototype.constructor = null, Object.getPrototypeOf(new e) !== e.prototype;
                });
            },
            {
                "../internals/fails": 50
            }
        ],
        35: [
            function(e50, t32, r31) {
                var a = e50("../internals/require-object-coercible"), s = /"/g;
                t32.exports = function(e, t, r, n) {
                    var o = String(a(e)), i = "<" + t;
                    return "" !== r && (i += " " + r + '="' + String(n).replace(s, "&quot;") + '"'), i + ">" + o + "</" + t + ">";
                };
            },
            {
                "../internals/require-object-coercible": 112
            }
        ],
        36: [
            function(e51, t33, r32) {
                "use strict";
                function o() {
                    return this;
                }
                var i = e51("../internals/iterators-core").IteratorPrototype, a = e51("../internals/object-create"), s = e51("../internals/create-property-descriptor"), l = e51("../internals/set-to-string-tag"), u = e51("../internals/iterators");
                t33.exports = function(e, t, r) {
                    var n = t + " Iterator";
                    return e.prototype = a(i, {
                        next: s(1, r)
                    }), l(e, n, !1, !0), u[n] = o, e;
                };
            },
            {
                "../internals/create-property-descriptor": 38,
                "../internals/iterators": 78,
                "../internals/iterators-core": 77,
                "../internals/object-create": 89,
                "../internals/set-to-string-tag": 116
            }
        ],
        37: [
            function(e52, t34, r33) {
                var n = e52("../internals/descriptors"), o = e52("../internals/object-define-property"), i = e52("../internals/create-property-descriptor");
                t34.exports = n ? function(e, t, r) {
                    return o.f(e, t, i(1, r));
                } : function(e, t, r) {
                    return e[t] = r, e;
                };
            },
            {
                "../internals/create-property-descriptor": 38,
                "../internals/descriptors": 42,
                "../internals/object-define-property": 91
            }
        ],
        38: [
            function(e53, t35, r) {
                t35.exports = function(e, t) {
                    return {
                        enumerable: !(1 & e),
                        configurable: !(2 & e),
                        writable: !(4 & e),
                        value: t
                    };
                };
            },
            {
            }
        ],
        39: [
            function(e54, t36, r34) {
                "use strict";
                var o = e54("../internals/to-primitive"), i = e54("../internals/object-define-property"), a = e54("../internals/create-property-descriptor");
                t36.exports = function(e, t, r) {
                    var n = o(t);
                    n in e ? i.f(e, n, a(0, r)) : e[n] = r;
                };
            },
            {
                "../internals/create-property-descriptor": 38,
                "../internals/object-define-property": 91,
                "../internals/to-primitive": 137
            }
        ],
        40: [
            function(e55, t37, r35) {
                "use strict";
                function g() {
                    return this;
                }
                var v = e55("../internals/export"), b = e55("../internals/create-iterator-constructor"), _ = e55("../internals/object-get-prototype-of"), x = e55("../internals/object-set-prototype-of"), w = e55("../internals/set-to-string-tag"), S = e55("../internals/create-non-enumerable-property"), j = e55("../internals/redefine"), n15 = e55("../internals/well-known-symbol"), M = e55("../internals/is-pure"), E = e55("../internals/iterators"), o8 = e55("../internals/iterators-core"), T = o8.IteratorPrototype, O = o8.BUGGY_SAFARI_ITERATORS, C = n15("iterator"), L = "values", P = "entries";
                t37.exports = function(e56, t, r, n, o, i, a) {
                    b(r, t, n);
                    function s(e) {
                        if (e === o && y) return y;
                        if (!O && e in h) return h[e];
                        switch(e){
                            case "keys":
                            case L:
                            case P:
                                return function() {
                                    return new r(this, e);
                                };
                        }
                        return function() {
                            return new r(this);
                        };
                    }
                    var l, u, c, d = t + " Iterator", f = !1, h = e56.prototype, p = h[C] || h["@@iterator"] || o && h[o], y = !O && p || s(o), m = "Array" == t && h.entries || p;
                    if (m && (l = _(m.call(new e56)), T !== Object.prototype && l.next && (M || _(l) === T || (x ? x(l, T) : "function" != typeof l[C] && S(l, C, g)), w(l, d, !0, !0), M && (E[d] = g))), o == L && p && p.name !== L && (f = !0, y = function() {
                        return p.call(this);
                    }), M && !a || h[C] === y || S(h, C, y), E[t] = y, o) {
                        if (u = {
                            values: s(L),
                            keys: i ? y : s("keys"),
                            entries: s(P)
                        }, a) for(c in u)!O && !f && c in h || j(h, c, u[c]);
                        else v({
                            target: t,
                            proto: !0,
                            forced: O || f
                        }, u);
                    }
                    return u;
                };
            },
            {
                "../internals/create-iterator-constructor": 36,
                "../internals/create-non-enumerable-property": 37,
                "../internals/export": 49,
                "../internals/is-pure": 74,
                "../internals/iterators": 78,
                "../internals/iterators-core": 77,
                "../internals/object-get-prototype-of": 96,
                "../internals/object-set-prototype-of": 100,
                "../internals/redefine": 107,
                "../internals/set-to-string-tag": 116,
                "../internals/well-known-symbol": 145
            }
        ],
        41: [
            function(e57, t38, r) {
                var n = e57("../internals/path"), o = e57("../internals/has"), i = e57("../internals/well-known-symbol-wrapped"), a = e57("../internals/object-define-property").f;
                t38.exports = function(e) {
                    var t = n.Symbol || (n.Symbol = {
                    });
                    o(t, e) || a(t, e, {
                        value: i.f(e)
                    });
                };
            },
            {
                "../internals/has": 59,
                "../internals/object-define-property": 91,
                "../internals/path": 103,
                "../internals/well-known-symbol-wrapped": 144
            }
        ],
        42: [
            function(e, t, r) {
                var n = e("../internals/fails");
                t.exports = !n(function() {
                    return 7 != Object.defineProperty({
                    }, 1, {
                        get: function() {
                            return 7;
                        }
                    })[1];
                });
            },
            {
                "../internals/fails": 50
            }
        ],
        43: [
            function(e58, t, r) {
                var n = e58("../internals/global"), o = e58("../internals/is-object"), i = n.document, a = o(i) && o(i.createElement);
                t.exports = function(e) {
                    return a ? i.createElement(e) : {
                    };
                };
            },
            {
                "../internals/global": 58,
                "../internals/is-object": 73
            }
        ],
        44: [
            function(e, t, r) {
                t.exports = {
                    CSSRuleList: 0,
                    CSSStyleDeclaration: 0,
                    CSSValueList: 0,
                    ClientRectList: 0,
                    DOMRectList: 0,
                    DOMStringList: 0,
                    DOMTokenList: 1,
                    DataTransferItemList: 0,
                    FileList: 0,
                    HTMLAllCollection: 0,
                    HTMLCollection: 0,
                    HTMLFormElement: 0,
                    HTMLSelectElement: 0,
                    MediaList: 0,
                    MimeTypeArray: 0,
                    NamedNodeMap: 0,
                    NodeList: 1,
                    PaintRequestList: 0,
                    Plugin: 0,
                    PluginArray: 0,
                    SVGLengthList: 0,
                    SVGNumberList: 0,
                    SVGPathSegList: 0,
                    SVGPointList: 0,
                    SVGStringList: 0,
                    SVGTransformList: 0,
                    SourceBufferList: 0,
                    StyleSheetList: 0,
                    TextTrackCueList: 0,
                    TextTrackList: 0,
                    TouchList: 0
                };
            },
            {
            }
        ],
        45: [
            function(e, t, r) {
                var n = e("../internals/engine-user-agent");
                t.exports = /(iphone|ipod|ipad).*applewebkit/i.test(n);
            },
            {
                "../internals/engine-user-agent": 46
            }
        ],
        46: [
            function(e, t, r) {
                var n = e("../internals/get-built-in");
                t.exports = n("navigator", "userAgent") || "";
            },
            {
                "../internals/get-built-in": 55
            }
        ],
        47: [
            function(e, t, r) {
                var n, o, i = e("../internals/global"), a = e("../internals/engine-user-agent"), s = i.process, l = s && s.versions, u = l && l.v8;
                u ? o = (n = u.split("."))[0] + n[1] : a && (!(n = a.match(/Edge\/(\d+)/)) || 74 <= n[1]) && (n = a.match(/Chrome\/(\d+)/)) && (o = n[1]), t.exports = o && +o;
            },
            {
                "../internals/engine-user-agent": 46,
                "../internals/global": 58
            }
        ],
        48: [
            function(e, t, r) {
                t.exports = [
                    "constructor",
                    "hasOwnProperty",
                    "isPrototypeOf",
                    "propertyIsEnumerable",
                    "toLocaleString",
                    "toString",
                    "valueOf"
                ];
            },
            {
            }
        ],
        49: [
            function(e59, t39, r36) {
                var c = e59("../internals/global"), d = e59("../internals/object-get-own-property-descriptor").f, f = e59("../internals/create-non-enumerable-property"), h = e59("../internals/redefine"), p = e59("../internals/set-global"), y = e59("../internals/copy-constructor-properties"), m = e59("../internals/is-forced");
                t39.exports = function(e, t) {
                    var r, n, o, i, a, s = e.target, l = e.global, u = e.stat;
                    if (r = l ? c : u ? c[s] || p(s, {
                    }) : (c[s] || {
                    }).prototype) for(n in t){
                        if (i = t[n], o = e.noTargetGet ? (a = d(r, n)) && a.value : r[n], !m(l ? n : s + (u ? "." : "#") + n, e.forced) && void 0 !== o) {
                            if (typeof i == typeof o) continue;
                            y(i, o);
                        }
                        (e.sham || o && o.sham) && f(i, "sham", !0), h(r, n, i, e);
                    }
                };
            },
            {
                "../internals/copy-constructor-properties": 32,
                "../internals/create-non-enumerable-property": 37,
                "../internals/global": 58,
                "../internals/is-forced": 72,
                "../internals/object-get-own-property-descriptor": 92,
                "../internals/redefine": 107,
                "../internals/set-global": 114
            }
        ],
        50: [
            function(e60, t, r) {
                t.exports = function(e) {
                    try {
                        return !!e();
                    } catch (e61) {
                        return !0;
                    }
                };
            },
            {
            }
        ],
        51: [
            function(e62, t40, r37) {
                "use strict";
                e62("../modules/es.regexp.exec");
                var d = e62("../internals/redefine"), f = e62("../internals/fails"), h = e62("../internals/well-known-symbol"), p = e62("../internals/regexp-exec"), y = e62("../internals/create-non-enumerable-property"), m = h("species"), g = !f(function() {
                    var e63 = /./;
                    return e63.exec = function() {
                        var e = [];
                        return e.groups = {
                            a: "7"
                        }, e;
                    }, "7" !== "".replace(e63, "$<a>");
                }), v = "$0" === "a".replace(/./, "$0"), n16 = h("replace"), b = !!/./[n16] && "" === /./[n16]("a", "$0"), _ = !f(function() {
                    var e = /(?:)/, t = e.exec;
                    e.exec = function() {
                        return t.apply(this, arguments);
                    };
                    var r = "ab".split(e);
                    return 2 !== r.length || "a" !== r[0] || "b" !== r[1];
                });
                t40.exports = function(r38, e64, t41, n17) {
                    var o9 = h(r38), i = !f(function() {
                        var e = {
                        };
                        return e[o9] = function() {
                            return 7;
                        }, 7 != ""[r38](e);
                    }), a = i && !f(function() {
                        var e = !1, t = /a/;
                        return "split" === r38 && ((t = {
                            constructor: {
                            }
                        }).constructor[m] = function() {
                            return t;
                        }, t.flags = "", t[o9] = /./[o9]), t.exec = function() {
                            return e = !0, null;
                        }, t[o9](""), !e;
                    });
                    if (!i || !a || "replace" === r38 && (!g || !v || b) || "split" === r38 && !_) {
                        var s = /./[o9], l = t41(o9, ""[r38], function(e, t, r, n, o) {
                            return t.exec === p ? i && !o ? {
                                done: !0,
                                value: s.call(t, r, n)
                            } : {
                                done: !0,
                                value: e.call(r, t, n)
                            } : {
                                done: !1
                            };
                        }, {
                            REPLACE_KEEPS_$0: v,
                            REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: b
                        }), u = l[0], c = l[1];
                        d(String.prototype, r38, u), d(RegExp.prototype, o9, 2 == e64 ? function(e, t) {
                            return c.call(e, this, t);
                        } : function(e) {
                            return c.call(e, this);
                        });
                    }
                    n17 && y(RegExp.prototype[o9], "sham", !0);
                };
            },
            {
                "../internals/create-non-enumerable-property": 37,
                "../internals/fails": 50,
                "../internals/redefine": 107,
                "../internals/regexp-exec": 109,
                "../internals/well-known-symbol": 145,
                "../modules/es.regexp.exec": 178
            }
        ],
        52: [
            function(e, t, r) {
                var n = e("../internals/fails");
                t.exports = !n(function() {
                    return Object.isExtensible(Object.preventExtensions({
                    }));
                });
            },
            {
                "../internals/fails": 50
            }
        ],
        53: [
            function(e65, t42, r39) {
                var i = e65("../internals/a-function");
                t42.exports = function(n, o, e66) {
                    if (i(n), void 0 === o) return n;
                    switch(e66){
                        case 0:
                            return function() {
                                return n.call(o);
                            };
                        case 1:
                            return function(e) {
                                return n.call(o, e);
                            };
                        case 2:
                            return function(e, t) {
                                return n.call(o, e, t);
                            };
                        case 3:
                            return function(e, t, r) {
                                return n.call(o, e, t, r);
                            };
                    }
                    return function() {
                        return n.apply(o, arguments);
                    };
                };
            },
            {
                "../internals/a-function": 5
            }
        ],
        54: [
            function(e67, t43, r40) {
                "use strict";
                var i = e67("../internals/a-function"), a = e67("../internals/is-object"), s = [].slice, l = {
                };
                t43.exports = Function.bind || function(t44) {
                    var r41 = i(this), n18 = s.call(arguments, 1), o10 = function() {
                        var e68 = n18.concat(s.call(arguments));
                        return this instanceof o10 ? (function(e, t, r) {
                            if (!(t in l)) {
                                for(var n = [], o = 0; o < t; o++)n[o] = "a[" + o + "]";
                                l[t] = Function("C,a", "return new C(" + n.join(",") + ")");
                            }
                            return l[t](e, r);
                        })(r41, e68.length, e68) : r41.apply(t44, e68);
                    };
                    return a(r41.prototype) && (o10.prototype = r41.prototype), o10;
                };
            },
            {
                "../internals/a-function": 5,
                "../internals/is-object": 73
            }
        ],
        55: [
            function(e69, t, r) {
                function n(e) {
                    return "function" == typeof e ? e : void 0;
                }
                var o = e69("../internals/path"), i = e69("../internals/global");
                t.exports = function(e, t) {
                    return arguments.length < 2 ? n(o[e]) || n(i[e]) : o[e] && o[e][t] || i[e] && i[e][t];
                };
            },
            {
                "../internals/global": 58,
                "../internals/path": 103
            }
        ],
        56: [
            function(e70, t, r) {
                var n = e70("../internals/classof"), o = e70("../internals/iterators"), i = e70("../internals/well-known-symbol")("iterator");
                t.exports = function(e) {
                    if (null != e) return e[i] || e["@@iterator"] || o[n(e)];
                };
            },
            {
                "../internals/classof": 29,
                "../internals/iterators": 78,
                "../internals/well-known-symbol": 145
            }
        ],
        57: [
            function(e71, t45, r) {
                var n = e71("../internals/an-object"), o = e71("../internals/get-iterator-method");
                t45.exports = function(e) {
                    var t = o(e);
                    if ("function" != typeof t) throw TypeError(String(e) + " is not iterable");
                    return n(t.call(e));
                };
            },
            {
                "../internals/an-object": 10,
                "../internals/get-iterator-method": 56
            }
        ],
        58: [
            function(e72, r, t46) {
                (function(e73) {
                    function t(e) {
                        return e && e.Math == Math && e;
                    }
                    r.exports = t("object" == typeof globalThis && globalThis) || t("object" == typeof window && window) || t("object" == typeof self && self) || t("object" == typeof e73 && e73) || Function("return this")();
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {
                });
            },
            {
            }
        ],
        59: [
            function(e74, t47, r) {
                var n = {
                }.hasOwnProperty;
                t47.exports = function(e, t) {
                    return n.call(e, t);
                };
            },
            {
            }
        ],
        60: [
            function(e, t, r) {
                t.exports = {
                };
            },
            {
            }
        ],
        61: [
            function(e75, t48, r42) {
                var n = e75("../internals/global");
                t48.exports = function(e, t) {
                    var r = n.console;
                    r && r.error && (1 === arguments.length ? r.error(e) : r.error(e, t));
                };
            },
            {
                "../internals/global": 58
            }
        ],
        62: [
            function(e, t, r) {
                var n = e("../internals/get-built-in");
                t.exports = n("document", "documentElement");
            },
            {
                "../internals/get-built-in": 55
            }
        ],
        63: [
            function(e, t, r) {
                var n = e("../internals/descriptors"), o = e("../internals/fails"), i = e("../internals/document-create-element");
                t.exports = !n && !o(function() {
                    return 7 != Object.defineProperty(i("div"), "a", {
                        get: function() {
                            return 7;
                        }
                    }).a;
                });
            },
            {
                "../internals/descriptors": 42,
                "../internals/document-create-element": 43,
                "../internals/fails": 50
            }
        ],
        64: [
            function(e76, t49, r43) {
                var h = Math.abs, p = Math.pow, y = Math.floor, m = Math.log, g = Math.LN2;
                t49.exports = {
                    pack: function(e, t, r) {
                        var n, o, i, a = new Array(r), s = 8 * r - t - 1, l = (1 << s) - 1, u = l >> 1, c = 23 === t ? p(2, -24) - p(2, -77) : 0, d = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0, f = 0;
                        for((e = h(e)) != e || e === 1 / 0 ? (o = e != e ? 1 : 0, n = l) : (n = y(m(e) / g), e * (i = p(2, -n)) < 1 && (n--, i *= 2), 2 <= (e += 1 <= n + u ? c / i : c * p(2, 1 - u)) * i && (n++, i /= 2), l <= n + u ? (o = 0, n = l) : 1 <= n + u ? (o = (e * i - 1) * p(2, t), n += u) : (o = e * p(2, u - 1) * p(2, t), n = 0)); 8 <= t; a[f++] = 255 & o, o /= 256, t -= 8);
                        for(n = n << t | o, s += t; 0 < s; a[f++] = 255 & n, n /= 256, s -= 8);
                        return a[--f] |= 128 * d, a;
                    },
                    unpack: function(e, t) {
                        var r, n = e.length, o = 8 * n - t - 1, i = (1 << o) - 1, a = i >> 1, s = o - 7, l = n - 1, u = e[l--], c = 127 & u;
                        for(u >>= 7; 0 < s; c = 256 * c + e[l], l--, s -= 8);
                        for(r = c & (1 << -s) - 1, c >>= -s, s += t; 0 < s; r = 256 * r + e[l], l--, s -= 8);
                        if (0 === c) c = 1 - a;
                        else {
                            if (c === i) return r ? NaN : u ? -1 / 0 : 1 / 0;
                            r += p(2, t), c -= a;
                        }
                        return (u ? -1 : 1) * r * p(2, c - t);
                    }
                };
            },
            {
            }
        ],
        65: [
            function(e77, t, r) {
                var n = e77("../internals/fails"), o = e77("../internals/classof-raw"), i = "".split;
                t.exports = n(function() {
                    return !Object("z").propertyIsEnumerable(0);
                }) ? function(e) {
                    return "String" == o(e) ? i.call(e, "") : Object(e);
                } : Object;
            },
            {
                "../internals/classof-raw": 28,
                "../internals/fails": 50
            }
        ],
        66: [
            function(e78, t50, r44) {
                var i = e78("../internals/is-object"), a = e78("../internals/object-set-prototype-of");
                t50.exports = function(e, t, r) {
                    var n, o;
                    return a && "function" == typeof (n = t.constructor) && n !== r && i(o = n.prototype) && o !== r.prototype && a(e, o), e;
                };
            },
            {
                "../internals/is-object": 73,
                "../internals/object-set-prototype-of": 100
            }
        ],
        67: [
            function(e79, t, r) {
                var n = e79("../internals/shared-store"), o = Function.toString;
                "function" != typeof n.inspectSource && (n.inspectSource = function(e) {
                    return o.call(e);
                }), t.exports = n.inspectSource;
            },
            {
                "../internals/shared-store": 118
            }
        ],
        68: [
            function(e80, t51, r) {
                function n(e) {
                    s(e, c, {
                        value: {
                            objectID: "O" + ++d,
                            weakData: {
                            }
                        }
                    });
                }
                var o = e80("../internals/hidden-keys"), i = e80("../internals/is-object"), a = e80("../internals/has"), s = e80("../internals/object-define-property").f, l = e80("../internals/uid"), u = e80("../internals/freezing"), c = l("meta"), d = 0, f = Object.isExtensible || function() {
                    return !0;
                }, h = t51.exports = {
                    REQUIRED: !1,
                    fastKey: function(e, t) {
                        if (!i(e)) return "symbol" == typeof e ? e : ("string" == typeof e ? "S" : "P") + e;
                        if (!a(e, c)) {
                            if (!f(e)) return "F";
                            if (!t) return "E";
                            n(e);
                        }
                        return e[c].objectID;
                    },
                    getWeakData: function(e, t) {
                        if (!a(e, c)) {
                            if (!f(e)) return !0;
                            if (!t) return !1;
                            n(e);
                        }
                        return e[c].weakData;
                    },
                    onFreeze: function(e) {
                        return u && h.REQUIRED && f(e) && !a(e, c) && n(e), e;
                    }
                };
                o[c] = !0;
            },
            {
                "../internals/freezing": 52,
                "../internals/has": 59,
                "../internals/hidden-keys": 60,
                "../internals/is-object": 73,
                "../internals/object-define-property": 91,
                "../internals/uid": 142
            }
        ],
        69: [
            function(e81, t52, r45) {
                var n, o, i, a = e81("../internals/native-weak-map"), s = e81("../internals/global"), l = e81("../internals/is-object"), u = e81("../internals/create-non-enumerable-property"), c = e81("../internals/has"), d = e81("../internals/shared-key"), f = e81("../internals/hidden-keys"), h = s.WeakMap;
                if (a) {
                    var p = new h, y = p.get, m = p.has, g = p.set;
                    n = function(e, t) {
                        return g.call(p, e, t), t;
                    }, o = function(e) {
                        return y.call(p, e) || {
                        };
                    }, i = function(e) {
                        return m.call(p, e);
                    };
                } else {
                    var v = d("state");
                    f[v] = !0, n = function(e, t) {
                        return u(e, v, t), t;
                    }, o = function(e) {
                        return c(e, v) ? e[v] : {
                        };
                    }, i = function(e) {
                        return c(e, v);
                    };
                }
                t52.exports = {
                    set: n,
                    get: o,
                    has: i,
                    enforce: function(e) {
                        return i(e) ? o(e) : n(e, {
                        });
                    },
                    getterFor: function(r) {
                        return function(e) {
                            var t;
                            if (!l(e) || (t = o(e)).type !== r) throw TypeError("Incompatible receiver, " + r + " required");
                            return t;
                        };
                    }
                };
            },
            {
                "../internals/create-non-enumerable-property": 37,
                "../internals/global": 58,
                "../internals/has": 59,
                "../internals/hidden-keys": 60,
                "../internals/is-object": 73,
                "../internals/native-weak-map": 84,
                "../internals/shared-key": 117
            }
        ],
        70: [
            function(e82, t, r) {
                var n = e82("../internals/well-known-symbol"), o = e82("../internals/iterators"), i = n("iterator"), a = Array.prototype;
                t.exports = function(e) {
                    return void 0 !== e && (o.Array === e || a[i] === e);
                };
            },
            {
                "../internals/iterators": 78,
                "../internals/well-known-symbol": 145
            }
        ],
        71: [
            function(e83, t, r) {
                var n = e83("../internals/classof-raw");
                t.exports = Array.isArray || function(e) {
                    return "Array" == n(e);
                };
            },
            {
                "../internals/classof-raw": 28
            }
        ],
        72: [
            function(e84, t53, r46) {
                function n(e, t) {
                    var r = s[a(e)];
                    return r == u || r != l && ("function" == typeof t ? o(t) : !!t);
                }
                var o = e84("../internals/fails"), i = /#|\.prototype\./, a = n.normalize = function(e) {
                    return String(e).replace(i, ".").toLowerCase();
                }, s = n.data = {
                }, l = n.NATIVE = "N", u = n.POLYFILL = "P";
                t53.exports = n;
            },
            {
                "../internals/fails": 50
            }
        ],
        73: [
            function(e85, t, r) {
                t.exports = function(e) {
                    return "object" == typeof e ? null !== e : "function" == typeof e;
                };
            },
            {
            }
        ],
        74: [
            function(e, t, r) {
                t.exports = !1;
            },
            {
            }
        ],
        75: [
            function(e86, t54, r) {
                var n = e86("../internals/is-object"), o = e86("../internals/classof-raw"), i = e86("../internals/well-known-symbol")("match");
                t54.exports = function(e) {
                    var t;
                    return n(e) && (void 0 !== (t = e[i]) ? !!t : "RegExp" == o(e));
                };
            },
            {
                "../internals/classof-raw": 28,
                "../internals/is-object": 73,
                "../internals/well-known-symbol": 145
            }
        ],
        76: [
            function(e87, t55, r47) {
                function h(e, t) {
                    this.stopped = e, this.result = t;
                }
                var p = e87("../internals/an-object"), y = e87("../internals/is-array-iterator-method"), m = e87("../internals/to-length"), g = e87("../internals/function-bind-context"), v = e87("../internals/get-iterator-method"), b = e87("../internals/call-with-safe-iteration-closing");
                (t55.exports = function(e, t, r, n, o) {
                    var i, a, s, l, u, c, d, f = g(t, r, n ? 2 : 1);
                    if (o) i = e;
                    else {
                        if ("function" != typeof (a = v(e))) throw TypeError("Target is not iterable");
                        if (y(a)) {
                            for(s = 0, l = m(e.length); s < l; s++)if ((u = n ? f(p(d = e[s])[0], d[1]) : f(e[s])) && u instanceof h) return u;
                            return new h(!1);
                        }
                        i = a.call(e);
                    }
                    for(c = i.next; !(d = c.call(i)).done;)if ("object" == typeof (u = b(i, f, d.value, n)) && u && u instanceof h) return u;
                    return new h(!1);
                }).stop = function(e) {
                    return new h(!0, e);
                };
            },
            {
                "../internals/an-object": 10,
                "../internals/call-with-safe-iteration-closing": 26,
                "../internals/function-bind-context": 53,
                "../internals/get-iterator-method": 56,
                "../internals/is-array-iterator-method": 70,
                "../internals/to-length": 133
            }
        ],
        77: [
            function(e, t, r) {
                "use strict";
                var n, o, i, a = e("../internals/object-get-prototype-of"), s = e("../internals/create-non-enumerable-property"), l = e("../internals/has"), u = e("../internals/well-known-symbol"), c = e("../internals/is-pure"), d = u("iterator"), f = !1;
                [].keys && ("next" in (i = [].keys()) ? (o = a(a(i))) !== Object.prototype && (n = o) : f = !0), null == n && (n = {
                }), c || l(n, d) || s(n, d, function() {
                    return this;
                }), t.exports = {
                    IteratorPrototype: n,
                    BUGGY_SAFARI_ITERATORS: f
                };
            },
            {
                "../internals/create-non-enumerable-property": 37,
                "../internals/has": 59,
                "../internals/is-pure": 74,
                "../internals/object-get-prototype-of": 96,
                "../internals/well-known-symbol": 145
            }
        ],
        78: [
            function(e, t, r) {
                arguments[4][60][0].apply(r, arguments);
            },
            {
                dup: 60
            }
        ],
        79: [
            function(e88, t, r) {
                t.exports = Math.sign || function(e) {
                    return 0 == (e = +e) || e != e ? e : e < 0 ? -1 : 1;
                };
            },
            {
            }
        ],
        80: [
            function(e89, t56, r) {
                var n, o, i, a, s, l, u, c, d = e89("../internals/global"), f = e89("../internals/object-get-own-property-descriptor").f, h = e89("../internals/classof-raw"), p = e89("../internals/task").set, y = e89("../internals/engine-is-ios"), m = d.MutationObserver || d.WebKitMutationObserver, g = d.process, v = d.Promise, b = "process" == h(g), _ = f(d, "queueMicrotask"), x = _ && _.value;
                x || (n = function() {
                    var e, t;
                    for(b && (e = g.domain) && e.exit(); o;){
                        t = o.fn, o = o.next;
                        try {
                            t();
                        } catch (e) {
                            throw o ? a() : i = void 0, e;
                        }
                    }
                    i = void 0, e && e.enter();
                }, a = b ? function() {
                    g.nextTick(n);
                } : m && !y ? (s = !0, l = document.createTextNode(""), new m(n).observe(l, {
                    characterData: !0
                }), function() {
                    l.data = s = !s;
                }) : v && v.resolve ? (u = v.resolve(void 0), c = u.then, function() {
                    c.call(u, n);
                }) : function() {
                    p.call(d, n);
                }), t56.exports = x || function(e) {
                    var t = {
                        fn: e,
                        next: void 0
                    };
                    i && (i.next = t), o || (o = t, a()), i = t;
                };
            },
            {
                "../internals/classof-raw": 28,
                "../internals/engine-is-ios": 45,
                "../internals/global": 58,
                "../internals/object-get-own-property-descriptor": 92,
                "../internals/task": 127
            }
        ],
        81: [
            function(e, t, r) {
                var n = e("../internals/global");
                t.exports = n.Promise;
            },
            {
                "../internals/global": 58
            }
        ],
        82: [
            function(e, t, r) {
                var n = e("../internals/fails");
                t.exports = !!Object.getOwnPropertySymbols && !n(function() {
                    return !String(Symbol());
                });
            },
            {
                "../internals/fails": 50
            }
        ],
        83: [
            function(e90, t57, r48) {
                var n19 = e90("../internals/fails"), o = e90("../internals/well-known-symbol"), i = e90("../internals/is-pure"), a = o("iterator");
                t57.exports = !n19(function() {
                    var e91 = new URL("b?a=1&b=2&c=3", "http://a"), r = e91.searchParams, n = "";
                    return e91.pathname = "c%20d", r.forEach(function(e, t) {
                        r.delete("b"), n += t + e;
                    }), i && !e91.toJSON || !r.sort || "http://a/c%20d?a=1&c=3" !== e91.href || "3" !== r.get("c") || "a=1" !== String(new URLSearchParams("?a=1")) || !r[a] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("http://тест").host || "#%D0%B1" !== new URL("http://a#б").hash || "a1c3" !== n || "x" !== new URL("http://x", void 0).host;
                });
            },
            {
                "../internals/fails": 50,
                "../internals/is-pure": 74,
                "../internals/well-known-symbol": 145
            }
        ],
        84: [
            function(e, t, r) {
                var n = e("../internals/global"), o = e("../internals/inspect-source"), i = n.WeakMap;
                t.exports = "function" == typeof i && /native code/.test(o(i));
            },
            {
                "../internals/global": 58,
                "../internals/inspect-source": 67
            }
        ],
        85: [
            function(e92, t58, r49) {
                "use strict";
                function n20(e93) {
                    var r, n;
                    this.promise = new e93(function(e, t) {
                        if (void 0 !== r || void 0 !== n) throw TypeError("Bad Promise constructor");
                        r = e, n = t;
                    }), this.resolve = o(r), this.reject = o(n);
                }
                var o = e92("../internals/a-function");
                t58.exports.f = function(e) {
                    return new n20(e);
                };
            },
            {
                "../internals/a-function": 5
            }
        ],
        86: [
            function(e94, t, r) {
                var n = e94("../internals/is-regexp");
                t.exports = function(e) {
                    if (n(e)) throw TypeError("The method doesn't accept regular expressions");
                    return e;
                };
            },
            {
                "../internals/is-regexp": 75
            }
        ],
        87: [
            function(e95, t, r) {
                var n = e95("../internals/global").isFinite;
                t.exports = Number.isFinite || function(e) {
                    return "number" == typeof e && n(e);
                };
            },
            {
                "../internals/global": 58
            }
        ],
        88: [
            function(e96, t59, r50) {
                "use strict";
                var f = e96("../internals/descriptors"), n21 = e96("../internals/fails"), h = e96("../internals/object-keys"), p = e96("../internals/object-get-own-property-symbols"), y = e96("../internals/object-property-is-enumerable"), m = e96("../internals/to-object"), g = e96("../internals/indexed-object"), o11 = Object.assign, i5 = Object.defineProperty;
                t59.exports = !o11 || n21(function() {
                    if (f && 1 !== o11({
                        b: 1
                    }, o11(i5({
                    }, "a", {
                        enumerable: !0,
                        get: function() {
                            i5(this, "b", {
                                value: 3,
                                enumerable: !1
                            });
                        }
                    }), {
                        b: 2
                    })).b) return !0;
                    var e97 = {
                    }, t = {
                    }, r = Symbol(), n = "abcdefghijklmnopqrst";
                    return e97[r] = 7, n.split("").forEach(function(e) {
                        t[e] = e;
                    }), 7 != o11({
                    }, e97)[r] || h(o11({
                    }, t)).join("") != n;
                }) ? function(e, t) {
                    for(var r = m(e), n = arguments.length, o = 1, i = p.f, a = y.f; o < n;)for(var s, l = g(arguments[o++]), u = i ? h(l).concat(i(l)) : h(l), c = u.length, d = 0; d < c;)s = u[d++], f && !a.call(l, s) || (r[s] = l[s]);
                    return r;
                } : o11;
            },
            {
                "../internals/descriptors": 42,
                "../internals/fails": 50,
                "../internals/indexed-object": 65,
                "../internals/object-get-own-property-symbols": 95,
                "../internals/object-keys": 98,
                "../internals/object-property-is-enumerable": 99,
                "../internals/to-object": 134
            }
        ],
        89: [
            function(e98, t60, r51) {
                function n() {
                }
                function o(e) {
                    return "<script>" + e + "</" + p + ">";
                }
                var i, a = e98("../internals/an-object"), s = e98("../internals/object-define-properties"), l = e98("../internals/enum-bug-keys"), u = e98("../internals/hidden-keys"), c = e98("../internals/html"), d = e98("../internals/document-create-element"), f = e98("../internals/shared-key"), h = "prototype", p = "script", y = f("IE_PROTO"), m = function() {
                    try {
                        i = document.domain && new ActiveXObject("htmlfile");
                    } catch (e99) {
                    }
                    var e100, t61;
                    m = i ? (function(e) {
                        e.write(o("")), e.close();
                        var t = e.parentWindow.Object;
                        return e = null, t;
                    })(i) : ((t61 = d("iframe")).style.display = "none", c.appendChild(t61), t61.src = String("javascript:"), (e100 = t61.contentWindow.document).open(), e100.write(o("document.F=Object")), e100.close(), e100.F);
                    for(var r = l.length; r--;)delete m[h][l[r]];
                    return m();
                };
                u[y] = !0, t60.exports = Object.create || function(e, t) {
                    var r;
                    return null !== e ? (n[h] = a(e), r = new n, n[h] = null, r[y] = e) : r = m(), void 0 === t ? r : s(r, t);
                };
            },
            {
                "../internals/an-object": 10,
                "../internals/document-create-element": 43,
                "../internals/enum-bug-keys": 48,
                "../internals/hidden-keys": 60,
                "../internals/html": 62,
                "../internals/object-define-properties": 90,
                "../internals/shared-key": 117
            }
        ],
        90: [
            function(e101, t62, r52) {
                var n22 = e101("../internals/descriptors"), a = e101("../internals/object-define-property"), s = e101("../internals/an-object"), l = e101("../internals/object-keys");
                t62.exports = n22 ? Object.defineProperties : function(e, t) {
                    s(e);
                    for(var r, n = l(t), o = n.length, i = 0; i < o;)a.f(e, r = n[i++], t[r]);
                    return e;
                };
            },
            {
                "../internals/an-object": 10,
                "../internals/descriptors": 42,
                "../internals/object-define-property": 91,
                "../internals/object-keys": 98
            }
        ],
        91: [
            function(e102, t63, r53) {
                var n = e102("../internals/descriptors"), o = e102("../internals/ie8-dom-define"), i = e102("../internals/an-object"), a = e102("../internals/to-primitive"), s = Object.defineProperty;
                r53.f = n ? s : function(e, t, r) {
                    if (i(e), t = a(t, !0), i(r), o) try {
                        return s(e, t, r);
                    } catch (e103) {
                    }
                    if ("get" in r || "set" in r) throw TypeError("Accessors not supported");
                    return "value" in r && (e[t] = r.value), e;
                };
            },
            {
                "../internals/an-object": 10,
                "../internals/descriptors": 42,
                "../internals/ie8-dom-define": 63,
                "../internals/to-primitive": 137
            }
        ],
        92: [
            function(e104, t64, r) {
                var n = e104("../internals/descriptors"), o = e104("../internals/object-property-is-enumerable"), i = e104("../internals/create-property-descriptor"), a = e104("../internals/to-indexed-object"), s = e104("../internals/to-primitive"), l = e104("../internals/has"), u = e104("../internals/ie8-dom-define"), c = Object.getOwnPropertyDescriptor;
                r.f = n ? c : function(e, t) {
                    if (e = a(e), t = s(t, !0), u) try {
                        return c(e, t);
                    } catch (e105) {
                    }
                    if (l(e, t)) return i(!o.f.call(e, t), e[t]);
                };
            },
            {
                "../internals/create-property-descriptor": 38,
                "../internals/descriptors": 42,
                "../internals/has": 59,
                "../internals/ie8-dom-define": 63,
                "../internals/object-property-is-enumerable": 99,
                "../internals/to-indexed-object": 131,
                "../internals/to-primitive": 137
            }
        ],
        93: [
            function(e106, t, r) {
                var n = e106("../internals/to-indexed-object"), o = e106("../internals/object-get-own-property-names").f, i = {
                }.toString, a = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
                t.exports.f = function(e107) {
                    return a && "[object Window]" == i.call(e107) ? (function(e) {
                        try {
                            return o(e);
                        } catch (e108) {
                            return a.slice();
                        }
                    })(e107) : o(n(e107));
                };
            },
            {
                "../internals/object-get-own-property-names": 94,
                "../internals/to-indexed-object": 131
            }
        ],
        94: [
            function(e109, t, r) {
                var n = e109("../internals/object-keys-internal"), o = e109("../internals/enum-bug-keys").concat("length", "prototype");
                r.f = Object.getOwnPropertyNames || function(e) {
                    return n(e, o);
                };
            },
            {
                "../internals/enum-bug-keys": 48,
                "../internals/object-keys-internal": 97
            }
        ],
        95: [
            function(e, t, r) {
                r.f = Object.getOwnPropertySymbols;
            },
            {
            }
        ],
        96: [
            function(e110, t, r) {
                var n = e110("../internals/has"), o = e110("../internals/to-object"), i = e110("../internals/shared-key"), a = e110("../internals/correct-prototype-getter"), s = i("IE_PROTO"), l = Object.prototype;
                t.exports = a ? Object.getPrototypeOf : function(e) {
                    return e = o(e), n(e, s) ? e[s] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? l : null;
                };
            },
            {
                "../internals/correct-prototype-getter": 34,
                "../internals/has": 59,
                "../internals/shared-key": 117,
                "../internals/to-object": 134
            }
        ],
        97: [
            function(e111, t65, r54) {
                var a = e111("../internals/has"), s = e111("../internals/to-indexed-object"), l = e111("../internals/array-includes").indexOf, u = e111("../internals/hidden-keys");
                t65.exports = function(e, t) {
                    var r, n = s(e), o = 0, i = [];
                    for(r in n)!a(u, r) && a(n, r) && i.push(r);
                    for(; t.length > o;)a(n, r = t[o++]) && (~l(i, r) || i.push(r));
                    return i;
                };
            },
            {
                "../internals/array-includes": 18,
                "../internals/has": 59,
                "../internals/hidden-keys": 60,
                "../internals/to-indexed-object": 131
            }
        ],
        98: [
            function(e112, t, r) {
                var n = e112("../internals/object-keys-internal"), o = e112("../internals/enum-bug-keys");
                t.exports = Object.keys || function(e) {
                    return n(e, o);
                };
            },
            {
                "../internals/enum-bug-keys": 48,
                "../internals/object-keys-internal": 97
            }
        ],
        99: [
            function(e113, t66, r) {
                "use strict";
                var n = {
                }.propertyIsEnumerable, o = Object.getOwnPropertyDescriptor, i = o && !n.call({
                    1: 2
                }, 1);
                r.f = i ? function(e) {
                    var t = o(this, e);
                    return !!t && t.enumerable;
                } : n;
            },
            {
            }
        ],
        100: [
            function(e114, t67, r55) {
                var o = e114("../internals/an-object"), i = e114("../internals/a-possible-prototype");
                t67.exports = Object.setPrototypeOf || ("__proto__" in {
                } ? (function() {
                    var r, n = !1, e116 = {
                    };
                    try {
                        (r = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(e116, []), n = e116 instanceof Array;
                    } catch (e115) {
                    }
                    return function(e, t) {
                        return o(e), i(t), n ? r.call(e, t) : e.__proto__ = t, e;
                    };
                })() : void 0);
            },
            {
                "../internals/a-possible-prototype": 6,
                "../internals/an-object": 10
            }
        ],
        101: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/to-string-tag-support"), o = e("../internals/classof");
                t.exports = n ? ({
                }).toString : function() {
                    return "[object " + o(this) + "]";
                };
            },
            {
                "../internals/classof": 29,
                "../internals/to-string-tag-support": 138
            }
        ],
        102: [
            function(e117, t68, r56) {
                var n = e117("../internals/get-built-in"), o = e117("../internals/object-get-own-property-names"), i = e117("../internals/object-get-own-property-symbols"), a = e117("../internals/an-object");
                t68.exports = n("Reflect", "ownKeys") || function(e) {
                    var t = o.f(a(e)), r = i.f;
                    return r ? t.concat(r(e)) : t;
                };
            },
            {
                "../internals/an-object": 10,
                "../internals/get-built-in": 55,
                "../internals/object-get-own-property-names": 94,
                "../internals/object-get-own-property-symbols": 95
            }
        ],
        103: [
            function(e, t, r) {
                var n = e("../internals/global");
                t.exports = n;
            },
            {
                "../internals/global": 58
            }
        ],
        104: [
            function(e118, t, r) {
                t.exports = function(e) {
                    try {
                        return {
                            error: !1,
                            value: e()
                        };
                    } catch (e119) {
                        return {
                            error: !0,
                            value: e119
                        };
                    }
                };
            },
            {
            }
        ],
        105: [
            function(e120, t69, r57) {
                var n = e120("../internals/an-object"), o = e120("../internals/is-object"), i = e120("../internals/new-promise-capability");
                t69.exports = function(e, t) {
                    if (n(e), o(t) && t.constructor === e) return t;
                    var r = i.f(e);
                    return (0, r.resolve)(t), r.promise;
                };
            },
            {
                "../internals/an-object": 10,
                "../internals/is-object": 73,
                "../internals/new-promise-capability": 85
            }
        ],
        106: [
            function(e121, t70, r58) {
                var o = e121("../internals/redefine");
                t70.exports = function(e, t, r) {
                    for(var n in t)o(e, n, t[n], r);
                    return e;
                };
            },
            {
                "../internals/redefine": 107
            }
        ],
        107: [
            function(e122, t71, r59) {
                var s = e122("../internals/global"), l = e122("../internals/create-non-enumerable-property"), u = e122("../internals/has"), c = e122("../internals/set-global"), n23 = e122("../internals/inspect-source"), o12 = e122("../internals/internal-state"), i6 = o12.get, d = o12.enforce, f = String(String).split("String");
                (t71.exports = function(e, t, r, n) {
                    var o = !!n && !!n.unsafe, i = !!n && !!n.enumerable, a = !!n && !!n.noTargetGet;
                    "function" == typeof r && ("string" != typeof t || u(r, "name") || l(r, "name", t), d(r).source = f.join("string" == typeof t ? t : "")), e !== s ? (o ? !a && e[t] && (i = !0) : delete e[t], i ? e[t] = r : l(e, t, r)) : i ? e[t] = r : c(t, r);
                })(Function.prototype, "toString", function() {
                    return "function" == typeof this && i6(this).source || n23(this);
                });
            },
            {
                "../internals/create-non-enumerable-property": 37,
                "../internals/global": 58,
                "../internals/has": 59,
                "../internals/inspect-source": 67,
                "../internals/internal-state": 69,
                "../internals/set-global": 114
            }
        ],
        108: [
            function(e123, t72, r60) {
                var o = e123("./classof-raw"), i = e123("./regexp-exec");
                t72.exports = function(e, t) {
                    var r = e.exec;
                    if ("function" == typeof r) {
                        var n = r.call(e, t);
                        if ("object" != typeof n) throw TypeError("RegExp exec method returned something other than an Object or null");
                        return n;
                    }
                    if ("RegExp" !== o(e)) throw TypeError("RegExp#exec called on incompatible receiver");
                    return i.call(e, t);
                };
            },
            {
                "./classof-raw": 28,
                "./regexp-exec": 109
            }
        ],
        109: [
            function(e124, t73, r61) {
                "use strict";
                var n24, o13, d = e124("./regexp-flags"), i7 = e124("./regexp-sticky-helpers"), f = RegExp.prototype.exec, h = String.prototype.replace, a5 = f, p = (n24 = /a/, o13 = /b*/g, f.call(n24, "a"), f.call(o13, "a"), 0 !== n24.lastIndex || 0 !== o13.lastIndex), y = i7.UNSUPPORTED_Y || i7.BROKEN_CARET, m = void 0 !== /()??/.exec("")[1];
                (p || m || y) && (a5 = function(e) {
                    var t, r, n, o, i = this, a = y && i.sticky, s = d.call(i), l = i.source, u = 0, c = e;
                    return a && (-1 === (s = s.replace("y", "")).indexOf("g") && (s += "g"), c = String(e).slice(i.lastIndex), 0 < i.lastIndex && (!i.multiline || i.multiline && "\n" !== e[i.lastIndex - 1]) && (l = "(?: " + l + ")", c = " " + c, u++), r = new RegExp("^(?:" + l + ")", s)), m && (r = new RegExp("^" + l + "$(?!\\s)", s)), p && (t = i.lastIndex), n = f.call(a ? r : i, c), a ? n ? (n.input = n.input.slice(u), n[0] = n[0].slice(u), n.index = i.lastIndex, i.lastIndex += n[0].length) : i.lastIndex = 0 : p && n && (i.lastIndex = i.global ? n.index + n[0].length : t), m && n && 1 < n.length && h.call(n[0], r, function() {
                        for(o = 1; o < arguments.length - 2; o++)void 0 === arguments[o] && (n[o] = void 0);
                    }), n;
                }), t73.exports = a5;
            },
            {
                "./regexp-flags": 110,
                "./regexp-sticky-helpers": 111
            }
        ],
        110: [
            function(e125, t74, r) {
                "use strict";
                var n = e125("../internals/an-object");
                t74.exports = function() {
                    var e = n(this), t = "";
                    return e.global && (t += "g"), e.ignoreCase && (t += "i"), e.multiline && (t += "m"), e.dotAll && (t += "s"), e.unicode && (t += "u"), e.sticky && (t += "y"), t;
                };
            },
            {
                "../internals/an-object": 10
            }
        ],
        111: [
            function(e126, t75, r) {
                "use strict";
                var n = e126("./fails");
                function o(e, t) {
                    return RegExp(e, t);
                }
                r.UNSUPPORTED_Y = n(function() {
                    var e = o("a", "y");
                    return e.lastIndex = 2, null != e.exec("abcd");
                }), r.BROKEN_CARET = n(function() {
                    var e = o("^r", "gy");
                    return e.lastIndex = 2, null != e.exec("str");
                });
            },
            {
                "./fails": 50
            }
        ],
        112: [
            function(e127, t, r) {
                t.exports = function(e) {
                    if (null == e) throw TypeError("Can't call method on " + e);
                    return e;
                };
            },
            {
            }
        ],
        113: [
            function(e128, t76, r) {
                t76.exports = Object.is || function(e, t) {
                    return e === t ? 0 !== e || 1 / e == 1 / t : e != e && t != t;
                };
            },
            {
            }
        ],
        114: [
            function(e, t77, r62) {
                var n = e("../internals/global"), o = e("../internals/create-non-enumerable-property");
                t77.exports = function(t, r) {
                    try {
                        o(n, t, r);
                    } catch (e) {
                        n[t] = r;
                    }
                    return r;
                };
            },
            {
                "../internals/create-non-enumerable-property": 37,
                "../internals/global": 58
            }
        ],
        115: [
            function(e129, t78, r63) {
                "use strict";
                var n = e129("../internals/get-built-in"), o = e129("../internals/object-define-property"), i = e129("../internals/well-known-symbol"), a = e129("../internals/descriptors"), s = i("species");
                t78.exports = function(e) {
                    var t = n(e), r = o.f;
                    a && t && !t[s] && r(t, s, {
                        configurable: !0,
                        get: function() {
                            return this;
                        }
                    });
                };
            },
            {
                "../internals/descriptors": 42,
                "../internals/get-built-in": 55,
                "../internals/object-define-property": 91,
                "../internals/well-known-symbol": 145
            }
        ],
        116: [
            function(e130, t79, r64) {
                var n = e130("../internals/object-define-property").f, o = e130("../internals/has"), i = e130("../internals/well-known-symbol")("toStringTag");
                t79.exports = function(e, t, r) {
                    e && !o(e = r ? e : e.prototype, i) && n(e, i, {
                        configurable: !0,
                        value: t
                    });
                };
            },
            {
                "../internals/has": 59,
                "../internals/object-define-property": 91,
                "../internals/well-known-symbol": 145
            }
        ],
        117: [
            function(e131, t, r) {
                var n = e131("../internals/shared"), o = e131("../internals/uid"), i = n("keys");
                t.exports = function(e) {
                    return i[e] || (i[e] = o(e));
                };
            },
            {
                "../internals/shared": 119,
                "../internals/uid": 142
            }
        ],
        118: [
            function(e, t, r) {
                var n = e("../internals/global"), o = e("../internals/set-global"), i = "__core-js_shared__", a = n[i] || o(i, {
                });
                t.exports = a;
            },
            {
                "../internals/global": 58,
                "../internals/set-global": 114
            }
        ],
        119: [
            function(e, t80, r) {
                var n = e("../internals/is-pure"), o = e("../internals/shared-store");
                (t80.exports = function(e, t) {
                    return o[e] || (o[e] = void 0 !== t ? t : {
                    });
                })("versions", []).push({
                    version: "3.6.5",
                    mode: n ? "pure" : "global",
                    copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
                });
            },
            {
                "../internals/is-pure": 74,
                "../internals/shared-store": 118
            }
        ],
        120: [
            function(e132, t81, r65) {
                var o = e132("../internals/an-object"), i = e132("../internals/a-function"), a = e132("../internals/well-known-symbol")("species");
                t81.exports = function(e, t) {
                    var r, n = o(e).constructor;
                    return void 0 === n || null == (r = o(n)[a]) ? t : i(r);
                };
            },
            {
                "../internals/a-function": 5,
                "../internals/an-object": 10,
                "../internals/well-known-symbol": 145
            }
        ],
        121: [
            function(e133, t, r) {
                var n = e133("../internals/fails");
                t.exports = function(t) {
                    return n(function() {
                        var e = ""[t]('"');
                        return e !== e.toLowerCase() || 3 < e.split('"').length;
                    });
                };
            },
            {
                "../internals/fails": 50
            }
        ],
        122: [
            function(e134, t82, r66) {
                function n25(s) {
                    return function(e, t) {
                        var r, n, o = String(u(e)), i = l(t), a = o.length;
                        return i < 0 || a <= i ? s ? "" : void 0 : (r = o.charCodeAt(i)) < 55296 || 56319 < r || i + 1 === a || (n = o.charCodeAt(i + 1)) < 56320 || 57343 < n ? s ? o.charAt(i) : r : s ? o.slice(i, i + 2) : n - 56320 + (r - 55296 << 10) + 65536;
                    };
                }
                var l = e134("../internals/to-integer"), u = e134("../internals/require-object-coercible");
                t82.exports = {
                    codeAt: n25(!1),
                    charAt: n25(!0)
                };
            },
            {
                "../internals/require-object-coercible": 112,
                "../internals/to-integer": 132
            }
        ],
        123: [
            function(e135, t83, r67) {
                "use strict";
                function g(e) {
                    return e + 22 + 75 * (e < 26);
                }
                function v(e, t, r) {
                    var n = 0;
                    for(e = r ? x(e / 700) : e >> 1, e += x(e / t); 455 < e; n += 36)e = x(e / 35);
                    return x(n + 36 * e / (e + 38));
                }
                function i8(e136) {
                    var t84, r68, n26 = [], o14 = (e136 = function(e) {
                        for(var t = [], r = 0, n = e.length; r < n;){
                            var o = e.charCodeAt(r++);
                            if (55296 <= o && o <= 56319 && r < n) {
                                var i = e.charCodeAt(r++);
                                56320 == (64512 & i) ? t.push(((1023 & o) << 10) + (1023 & i) + 65536) : (t.push(o), r--);
                            } else t.push(o);
                        }
                        return t;
                    }(e136)).length, i9 = 128, a = 0, s = 72;
                    for(t84 = 0; t84 < e136.length; t84++)(r68 = e136[t84]) < 128 && n26.push(w(r68));
                    var l = n26.length, u = l;
                    for(l && n26.push("-"); u < o14;){
                        var c = b;
                        for(t84 = 0; t84 < e136.length; t84++)i9 <= (r68 = e136[t84]) && r68 < c && (c = r68);
                        var d = u + 1;
                        if (c - i9 > x((b - a) / d)) throw RangeError(_);
                        for(a += (c - i9) * d, i9 = c, t84 = 0; t84 < e136.length; t84++){
                            if ((r68 = e136[t84]) < i9 && ++a > b) throw RangeError(_);
                            if (r68 == i9) {
                                for(var f = a, h = 36;; h += 36){
                                    var p = h <= s ? 1 : s + 26 <= h ? 26 : h - s;
                                    if (f < p) break;
                                    var y = f - p, m = 36 - p;
                                    n26.push(w(g(p + y % m))), f = x(y / m);
                                }
                                n26.push(w(g(f))), s = v(a, d, u == l), a = 0, ++u;
                            }
                        }
                        ++a, ++i9;
                    }
                    return n26.join("");
                }
                var b = 2147483647, a6 = /[^\0-\u007E]/, s4 = /[.\u3002\uFF0E\uFF61]/g, _ = "Overflow: input needs wider integers to process", x = Math.floor, w = String.fromCharCode;
                t83.exports = function(e) {
                    var t, r, n = [], o = e.toLowerCase().replace(s4, ".").split(".");
                    for(t = 0; t < o.length; t++)r = o[t], n.push(a6.test(r) ? "xn--" + i8(r) : r);
                    return n.join(".");
                };
            },
            {
            }
        ],
        124: [
            function(e137, t85, r69) {
                "use strict";
                var o = e137("../internals/to-integer"), i = e137("../internals/require-object-coercible");
                t85.exports = "".repeat || function(e) {
                    var t = String(i(this)), r = "", n = o(e);
                    if (n < 0 || n == 1 / 0) throw RangeError("Wrong number of repetitions");
                    for(; 0 < n; (n >>>= 1) && (t += t))1 & n && (r += t);
                    return r;
                };
            },
            {
                "../internals/require-object-coercible": 112,
                "../internals/to-integer": 132
            }
        ],
        125: [
            function(e138, t, r) {
                var n = e138("../internals/fails"), o = e138("../internals/whitespaces");
                t.exports = function(e) {
                    return n(function() {
                        return !!o[e]() || "​᠎" != "​᠎"[e]() || o[e].name !== e;
                    });
                };
            },
            {
                "../internals/fails": 50,
                "../internals/whitespaces": 146
            }
        ],
        126: [
            function(e139, t86, r70) {
                function n(r) {
                    return function(e) {
                        var t = String(o(e));
                        return 1 & r && (t = t.replace(a, "")), 2 & r && (t = t.replace(s, "")), t;
                    };
                }
                var o = e139("../internals/require-object-coercible"), i = "[" + e139("../internals/whitespaces") + "]", a = RegExp("^" + i + i + "*"), s = RegExp(i + i + "*$");
                t86.exports = {
                    start: n(1),
                    end: n(2),
                    trim: n(3)
                };
            },
            {
                "../internals/require-object-coercible": 112,
                "../internals/whitespaces": 146
            }
        ],
        127: [
            function(e140, t87, r71) {
                function n(e) {
                    if (j.hasOwnProperty(e)) {
                        var t = j[e];
                        delete j[e], t();
                    }
                }
                function o(e) {
                    return function() {
                        n(e);
                    };
                }
                function i(e) {
                    n(e.data);
                }
                function a(e) {
                    c.postMessage(e + "", g.protocol + "//" + g.host);
                }
                var s, l, u, c = e140("../internals/global"), d = e140("../internals/fails"), f = e140("../internals/classof-raw"), h = e140("../internals/function-bind-context"), p = e140("../internals/html"), y = e140("../internals/document-create-element"), m = e140("../internals/engine-is-ios"), g = c.location, v = c.setImmediate, b = c.clearImmediate, _ = c.process, x = c.MessageChannel, w = c.Dispatch, S = 0, j = {
                }, M = "onreadystatechange";
                v && b || (v = function(e) {
                    for(var t = [], r = 1; r < arguments.length;)t.push(arguments[r++]);
                    return j[++S] = function() {
                        ("function" == typeof e ? e : Function(e)).apply(void 0, t);
                    }, s(S), S;
                }, b = function(e) {
                    delete j[e];
                }, "process" == f(_) ? s = function(e) {
                    _.nextTick(o(e));
                } : w && w.now ? s = function(e) {
                    w.now(o(e));
                } : x && !m ? (u = (l = new x).port2, l.port1.onmessage = i, s = h(u.postMessage, u, 1)) : !c.addEventListener || "function" != typeof postMessage || c.importScripts || d(a) || "file:" === g.protocol ? s = M in y("script") ? function(e) {
                    p.appendChild(y("script"))[M] = function() {
                        p.removeChild(this), n(e);
                    };
                } : function(e) {
                    setTimeout(o(e), 0);
                } : (s = a, c.addEventListener("message", i, !1))), t87.exports = {
                    set: v,
                    clear: b
                };
            },
            {
                "../internals/classof-raw": 28,
                "../internals/document-create-element": 43,
                "../internals/engine-is-ios": 45,
                "../internals/fails": 50,
                "../internals/function-bind-context": 53,
                "../internals/global": 58,
                "../internals/html": 62
            }
        ],
        128: [
            function(e141, t, r) {
                var n = e141("../internals/classof-raw");
                t.exports = function(e) {
                    if ("number" != typeof e && "Number" != n(e)) throw TypeError("Incorrect invocation");
                    return +e;
                };
            },
            {
                "../internals/classof-raw": 28
            }
        ],
        129: [
            function(e142, t88, r72) {
                var n = e142("../internals/to-integer"), o = Math.max, i = Math.min;
                t88.exports = function(e, t) {
                    var r = n(e);
                    return r < 0 ? o(r + t, 0) : i(r, t);
                };
            },
            {
                "../internals/to-integer": 132
            }
        ],
        130: [
            function(e143, t89, r73) {
                var n = e143("../internals/to-integer"), o = e143("../internals/to-length");
                t89.exports = function(e) {
                    if (void 0 === e) return 0;
                    var t = n(e), r = o(t);
                    if (t !== r) throw RangeError("Wrong length or index");
                    return r;
                };
            },
            {
                "../internals/to-integer": 132,
                "../internals/to-length": 133
            }
        ],
        131: [
            function(e144, t, r) {
                var n = e144("../internals/indexed-object"), o = e144("../internals/require-object-coercible");
                t.exports = function(e) {
                    return n(o(e));
                };
            },
            {
                "../internals/indexed-object": 65,
                "../internals/require-object-coercible": 112
            }
        ],
        132: [
            function(e145, t, r) {
                var n = Math.ceil, o = Math.floor;
                t.exports = function(e) {
                    return isNaN(e = +e) ? 0 : (0 < e ? o : n)(e);
                };
            },
            {
            }
        ],
        133: [
            function(e146, t, r) {
                var n = e146("../internals/to-integer"), o = Math.min;
                t.exports = function(e) {
                    return 0 < e ? o(n(e), 9007199254740991) : 0;
                };
            },
            {
                "../internals/to-integer": 132
            }
        ],
        134: [
            function(e147, t, r) {
                var n = e147("../internals/require-object-coercible");
                t.exports = function(e) {
                    return Object(n(e));
                };
            },
            {
                "../internals/require-object-coercible": 112
            }
        ],
        135: [
            function(e148, t90, r74) {
                var n = e148("../internals/to-positive-integer");
                t90.exports = function(e, t) {
                    var r = n(e);
                    if (r % t) throw RangeError("Wrong offset");
                    return r;
                };
            },
            {
                "../internals/to-positive-integer": 136
            }
        ],
        136: [
            function(e149, t91, r) {
                var n = e149("../internals/to-integer");
                t91.exports = function(e) {
                    var t = n(e);
                    if (t < 0) throw RangeError("The argument can't be less than 0");
                    return t;
                };
            },
            {
                "../internals/to-integer": 132
            }
        ],
        137: [
            function(e150, t92, r75) {
                var o = e150("../internals/is-object");
                t92.exports = function(e, t) {
                    if (!o(e)) return e;
                    var r, n;
                    if (t && "function" == typeof (r = e.toString) && !o(n = r.call(e))) return n;
                    if ("function" == typeof (r = e.valueOf) && !o(n = r.call(e))) return n;
                    if (!t && "function" == typeof (r = e.toString) && !o(n = r.call(e))) return n;
                    throw TypeError("Can't convert object to primitive value");
                };
            },
            {
                "../internals/is-object": 73
            }
        ],
        138: [
            function(e, t, r) {
                var n = {
                };
                n[e("../internals/well-known-symbol")("toStringTag")] = "z", t.exports = "[object z]" === String(n);
            },
            {
                "../internals/well-known-symbol": 145
            }
        ],
        139: [
            function(e151, t93, r76) {
                "use strict";
                function p(e, t) {
                    for(var r = 0, n = t.length, o = new (X(e))(n); r < n;)o[r] = t[r++];
                    return o;
                }
                function n27(e, t) {
                    U(e, t, {
                        get: function() {
                            return D(this)[t];
                        }
                    });
                }
                function y(e) {
                    var t;
                    return e instanceof G || "ArrayBuffer" == (t = S(e)) || "SharedArrayBuffer" == t;
                }
                function o15(e, t) {
                    return Y(e) && "symbol" != typeof t && t in e && String(+t) == String(t);
                }
                function i10(e, t) {
                    return o15(e, t = h1(t, !0)) ? f2(2, e[t]) : N(e, t);
                }
                function a7(e, t, r) {
                    return !(o15(e, t = h1(t, !0)) && j(r) && w(r, "value")) || w(r, "get") || w(r, "set") || r.configurable || w(r, "writable") && !r.writable || w(r, "enumerable") && !r.enumerable ? U(e, t, r) : (e[t] = r.value, e);
                }
                var l4 = e151("../internals/export"), u2 = e151("../internals/global"), s5 = e151("../internals/descriptors"), m = e151("../internals/typed-array-constructors-require-wrappers"), c3 = e151("../internals/array-buffer-view-core"), d3 = e151("../internals/array-buffer"), g = e151("../internals/an-instance"), f2 = e151("../internals/create-property-descriptor"), v = e151("../internals/create-non-enumerable-property"), b = e151("../internals/to-length"), _ = e151("../internals/to-index"), x = e151("../internals/to-offset"), h1 = e151("../internals/to-primitive"), w = e151("../internals/has"), S = e151("../internals/classof"), j = e151("../internals/is-object"), M = e151("../internals/object-create"), E = e151("../internals/object-set-prototype-of"), T = e151("../internals/object-get-own-property-names").f, O = e151("../internals/typed-array-from"), C = e151("../internals/array-iteration").forEach, L = e151("../internals/set-species"), P = e151("../internals/object-define-property"), k = e151("../internals/object-get-own-property-descriptor"), A = e151("../internals/internal-state"), R = e151("../internals/inherit-if-required"), D = A.get, I = A.set, U = P.f, N = k.f, F = Math.round, B = u2.RangeError, G = d3.ArrayBuffer, V = d3.DataView, z = c3.NATIVE_ARRAY_BUFFER_VIEWS, H = c3.TYPED_ARRAY_TAG, q = c3.TypedArray, W = c3.TypedArrayPrototype, X = c3.aTypedArrayConstructor, Y = c3.isTypedArray, Z = "BYTES_PER_ELEMENT", Q = "Wrong length";
                s5 ? (z || (k.f = i10, P.f = a7, n27(W, "buffer"), n27(W, "byteOffset"), n27(W, "byteLength"), n27(W, "length")), l4({
                    target: "Object",
                    stat: !0,
                    forced: !z
                }, {
                    getOwnPropertyDescriptor: i10,
                    defineProperty: a7
                }), t93.exports = function(e152, t94, i11) {
                    function c(e153, o) {
                        U(e153, o, {
                            get: function() {
                                var e, t;
                                return e = o, (t = D(this)).view[r77](e * d + t.byteOffset, !0);
                            },
                            set: function(e) {
                                var t, r, n;
                                return t = o, r = e, n = D(this), i11 && (r = (r = F(r)) < 0 ? 0 : 255 < r ? 255 : 255 & r), void n.view[a8](t * d + n.byteOffset, r, !0);
                            },
                            enumerable: !0
                        });
                    }
                    var d = e152.match(/\d+$/)[0] / 8, f = e152 + (i11 ? "Clamped" : "") + "Array", r77 = "get" + e152, a8 = "set" + e152, o16 = u2[f], h = o16, n28 = h && h.prototype, s6 = {
                    };
                    z ? m && (h = t94(function(e, t, r, n) {
                        return g(e, h, f), R(j(t) ? y(t) ? void 0 !== n ? new o16(t, x(r, d), n) : void 0 !== r ? new o16(t, x(r, d)) : new o16(t) : Y(t) ? p(h, t) : O.call(h, t) : new o16(_(t)), e, h);
                    }), E && E(h, q), C(T(o16), function(e) {
                        e in h || v(h, e, o16[e]);
                    }), h.prototype = n28) : (h = t94(function(e, t, r, n) {
                        g(e, h, f);
                        var o, i, a, s = 0, l = 0;
                        if (j(t)) {
                            if (!y(t)) return Y(t) ? p(h, t) : O.call(h, t);
                            o = t, l = x(r, d);
                            var u = t.byteLength;
                            if (void 0 === n) {
                                if (u % d) throw B(Q);
                                if ((i = u - l) < 0) throw B(Q);
                            } else if (u < (i = b(n) * d) + l) throw B(Q);
                            a = i / d;
                        } else a = _(t), o = new G(i = a * d);
                        for(I(e, {
                            buffer: o,
                            byteOffset: l,
                            byteLength: i,
                            length: a,
                            view: new V(o)
                        }); s < a;)c(e, s++);
                    }), E && E(h, q), n28 = h.prototype = M(W)), n28.constructor !== h && v(n28, "constructor", h), H && v(n28, H, f), s6[f] = h, l4({
                        global: !0,
                        forced: h != o16,
                        sham: !z
                    }, s6), Z in h || v(h, Z, d), Z in n28 || v(n28, Z, d), L(f);
                }) : t93.exports = function() {
                };
            },
            {
                "../internals/an-instance": 9,
                "../internals/array-buffer": 13,
                "../internals/array-buffer-view-core": 12,
                "../internals/array-iteration": 19,
                "../internals/classof": 29,
                "../internals/create-non-enumerable-property": 37,
                "../internals/create-property-descriptor": 38,
                "../internals/descriptors": 42,
                "../internals/export": 49,
                "../internals/global": 58,
                "../internals/has": 59,
                "../internals/inherit-if-required": 66,
                "../internals/internal-state": 69,
                "../internals/is-object": 73,
                "../internals/object-create": 89,
                "../internals/object-define-property": 91,
                "../internals/object-get-own-property-descriptor": 92,
                "../internals/object-get-own-property-names": 94,
                "../internals/object-set-prototype-of": 100,
                "../internals/set-species": 115,
                "../internals/to-index": 130,
                "../internals/to-length": 133,
                "../internals/to-offset": 135,
                "../internals/to-primitive": 137,
                "../internals/typed-array-constructors-require-wrappers": 140,
                "../internals/typed-array-from": 141
            }
        ],
        140: [
            function(e154, t, r) {
                var n = e154("../internals/global"), o = e154("../internals/fails"), i = e154("../internals/check-correctness-of-iteration"), a = e154("../internals/array-buffer-view-core").NATIVE_ARRAY_BUFFER_VIEWS, s = n.ArrayBuffer, l = n.Int8Array;
                t.exports = !a || !o(function() {
                    l(1);
                }) || !o(function() {
                    new l(-1);
                }) || !i(function(e) {
                    new l, new l(null), new l(1.5), new l(e);
                }, !0) || o(function() {
                    return 1 !== new l(new s(2), 1, void 0).length;
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/check-correctness-of-iteration": 27,
                "../internals/fails": 50,
                "../internals/global": 58
            }
        ],
        141: [
            function(e155, t95, r78) {
                var p = e155("../internals/to-object"), y = e155("../internals/to-length"), m = e155("../internals/get-iterator-method"), g = e155("../internals/is-array-iterator-method"), v = e155("../internals/function-bind-context"), b = e155("../internals/array-buffer-view-core").aTypedArrayConstructor;
                t95.exports = function(e, t, r) {
                    var n, o, i, a, s, l, u = p(e), c = arguments.length, d = 1 < c ? t : void 0, f = void 0 !== d, h = m(u);
                    if (null != h && !g(h)) for(l = (s = h.call(u)).next, u = []; !(a = l.call(s)).done;)u.push(a.value);
                    for(f && 2 < c && (d = v(d, r, 2)), o = y(u.length), i = new (b(this))(o), n = 0; n < o; n++)i[n] = f ? d(u[n], n) : u[n];
                    return i;
                };
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/function-bind-context": 53,
                "../internals/get-iterator-method": 56,
                "../internals/is-array-iterator-method": 70,
                "../internals/to-length": 133,
                "../internals/to-object": 134
            }
        ],
        142: [
            function(e156, t, r) {
                var n = 0, o = Math.random();
                t.exports = function(e) {
                    return "Symbol(" + String(void 0 === e ? "" : e) + ")_" + (++n + o).toString(36);
                };
            },
            {
            }
        ],
        143: [
            function(e, t, r) {
                var n = e("../internals/native-symbol");
                t.exports = n && !Symbol.sham && "symbol" == typeof Symbol.iterator;
            },
            {
                "../internals/native-symbol": 82
            }
        ],
        144: [
            function(e, t, r) {
                var n = e("../internals/well-known-symbol");
                r.f = n;
            },
            {
                "../internals/well-known-symbol": 145
            }
        ],
        145: [
            function(e157, t, r) {
                var n = e157("../internals/global"), o = e157("../internals/shared"), i = e157("../internals/has"), a = e157("../internals/uid"), s = e157("../internals/native-symbol"), l = e157("../internals/use-symbol-as-uid"), u = o("wks"), c = n.Symbol, d = l ? c : c && c.withoutSetter || a;
                t.exports = function(e) {
                    return i(u, e) || (s && i(c, e) ? u[e] = c[e] : u[e] = d("Symbol." + e)), u[e];
                };
            },
            {
                "../internals/global": 58,
                "../internals/has": 59,
                "../internals/native-symbol": 82,
                "../internals/shared": 119,
                "../internals/uid": 142,
                "../internals/use-symbol-as-uid": 143
            }
        ],
        146: [
            function(e, t, r) {
                t.exports = "\t\n\v\f\r                　\u2028\u2029\ufeff";
            },
            {
            }
        ],
        147: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/export"), o = e("../internals/global"), i = e("../internals/array-buffer"), a = e("../internals/set-species"), s = "ArrayBuffer", l = i[s];
                n({
                    global: !0,
                    forced: o[s] !== l
                }, {
                    ArrayBuffer: l
                }), a(s);
            },
            {
                "../internals/array-buffer": 13,
                "../internals/export": 49,
                "../internals/global": 58,
                "../internals/set-species": 115
            }
        ],
        148: [
            function(e158, t96, r79) {
                "use strict";
                function u(e) {
                    if (!a9(e)) return !1;
                    var t = e[y];
                    return void 0 !== t ? !!t : i12(e);
                }
                var n29 = e158("../internals/export"), o17 = e158("../internals/fails"), i12 = e158("../internals/is-array"), a9 = e158("../internals/is-object"), c = e158("../internals/to-object"), d = e158("../internals/to-length"), f = e158("../internals/create-property"), h = e158("../internals/array-species-create"), s7 = e158("../internals/array-method-has-species-support"), l5 = e158("../internals/well-known-symbol"), p = e158("../internals/engine-v8-version"), y = l5("isConcatSpreadable"), m = 9007199254740991, g = "Maximum allowed index exceeded", v = 51 <= p || !o17(function() {
                    var e = [];
                    return e[y] = !1, e.concat()[0] !== e;
                }), b = s7("concat");
                n29({
                    target: "Array",
                    proto: !0,
                    forced: !v || !b
                }, {
                    concat: function(e) {
                        var t, r, n, o, i, a = c(this), s = h(a, 0), l = 0;
                        for(t = -1, n = arguments.length; t < n; t++)if (u(i = -1 === t ? a : arguments[t])) {
                            if (o = d(i.length), m < l + o) throw TypeError(g);
                            for(r = 0; r < o; r++, l++)r in i && f(s, l, i[r]);
                        } else {
                            if (m <= l) throw TypeError(g);
                            f(s, l++, i);
                        }
                        return s.length = l, s;
                    }
                });
            },
            {
                "../internals/array-method-has-species-support": 21,
                "../internals/array-species-create": 25,
                "../internals/create-property": 39,
                "../internals/engine-v8-version": 47,
                "../internals/export": 49,
                "../internals/fails": 50,
                "../internals/is-array": 71,
                "../internals/is-object": 73,
                "../internals/to-length": 133,
                "../internals/to-object": 134,
                "../internals/well-known-symbol": 145
            }
        ],
        149: [
            function(e159, t97, r) {
                "use strict";
                var n = e159("../internals/export"), o = e159("../internals/array-iteration").every, i = e159("../internals/array-method-is-strict"), a = e159("../internals/array-method-uses-to-length"), s = i("every"), l = a("every");
                n({
                    target: "Array",
                    proto: !0,
                    forced: !s || !l
                }, {
                    every: function(e, t) {
                        return o(this, e, 1 < arguments.length ? t : void 0);
                    }
                });
            },
            {
                "../internals/array-iteration": 19,
                "../internals/array-method-is-strict": 22,
                "../internals/array-method-uses-to-length": 23,
                "../internals/export": 49
            }
        ],
        150: [
            function(e, t, r) {
                var n = e("../internals/export"), o = e("../internals/array-fill"), i = e("../internals/add-to-unscopables");
                n({
                    target: "Array",
                    proto: !0
                }, {
                    fill: o
                }), i("fill");
            },
            {
                "../internals/add-to-unscopables": 7,
                "../internals/array-fill": 15,
                "../internals/export": 49
            }
        ],
        151: [
            function(e160, t98, r) {
                "use strict";
                var n = e160("../internals/export"), o = e160("../internals/array-iteration").filter, i = e160("../internals/array-method-has-species-support"), a = e160("../internals/array-method-uses-to-length"), s = i("filter"), l = a("filter");
                n({
                    target: "Array",
                    proto: !0,
                    forced: !s || !l
                }, {
                    filter: function(e, t) {
                        return o(this, e, 1 < arguments.length ? t : void 0);
                    }
                });
            },
            {
                "../internals/array-iteration": 19,
                "../internals/array-method-has-species-support": 21,
                "../internals/array-method-uses-to-length": 23,
                "../internals/export": 49
            }
        ],
        152: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/export"), o = e("../internals/array-for-each");
                n({
                    target: "Array",
                    proto: !0,
                    forced: [].forEach != o
                }, {
                    forEach: o
                });
            },
            {
                "../internals/array-for-each": 16,
                "../internals/export": 49
            }
        ],
        153: [
            function(e161, t, r) {
                var n = e161("../internals/export"), o = e161("../internals/array-from");
                n({
                    target: "Array",
                    stat: !0,
                    forced: !e161("../internals/check-correctness-of-iteration")(function(e) {
                        Array.from(e);
                    })
                }, {
                    from: o
                });
            },
            {
                "../internals/array-from": 17,
                "../internals/check-correctness-of-iteration": 27,
                "../internals/export": 49
            }
        ],
        154: [
            function(e162, t99, r) {
                "use strict";
                var n = e162("../internals/export"), o = e162("../internals/array-includes").includes, i = e162("../internals/add-to-unscopables");
                n({
                    target: "Array",
                    proto: !0,
                    forced: !e162("../internals/array-method-uses-to-length")("indexOf", {
                        ACCESSORS: !0,
                        1: 0
                    })
                }, {
                    includes: function(e, t) {
                        return o(this, e, 1 < arguments.length ? t : void 0);
                    }
                }), i("includes");
            },
            {
                "../internals/add-to-unscopables": 7,
                "../internals/array-includes": 18,
                "../internals/array-method-uses-to-length": 23,
                "../internals/export": 49
            }
        ],
        155: [
            function(e163, t100, r) {
                "use strict";
                var n = e163("../internals/export"), o = e163("../internals/array-includes").indexOf, i = e163("../internals/array-method-is-strict"), a = e163("../internals/array-method-uses-to-length"), s = [].indexOf, l = !!s && 1 / [
                    1
                ].indexOf(1, -0) < 0, u = i("indexOf"), c = a("indexOf", {
                    ACCESSORS: !0,
                    1: 0
                });
                n({
                    target: "Array",
                    proto: !0,
                    forced: l || !u || !c
                }, {
                    indexOf: function(e, t) {
                        return l ? s.apply(this, arguments) || 0 : o(this, e, 1 < arguments.length ? t : void 0);
                    }
                });
            },
            {
                "../internals/array-includes": 18,
                "../internals/array-method-is-strict": 22,
                "../internals/array-method-uses-to-length": 23,
                "../internals/export": 49
            }
        ],
        156: [
            function(e164, t101, r80) {
                "use strict";
                var n30 = e164("../internals/to-indexed-object"), o = e164("../internals/add-to-unscopables"), i = e164("../internals/iterators"), a = e164("../internals/internal-state"), s = e164("../internals/define-iterator"), l = "Array Iterator", u = a.set, c = a.getterFor(l);
                t101.exports = s(Array, "Array", function(e, t) {
                    u(this, {
                        type: l,
                        target: n30(e),
                        index: 0,
                        kind: t
                    });
                }, function() {
                    var e = c(this), t = e.target, r = e.kind, n = e.index++;
                    return !t || n >= t.length ? {
                        value: e.target = void 0,
                        done: !0
                    } : "keys" == r ? {
                        value: n,
                        done: !1
                    } : "values" == r ? {
                        value: t[n],
                        done: !1
                    } : {
                        value: [
                            n,
                            t[n]
                        ],
                        done: !1
                    };
                }, "values"), i.Arguments = i.Array, o("keys"), o("values"), o("entries");
            },
            {
                "../internals/add-to-unscopables": 7,
                "../internals/define-iterator": 40,
                "../internals/internal-state": 69,
                "../internals/iterators": 78,
                "../internals/to-indexed-object": 131
            }
        ],
        157: [
            function(e165, t, r) {
                "use strict";
                var n = e165("../internals/export"), o = e165("../internals/indexed-object"), i = e165("../internals/to-indexed-object"), a = e165("../internals/array-method-is-strict"), s = [].join, l = o != Object, u = a("join", ",");
                n({
                    target: "Array",
                    proto: !0,
                    forced: l || !u
                }, {
                    join: function(e) {
                        return s.call(i(this), void 0 === e ? "," : e);
                    }
                });
            },
            {
                "../internals/array-method-is-strict": 22,
                "../internals/export": 49,
                "../internals/indexed-object": 65,
                "../internals/to-indexed-object": 131
            }
        ],
        158: [
            function(e, t, r) {
                var n = e("../internals/export"), o = e("../internals/array-last-index-of");
                n({
                    target: "Array",
                    proto: !0,
                    forced: o !== [].lastIndexOf
                }, {
                    lastIndexOf: o
                });
            },
            {
                "../internals/array-last-index-of": 20,
                "../internals/export": 49
            }
        ],
        159: [
            function(e166, t102, r) {
                "use strict";
                var n = e166("../internals/export"), o = e166("../internals/array-iteration").map, i = e166("../internals/array-method-has-species-support"), a = e166("../internals/array-method-uses-to-length"), s = i("map"), l = a("map");
                n({
                    target: "Array",
                    proto: !0,
                    forced: !s || !l
                }, {
                    map: function(e, t) {
                        return o(this, e, 1 < arguments.length ? t : void 0);
                    }
                });
            },
            {
                "../internals/array-iteration": 19,
                "../internals/array-method-has-species-support": 21,
                "../internals/array-method-uses-to-length": 23,
                "../internals/export": 49
            }
        ],
        160: [
            function(e167, t103, r81) {
                "use strict";
                var n31 = e167("../internals/export"), u = e167("../internals/is-object"), c = e167("../internals/is-array"), d = e167("../internals/to-absolute-index"), f = e167("../internals/to-length"), h = e167("../internals/to-indexed-object"), p = e167("../internals/create-property"), o18 = e167("../internals/well-known-symbol"), i13 = e167("../internals/array-method-has-species-support"), a10 = e167("../internals/array-method-uses-to-length"), s8 = i13("slice"), l6 = a10("slice", {
                    ACCESSORS: !0,
                    0: 0,
                    1: 2
                }), y = o18("species"), m = [].slice, g = Math.max;
                n31({
                    target: "Array",
                    proto: !0,
                    forced: !s8 || !l6
                }, {
                    slice: function(e, t) {
                        var r, n, o, i = h(this), a = f(i.length), s = d(e, a), l = d(void 0 === t ? a : t, a);
                        if (c(i) && ("function" != typeof (r = i.constructor) || r !== Array && !c(r.prototype) ? u(r) && null === (r = r[y]) && (r = void 0) : r = void 0, r === Array || void 0 === r)) return m.call(i, s, l);
                        for(n = new (void 0 === r ? Array : r)(g(l - s, 0)), o = 0; s < l; s++, o++)s in i && p(n, o, i[s]);
                        return n.length = o, n;
                    }
                });
            },
            {
                "../internals/array-method-has-species-support": 21,
                "../internals/array-method-uses-to-length": 23,
                "../internals/create-property": 39,
                "../internals/export": 49,
                "../internals/is-array": 71,
                "../internals/is-object": 73,
                "../internals/to-absolute-index": 129,
                "../internals/to-indexed-object": 131,
                "../internals/to-length": 133,
                "../internals/well-known-symbol": 145
            }
        ],
        161: [
            function(e168, t104, r) {
                "use strict";
                var n = e168("../internals/export"), o = e168("../internals/array-iteration").some, i = e168("../internals/array-method-is-strict"), a = e168("../internals/array-method-uses-to-length"), s = i("some"), l = a("some");
                n({
                    target: "Array",
                    proto: !0,
                    forced: !s || !l
                }, {
                    some: function(e, t) {
                        return o(this, e, 1 < arguments.length ? t : void 0);
                    }
                });
            },
            {
                "../internals/array-iteration": 19,
                "../internals/array-method-is-strict": 22,
                "../internals/array-method-uses-to-length": 23,
                "../internals/export": 49
            }
        ],
        162: [
            function(e169, t105, r82) {
                "use strict";
                var n32 = e169("../internals/export"), f = e169("../internals/to-absolute-index"), h = e169("../internals/to-integer"), p = e169("../internals/to-length"), y = e169("../internals/to-object"), m = e169("../internals/array-species-create"), g = e169("../internals/create-property"), o19 = e169("../internals/array-method-has-species-support"), i14 = e169("../internals/array-method-uses-to-length"), a11 = o19("splice"), s9 = i14("splice", {
                    ACCESSORS: !0,
                    0: 0,
                    1: 2
                }), v = Math.max, b = Math.min;
                n32({
                    target: "Array",
                    proto: !0,
                    forced: !a11 || !s9
                }, {
                    splice: function(e, t) {
                        var r, n, o, i, a, s, l = y(this), u = p(l.length), c = f(e, u), d = arguments.length;
                        if (0 === d ? r = n = 0 : n = 1 === d ? (r = 0, u - c) : (r = d - 2, b(v(h(t), 0), u - c)), 9007199254740991 < u + r - n) throw TypeError("Maximum allowed length exceeded");
                        for(o = m(l, n), i = 0; i < n; i++)(a = c + i) in l && g(o, i, l[a]);
                        if (r < (o.length = n)) {
                            for(i = c; i < u - n; i++)s = i + r, (a = i + n) in l ? l[s] = l[a] : delete l[s];
                            for(i = u; u - n + r < i; i--)delete l[i - 1];
                        } else if (n < r) for(i = u - n; c < i; i--)s = i + r - 1, (a = i + n - 1) in l ? l[s] = l[a] : delete l[s];
                        for(i = 0; i < r; i++)l[i + c] = arguments[i + 2];
                        return l.length = u - n + r, o;
                    }
                });
            },
            {
                "../internals/array-method-has-species-support": 21,
                "../internals/array-method-uses-to-length": 23,
                "../internals/array-species-create": 25,
                "../internals/create-property": 39,
                "../internals/export": 49,
                "../internals/to-absolute-index": 129,
                "../internals/to-integer": 132,
                "../internals/to-length": 133,
                "../internals/to-object": 134
            }
        ],
        163: [
            function(e, t, r) {
                var n = e("../internals/descriptors"), o = e("../internals/object-define-property").f, i = Function.prototype, a = i.toString, s = /^\s*function ([^ (]*)/;
                !n || "name" in i || o(i, "name", {
                    configurable: !0,
                    get: function() {
                        try {
                            return a.call(this).match(s)[1];
                        } catch (e) {
                            return "";
                        }
                    }
                });
            },
            {
                "../internals/descriptors": 42,
                "../internals/object-define-property": 91
            }
        ],
        164: [
            function(e170, t106, r) {
                "use strict";
                var n = e170("../internals/collection"), o = e170("../internals/collection-strong");
                t106.exports = n("Map", function(t) {
                    return function(e) {
                        return t(this, arguments.length ? e : void 0);
                    };
                }, o);
            },
            {
                "../internals/collection": 31,
                "../internals/collection-strong": 30
            }
        ],
        165: [
            function(e, t, r83) {
                var n33 = e("../internals/export"), o20 = Math.hypot, l = Math.abs, u = Math.sqrt;
                n33({
                    target: "Math",
                    stat: !0,
                    forced: !!o20 && o20(1 / 0, NaN) !== 1 / 0
                }, {
                    hypot: function(e, t) {
                        for(var r, n, o = 0, i = 0, a = arguments.length, s = 0; i < a;)s < (r = l(arguments[i++])) ? (o = o * (n = s / r) * n + 1, s = r) : o += 0 < r ? (n = r / s) * n : r;
                        return s === 1 / 0 ? 1 / 0 : s * u(o);
                    }
                });
            },
            {
                "../internals/export": 49
            }
        ],
        166: [
            function(e, t, r) {
                e("../internals/export")({
                    target: "Math",
                    stat: !0
                }, {
                    sign: e("../internals/math-sign")
                });
            },
            {
                "../internals/export": 49,
                "../internals/math-sign": 79
            }
        ],
        167: [
            function(e171, t107, r84) {
                "use strict";
                function n34(e) {
                    var t, r, n, o, i, a, s, l, u = d(e, !1);
                    if ("string" == typeof u && 2 < u.length) {
                        if (43 === (t = (u = g(u)).charCodeAt(0)) || 45 === t) {
                            if (88 === (r = u.charCodeAt(2)) || 120 === r) return NaN;
                        } else if (48 === t) {
                            switch(u.charCodeAt(1)){
                                case 66:
                                case 98:
                                    n = 2, o = 49;
                                    break;
                                case 79:
                                case 111:
                                    n = 8, o = 55;
                                    break;
                                default:
                                    return +u;
                            }
                            for(a = (i = u.slice(2)).length, s = 0; s < a; s++)if ((l = i.charCodeAt(s)) < 48 || o < l) return NaN;
                            return parseInt(i, n);
                        }
                    }
                    return +u;
                }
                var o21 = e171("../internals/descriptors"), i15 = e171("../internals/global"), a12 = e171("../internals/is-forced"), s10 = e171("../internals/redefine"), l7 = e171("../internals/has"), u3 = e171("../internals/classof-raw"), c = e171("../internals/inherit-if-required"), d = e171("../internals/to-primitive"), f = e171("../internals/fails"), h = e171("../internals/object-create"), p = e171("../internals/object-get-own-property-names").f, y = e171("../internals/object-get-own-property-descriptor").f, m = e171("../internals/object-define-property").f, g = e171("../internals/string-trim").trim, v = "Number", b = i15[v], _ = b.prototype, x = u3(h(_)) == v;
                if (a12(v, !b(" 0o1") || !b("0b1") || b("+0x1"))) {
                    for(var w, S = function(e) {
                        var t = arguments.length < 1 ? 0 : e, r = this;
                        return r instanceof S && (x ? f(function() {
                            _.valueOf.call(r);
                        }) : u3(r) != v) ? c(new b(n34(t)), r, S) : n34(t);
                    }, j = o21 ? p(b) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), M = 0; j.length > M; M++)l7(b, w = j[M]) && !l7(S, w) && m(S, w, y(b, w));
                    (S.prototype = _).constructor = S, s10(i15, v, S);
                }
            },
            {
                "../internals/classof-raw": 28,
                "../internals/descriptors": 42,
                "../internals/fails": 50,
                "../internals/global": 58,
                "../internals/has": 59,
                "../internals/inherit-if-required": 66,
                "../internals/is-forced": 72,
                "../internals/object-create": 89,
                "../internals/object-define-property": 91,
                "../internals/object-get-own-property-descriptor": 92,
                "../internals/object-get-own-property-names": 94,
                "../internals/redefine": 107,
                "../internals/string-trim": 126,
                "../internals/to-primitive": 137
            }
        ],
        168: [
            function(e, t, r) {
                e("../internals/export")({
                    target: "Number",
                    stat: !0
                }, {
                    isFinite: e("../internals/number-is-finite")
                });
            },
            {
                "../internals/export": 49,
                "../internals/number-is-finite": 87
            }
        ],
        169: [
            function(e172, t108, r85) {
                "use strict";
                var n35 = e172("../internals/export"), h = e172("../internals/to-integer"), p = e172("../internals/this-number-value"), y = e172("../internals/string-repeat"), o22 = e172("../internals/fails"), i16 = 1..toFixed, m = Math.floor, g = function(e, t, r) {
                    return 0 === t ? r : t % 2 == 1 ? g(e, t - 1, r * e) : g(e * e, t / 2, r);
                };
                n35({
                    target: "Number",
                    proto: !0,
                    forced: i16 && ("0.000" !== 0.00008.toFixed(3) || "1" !== 0.9.toFixed(0) || "1.25" !== 1.255.toFixed(2) || "1000000000000000128" !== 1000000000000000100..toFixed(0)) || !o22(function() {
                        i16.call({
                        });
                    })
                }, {
                    toFixed: function(e173) {
                        function t109(e, t) {
                            for(var r = -1, n = t; ++r < 6;)n += e * c[r], c[r] = n % 10000000, n = m(n / 10000000);
                        }
                        function r86(e) {
                            for(var t = 6, r = 0; 0 <= --t;)r += c[t], c[t] = m(r / e), r = r % e * 10000000;
                        }
                        function n36() {
                            for(var e = 6, t = ""; 0 <= --e;)if ("" !== t || 0 === e || 0 !== c[e]) {
                                var r = String(c[e]);
                                t = "" === t ? r : t + y.call("0", 7 - r.length) + r;
                            }
                            return t;
                        }
                        var o, i, a, s, l = p(this), u = h(e173), c = [
                            0,
                            0,
                            0,
                            0,
                            0,
                            0
                        ], d = "", f = "0";
                        if (u < 0 || 20 < u) throw RangeError("Incorrect fraction digits");
                        if (l != l) return "NaN";
                        if (l <= -1000000000000000000000 || 1000000000000000000000 <= l) return String(l);
                        if (l < 0 && (d = "-", l = -l), 0.000000000000000000001 < l) {
                            if (i = (o = (function(e) {
                                for(var t = 0, r = e; 4096 <= r;)t += 12, r /= 4096;
                                for(; 2 <= r;)t += 1, r /= 2;
                                return t;
                            })(l * g(2, 69, 1)) - 69) < 0 ? l * g(2, -o, 1) : l / g(2, o, 1), i *= 4503599627370496, 0 < (o = 52 - o)) {
                                for(t109(0, i), a = u; 7 <= a;)t109(10000000, 0), a -= 7;
                                for(t109(g(10, a, 1), 0), a = o - 1; 23 <= a;)r86(8388608), a -= 23;
                                r86(1 << a), t109(1, 1), r86(2), f = n36();
                            } else t109(0, i), t109(1 << -o, 0), f = n36() + y.call("0", u);
                        }
                        return f = 0 < u ? d + ((s = f.length) <= u ? "0." + y.call("0", u - s) + f : f.slice(0, s - u) + "." + f.slice(s - u)) : d + f;
                    }
                });
            },
            {
                "../internals/export": 49,
                "../internals/fails": 50,
                "../internals/string-repeat": 124,
                "../internals/this-number-value": 128,
                "../internals/to-integer": 132
            }
        ],
        170: [
            function(e, t, r) {
                var n = e("../internals/export"), o = e("../internals/object-assign");
                n({
                    target: "Object",
                    stat: !0,
                    forced: Object.assign !== o
                }, {
                    assign: o
                });
            },
            {
                "../internals/export": 49,
                "../internals/object-assign": 88
            }
        ],
        171: [
            function(e, t, r) {
                var n = e("../internals/export"), o = e("../internals/fails"), i = e("../internals/object-get-own-property-names-external").f;
                n({
                    target: "Object",
                    stat: !0,
                    forced: o(function() {
                        return !Object.getOwnPropertyNames(1);
                    })
                }, {
                    getOwnPropertyNames: i
                });
            },
            {
                "../internals/export": 49,
                "../internals/fails": 50,
                "../internals/object-get-own-property-names-external": 93
            }
        ],
        172: [
            function(e174, t, r) {
                var n = e174("../internals/export"), o = e174("../internals/fails"), i = e174("../internals/to-object"), a = e174("../internals/object-get-prototype-of"), s = e174("../internals/correct-prototype-getter");
                n({
                    target: "Object",
                    stat: !0,
                    forced: o(function() {
                        a(1);
                    }),
                    sham: !s
                }, {
                    getPrototypeOf: function(e) {
                        return a(i(e));
                    }
                });
            },
            {
                "../internals/correct-prototype-getter": 34,
                "../internals/export": 49,
                "../internals/fails": 50,
                "../internals/object-get-prototype-of": 96,
                "../internals/to-object": 134
            }
        ],
        173: [
            function(e175, t, r) {
                var n = e175("../internals/export"), o = e175("../internals/to-object"), i = e175("../internals/object-keys");
                n({
                    target: "Object",
                    stat: !0,
                    forced: e175("../internals/fails")(function() {
                        i(1);
                    })
                }, {
                    keys: function(e) {
                        return i(o(e));
                    }
                });
            },
            {
                "../internals/export": 49,
                "../internals/fails": 50,
                "../internals/object-keys": 98,
                "../internals/to-object": 134
            }
        ],
        174: [
            function(e, t, r) {
                var n = e("../internals/to-string-tag-support"), o = e("../internals/redefine"), i = e("../internals/object-to-string");
                n || o(Object.prototype, "toString", i, {
                    unsafe: !0
                });
            },
            {
                "../internals/object-to-string": 101,
                "../internals/redefine": 107,
                "../internals/to-string-tag-support": 138
            }
        ],
        175: [
            function(e176, t110, r87) {
                "use strict";
                function y(e) {
                    var t;
                    return !(!x(e) || "function" != typeof (t = e.then)) && t;
                }
                function i17(d, f, h) {
                    if (!f.notified) {
                        f.notified = !0;
                        var p = f.reactions;
                        L(function() {
                            for(var e = f.value, t = 1 == f.state, r = 0; p.length > r;){
                                var n, o, i, a = p[r++], s = t ? a.ok : a.fail, l = a.resolve, u = a.reject, c = a.domain;
                                try {
                                    s ? (t || (2 === f.rejection && oe(d, f), f.rejection = 1), !0 === s ? n = e : (c && c.enter(), n = s(e), c && (c.exit(), i = !0)), n === a.promise ? u(q("Promise-chain cycle")) : (o = y(n)) ? o.call(n, l, u) : l(n)) : u(e);
                                } catch (e) {
                                    c && !i && c.exit(), u(e);
                                }
                            }
                            f.reactions = [], f.notified = !1, h && !f.rejection && re(d, f);
                        });
                    }
                }
                function o23(e, t, r) {
                    var n, o;
                    J ? ((n = W.createEvent("Event")).promise = t, n.reason = r, n.initEvent(e, !1, !0), h2.dispatchEvent(n)) : n = {
                        promise: t,
                        reason: r
                    }, (o = h2["on" + e]) ? o(n) : e === $ && k("Unhandled promise rejection", r);
                }
                function a13(t, r, n, o) {
                    return function(e) {
                        t(r, n, e, o);
                    };
                }
                function s11(e, t, r, n) {
                    t.done || (t.done = !0, n && (t = n), t.value = r, t.state = 2, i17(e, t, !0));
                }
                var n37, l8, u4, c4, d4 = e176("../internals/export"), f3 = e176("../internals/is-pure"), h2 = e176("../internals/global"), p1 = e176("../internals/get-built-in"), m = e176("../internals/native-promise-constructor"), g = e176("../internals/redefine"), v = e176("../internals/redefine-all"), b = e176("../internals/set-to-string-tag"), _ = e176("../internals/set-species"), x = e176("../internals/is-object"), w = e176("../internals/a-function"), S = e176("../internals/an-instance"), j = e176("../internals/classof-raw"), M = e176("../internals/inspect-source"), E = e176("../internals/iterate"), T = e176("../internals/check-correctness-of-iteration"), O = e176("../internals/species-constructor"), C = e176("../internals/task").set, L = e176("../internals/microtask"), P = e176("../internals/promise-resolve"), k = e176("../internals/host-report-errors"), A = e176("../internals/new-promise-capability"), R = e176("../internals/perform"), D = e176("../internals/internal-state"), I = e176("../internals/is-forced"), U = e176("../internals/well-known-symbol"), N = e176("../internals/engine-v8-version"), F = U("species"), B = "Promise", G = D.get, V = D.set, z = D.getterFor(B), H = m, q = h2.TypeError, W = h2.document, X = h2.process, Y = p1("fetch"), Z = A.f, Q = Z, K = "process" == j(X), J = !!(W && W.createEvent && h2.dispatchEvent), $ = "unhandledrejection", ee = I(B, function() {
                    if (!(M(H) !== String(H))) {
                        if (66 === N) return !0;
                        if (!K && "function" != typeof PromiseRejectionEvent) return !0;
                    }
                    if (f3 && !H.prototype.finally) return !0;
                    if (51 <= N && /native code/.test(H)) return !1;
                    function e177(e) {
                        e(function() {
                        }, function() {
                        });
                    }
                    var t = H.resolve(1);
                    return (t.constructor = {
                    })[F] = e177, !(t.then(function() {
                    }) instanceof e177);
                }), te = ee || !T(function(e) {
                    H.all(e).catch(function() {
                    });
                }), re = function(r, n) {
                    C.call(h2, function() {
                        var e, t = n.value;
                        if (ne(n) && (e = R(function() {
                            K ? X.emit("unhandledRejection", t, r) : o23($, r, t);
                        }), n.rejection = K || ne(n) ? 2 : 1, e.error)) throw e.value;
                    });
                }, ne = function(e) {
                    return 1 !== e.rejection && !e.parent;
                }, oe = function(e, t) {
                    C.call(h2, function() {
                        K ? X.emit("rejectionHandled", e) : o23("rejectionhandled", e, t.value);
                    });
                }, ie = function(r, n, e178, t111) {
                    if (!n.done) {
                        n.done = !0, t111 && (n = t111);
                        try {
                            if (r === e178) throw q("Promise can't be resolved itself");
                            var o = y(e178);
                            o ? L(function() {
                                var t = {
                                    done: !1
                                };
                                try {
                                    o.call(e178, a13(ie, r, t, n), a13(s11, r, t, n));
                                } catch (e) {
                                    s11(r, t, e, n);
                                }
                            }) : (n.value = e178, n.state = 1, i17(r, n, !1));
                        } catch (e) {
                            s11(r, {
                                done: !1
                            }, e, n);
                        }
                    }
                };
                ee && (H = function(e) {
                    S(this, H, B), w(e), n37.call(this);
                    var t = G(this);
                    try {
                        e(a13(ie, this, t), a13(s11, this, t));
                    } catch (e179) {
                        s11(this, t, e179);
                    }
                }, (n37 = function() {
                    V(this, {
                        type: B,
                        done: !1,
                        notified: !1,
                        parent: !1,
                        reactions: [],
                        rejection: !1,
                        state: 0,
                        value: void 0
                    });
                }).prototype = v(H.prototype, {
                    then: function(e, t) {
                        var r = z(this), n = Z(O(this, H));
                        return n.ok = "function" != typeof e || e, n.fail = "function" == typeof t && t, n.domain = K ? X.domain : void 0, r.parent = !0, r.reactions.push(n), 0 != r.state && i17(this, r, !1), n.promise;
                    },
                    catch: function(e) {
                        return this.then(void 0, e);
                    }
                }), l8 = function() {
                    var e = new n37, t = G(e);
                    this.promise = e, this.resolve = a13(ie, e, t), this.reject = a13(s11, e, t);
                }, A.f = Z = function(e) {
                    return e === H || e === u4 ? new l8(e) : Q(e);
                }, f3 || "function" != typeof m || (c4 = m.prototype.then, g(m.prototype, "then", function(e180, t112) {
                    var r = this;
                    return new H(function(e, t) {
                        c4.call(r, e, t);
                    }).then(e180, t112);
                }, {
                    unsafe: !0
                }), "function" == typeof Y && d4({
                    global: !0,
                    enumerable: !0,
                    forced: !0
                }, {
                    fetch: function(e) {
                        return P(H, Y.apply(h2, arguments));
                    }
                }))), d4({
                    global: !0,
                    wrap: !0,
                    forced: ee
                }, {
                    Promise: H
                }), b(H, B, !1, !0), _(B), u4 = p1(B), d4({
                    target: B,
                    stat: !0,
                    forced: ee
                }, {
                    reject: function(e) {
                        var t = Z(this);
                        return t.reject.call(void 0, e), t.promise;
                    }
                }), d4({
                    target: B,
                    stat: !0,
                    forced: f3 || ee
                }, {
                    resolve: function(e) {
                        return P(f3 && this === u4 ? H : this, e);
                    }
                }), d4({
                    target: B,
                    stat: !0,
                    forced: te
                }, {
                    all: function(e181) {
                        var s = this, t = Z(s), l = t.resolve, u = t.reject, r88 = R(function() {
                            var n = w(s.resolve), o = [], i = 0, a = 1;
                            E(e181, function(e182) {
                                var t = i++, r = !1;
                                o.push(void 0), a++, n.call(s, e182).then(function(e) {
                                    r || (r = !0, o[t] = e, --a || l(o));
                                }, u);
                            }), --a || l(o);
                        });
                        return r88.error && u(r88.value), t.promise;
                    },
                    race: function(e183) {
                        var r = this, n = Z(r), o = n.reject, t113 = R(function() {
                            var t = w(r.resolve);
                            E(e183, function(e) {
                                t.call(r, e).then(n.resolve, o);
                            });
                        });
                        return t113.error && o(t113.value), n.promise;
                    }
                });
            },
            {
                "../internals/a-function": 5,
                "../internals/an-instance": 9,
                "../internals/check-correctness-of-iteration": 27,
                "../internals/classof-raw": 28,
                "../internals/engine-v8-version": 47,
                "../internals/export": 49,
                "../internals/get-built-in": 55,
                "../internals/global": 58,
                "../internals/host-report-errors": 61,
                "../internals/inspect-source": 67,
                "../internals/internal-state": 69,
                "../internals/is-forced": 72,
                "../internals/is-object": 73,
                "../internals/is-pure": 74,
                "../internals/iterate": 76,
                "../internals/microtask": 80,
                "../internals/native-promise-constructor": 81,
                "../internals/new-promise-capability": 85,
                "../internals/perform": 104,
                "../internals/promise-resolve": 105,
                "../internals/redefine": 107,
                "../internals/redefine-all": 106,
                "../internals/set-species": 115,
                "../internals/set-to-string-tag": 116,
                "../internals/species-constructor": 120,
                "../internals/task": 127,
                "../internals/well-known-symbol": 145
            }
        ],
        176: [
            function(e184, t114, r89) {
                var n38 = e184("../internals/export"), o24 = e184("../internals/get-built-in"), l = e184("../internals/a-function"), u = e184("../internals/an-object"), c = e184("../internals/is-object"), d = e184("../internals/object-create"), f = e184("../internals/function-bind"), i18 = e184("../internals/fails"), h = o24("Reflect", "construct"), p = i18(function() {
                    function e() {
                    }
                    return !(h(function() {
                    }, [], e) instanceof e);
                }), y = !i18(function() {
                    h(function() {
                    });
                }), a14 = p || y;
                n38({
                    target: "Reflect",
                    stat: !0,
                    forced: a14,
                    sham: a14
                }, {
                    construct: function(e, t, r) {
                        l(e), u(t);
                        var n = arguments.length < 3 ? e : l(r);
                        if (y && !p) return h(e, t, n);
                        if (e == n) {
                            switch(t.length){
                                case 0:
                                    return new e;
                                case 1:
                                    return new e(t[0]);
                                case 2:
                                    return new e(t[0], t[1]);
                                case 3:
                                    return new e(t[0], t[1], t[2]);
                                case 4:
                                    return new e(t[0], t[1], t[2], t[3]);
                            }
                            var o = [
                                null
                            ];
                            return o.push.apply(o, t), new (f.apply(e, o));
                        }
                        var i = n.prototype, a = d(c(i) ? i : Object.prototype), s = Function.apply.call(e, a, t);
                        return c(s) ? s : a;
                    }
                });
            },
            {
                "../internals/a-function": 5,
                "../internals/an-object": 10,
                "../internals/export": 49,
                "../internals/fails": 50,
                "../internals/function-bind": 54,
                "../internals/get-built-in": 55,
                "../internals/is-object": 73,
                "../internals/object-create": 89
            }
        ],
        177: [
            function(e185, t115, r90) {
                var n39 = e185("../internals/descriptors"), o25 = e185("../internals/global"), i19 = e185("../internals/is-forced"), s = e185("../internals/inherit-if-required"), a15 = e185("../internals/object-define-property").f, l = e185("../internals/object-get-own-property-names").f, u = e185("../internals/is-regexp"), c = e185("../internals/regexp-flags"), d = e185("../internals/regexp-sticky-helpers"), f = e185("../internals/redefine"), h = e185("../internals/fails"), p = e185("../internals/internal-state").set, y = e185("../internals/set-species"), m = e185("../internals/well-known-symbol")("match"), g = o25.RegExp, v = g.prototype, b = /a/g, _ = /a/g, x = new g(b) !== b, w = d.UNSUPPORTED_Y;
                if (n39 && i19("RegExp", !x || w || h(function() {
                    return _[m] = !1, g(b) != b || g(_) == _ || "/a/i" != g(b, "i");
                }))) {
                    function S(t) {
                        t in j || a15(j, t, {
                            configurable: !0,
                            get: function() {
                                return g[t];
                            },
                            set: function(e) {
                                g[t] = e;
                            }
                        });
                    }
                    for(var j = function(e, t) {
                        var r, n = this instanceof j, o = u(e), i = void 0 === t;
                        if (!n && o && e.constructor === j && i) return e;
                        x ? o && !i && (e = e.source) : e instanceof j && (i && (t = c.call(e)), e = e.source), w && (r = !!t && -1 < t.indexOf("y")) && (t = t.replace(/y/g, ""));
                        var a = s(x ? new g(e, t) : g(e, t), n ? this : v, j);
                        return w && r && p(a, {
                            sticky: r
                        }), a;
                    }, M = l(g), E = 0; M.length > E;)S(M[E++]);
                    (v.constructor = j).prototype = v, f(o25, "RegExp", j);
                }
                y("RegExp");
            },
            {
                "../internals/descriptors": 42,
                "../internals/fails": 50,
                "../internals/global": 58,
                "../internals/inherit-if-required": 66,
                "../internals/internal-state": 69,
                "../internals/is-forced": 72,
                "../internals/is-regexp": 75,
                "../internals/object-define-property": 91,
                "../internals/object-get-own-property-names": 94,
                "../internals/redefine": 107,
                "../internals/regexp-flags": 110,
                "../internals/regexp-sticky-helpers": 111,
                "../internals/set-species": 115,
                "../internals/well-known-symbol": 145
            }
        ],
        178: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/export"), o = e("../internals/regexp-exec");
                n({
                    target: "RegExp",
                    proto: !0,
                    forced: /./.exec !== o
                }, {
                    exec: o
                });
            },
            {
                "../internals/export": 49,
                "../internals/regexp-exec": 109
            }
        ],
        179: [
            function(e186, t116, r91) {
                "use strict";
                var n = e186("../internals/redefine"), o = e186("../internals/an-object"), i = e186("../internals/fails"), a = e186("../internals/regexp-flags"), s = "toString", l = RegExp.prototype, u = l[s], c = i(function() {
                    return "/a/b" != u.call({
                        source: "a",
                        flags: "b"
                    });
                }), d = u.name != s;
                (c || d) && n(RegExp.prototype, s, function() {
                    var e = o(this), t = String(e.source), r = e.flags;
                    return "/" + t + "/" + String(void 0 === r && e instanceof RegExp && !("flags" in l) ? a.call(e) : r);
                }, {
                    unsafe: !0
                });
            },
            {
                "../internals/an-object": 10,
                "../internals/fails": 50,
                "../internals/redefine": 107,
                "../internals/regexp-flags": 110
            }
        ],
        180: [
            function(e187, t117, r) {
                "use strict";
                var n = e187("../internals/collection"), o = e187("../internals/collection-strong");
                t117.exports = n("Set", function(t) {
                    return function(e) {
                        return t(this, arguments.length ? e : void 0);
                    };
                }, o);
            },
            {
                "../internals/collection": 31,
                "../internals/collection-strong": 30
            }
        ],
        181: [
            function(e188, t118, r92) {
                "use strict";
                var n40, o26 = e188("../internals/export"), i20 = e188("../internals/object-get-own-property-descriptor").f, s = e188("../internals/to-length"), l = e188("../internals/not-a-regexp"), u = e188("../internals/require-object-coercible"), a16 = e188("../internals/correct-is-regexp-logic"), c = e188("../internals/is-pure"), d = "".endsWith, f = Math.min, h = a16("endsWith");
                o26({
                    target: "String",
                    proto: !0,
                    forced: !!(c || h || !(n40 = i20(String.prototype, "endsWith")) || n40.writable) && !h
                }, {
                    endsWith: function(e, t) {
                        var r = String(u(this));
                        l(e);
                        var n = 1 < arguments.length ? t : void 0, o = s(r.length), i = void 0 === n ? o : f(s(n), o), a = String(e);
                        return d ? d.call(r, a, i) : r.slice(i - a.length, i) === a;
                    }
                });
            },
            {
                "../internals/correct-is-regexp-logic": 33,
                "../internals/export": 49,
                "../internals/is-pure": 74,
                "../internals/not-a-regexp": 86,
                "../internals/object-get-own-property-descriptor": 92,
                "../internals/require-object-coercible": 112,
                "../internals/to-length": 133
            }
        ],
        182: [
            function(e189, t119, r) {
                "use strict";
                var n = e189("../internals/export"), o = e189("../internals/not-a-regexp"), i = e189("../internals/require-object-coercible");
                n({
                    target: "String",
                    proto: !0,
                    forced: !e189("../internals/correct-is-regexp-logic")("includes")
                }, {
                    includes: function(e, t) {
                        return !!~String(i(this)).indexOf(o(e), 1 < arguments.length ? t : void 0);
                    }
                });
            },
            {
                "../internals/correct-is-regexp-logic": 33,
                "../internals/export": 49,
                "../internals/not-a-regexp": 86,
                "../internals/require-object-coercible": 112
            }
        ],
        183: [
            function(e190, t120, r93) {
                "use strict";
                var o = e190("../internals/string-multibyte").charAt, n41 = e190("../internals/internal-state"), i = e190("../internals/define-iterator"), a = "String Iterator", s = n41.set, l = n41.getterFor(a);
                i(String, "String", function(e) {
                    s(this, {
                        type: a,
                        string: String(e),
                        index: 0
                    });
                }, function() {
                    var e, t = l(this), r = t.string, n = t.index;
                    return n >= r.length ? {
                        value: void 0,
                        done: !0
                    } : (e = o(r, n), t.index += e.length, {
                        value: e,
                        done: !1
                    });
                });
            },
            {
                "../internals/define-iterator": 40,
                "../internals/internal-state": 69,
                "../internals/string-multibyte": 122
            }
        ],
        184: [
            function(e191, t121, r94) {
                "use strict";
                var n42 = e191("../internals/fix-regexp-well-known-symbol-logic"), d = e191("../internals/an-object"), f = e191("../internals/to-length"), o27 = e191("../internals/require-object-coercible"), h = e191("../internals/advance-string-index"), p = e191("../internals/regexp-exec-abstract");
                n42("match", 1, function(n43, u, c) {
                    return [
                        function(e) {
                            var t = o27(this), r = null == e ? void 0 : e[n43];
                            return void 0 !== r ? r.call(e, t) : new RegExp(e)[n43](String(t));
                        },
                        function(e) {
                            var t = c(u, e, this);
                            if (t.done) return t.value;
                            var r = d(e), n = String(this);
                            if (!r.global) return p(r, n);
                            for(var o, i = r.unicode, a = [], s = r.lastIndex = 0; null !== (o = p(r, n));){
                                var l = String(o[0]);
                                "" === (a[s] = l) && (r.lastIndex = h(n, f(r.lastIndex), i)), s++;
                            }
                            return 0 === s ? null : a;
                        }
                    ];
                });
            },
            {
                "../internals/advance-string-index": 8,
                "../internals/an-object": 10,
                "../internals/fix-regexp-well-known-symbol-logic": 51,
                "../internals/regexp-exec-abstract": 108,
                "../internals/require-object-coercible": 112,
                "../internals/to-length": 133
            }
        ],
        185: [
            function(e, t, r) {
                e("../internals/export")({
                    target: "String",
                    proto: !0
                }, {
                    repeat: e("../internals/string-repeat")
                });
            },
            {
                "../internals/export": 49,
                "../internals/string-repeat": 124
            }
        ],
        186: [
            function(e192, t122, r95) {
                "use strict";
                var n44 = e192("../internals/fix-regexp-well-known-symbol-logic"), T = e192("../internals/an-object"), f4 = e192("../internals/to-object"), O = e192("../internals/to-length"), C = e192("../internals/to-integer"), i21 = e192("../internals/require-object-coercible"), L = e192("../internals/advance-string-index"), P = e192("../internals/regexp-exec-abstract"), k = Math.max, A = Math.min, h3 = Math.floor, p2 = /\$([$&'`]|\d\d?|<[^>]*>)/g, y1 = /\$([$&'`]|\d\d?)/g;
                n44("replace", 2, function(o28, x, w, e193) {
                    var S = e193.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, j = e193.REPLACE_KEEPS_$0, M = S ? "$" : "$0";
                    function E(i, a, s, l, u, e194) {
                        var c = s + i.length, d = l.length, t123 = y1;
                        return void 0 !== u && (u = f4(u), t123 = p2), x.call(e194, t123, function(e, t) {
                            var r;
                            switch(t.charAt(0)){
                                case "$":
                                    return "$";
                                case "&":
                                    return i;
                                case "`":
                                    return a.slice(0, s);
                                case "'":
                                    return a.slice(c);
                                case "<":
                                    r = u[t.slice(1, -1)];
                                    break;
                                default:
                                    var n = +t;
                                    if (0 == n) return e;
                                    if (d < n) {
                                        var o = h3(n / 10);
                                        return 0 === o ? e : o <= d ? void 0 === l[o - 1] ? t.charAt(1) : l[o - 1] + t.charAt(1) : e;
                                    }
                                    r = l[n - 1];
                            }
                            return void 0 === r ? "" : r;
                        });
                    }
                    return [
                        function(e, t) {
                            var r = i21(this), n = null == e ? void 0 : e[o28];
                            return void 0 !== n ? n.call(e, r, t) : x.call(String(r), e, t);
                        },
                        function(e, t) {
                            if (!S && j || "string" == typeof t && -1 === t.indexOf(M)) {
                                var r = w(x, e, this, t);
                                if (r.done) return r.value;
                            }
                            var n = T(e), o = String(this), i = "function" == typeof t;
                            i || (t = String(t));
                            var a = n.global;
                            if (a) {
                                var s = n.unicode;
                                n.lastIndex = 0;
                            }
                            for(var l = [];;){
                                var u = P(n, o);
                                if (null === u) break;
                                if (l.push(u), !a) break;
                                "" === String(u[0]) && (n.lastIndex = L(o, O(n.lastIndex), s));
                            }
                            for(var c, d = "", f = 0, h = 0; h < l.length; h++){
                                u = l[h];
                                for(var p = String(u[0]), y = k(A(C(u.index), o.length), 0), m = [], g = 1; g < u.length; g++)m.push(void 0 === (c = u[g]) ? c : String(c));
                                var v = u.groups;
                                if (i) {
                                    var b = [
                                        p
                                    ].concat(m, y, o);
                                    void 0 !== v && b.push(v);
                                    var _ = String(t.apply(void 0, b));
                                } else _ = E(p, o, y, m, v, t);
                                f <= y && (d += o.slice(f, y) + _, f = y + p.length);
                            }
                            return d + o.slice(f);
                        }
                    ];
                });
            },
            {
                "../internals/advance-string-index": 8,
                "../internals/an-object": 10,
                "../internals/fix-regexp-well-known-symbol-logic": 51,
                "../internals/regexp-exec-abstract": 108,
                "../internals/require-object-coercible": 112,
                "../internals/to-integer": 132,
                "../internals/to-length": 133,
                "../internals/to-object": 134
            }
        ],
        187: [
            function(e195, t124, r96) {
                "use strict";
                var n45 = e195("../internals/fix-regexp-well-known-symbol-logic"), l = e195("../internals/an-object"), o29 = e195("../internals/require-object-coercible"), u = e195("../internals/same-value"), c = e195("../internals/regexp-exec-abstract");
                n45("search", 1, function(n46, a, s) {
                    return [
                        function(e) {
                            var t = o29(this), r = null == e ? void 0 : e[n46];
                            return void 0 !== r ? r.call(e, t) : new RegExp(e)[n46](String(t));
                        },
                        function(e) {
                            var t = s(a, e, this);
                            if (t.done) return t.value;
                            var r = l(e), n = String(this), o = r.lastIndex;
                            u(o, 0) || (r.lastIndex = 0);
                            var i = c(r, n);
                            return u(r.lastIndex, o) || (r.lastIndex = o), null === i ? -1 : i.index;
                        }
                    ];
                });
            },
            {
                "../internals/an-object": 10,
                "../internals/fix-regexp-well-known-symbol-logic": 51,
                "../internals/regexp-exec-abstract": 108,
                "../internals/require-object-coercible": 112,
                "../internals/same-value": 113
            }
        ],
        188: [
            function(e196, t125, r97) {
                "use strict";
                var n47 = e196("../internals/fix-regexp-well-known-symbol-logic"), d5 = e196("../internals/is-regexp"), b = e196("../internals/an-object"), f5 = e196("../internals/require-object-coercible"), _ = e196("../internals/species-constructor"), x = e196("../internals/advance-string-index"), w = e196("../internals/to-length"), S = e196("../internals/regexp-exec-abstract"), h4 = e196("../internals/regexp-exec"), o30 = e196("../internals/fails"), p3 = [].push, j = Math.min, M = 4294967295, E = !o30(function() {
                    return !RegExp(M, "y");
                });
                n47("split", 2, function(o31, m, g) {
                    var v;
                    return v = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || 1 < ".".split(/()()/).length || "".split(/.?/).length ? function(e, t) {
                        var r = String(f5(this)), n = void 0 === t ? M : t >>> 0;
                        if (0 == n) return [];
                        if (void 0 === e) return [
                            r
                        ];
                        if (!d5(e)) return m.call(r, e, n);
                        for(var o, i, a, s = [], l = (e.ignoreCase ? "i" : "") + (e.multiline ? "m" : "") + (e.unicode ? "u" : "") + (e.sticky ? "y" : ""), u = 0, c = new RegExp(e.source, l + "g"); (o = h4.call(c, r)) && !(u < (i = c.lastIndex) && (s.push(r.slice(u, o.index)), 1 < o.length && o.index < r.length && p3.apply(s, o.slice(1)), a = o[0].length, u = i, s.length >= n));)c.lastIndex === o.index && c.lastIndex++;
                        return u === r.length ? !a && c.test("") || s.push("") : s.push(r.slice(u)), s.length > n ? s.slice(0, n) : s;
                    } : "0".split(void 0, 0).length ? function(e, t) {
                        return void 0 === e && 0 === t ? [] : m.call(this, e, t);
                    } : m, [
                        function(e, t) {
                            var r = f5(this), n = null == e ? void 0 : e[o31];
                            return void 0 !== n ? n.call(e, r, t) : v.call(String(r), e, t);
                        },
                        function(e, t) {
                            var r = g(v, e, this, t, v !== m);
                            if (r.done) return r.value;
                            var n = b(e), o = String(this), i = _(n, RegExp), a = n.unicode, s = (n.ignoreCase ? "i" : "") + (n.multiline ? "m" : "") + (n.unicode ? "u" : "") + (E ? "y" : "g"), l = new i(E ? n : "^(?:" + n.source + ")", s), u = void 0 === t ? M : t >>> 0;
                            if (0 == u) return [];
                            if (0 === o.length) return null === S(l, o) ? [
                                o
                            ] : [];
                            for(var c = 0, d = 0, f = []; d < o.length;){
                                l.lastIndex = E ? d : 0;
                                var h, p = S(l, E ? o : o.slice(d));
                                if (null === p || (h = j(w(l.lastIndex + (E ? 0 : d)), o.length)) === c) d = x(o, d, a);
                                else {
                                    if (f.push(o.slice(c, d)), f.length === u) return f;
                                    for(var y = 1; y <= p.length - 1; y++)if (f.push(p[y]), f.length === u) return f;
                                    d = c = h;
                                }
                            }
                            return f.push(o.slice(c)), f;
                        }
                    ];
                }, !E);
            },
            {
                "../internals/advance-string-index": 8,
                "../internals/an-object": 10,
                "../internals/fails": 50,
                "../internals/fix-regexp-well-known-symbol-logic": 51,
                "../internals/is-regexp": 75,
                "../internals/regexp-exec": 109,
                "../internals/regexp-exec-abstract": 108,
                "../internals/require-object-coercible": 112,
                "../internals/species-constructor": 120,
                "../internals/to-length": 133
            }
        ],
        189: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/export"), o = e("../internals/create-html");
                n({
                    target: "String",
                    proto: !0,
                    forced: e("../internals/string-html-forced")("sub")
                }, {
                    sub: function() {
                        return o(this, "sub", "", "");
                    }
                });
            },
            {
                "../internals/create-html": 35,
                "../internals/export": 49,
                "../internals/string-html-forced": 121
            }
        ],
        190: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/export"), o = e("../internals/string-trim").trim;
                n({
                    target: "String",
                    proto: !0,
                    forced: e("../internals/string-trim-forced")("trim")
                }, {
                    trim: function() {
                        return o(this);
                    }
                });
            },
            {
                "../internals/export": 49,
                "../internals/string-trim": 126,
                "../internals/string-trim-forced": 125
            }
        ],
        191: [
            function(e197, t126, r98) {
                "use strict";
                var n = e197("../internals/export"), o = e197("../internals/descriptors"), i = e197("../internals/global"), a = e197("../internals/has"), s = e197("../internals/is-object"), l = e197("../internals/object-define-property").f, u = e197("../internals/copy-constructor-properties"), c = i.Symbol;
                if (o && "function" == typeof c && (!("description" in c.prototype) || void 0 !== c().description)) {
                    var d = {
                    }, f = function(e) {
                        var t = arguments.length < 1 || void 0 === e ? void 0 : String(e), r = this instanceof f ? new c(t) : void 0 === t ? c() : c(t);
                        return "" === t && (d[r] = !0), r;
                    };
                    u(f, c);
                    var h = f.prototype = c.prototype;
                    h.constructor = f;
                    var p = h.toString, y = "Symbol(test)" == String(c("test")), m = /^Symbol\((.*)\)[^)]+$/;
                    l(h, "description", {
                        configurable: !0,
                        get: function() {
                            var e = s(this) ? this.valueOf() : this, t = p.call(e);
                            if (a(d, e)) return "";
                            var r = y ? t.slice(7, -1) : t.replace(m, "$1");
                            return "" === r ? void 0 : r;
                        }
                    }), n({
                        global: !0,
                        forced: !0
                    }, {
                        Symbol: f
                    });
                }
            },
            {
                "../internals/copy-constructor-properties": 32,
                "../internals/descriptors": 42,
                "../internals/export": 49,
                "../internals/global": 58,
                "../internals/has": 59,
                "../internals/is-object": 73,
                "../internals/object-define-property": 91
            }
        ],
        192: [
            function(e, t, r) {
                e("../internals/define-well-known-symbol")("iterator");
            },
            {
                "../internals/define-well-known-symbol": 41
            }
        ],
        193: [
            function(e198, t127, r99) {
                "use strict";
                function o32(e, t) {
                    var r = re[e] = S(Q[q]);
                    return X(r, {
                        type: H,
                        tag: e,
                        description: t
                    }), d || (r.description = t), r;
                }
                function n48(t, e199) {
                    v(t);
                    var r = _(e199), n = j(r).concat(he(r));
                    return V(n, function(e) {
                        d && !fe.call(r, e) || de(t, e, r[e]);
                    }), t;
                }
                function i22(e, t) {
                    var r = _(e), n = x(t, !0);
                    if (r !== Z || !y(re, n) || y(ne, n)) {
                        var o = J(r, n);
                        return !o || !y(re, n) || y(r, z) && r[z][n] || (o.enumerable = !0), o;
                    }
                }
                function a(e200) {
                    var t = ee(_(e200)), r = [];
                    return V(t, function(e) {
                        y(re, e) || y(D, e) || r.push(e);
                    }), r;
                }
                var s = e198("../internals/export"), l = e198("../internals/global"), u = e198("../internals/get-built-in"), c = e198("../internals/is-pure"), d = e198("../internals/descriptors"), f = e198("../internals/native-symbol"), h = e198("../internals/use-symbol-as-uid"), p = e198("../internals/fails"), y = e198("../internals/has"), m = e198("../internals/is-array"), g = e198("../internals/is-object"), v = e198("../internals/an-object"), b = e198("../internals/to-object"), _ = e198("../internals/to-indexed-object"), x = e198("../internals/to-primitive"), w = e198("../internals/create-property-descriptor"), S = e198("../internals/object-create"), j = e198("../internals/object-keys"), M = e198("../internals/object-get-own-property-names"), E = e198("../internals/object-get-own-property-names-external"), T = e198("../internals/object-get-own-property-symbols"), O = e198("../internals/object-get-own-property-descriptor"), C = e198("../internals/object-define-property"), L = e198("../internals/object-property-is-enumerable"), P = e198("../internals/create-non-enumerable-property"), k = e198("../internals/redefine"), A = e198("../internals/shared"), R = e198("../internals/shared-key"), D = e198("../internals/hidden-keys"), I = e198("../internals/uid"), U = e198("../internals/well-known-symbol"), N = e198("../internals/well-known-symbol-wrapped"), F = e198("../internals/define-well-known-symbol"), B = e198("../internals/set-to-string-tag"), G = e198("../internals/internal-state"), V = e198("../internals/array-iteration").forEach, z = R("hidden"), H = "Symbol", q = "prototype", W = U("toPrimitive"), X = G.set, Y = G.getterFor(H), Z = Object[q], Q = l.Symbol, K = u("JSON", "stringify"), J = O.f, $ = C.f, ee = E.f, te = L.f, re = A("symbols"), ne = A("op-symbols"), oe = A("string-to-symbol-registry"), ie = A("symbol-to-string-registry"), ae = A("wks"), se = l.QObject, le = !se || !se[q] || !se[q].findChild, ue = d && p(function() {
                    return 7 != S($({
                    }, "a", {
                        get: function() {
                            return $(this, "a", {
                                value: 7
                            }).a;
                        }
                    })).a;
                }) ? function(e, t, r) {
                    var n = J(Z, t);
                    n && delete Z[t], $(e, t, r), n && e !== Z && $(Z, t, n);
                } : $, ce = h ? function(e) {
                    return "symbol" == typeof e;
                } : function(e) {
                    return Object(e) instanceof Q;
                }, de = function(e, t, r) {
                    e === Z && de(ne, t, r), v(e);
                    var n = x(t, !0);
                    return v(r), y(re, n) ? (r.enumerable ? (y(e, z) && e[z][n] && (e[z][n] = !1), r = S(r, {
                        enumerable: w(0, !1)
                    })) : (y(e, z) || $(e, z, w(1, {
                    })), e[z][n] = !0), ue(e, n, r)) : $(e, n, r);
                }, fe = function(e) {
                    var t = x(e, !0), r = te.call(this, t);
                    return !(this === Z && y(re, t) && !y(ne, t)) && (!(r || !y(this, t) || !y(re, t) || y(this, z) && this[z][t]) || r);
                }, he = function(e201) {
                    var t = e201 === Z, r = ee(t ? ne : _(e201)), n = [];
                    return V(r, function(e) {
                        !y(re, e) || t && !y(Z, e) || n.push(re[e]);
                    }), n;
                };
                f || (k((Q = function(e202) {
                    if (this instanceof Q) throw TypeError("Symbol is not a constructor");
                    var t = arguments.length && void 0 !== e202 ? String(e202) : void 0, r = I(t), n = function(e) {
                        this === Z && n.call(ne, e), y(this, z) && y(this[z], r) && (this[z][r] = !1), ue(this, r, w(1, e));
                    };
                    return d && le && ue(Z, r, {
                        configurable: !0,
                        set: n
                    }), o32(r, t);
                })[q], "toString", function() {
                    return Y(this).tag;
                }), k(Q, "withoutSetter", function(e) {
                    return o32(I(e), e);
                }), L.f = fe, C.f = de, O.f = i22, M.f = E.f = a, T.f = he, N.f = function(e) {
                    return o32(U(e), e);
                }, d && ($(Q[q], "description", {
                    configurable: !0,
                    get: function() {
                        return Y(this).description;
                    }
                }), c || k(Z, "propertyIsEnumerable", fe, {
                    unsafe: !0
                }))), s({
                    global: !0,
                    wrap: !0,
                    forced: !f,
                    sham: !f
                }, {
                    Symbol: Q
                }), V(j(ae), function(e) {
                    F(e);
                }), s({
                    target: H,
                    stat: !0,
                    forced: !f
                }, {
                    for: function(e) {
                        var t = String(e);
                        if (y(oe, t)) return oe[t];
                        var r = Q(t);
                        return oe[t] = r, ie[r] = t, r;
                    },
                    keyFor: function(e) {
                        if (!ce(e)) throw TypeError(e + " is not a symbol");
                        if (y(ie, e)) return ie[e];
                    },
                    useSetter: function() {
                        le = !0;
                    },
                    useSimple: function() {
                        le = !1;
                    }
                }), s({
                    target: "Object",
                    stat: !0,
                    forced: !f,
                    sham: !d
                }, {
                    create: function(e, t) {
                        return void 0 === t ? S(e) : n48(S(e), t);
                    },
                    defineProperty: de,
                    defineProperties: n48,
                    getOwnPropertyDescriptor: i22
                }), s({
                    target: "Object",
                    stat: !0,
                    forced: !f
                }, {
                    getOwnPropertyNames: a,
                    getOwnPropertySymbols: he
                }), s({
                    target: "Object",
                    stat: !0,
                    forced: p(function() {
                        T.f(1);
                    })
                }, {
                    getOwnPropertySymbols: function(e) {
                        return T.f(b(e));
                    }
                }), K && s({
                    target: "JSON",
                    stat: !0,
                    forced: !f || p(function() {
                        var e = Q();
                        return "[null]" != K([
                            e
                        ]) || "{}" != K({
                            a: e
                        }) || "{}" != K(Object(e));
                    })
                }, {
                    stringify: function(e203, t128, r) {
                        for(var n, o = [
                            e203
                        ], i = 1; i < arguments.length;)o.push(arguments[i++]);
                        if ((g(n = t128) || void 0 !== e203) && !ce(e203)) return m(t128) || (t128 = function(e, t) {
                            if ("function" == typeof n && (t = n.call(this, e, t)), !ce(t)) return t;
                        }), o[1] = t128, K.apply(null, o);
                    }
                });
                Q[q][W] || P(Q[q], W, Q[q].valueOf), B(Q, H), D[z] = !0;
            },
            {
                "../internals/an-object": 10,
                "../internals/array-iteration": 19,
                "../internals/create-non-enumerable-property": 37,
                "../internals/create-property-descriptor": 38,
                "../internals/define-well-known-symbol": 41,
                "../internals/descriptors": 42,
                "../internals/export": 49,
                "../internals/fails": 50,
                "../internals/get-built-in": 55,
                "../internals/global": 58,
                "../internals/has": 59,
                "../internals/hidden-keys": 60,
                "../internals/internal-state": 69,
                "../internals/is-array": 71,
                "../internals/is-object": 73,
                "../internals/is-pure": 74,
                "../internals/native-symbol": 82,
                "../internals/object-create": 89,
                "../internals/object-define-property": 91,
                "../internals/object-get-own-property-descriptor": 92,
                "../internals/object-get-own-property-names": 94,
                "../internals/object-get-own-property-names-external": 93,
                "../internals/object-get-own-property-symbols": 95,
                "../internals/object-keys": 98,
                "../internals/object-property-is-enumerable": 99,
                "../internals/redefine": 107,
                "../internals/set-to-string-tag": 116,
                "../internals/shared": 119,
                "../internals/shared-key": 117,
                "../internals/to-indexed-object": 131,
                "../internals/to-object": 134,
                "../internals/to-primitive": 137,
                "../internals/uid": 142,
                "../internals/use-symbol-as-uid": 143,
                "../internals/well-known-symbol": 145,
                "../internals/well-known-symbol-wrapped": 144
            }
        ],
        194: [
            function(e204, t129, r100) {
                "use strict";
                var n = e204("../internals/array-buffer-view-core"), o = e204("../internals/array-copy-within"), i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("copyWithin", function(e, t, r) {
                    return o.call(i(this), e, t, 2 < arguments.length ? r : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-copy-within": 14
            }
        ],
        195: [
            function(e205, t130, r) {
                "use strict";
                var n = e205("../internals/array-buffer-view-core"), o = e205("../internals/array-iteration").every, i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("every", function(e, t) {
                    return o(i(this), e, 1 < arguments.length ? t : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-iteration": 19
            }
        ],
        196: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/array-buffer-view-core"), o = e("../internals/array-fill"), i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("fill", function(e) {
                    return o.apply(i(this), arguments);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-fill": 15
            }
        ],
        197: [
            function(e206, t131, r101) {
                "use strict";
                var n49 = e206("../internals/array-buffer-view-core"), s = e206("../internals/array-iteration").filter, l = e206("../internals/species-constructor"), u = n49.aTypedArray, c = n49.aTypedArrayConstructor;
                (0, n49.exportTypedArrayMethod)("filter", function(e, t) {
                    for(var r = s(u(this), e, 1 < arguments.length ? t : void 0), n = l(this, this.constructor), o = 0, i = r.length, a = new (c(n))(i); o < i;)a[o] = r[o++];
                    return a;
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-iteration": 19,
                "../internals/species-constructor": 120
            }
        ],
        198: [
            function(e207, t132, r) {
                "use strict";
                var n = e207("../internals/array-buffer-view-core"), o = e207("../internals/array-iteration").findIndex, i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("findIndex", function(e, t) {
                    return o(i(this), e, 1 < arguments.length ? t : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-iteration": 19
            }
        ],
        199: [
            function(e208, t133, r) {
                "use strict";
                var n = e208("../internals/array-buffer-view-core"), o = e208("../internals/array-iteration").find, i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("find", function(e, t) {
                    return o(i(this), e, 1 < arguments.length ? t : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-iteration": 19
            }
        ],
        200: [
            function(e209, t134, r102) {
                e209("../internals/typed-array-constructor")("Float32", function(n) {
                    return function(e, t, r) {
                        return n(this, e, t, r);
                    };
                });
            },
            {
                "../internals/typed-array-constructor": 139
            }
        ],
        201: [
            function(e210, t135, r103) {
                e210("../internals/typed-array-constructor")("Float64", function(n) {
                    return function(e, t, r) {
                        return n(this, e, t, r);
                    };
                });
            },
            {
                "../internals/typed-array-constructor": 139
            }
        ],
        202: [
            function(e211, t136, r) {
                "use strict";
                var n = e211("../internals/array-buffer-view-core"), o = e211("../internals/array-iteration").forEach, i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("forEach", function(e, t) {
                    o(i(this), e, 1 < arguments.length ? t : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-iteration": 19
            }
        ],
        203: [
            function(e212, t137, r) {
                "use strict";
                var n = e212("../internals/array-buffer-view-core"), o = e212("../internals/array-includes").includes, i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("includes", function(e, t) {
                    return o(i(this), e, 1 < arguments.length ? t : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-includes": 18
            }
        ],
        204: [
            function(e213, t138, r) {
                "use strict";
                var n = e213("../internals/array-buffer-view-core"), o = e213("../internals/array-includes").indexOf, i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("indexOf", function(e, t) {
                    return o(i(this), e, 1 < arguments.length ? t : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-includes": 18
            }
        ],
        205: [
            function(e214, t139, r104) {
                e214("../internals/typed-array-constructor")("Int16", function(n) {
                    return function(e, t, r) {
                        return n(this, e, t, r);
                    };
                });
            },
            {
                "../internals/typed-array-constructor": 139
            }
        ],
        206: [
            function(e215, t140, r105) {
                e215("../internals/typed-array-constructor")("Int32", function(n) {
                    return function(e, t, r) {
                        return n(this, e, t, r);
                    };
                });
            },
            {
                "../internals/typed-array-constructor": 139
            }
        ],
        207: [
            function(e, t, r) {
                "use strict";
                function n() {
                    return u.call(f(this));
                }
                var o = e("../internals/global"), i = e("../internals/array-buffer-view-core"), a = e("../modules/es.array.iterator"), s = e("../internals/well-known-symbol")("iterator"), l = o.Uint8Array, u = a.values, c = a.keys, d = a.entries, f = i.aTypedArray, h = i.exportTypedArrayMethod, p = l && l.prototype[s], y = !!p && ("values" == p.name || null == p.name);
                h("entries", function() {
                    return d.call(f(this));
                }), h("keys", function() {
                    return c.call(f(this));
                }), h("values", n, !y), h(s, n, !y);
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/global": 58,
                "../internals/well-known-symbol": 145,
                "../modules/es.array.iterator": 156
            }
        ],
        208: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/array-buffer-view-core"), o = n.aTypedArray, i = n.exportTypedArrayMethod, a = [].join;
                i("join", function(e) {
                    return a.apply(o(this), arguments);
                });
            },
            {
                "../internals/array-buffer-view-core": 12
            }
        ],
        209: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/array-buffer-view-core"), o = e("../internals/array-last-index-of"), i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("lastIndexOf", function(e) {
                    return o.apply(i(this), arguments);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-last-index-of": 20
            }
        ],
        210: [
            function(e216, t141, r) {
                "use strict";
                var n = e216("../internals/array-buffer-view-core"), o = e216("../internals/array-iteration").map, i = e216("../internals/species-constructor"), a = n.aTypedArray, s = n.aTypedArrayConstructor;
                (0, n.exportTypedArrayMethod)("map", function(e217, t142) {
                    return o(a(this), e217, 1 < arguments.length ? t142 : void 0, function(e, t) {
                        return new (s(i(e, e.constructor)))(t);
                    });
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-iteration": 19,
                "../internals/species-constructor": 120
            }
        ],
        211: [
            function(e218, t143, r) {
                "use strict";
                var n = e218("../internals/array-buffer-view-core"), o = e218("../internals/array-reduce").right, i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("reduceRight", function(e, t) {
                    return o(i(this), e, arguments.length, 1 < arguments.length ? t : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-reduce": 24
            }
        ],
        212: [
            function(e219, t144, r) {
                "use strict";
                var n = e219("../internals/array-buffer-view-core"), o = e219("../internals/array-reduce").left, i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("reduce", function(e, t) {
                    return o(i(this), e, arguments.length, 1 < arguments.length ? t : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-reduce": 24
            }
        ],
        213: [
            function(e220, t145, r106) {
                "use strict";
                var n50 = e220("../internals/array-buffer-view-core"), o = n50.aTypedArray, i = n50.exportTypedArrayMethod, a = Math.floor;
                i("reverse", function() {
                    for(var e, t = o(this).length, r = a(t / 2), n = 0; n < r;)e = this[n], this[n++] = this[--t], this[t] = e;
                    return this;
                });
            },
            {
                "../internals/array-buffer-view-core": 12
            }
        ],
        214: [
            function(e221, t146, r107) {
                "use strict";
                var n51 = e221("../internals/array-buffer-view-core"), s = e221("../internals/to-length"), l = e221("../internals/to-offset"), u = e221("../internals/to-object"), o33 = e221("../internals/fails"), c = n51.aTypedArray;
                (0, n51.exportTypedArrayMethod)("set", function(e, t) {
                    c(this);
                    var r = l(1 < arguments.length ? t : void 0, 1), n = this.length, o = u(e), i = s(o.length), a = 0;
                    if (n < i + r) throw RangeError("Wrong length");
                    for(; a < i;)this[r + a] = o[a++];
                }, o33(function() {
                    new Int8Array(1).set({
                    });
                }));
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/fails": 50,
                "../internals/to-length": 133,
                "../internals/to-object": 134,
                "../internals/to-offset": 135
            }
        ],
        215: [
            function(e222, t147, r108) {
                "use strict";
                var n52 = e222("../internals/array-buffer-view-core"), s = e222("../internals/species-constructor"), o34 = e222("../internals/fails"), l = n52.aTypedArray, u = n52.aTypedArrayConstructor, i23 = n52.exportTypedArrayMethod, c = [].slice;
                i23("slice", function(e, t) {
                    for(var r = c.call(l(this), e, t), n = s(this, this.constructor), o = 0, i = r.length, a = new (u(n))(i); o < i;)a[o] = r[o++];
                    return a;
                }, o34(function() {
                    new Int8Array(1).slice();
                }));
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/fails": 50,
                "../internals/species-constructor": 120
            }
        ],
        216: [
            function(e223, t148, r) {
                "use strict";
                var n = e223("../internals/array-buffer-view-core"), o = e223("../internals/array-iteration").some, i = n.aTypedArray;
                (0, n.exportTypedArrayMethod)("some", function(e, t) {
                    return o(i(this), e, 1 < arguments.length ? t : void 0);
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/array-iteration": 19
            }
        ],
        217: [
            function(e224, t, r) {
                "use strict";
                var n = e224("../internals/array-buffer-view-core"), o = n.aTypedArray, i = n.exportTypedArrayMethod, a = [].sort;
                i("sort", function(e) {
                    return a.call(o(this), e);
                });
            },
            {
                "../internals/array-buffer-view-core": 12
            }
        ],
        218: [
            function(e225, t149, r109) {
                "use strict";
                var n53 = e225("../internals/array-buffer-view-core"), i = e225("../internals/to-length"), a = e225("../internals/to-absolute-index"), s = e225("../internals/species-constructor"), l = n53.aTypedArray;
                (0, n53.exportTypedArrayMethod)("subarray", function(e, t) {
                    var r = l(this), n = r.length, o = a(e, n);
                    return new (s(r, r.constructor))(r.buffer, r.byteOffset + o * r.BYTES_PER_ELEMENT, i((void 0 === t ? n : a(t, n)) - o));
                });
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/species-constructor": 120,
                "../internals/to-absolute-index": 129,
                "../internals/to-length": 133
            }
        ],
        219: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/global"), o = e("../internals/array-buffer-view-core"), i = e("../internals/fails"), a = n.Int8Array, s = o.aTypedArray, l = o.exportTypedArrayMethod, u = [].toLocaleString, c = [].slice, d = !!a && i(function() {
                    u.call(new a(1));
                });
                l("toLocaleString", function() {
                    return u.apply(d ? c.call(s(this)) : s(this), arguments);
                }, i(function() {
                    return [
                        1,
                        2
                    ].toLocaleString() != new a([
                        1,
                        2
                    ]).toLocaleString();
                }) || !i(function() {
                    a.prototype.toLocaleString.call([
                        1,
                        2
                    ]);
                }));
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/fails": 50,
                "../internals/global": 58
            }
        ],
        220: [
            function(e, t, r) {
                "use strict";
                var n = e("../internals/array-buffer-view-core").exportTypedArrayMethod, o = e("../internals/fails"), i = e("../internals/global").Uint8Array, a = i && i.prototype || {
                }, s = [].toString, l = [].join;
                o(function() {
                    s.call({
                    });
                }) && (s = function() {
                    return l.call(this);
                }), n("toString", s, a.toString != s);
            },
            {
                "../internals/array-buffer-view-core": 12,
                "../internals/fails": 50,
                "../internals/global": 58
            }
        ],
        221: [
            function(e226, t150, r110) {
                e226("../internals/typed-array-constructor")("Uint16", function(n) {
                    return function(e, t, r) {
                        return n(this, e, t, r);
                    };
                });
            },
            {
                "../internals/typed-array-constructor": 139
            }
        ],
        222: [
            function(e227, t151, r111) {
                e227("../internals/typed-array-constructor")("Uint32", function(n) {
                    return function(e, t, r) {
                        return n(this, e, t, r);
                    };
                });
            },
            {
                "../internals/typed-array-constructor": 139
            }
        ],
        223: [
            function(e228, t152, r112) {
                e228("../internals/typed-array-constructor")("Uint8", function(n) {
                    return function(e, t, r) {
                        return n(this, e, t, r);
                    };
                });
            },
            {
                "../internals/typed-array-constructor": 139
            }
        ],
        224: [
            function(e229, t153, r113) {
                e229("../internals/typed-array-constructor")("Uint8", function(n) {
                    return function(e, t, r) {
                        return n(this, e, t, r);
                    };
                }, !0);
            },
            {
                "../internals/typed-array-constructor": 139
            }
        ],
        225: [
            function(e, t, r) {
                var n = e("../internals/global"), o = e("../internals/dom-iterables"), i = e("../internals/array-for-each"), a = e("../internals/create-non-enumerable-property");
                for(var s in o){
                    var l = n[s], u = l && l.prototype;
                    if (u && u.forEach !== i) try {
                        a(u, "forEach", i);
                    } catch (e) {
                        u.forEach = i;
                    }
                }
            },
            {
                "../internals/array-for-each": 16,
                "../internals/create-non-enumerable-property": 37,
                "../internals/dom-iterables": 44,
                "../internals/global": 58
            }
        ],
        226: [
            function(e, t, r) {
                var n = e("../internals/global"), o = e("../internals/dom-iterables"), i = e("../modules/es.array.iterator"), a = e("../internals/create-non-enumerable-property"), s = e("../internals/well-known-symbol"), l = s("iterator"), u = s("toStringTag"), c = i.values;
                for(var d in o){
                    var f = n[d], h = f && f.prototype;
                    if (h) {
                        if (h[l] !== c) try {
                            a(h, l, c);
                        } catch (e) {
                            h[l] = c;
                        }
                        if (h[u] || a(h, u, d), o[d]) {
                            for(var p in i)if (h[p] !== i[p]) try {
                                a(h, p, i[p]);
                            } catch (e230) {
                                h[p] = i[p];
                            }
                        }
                    }
                }
            },
            {
                "../internals/create-non-enumerable-property": 37,
                "../internals/dom-iterables": 44,
                "../internals/global": 58,
                "../internals/well-known-symbol": 145,
                "../modules/es.array.iterator": 156
            }
        ],
        227: [
            function(e231, t154, r114) {
                "use strict";
                e231("../modules/es.array.iterator");
                function o35(t) {
                    try {
                        return decodeURIComponent(t);
                    } catch (e) {
                        return t;
                    }
                }
                function a17(e) {
                    var t, r = e.replace(U, " "), n = 4;
                    try {
                        return decodeURIComponent(r);
                    } catch (e232) {
                        for(; n;)r = r.replace((t = n--, N[t - 1] || (N[t - 1] = RegExp("((?:%[\\da-f]{2}){" + t + "})", "gi"))), o35);
                        return r;
                    }
                }
                function n54(e) {
                    return B[e];
                }
                function i24(e) {
                    return encodeURIComponent(e).replace(F, n54);
                }
                function f(e, t) {
                    if (t) for(var r, n, o = t.split("&"), i = 0; i < o.length;)(r = o[i++]).length && (n = r.split("="), e.push({
                        key: a17(n.shift()),
                        value: a17(n.join("="))
                    }));
                }
                function h(e) {
                    this.entries.length = 0, f(this.entries, e);
                }
                function u5(e, t) {
                    if (e < t) throw TypeError("Not enough arguments");
                }
                var s12 = e231("../internals/export"), l9 = e231("../internals/get-built-in"), c5 = e231("../internals/native-url"), d6 = e231("../internals/redefine"), p = e231("../internals/redefine-all"), y = e231("../internals/set-to-string-tag"), m = e231("../internals/create-iterator-constructor"), g = e231("../internals/internal-state"), v = e231("../internals/an-instance"), b = e231("../internals/has"), _ = e231("../internals/function-bind-context"), x = e231("../internals/classof"), w = e231("../internals/an-object"), S = e231("../internals/is-object"), j = e231("../internals/object-create"), M = e231("../internals/create-property-descriptor"), E = e231("../internals/get-iterator"), T = e231("../internals/get-iterator-method"), O = e231("../internals/well-known-symbol"), C = l9("fetch"), L = l9("Headers"), P = O("iterator"), k = "URLSearchParams", A = k + "Iterator", R = g.set, D = g.getterFor(k), I = g.getterFor(A), U = /\+/g, N = Array(4), F = /[!'()~]|%20/g, B = {
                    "!": "%21",
                    "'": "%27",
                    "(": "%28",
                    ")": "%29",
                    "~": "%7E",
                    "%20": "+"
                }, G = m(function(e, t) {
                    R(this, {
                        type: A,
                        iterator: E(D(e).entries),
                        kind: t
                    });
                }, "Iterator", function() {
                    var e = I(this), t = e.kind, r = e.iterator.next(), n = r.value;
                    return r.done || (r.value = "keys" === t ? n.key : "values" === t ? n.value : [
                        n.key,
                        n.value
                    ]), r;
                }), V = function(e) {
                    v(this, V, k);
                    var t, r, n, o, i, a, s, l, u, c = 0 < arguments.length ? e : void 0, d = [];
                    if (R(this, {
                        type: k,
                        entries: d,
                        updateURL: function() {
                        },
                        updateSearchParams: h
                    }), void 0 !== c) {
                        if (S(c)) {
                            if ("function" == typeof (t = T(c))) for(n = (r = t.call(c)).next; !(o = n.call(r)).done;){
                                if ((s = (a = (i = E(w(o.value))).next).call(i)).done || (l = a.call(i)).done || !a.call(i).done) throw TypeError("Expected sequence with length 2");
                                d.push({
                                    key: s.value + "",
                                    value: l.value + ""
                                });
                            }
                            else for(u in c)b(c, u) && d.push({
                                key: u,
                                value: c[u] + ""
                            });
                        } else f(d, "string" == typeof c ? "?" === c.charAt(0) ? c.slice(1) : c : c + "");
                    }
                }, z = V.prototype;
                p(z, {
                    append: function(e, t) {
                        u5(arguments.length, 2);
                        var r = D(this);
                        r.entries.push({
                            key: e + "",
                            value: t + ""
                        }), r.updateURL();
                    },
                    delete: function(e) {
                        u5(arguments.length, 1);
                        for(var t = D(this), r = t.entries, n = e + "", o = 0; o < r.length;)r[o].key === n ? r.splice(o, 1) : o++;
                        t.updateURL();
                    },
                    get: function(e) {
                        u5(arguments.length, 1);
                        for(var t = D(this).entries, r = e + "", n = 0; n < t.length; n++)if (t[n].key === r) return t[n].value;
                        return null;
                    },
                    getAll: function(e) {
                        u5(arguments.length, 1);
                        for(var t = D(this).entries, r = e + "", n = [], o = 0; o < t.length; o++)t[o].key === r && n.push(t[o].value);
                        return n;
                    },
                    has: function(e) {
                        u5(arguments.length, 1);
                        for(var t = D(this).entries, r = e + "", n = 0; n < t.length;)if (t[n++].key === r) return !0;
                        return !1;
                    },
                    set: function(e, t) {
                        u5(arguments.length, 1);
                        for(var r, n = D(this), o = n.entries, i = !1, a = e + "", s = t + "", l = 0; l < o.length; l++)(r = o[l]).key === a && (i ? o.splice(l--, 1) : (i = !0, r.value = s));
                        i || o.push({
                            key: a,
                            value: s
                        }), n.updateURL();
                    },
                    sort: function() {
                        var e, t, r, n = D(this), o = n.entries, i = o.slice();
                        for(r = o.length = 0; r < i.length; r++){
                            for(e = i[r], t = 0; t < r; t++)if (o[t].key > e.key) {
                                o.splice(t, 0, e);
                                break;
                            }
                            t === r && o.push(e);
                        }
                        n.updateURL();
                    },
                    forEach: function(e, t) {
                        for(var r, n = D(this).entries, o = _(e, 1 < arguments.length ? t : void 0, 3), i = 0; i < n.length;)o((r = n[i++]).value, r.key, this);
                    },
                    keys: function() {
                        return new G(this, "keys");
                    },
                    values: function() {
                        return new G(this, "values");
                    },
                    entries: function() {
                        return new G(this, "entries");
                    }
                }, {
                    enumerable: !0
                }), d6(z, P, z.entries), d6(z, "toString", function() {
                    for(var e, t = D(this).entries, r = [], n = 0; n < t.length;)e = t[n++], r.push(i24(e.key) + "=" + i24(e.value));
                    return r.join("&");
                }, {
                    enumerable: !0
                }), y(V, k), s12({
                    global: !0,
                    forced: !c5
                }, {
                    URLSearchParams: V
                }), c5 || "function" != typeof C || "function" != typeof L || s12({
                    global: !0,
                    enumerable: !0,
                    forced: !0
                }, {
                    fetch: function(e, t) {
                        var r, n, o, i = [
                            e
                        ];
                        return 1 < arguments.length && (S(r = t) && (n = r.body, x(n) === k && ((o = r.headers ? new L(r.headers) : new L).has("content-type") || o.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"), r = j(r, {
                            body: M(0, String(n)),
                            headers: M(0, o)
                        }))), i.push(r)), C.apply(this, i);
                    }
                }), t154.exports = {
                    URLSearchParams: V,
                    getState: D
                };
            },
            {
                "../internals/an-instance": 9,
                "../internals/an-object": 10,
                "../internals/classof": 29,
                "../internals/create-iterator-constructor": 36,
                "../internals/create-property-descriptor": 38,
                "../internals/export": 49,
                "../internals/function-bind-context": 53,
                "../internals/get-built-in": 55,
                "../internals/get-iterator": 57,
                "../internals/get-iterator-method": 56,
                "../internals/has": 59,
                "../internals/internal-state": 69,
                "../internals/is-object": 73,
                "../internals/native-url": 83,
                "../internals/object-create": 89,
                "../internals/redefine": 107,
                "../internals/redefine-all": 106,
                "../internals/set-to-string-tag": 116,
                "../internals/well-known-symbol": 145,
                "../modules/es.array.iterator": 156
            }
        ],
        228: [
            function(e233, t155, r115) {
                "use strict";
                e233("../modules/es.string.iterator");
                function _(e, t) {
                    var r, n, o;
                    if ("[" == t.charAt(0)) {
                        if ("]" != t.charAt(t.length - 1)) return I;
                        if (!(r = Q(t.slice(1, -1)))) return I;
                        e.host = r;
                    } else if (ne(e)) {
                        if (t = m1(t), q.test(t)) return I;
                        if (null === (r = Z(t))) return I;
                        e.host = r;
                    } else {
                        if (W.test(t)) return I;
                        for(r = "", n = T(t), o = 0; o < n.length; o++)r += te(n[o], K);
                        e.host = r;
                    }
                }
                function c6(e234) {
                    var t156, r116, n56, o37;
                    if ("number" == typeof e234) {
                        for(t156 = [], r116 = 0; r116 < 4; r116++)t156.unshift(e234 % 256), e234 = A(e234 / 256);
                        return t156.join(".");
                    }
                    if ("object" != typeof e234) return e234;
                    for(t156 = "", n56 = (function(e) {
                        for(var t = null, r = 1, n = null, o = 0, i = 0; i < 8; i++)0 !== e[i] ? (r < o && (t = n, r = o), n = null, o = 0) : (null === n && (n = i), ++o);
                        return r < o && (t = n, r = o), t;
                    })(e234), r116 = 0; r116 < 8; r116++)o37 && 0 === e234[r116] || (o37 = o37 && !1, n56 === r116 ? (t156 += r116 ? ":" : "::", o37 = !0) : (t156 += e234[r116].toString(16), r116 < 7 && (t156 += ":")));
                    return "[" + t156 + "]";
                }
                function x(e) {
                    return "" != e.username || "" != e.password;
                }
                function o36(e) {
                    return !e.host || e.cannotBeABaseURL || "file" == e.scheme;
                }
                function w(e, t) {
                    var r;
                    return 2 == e.length && N.test(e.charAt(0)) && (":" == (r = e.charAt(1)) || !t && "|" == r);
                }
                function S(e) {
                    var t;
                    return 1 < e.length && w(e.slice(0, 2)) && (2 == e.length || "/" === (t = e.charAt(2)) || "\\" === t || "?" === t || "#" === t);
                }
                function j(e) {
                    var t = e.path, r = t.length;
                    !r || "file" == e.scheme && 1 == r && w(t[0], !0) || t.pop();
                }
                function d7(e, t, r, n) {
                    var o, i, a, s, l, u, c = r || oe, d = 0, f = "", h = !1, p = !1, y = !1;
                    for(r || (e.scheme = "", e.username = "", e.password = "", e.host = null, e.port = null, e.path = [], e.query = null, e.fragment = null, e.cannotBeABaseURL = !1, t = t.replace(X, "")), t = t.replace(Y, ""), o = T(t); d <= o.length;){
                        switch(i = o[d], c){
                            case oe:
                                if (!i || !N.test(i)) {
                                    if (r) return D;
                                    c = ae;
                                    continue;
                                }
                                f += i.toLowerCase(), c = ie;
                                break;
                            case ie:
                                if (i && (F.test(i) || "+" == i || "-" == i || "." == i)) f += i.toLowerCase();
                                else {
                                    if (":" != i) {
                                        if (r) return D;
                                        f = "", c = ae, d = 0;
                                        continue;
                                    }
                                    if (r && (ne(e) != E(re, f) || "file" == f && (x(e) || null !== e.port) || "file" == e.scheme && !e.host)) return;
                                    if (e.scheme = f, r) return void (ne(e) && re[e.scheme] == e.port && (e.port = null));
                                    f = "", "file" == e.scheme ? c = ge : ne(e) && n && n.scheme == e.scheme ? c = se : ne(e) ? c = de : "/" == o[d + 1] ? (c = le, d++) : (e.cannotBeABaseURL = !0, e.path.push(""), c = we);
                                }
                                break;
                            case ae:
                                if (!n || n.cannotBeABaseURL && "#" != i) return D;
                                if (n.cannotBeABaseURL && "#" == i) {
                                    e.scheme = n.scheme, e.path = n.path.slice(), e.query = n.query, e.fragment = "", e.cannotBeABaseURL = !0, c = je;
                                    break;
                                }
                                c = "file" == n.scheme ? ge : ue;
                                continue;
                            case se:
                                if ("/" != i || "/" != o[d + 1]) {
                                    c = ue;
                                    continue;
                                }
                                c = fe, d++;
                                break;
                            case le:
                                if ("/" == i) {
                                    c = he;
                                    break;
                                }
                                c = xe;
                                continue;
                            case ue:
                                if (e.scheme = n.scheme, i == M) e.username = n.username, e.password = n.password, e.host = n.host, e.port = n.port, e.path = n.path.slice(), e.query = n.query;
                                else if ("/" == i || "\\" == i && ne(e)) c = ce;
                                else if ("?" == i) e.username = n.username, e.password = n.password, e.host = n.host, e.port = n.port, e.path = n.path.slice(), e.query = "", c = Se;
                                else {
                                    if ("#" != i) {
                                        e.username = n.username, e.password = n.password, e.host = n.host, e.port = n.port, e.path = n.path.slice(), e.path.pop(), c = xe;
                                        continue;
                                    }
                                    e.username = n.username, e.password = n.password, e.host = n.host, e.port = n.port, e.path = n.path.slice(), e.query = n.query, e.fragment = "", c = je;
                                }
                                break;
                            case ce:
                                if (!ne(e) || "/" != i && "\\" != i) {
                                    if ("/" != i) {
                                        e.username = n.username, e.password = n.password, e.host = n.host, e.port = n.port, c = xe;
                                        continue;
                                    }
                                    c = he;
                                } else c = fe;
                                break;
                            case de:
                                if (c = fe, "/" != i || "/" != f.charAt(d + 1)) continue;
                                d++;
                                break;
                            case fe:
                                if ("/" == i || "\\" == i) break;
                                c = he;
                                continue;
                            case he:
                                if ("@" == i) {
                                    h && (f = "%40" + f), h = !0, a = T(f);
                                    for(var m = 0; m < a.length; m++){
                                        var g = a[m];
                                        if (":" != g || y) {
                                            var v = te(g, ee);
                                            y ? e.password += v : e.username += v;
                                        } else y = !0;
                                    }
                                    f = "";
                                } else if (i == M || "/" == i || "?" == i || "#" == i || "\\" == i && ne(e)) {
                                    if (h && "" == f) return "Invalid authority";
                                    d -= T(f).length + 1, f = "", c = pe;
                                } else f += i;
                                break;
                            case pe:
                            case ye:
                                if (r && "file" == e.scheme) {
                                    c = be;
                                    continue;
                                }
                                if (":" != i || p) {
                                    if (i == M || "/" == i || "?" == i || "#" == i || "\\" == i && ne(e)) {
                                        if (ne(e) && "" == f) return I;
                                        if (r && "" == f && (x(e) || null !== e.port)) return;
                                        if (s = _(e, f)) return s;
                                        if (f = "", c = _e, r) return;
                                        continue;
                                    }
                                    "[" == i ? p = !0 : "]" == i && (p = !1), f += i;
                                } else {
                                    if ("" == f) return I;
                                    if (s = _(e, f)) return s;
                                    if (f = "", c = me, r == ye) return;
                                }
                                break;
                            case me:
                                if (!B.test(i)) {
                                    if (i == M || "/" == i || "?" == i || "#" == i || "\\" == i && ne(e) || r) {
                                        if ("" != f) {
                                            var b = parseInt(f, 10);
                                            if (65535 < b) return U;
                                            e.port = ne(e) && b === re[e.scheme] ? null : b, f = "";
                                        }
                                        if (r) return;
                                        c = _e;
                                        continue;
                                    }
                                    return U;
                                }
                                f += i;
                                break;
                            case ge:
                                if (e.scheme = "file", "/" == i || "\\" == i) c = ve;
                                else {
                                    if (!n || "file" != n.scheme) {
                                        c = xe;
                                        continue;
                                    }
                                    if (i == M) e.host = n.host, e.path = n.path.slice(), e.query = n.query;
                                    else if ("?" == i) e.host = n.host, e.path = n.path.slice(), e.query = "", c = Se;
                                    else {
                                        if ("#" != i) {
                                            S(o.slice(d).join("")) || (e.host = n.host, e.path = n.path.slice(), j(e)), c = xe;
                                            continue;
                                        }
                                        e.host = n.host, e.path = n.path.slice(), e.query = n.query, e.fragment = "", c = je;
                                    }
                                }
                                break;
                            case ve:
                                if ("/" == i || "\\" == i) {
                                    c = be;
                                    break;
                                }
                                n && "file" == n.scheme && !S(o.slice(d).join("")) && (w(n.path[0], !0) ? e.path.push(n.path[0]) : e.host = n.host), c = xe;
                                continue;
                            case be:
                                if (i == M || "/" == i || "\\" == i || "?" == i || "#" == i) {
                                    if (!r && w(f)) c = xe;
                                    else if ("" == f) {
                                        if (e.host = "", r) return;
                                        c = _e;
                                    } else {
                                        if (s = _(e, f)) return s;
                                        if ("localhost" == e.host && (e.host = ""), r) return;
                                        f = "", c = _e;
                                    }
                                    continue;
                                }
                                f += i;
                                break;
                            case _e:
                                if (ne(e)) {
                                    if (c = xe, "/" != i && "\\" != i) continue;
                                } else if (r || "?" != i) {
                                    if (r || "#" != i) {
                                        if (i != M && (c = xe, "/" != i)) continue;
                                    } else e.fragment = "", c = je;
                                } else e.query = "", c = Se;
                                break;
                            case xe:
                                if (i == M || "/" == i || "\\" == i && ne(e) || !r && ("?" == i || "#" == i)) {
                                    if (".." === (u = (u = f).toLowerCase()) || "%2e." === u || ".%2e" === u || "%2e%2e" === u ? (j(e), "/" == i || "\\" == i && ne(e) || e.path.push("")) : "." === (l = f) || "%2e" === l.toLowerCase() ? "/" == i || "\\" == i && ne(e) || e.path.push("") : ("file" == e.scheme && !e.path.length && w(f) && (e.host && (e.host = ""), f = f.charAt(0) + ":"), e.path.push(f)), f = "", "file" == e.scheme && (i == M || "?" == i || "#" == i)) for(; 1 < e.path.length && "" === e.path[0];)e.path.shift();
                                    "?" == i ? (e.query = "", c = Se) : "#" == i && (e.fragment = "", c = je);
                                } else f += te(i, $);
                                break;
                            case we:
                                "?" == i ? (e.query = "", c = Se) : "#" == i ? (e.fragment = "", c = je) : i != M && (e.path[0] += te(i, K));
                                break;
                            case Se:
                                r || "#" != i ? i != M && ("'" == i && ne(e) ? e.query += "%27" : e.query += "#" == i ? "%23" : te(i, K)) : (e.fragment = "", c = je);
                                break;
                            case je:
                                i != M && (e.fragment += te(i, J));
                        }
                        d++;
                    }
                }
                function n55(e, t) {
                    return {
                        get: e,
                        set: t,
                        configurable: !0,
                        enumerable: !0
                    };
                }
                var M, i25 = e233("../internals/export"), f6 = e233("../internals/descriptors"), a18 = e233("../internals/native-url"), s13 = e233("../internals/global"), l10 = e233("../internals/object-define-properties"), u6 = e233("../internals/redefine"), h5 = e233("../internals/an-instance"), E = e233("../internals/has"), p4 = e233("../internals/object-assign"), T = e233("../internals/array-from"), y2 = e233("../internals/string-multibyte").codeAt, m1 = e233("../internals/string-punycode-to-ascii"), g1 = e233("../internals/set-to-string-tag"), v1 = e233("../modules/web.url-search-params"), b1 = e233("../internals/internal-state"), O = s13.URL, C = v1.URLSearchParams, L = v1.getState, P = b1.set, k = b1.getterFor("URL"), A = Math.floor, R = Math.pow, D = "Invalid scheme", I = "Invalid host", U = "Invalid port", N = /[A-Za-z]/, F = /[\d+-.A-Za-z]/, B = /\d/, G = /^(0x|0X)/, V = /^[0-7]+$/, z = /^\d+$/, H = /^[\dA-Fa-f]+$/, q = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/, W = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/, X = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g, Y = /[\u0009\u000A\u000D]/g, Z = function(e) {
                    var t, r, n, o, i, a, s, l = e.split(".");
                    if (l.length && "" == l[l.length - 1] && l.pop(), 4 < (t = l.length)) return e;
                    for(r = [], n = 0; n < t; n++){
                        if ("" == (o = l[n])) return e;
                        if (i = 10, 1 < o.length && "0" == o.charAt(0) && (i = G.test(o) ? 16 : 8, o = o.slice(8 == i ? 1 : 2)), "" === o) a = 0;
                        else {
                            if (!(10 == i ? z : 8 == i ? V : H).test(o)) return e;
                            a = parseInt(o, i);
                        }
                        r.push(a);
                    }
                    for(n = 0; n < t; n++)if (a = r[n], n == t - 1) {
                        if (a >= R(256, 5 - t)) return null;
                    } else if (255 < a) return null;
                    for(s = r.pop(), n = 0; n < r.length; n++)s += r[n] * R(256, 3 - n);
                    return s;
                }, Q = function(e) {
                    function t() {
                        return e.charAt(f);
                    }
                    var r, n, o, i, a, s, l, u = [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0
                    ], c = 0, d = null, f = 0;
                    if (":" == t()) {
                        if (":" != e.charAt(1)) return;
                        f += 2, d = ++c;
                    }
                    for(; t();){
                        if (8 == c) return;
                        if (":" != t()) {
                            for(r = n = 0; n < 4 && H.test(t());)r = 16 * r + parseInt(t(), 16), f++, n++;
                            if ("." == t()) {
                                if (0 == n) return;
                                if (f -= n, 6 < c) return;
                                for(o = 0; t();){
                                    if (i = null, 0 < o) {
                                        if (!("." == t() && o < 4)) return;
                                        f++;
                                    }
                                    if (!B.test(t())) return;
                                    for(; B.test(t());){
                                        if (a = parseInt(t(), 10), null === i) i = a;
                                        else {
                                            if (0 == i) return;
                                            i = 10 * i + a;
                                        }
                                        if (255 < i) return;
                                        f++;
                                    }
                                    u[c] = 256 * u[c] + i, 2 != ++o && 4 != o || c++;
                                }
                                if (4 != o) return;
                                break;
                            }
                            if (":" == t()) {
                                if (f++, !t()) return;
                            } else if (t()) return;
                            u[c++] = r;
                        } else {
                            if (null !== d) return;
                            f++, d = ++c;
                        }
                    }
                    if (null !== d) for(s = c - d, c = 7; 0 != c && 0 < s;)l = u[c], u[c--] = u[d + s - 1], u[d + --s] = l;
                    else if (8 != c) return;
                    return u;
                }, K = {
                }, J = p4({
                }, K, {
                    " ": 1,
                    '"': 1,
                    "<": 1,
                    ">": 1,
                    "`": 1
                }), $ = p4({
                }, J, {
                    "#": 1,
                    "?": 1,
                    "{": 1,
                    "}": 1
                }), ee = p4({
                }, $, {
                    "/": 1,
                    ":": 1,
                    ";": 1,
                    "=": 1,
                    "@": 1,
                    "[": 1,
                    "\\": 1,
                    "]": 1,
                    "^": 1,
                    "|": 1
                }), te = function(e, t) {
                    var r = y2(e, 0);
                    return 32 < r && r < 127 && !E(t, e) ? e : encodeURIComponent(e);
                }, re = {
                    ftp: 21,
                    file: null,
                    http: 80,
                    https: 443,
                    ws: 80,
                    wss: 443
                }, ne = function(e) {
                    return E(re, e.scheme);
                }, oe = {
                }, ie = {
                }, ae = {
                }, se = {
                }, le = {
                }, ue = {
                }, ce = {
                }, de = {
                }, fe = {
                }, he = {
                }, pe = {
                }, ye = {
                }, me = {
                }, ge = {
                }, ve = {
                }, be = {
                }, _e = {
                }, xe = {
                }, we = {
                }, Se = {
                }, je = {
                }, Me = function(e, t) {
                    var r, n, o = h5(this, Me, "URL"), i = 1 < arguments.length ? t : void 0, a = String(e), s = P(o, {
                        type: "URL"
                    });
                    if (void 0 !== i) {
                        if (i instanceof Me) r = k(i);
                        else if (n = d7(r = {
                        }, String(i))) throw TypeError(n);
                    }
                    if (n = d7(s, a, null, r)) throw TypeError(n);
                    var l = s.searchParams = new C, u = L(l);
                    u.updateSearchParams(s.query), u.updateURL = function() {
                        s.query = String(l) || null;
                    }, f6 || (o.href = Te.call(o), o.origin = Oe.call(o), o.protocol = Ce.call(o), o.username = Le.call(o), o.password = Pe.call(o), o.host = ke.call(o), o.hostname = Ae.call(o), o.port = Re.call(o), o.pathname = De.call(o), o.search = Ie.call(o), o.searchParams = Ue.call(o), o.hash = Ne.call(o));
                }, Ee = Me.prototype, Te = function() {
                    var e = k(this), t = e.scheme, r = e.username, n = e.password, o = e.host, i = e.port, a = e.path, s = e.query, l = e.fragment, u = t + ":";
                    return null !== o ? (u += "//", x(e) && (u += r + (n ? ":" + n : "") + "@"), u += c6(o), null !== i && (u += ":" + i)) : "file" == t && (u += "//"), u += e.cannotBeABaseURL ? a[0] : a.length ? "/" + a.join("/") : "", null !== s && (u += "?" + s), null !== l && (u += "#" + l), u;
                }, Oe = function() {
                    var e = k(this), t = e.scheme, r = e.port;
                    if ("blob" == t) try {
                        return new URL(t.path[0]).origin;
                    } catch (e235) {
                        return "null";
                    }
                    return "file" != t && ne(e) ? t + "://" + c6(e.host) + (null !== r ? ":" + r : "") : "null";
                }, Ce = function() {
                    return k(this).scheme + ":";
                }, Le = function() {
                    return k(this).username;
                }, Pe = function() {
                    return k(this).password;
                }, ke = function() {
                    var e = k(this), t = e.host, r = e.port;
                    return null === t ? "" : null === r ? c6(t) : c6(t) + ":" + r;
                }, Ae = function() {
                    var e = k(this).host;
                    return null === e ? "" : c6(e);
                }, Re = function() {
                    var e = k(this).port;
                    return null === e ? "" : String(e);
                }, De = function() {
                    var e = k(this), t = e.path;
                    return e.cannotBeABaseURL ? t[0] : t.length ? "/" + t.join("/") : "";
                }, Ie = function() {
                    var e = k(this).query;
                    return e ? "?" + e : "";
                }, Ue = function() {
                    return k(this).searchParams;
                }, Ne = function() {
                    var e = k(this).fragment;
                    return e ? "#" + e : "";
                };
                if (f6 && l10(Ee, {
                    href: n55(Te, function(e) {
                        var t = k(this), r = String(e), n = d7(t, r);
                        if (n) throw TypeError(n);
                        L(t.searchParams).updateSearchParams(t.query);
                    }),
                    origin: n55(Oe),
                    protocol: n55(Ce, function(e) {
                        var t = k(this);
                        d7(t, String(e) + ":", oe);
                    }),
                    username: n55(Le, function(e) {
                        var t = k(this), r = T(String(e));
                        if (!o36(t)) {
                            t.username = "";
                            for(var n = 0; n < r.length; n++)t.username += te(r[n], ee);
                        }
                    }),
                    password: n55(Pe, function(e) {
                        var t = k(this), r = T(String(e));
                        if (!o36(t)) {
                            t.password = "";
                            for(var n = 0; n < r.length; n++)t.password += te(r[n], ee);
                        }
                    }),
                    host: n55(ke, function(e) {
                        var t = k(this);
                        t.cannotBeABaseURL || d7(t, String(e), pe);
                    }),
                    hostname: n55(Ae, function(e) {
                        var t = k(this);
                        t.cannotBeABaseURL || d7(t, String(e), ye);
                    }),
                    port: n55(Re, function(e) {
                        var t = k(this);
                        o36(t) || ("" == (e = String(e)) ? t.port = null : d7(t, e, me));
                    }),
                    pathname: n55(De, function(e) {
                        var t = k(this);
                        t.cannotBeABaseURL || (t.path = [], d7(t, e + "", _e));
                    }),
                    search: n55(Ie, function(e) {
                        var t = k(this);
                        "" == (e = String(e)) ? t.query = null : ("?" == e.charAt(0) && (e = e.slice(1)), t.query = "", d7(t, e, Se)), L(t.searchParams).updateSearchParams(t.query);
                    }),
                    searchParams: n55(Ue),
                    hash: n55(Ne, function(e) {
                        var t = k(this);
                        "" != (e = String(e)) ? ("#" == e.charAt(0) && (e = e.slice(1)), t.fragment = "", d7(t, e, je)) : t.fragment = null;
                    })
                }), u6(Ee, "toJSON", function() {
                    return Te.call(this);
                }, {
                    enumerable: !0
                }), u6(Ee, "toString", function() {
                    return Te.call(this);
                }, {
                    enumerable: !0
                }), O) {
                    var Fe = O.createObjectURL, Be = O.revokeObjectURL;
                    Fe && u6(Me, "createObjectURL", function(e) {
                        return Fe.apply(O, arguments);
                    }), Be && u6(Me, "revokeObjectURL", function(e) {
                        return Be.apply(O, arguments);
                    });
                }
                g1(Me, "URL"), i25({
                    global: !0,
                    forced: !a18,
                    sham: !f6
                }, {
                    URL: Me
                });
            },
            {
                "../internals/an-instance": 9,
                "../internals/array-from": 17,
                "../internals/descriptors": 42,
                "../internals/export": 49,
                "../internals/global": 58,
                "../internals/has": 59,
                "../internals/internal-state": 69,
                "../internals/native-url": 83,
                "../internals/object-assign": 88,
                "../internals/object-define-properties": 90,
                "../internals/redefine": 107,
                "../internals/set-to-string-tag": 116,
                "../internals/string-multibyte": 122,
                "../internals/string-punycode-to-ascii": 123,
                "../modules/es.string.iterator": 183,
                "../modules/web.url-search-params": 227
            }
        ],
        229: [
            function(e, t, r) {
                "use strict";
                t.exports = e("./").polyfill();
            },
            {
                "./": 230
            }
        ],
        230: [
            function(z, r117, n57) {
                (function(G, V) {
                    var e236, t157;
                    e236 = this, t157 = function() {
                        function l(e) {
                            return "function" == typeof e;
                        }
                        var r118 = Array.isArray ? Array.isArray : function(e) {
                            return "[object Array]" === Object.prototype.toString.call(e);
                        }, n58 = 0, t158 = void 0, o38 = void 0, a19 = function(e, t) {
                            f[n58] = e, f[n58 + 1] = t, 2 === (n58 += 2) && (o38 ? o38(h) : v());
                        };
                        var e237 = "undefined" != typeof window ? window : void 0, i26 = e237 || {
                        }, s14 = i26.MutationObserver || i26.WebKitMutationObserver, u = "undefined" == typeof self && void 0 !== G && "[object process]" === ({
                        }).toString.call(G), c = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel;
                        function d() {
                            var e = setTimeout;
                            return function() {
                                return e(h, 1);
                            };
                        }
                        var f = new Array(1000);
                        function h() {
                            for(var e = 0; e < n58; e += 2)(0, f[e])(f[e + 1]), f[e] = void 0, f[e + 1] = void 0;
                            n58 = 0;
                        }
                        var p, y, m, g, v = void 0;
                        function b(e, t) {
                            var r = this, n = new this.constructor(w);
                            void 0 === n[x] && I(n);
                            var o = r._state;
                            if (o) {
                                var i = arguments[o - 1];
                                a19(function() {
                                    return R(o, n, i, r._result);
                                });
                            } else k(r, n, e, t);
                            return n;
                        }
                        function _(e) {
                            if (e && "object" == typeof e && e.constructor === this) return e;
                            var t = new this(w);
                            return O(t, e), t;
                        }
                        v = u ? function() {
                            return G.nextTick(h);
                        } : s14 ? (y = 0, m = new s14(h), g = document.createTextNode(""), m.observe(g, {
                            characterData: !0
                        }), function() {
                            g.data = y = ++y % 2;
                        }) : c ? ((p = new MessageChannel).port1.onmessage = h, function() {
                            return p.port2.postMessage(0);
                        }) : void 0 === e237 && "function" == typeof z ? (function() {
                            try {
                                var e = Function("return this")().require("vertx");
                                return void 0 !== (t158 = e.runOnLoop || e.runOnContext) ? function() {
                                    t158(h);
                                } : d();
                            } catch (e) {
                                return d();
                            }
                        })() : d();
                        var x = Math.random().toString(36).substring(2);
                        function w() {
                        }
                        var S = void 0, j = 1, M = 2;
                        function E(e238, n59, o) {
                            a19(function(t159) {
                                var r119 = !1, e239 = function(e, t, r, n) {
                                    try {
                                        e.call(t, r, n);
                                    } catch (e240) {
                                        return e240;
                                    }
                                }(o, n59, function(e) {
                                    r119 || (r119 = !0, n59 !== e ? O(t159, e) : L(t159, e));
                                }, function(e) {
                                    r119 || (r119 = !0, P(t159, e));
                                }, t159._label);
                                !r119 && e239 && (r119 = !0, P(t159, e239));
                            }, e238);
                        }
                        function T(e241, t, r) {
                            var n, o;
                            t.constructor === e241.constructor && r === b && t.constructor.resolve === _ ? (n = e241, (o = t)._state === j ? L(n, o._result) : o._state === M ? P(n, o._result) : k(o, void 0, function(e) {
                                return O(n, e);
                            }, function(e) {
                                return P(n, e);
                            })) : void 0 === r ? L(e241, t) : l(r) ? E(e241, t, r) : L(e241, t);
                        }
                        function O(t, e) {
                            if (t === e) P(t, new TypeError("You cannot resolve a promise with itself"));
                            else if (o = typeof (n = e), null === n || "object" != o && "function" != o) L(t, e);
                            else {
                                var r = void 0;
                                try {
                                    r = e.then;
                                } catch (e242) {
                                    return void P(t, e242);
                                }
                                T(t, e, r);
                            }
                            var n, o;
                        }
                        function C(e) {
                            e._onerror && e._onerror(e._result), A(e);
                        }
                        function L(e, t) {
                            e._state === S && (e._result = t, e._state = j, 0 !== e._subscribers.length && a19(A, e));
                        }
                        function P(e, t) {
                            e._state === S && (e._state = M, e._result = t, a19(C, e));
                        }
                        function k(e, t, r, n) {
                            var o = e._subscribers, i = o.length;
                            e._onerror = null, o[i] = t, o[i + j] = r, o[i + M] = n, 0 === i && e._state && a19(A, e);
                        }
                        function A(e) {
                            var t = e._subscribers, r = e._state;
                            if (0 !== t.length) {
                                for(var n = void 0, o = void 0, i = e._result, a = 0; a < t.length; a += 3)n = t[a], o = t[a + r], n ? R(r, n, o, i) : o(i);
                                e._subscribers.length = 0;
                            }
                        }
                        function R(e, t, r, n) {
                            var o = l(r), i = void 0, a = void 0, s = !0;
                            if (o) {
                                try {
                                    i = r(n);
                                } catch (e) {
                                    s = !1, a = e;
                                }
                                if (t === i) return void P(t, new TypeError("A promises callback cannot return that same promise."));
                            } else i = n;
                            t._state !== S || (o && s ? O(t, i) : !1 === s ? P(t, a) : e === j ? L(t, i) : e === M && P(t, i));
                        }
                        var D = 0;
                        function I(e) {
                            e[x] = D++, e._state = void 0, e._result = void 0, e._subscribers = [];
                        }
                        var U = (N.prototype._enumerate = function(e) {
                            for(var t = 0; this._state === S && t < e.length; t++)this._eachEntry(e[t], t);
                        }, N.prototype._eachEntry = function(t, e244) {
                            var r = this._instanceConstructor, n = r.resolve;
                            if (n === _) {
                                var o = void 0, i = void 0, a = !1;
                                try {
                                    o = t.then;
                                } catch (e243) {
                                    a = !0, i = e243;
                                }
                                if (o === b && t._state !== S) this._settledAt(t._state, e244, t._result);
                                else if ("function" != typeof o) this._remaining--, this._result[e244] = t;
                                else if (r === F) {
                                    var s = new r(w);
                                    a ? P(s, i) : T(s, t, o), this._willSettleAt(s, e244);
                                } else this._willSettleAt(new r(function(e) {
                                    return e(t);
                                }), e244);
                            } else this._willSettleAt(n(t), e244);
                        }, N.prototype._settledAt = function(e, t, r) {
                            var n = this.promise;
                            n._state === S && (this._remaining--, e === M ? P(n, r) : this._result[t] = r), 0 === this._remaining && L(n, this._result);
                        }, N.prototype._willSettleAt = function(e245, t) {
                            var r = this;
                            k(e245, void 0, function(e) {
                                return r._settledAt(j, t, e);
                            }, function(e) {
                                return r._settledAt(M, t, e);
                            });
                        }, N);
                        function N(e, t) {
                            this._instanceConstructor = e, this.promise = new e(w), this.promise[x] || I(this.promise), r118(t) ? (this.length = t.length, this._remaining = t.length, this._result = new Array(this.length), 0 === this.length ? L(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(t), 0 === this._remaining && L(this.promise, this._result))) : P(this.promise, new Error("Array Methods must be provided an Array"));
                        }
                        var F = (B.prototype.catch = function(e) {
                            return this.then(null, e);
                        }, B.prototype.finally = function(t) {
                            var r = this.constructor;
                            return l(t) ? this.then(function(e) {
                                return r.resolve(t()).then(function() {
                                    return e;
                                });
                            }, function(e) {
                                return r.resolve(t()).then(function() {
                                    throw e;
                                });
                            }) : this.then(t, t);
                        }, B);
                        function B(e246) {
                            this[x] = D++, this._result = this._state = void 0, this._subscribers = [], w !== e246 && ("function" != typeof e246 && (function() {
                                throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
                            })(), this instanceof B ? (function(t, e247) {
                                try {
                                    e247(function(e) {
                                        O(t, e);
                                    }, function(e) {
                                        P(t, e);
                                    });
                                } catch (e) {
                                    P(t, e);
                                }
                            })(this, e246) : (function() {
                                throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                            })());
                        }
                        return F.prototype.then = b, F.all = function(e) {
                            return new U(this, e).promise;
                        }, F.race = function(o) {
                            var i = this;
                            return r118(o) ? new i(function(e, t) {
                                for(var r = o.length, n = 0; n < r; n++)i.resolve(o[n]).then(e, t);
                            }) : new i(function(e, t) {
                                return t(new TypeError("You must pass an array to race."));
                            });
                        }, F.resolve = _, F.reject = function(e) {
                            var t = new this(w);
                            return P(t, e), t;
                        }, F._setScheduler = function(e) {
                            o38 = e;
                        }, F._setAsap = function(e) {
                            a19 = e;
                        }, F._asap = a19, F.polyfill = function() {
                            var e = void 0;
                            if (void 0 !== V) e = V;
                            else if ("undefined" != typeof self) e = self;
                            else try {
                                e = Function("return this")();
                            } catch (e248) {
                                throw new Error("polyfill failed because global object is unavailable in this environment");
                            }
                            var t = e.Promise;
                            if (t) {
                                var r = null;
                                try {
                                    r = Object.prototype.toString.call(t.resolve());
                                } catch (e) {
                                }
                                if ("[object Promise]" === r && !t.cast) return;
                            }
                            e.Promise = F;
                        }, F.Promise = F;
                    }, "object" == typeof n57 && void 0 !== r117 ? r117.exports = t157() : e236.ES6Promise = t157();
                }).call(this, z("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {
                });
            },
            {
                _process: 238
            }
        ],
        231: [
            function(e249, n60, o39) {
                !function(e, t) {
                    if (void 0 !== o39 && void 0 !== n60) t(o39, n60);
                    else {
                        var r = {
                            exports: {
                            }
                        };
                        t(r.exports, r), e.fetchJsonp = r.exports;
                    }
                }(this, function(e250, t160) {
                    "use strict";
                    var r120 = 5000, n61 = "callback";
                    function d(t) {
                        try {
                            delete window[t];
                        } catch (e) {
                            window[t] = void 0;
                        }
                    }
                    function f(e) {
                        var t = document.getElementById(e);
                        t && document.getElementsByTagName("head")[0].removeChild(t);
                    }
                    t160.exports = function(i) {
                        var a = arguments.length <= 1 || void 0 === arguments[1] ? {
                        } : arguments[1], s = i, l = a.timeout || r120, u = a.jsonpCallback || n61, c = void 0;
                        return new Promise(function(t, e251) {
                            var r = a.jsonpCallbackFunction || "jsonp_" + Date.now() + "_" + Math.ceil(100000 * Math.random()), n = u + "_" + r;
                            window[r] = function(e) {
                                t({
                                    ok: !0,
                                    json: function() {
                                        return Promise.resolve(e);
                                    }
                                }), c && clearTimeout(c), f(n), d(r);
                            }, s += -1 === s.indexOf("?") ? "?" : "&";
                            var o = document.createElement("script");
                            o.setAttribute("src", "" + s + u + "=" + r), a.charset && o.setAttribute("charset", a.charset), o.id = n, document.getElementsByTagName("head")[0].appendChild(o), c = setTimeout(function() {
                                e251(new Error("JSONP request to " + i + " timed out")), d(r), f(n), window[r] = function() {
                                    d(r);
                                };
                            }, l), o.onerror = function() {
                                e251(new Error("JSONP request to " + i + " failed")), d(r), f(n), c && clearTimeout(c);
                            };
                        });
                    };
                });
            },
            {
            }
        ],
        232: [
            function(e252, t161, r121) {
                var n62 = n62 || function(s) {
                    if (!(void 0 === s || "undefined" != typeof navigator && /MSIE [1-9]\./.test(navigator.userAgent))) {
                        var e253 = s.document, l = function() {
                            return s.URL || s.webkitURL || s;
                        }, u = e253.createElementNS("http://www.w3.org/1999/xhtml", "a"), c = "download" in u, d = /constructor/i.test(s.HTMLElement) || s.safari, f = /CriOS\/[\d]+/.test(navigator.userAgent), h = function(e) {
                            (s.setImmediate || s.setTimeout)(function() {
                                throw e;
                            }, 0);
                        }, p = function(e) {
                            setTimeout(function() {
                                "string" == typeof e ? l().revokeObjectURL(e) : e.remove();
                            }, 40000);
                        }, y = function(e) {
                            return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type) ? new Blob([
                                String.fromCharCode(65279),
                                e
                            ], {
                                type: e.type
                            }) : e;
                        }, n63 = function(e254, r122, t163) {
                            t163 || (e254 = y(e254));
                            function n64() {
                                !function(e, t, r) {
                                    for(var n = (t = [].concat(t)).length; n--;){
                                        var o = e["on" + t[n]];
                                        if ("function" == typeof o) try {
                                            o.call(e, r || e);
                                        } catch (e) {
                                            h(e);
                                        }
                                    }
                                }(i, "writestart progress write writeend".split(" "));
                            }
                            var o40, i = this, a = "application/octet-stream" === e254.type;
                            if (i.readyState = i.INIT, c) return o40 = l().createObjectURL(e254), void setTimeout(function() {
                                var e, t;
                                u.href = o40, u.download = r122, e = u, t = new MouseEvent("click"), e.dispatchEvent(t), n64(), p(o40), i.readyState = i.DONE;
                            });
                            !function() {
                                if ((f || a && d) && s.FileReader) {
                                    var t = new FileReader;
                                    return t.onloadend = function() {
                                        var e = f ? t.result : t.result.replace(/^data:[^;]*;/, "data:attachment/file;");
                                        s.open(e, "_blank") || (s.location.href = e), e = void 0, i.readyState = i.DONE, n64();
                                    }, t.readAsDataURL(e254), i.readyState = i.INIT;
                                }
                                (o40 = o40 || l().createObjectURL(e254), a) ? s.location.href = o40 : s.open(o40, "_blank") || (s.location.href = o40);
                                i.readyState = i.DONE, n64(), p(o40);
                            }();
                        }, t162 = n63.prototype;
                        return "undefined" != typeof navigator && navigator.msSaveOrOpenBlob ? function(e, t, r) {
                            return t = t || e.name || "download", r || (e = y(e)), navigator.msSaveOrOpenBlob(e, t);
                        } : (t162.abort = function() {
                        }, t162.readyState = t162.INIT = 0, t162.WRITING = 1, t162.DONE = 2, t162.error = t162.onwritestart = t162.onprogress = t162.onwrite = t162.onabort = t162.onerror = t162.onwriteend = null, function(e, t, r) {
                            return new n63(e, t || e.name || "download", r);
                        });
                    }
                }("undefined" != typeof self && self || "undefined" != typeof window && window || this.content);
                void 0 !== t161 && t161.exports && (t161.exports.saveAs = n62);
            },
            {
            }
        ],
        233: [
            function(e255, t164, r123) {
                r123.read = function(e, t, r, n, o) {
                    var i, a, s = 8 * o - n - 1, l = (1 << s) - 1, u = l >> 1, c = -7, d = r ? o - 1 : 0, f = r ? -1 : 1, h = e[t + d];
                    for(d += f, i = h & (1 << -c) - 1, h >>= -c, c += s; 0 < c; i = 256 * i + e[t + d], d += f, c -= 8);
                    for(a = i & (1 << -c) - 1, i >>= -c, c += n; 0 < c; a = 256 * a + e[t + d], d += f, c -= 8);
                    if (0 === i) i = 1 - u;
                    else {
                        if (i === l) return a ? NaN : 1 / 0 * (h ? -1 : 1);
                        a += Math.pow(2, n), i -= u;
                    }
                    return (h ? -1 : 1) * a * Math.pow(2, i - n);
                }, r123.write = function(e, t, r, n, o, i) {
                    var a, s, l, u = 8 * i - o - 1, c = (1 << u) - 1, d = c >> 1, f = 23 === o ? Math.pow(2, -24) - Math.pow(2, -77) : 0, h = n ? 0 : i - 1, p = n ? 1 : -1, y = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;
                    for(t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (s = isNaN(t) ? 1 : 0, a = c) : (a = Math.floor(Math.log(t) / Math.LN2), t * (l = Math.pow(2, -a)) < 1 && (a--, l *= 2), 2 <= (t += 1 <= a + d ? f / l : f * Math.pow(2, 1 - d)) * l && (a++, l /= 2), c <= a + d ? (s = 0, a = c) : 1 <= a + d ? (s = (t * l - 1) * Math.pow(2, o), a += d) : (s = t * Math.pow(2, d - 1) * Math.pow(2, o), a = 0)); 8 <= o; e[r + h] = 255 & s, h += p, s /= 256, o -= 8);
                    for(a = a << o | s, u += o; 0 < u; e[r + h] = 255 & a, h += p, a /= 256, u -= 8);
                    e[r + h - p] |= 128 * y;
                };
            },
            {
            }
        ],
        234: [
            function(e256, t165, r124) {
                "use strict";
                var n65;
                function m(e, t) {
                    return e.b === t.b && e.a === t.a;
                }
                function g(e, t) {
                    return e.b < t.b || e.b === t.b && e.a <= t.a;
                }
                function v(e, t, r) {
                    var n = t.b - e.b, o = r.b - t.b;
                    return 0 < n + o ? n < o ? t.a - e.a + n / (n + o) * (e.a - r.a) : t.a - r.a + o / (n + o) * (r.a - e.a) : 0;
                }
                function b(e, t, r) {
                    var n = t.b - e.b, o = r.b - t.b;
                    return 0 < n + o ? (t.a - r.a) * n + (t.a - e.a) * o : 0;
                }
                function _(e, t) {
                    return e.a < t.a || e.a === t.a && e.b <= t.b;
                }
                function x(e, t, r) {
                    var n = t.a - e.a, o = r.a - t.a;
                    return 0 < n + o ? n < o ? t.b - e.b + n / (n + o) * (e.b - r.b) : t.b - r.b + o / (n + o) * (r.b - e.b) : 0;
                }
                function w(e, t, r) {
                    var n = t.a - e.a, o = r.a - t.a;
                    return 0 < n + o ? (t.b - r.b) * n + (t.b - e.b) * o : 0;
                }
                function S(e, t, r, n) {
                    return (e = e < 0 ? 0 : e) <= (r = r < 0 ? 0 : r) ? 0 === r ? (t + n) / 2 : t + e / (e + r) * (n - t) : n + r / (e + r) * (t - n);
                }
                function a20(e) {
                    var t = i27(e.b);
                    return o41(t, e.c), o41(t.b, e.c), s15(t, e.a), t;
                }
                function j(e, t) {
                    var r = !1, n = !1;
                    e !== t && (t.a !== e.a && (n = !0, y3(t.a, e.a)), t.d !== e.d && (r = !0, l11(t.d, e.d)), h6(t, e), n || (o41(t, e.a), e.a.c = e), r || (s15(t, e.d), e.d.a = e));
                }
                function d8(e) {
                    var t = e.b, r = !1;
                    e.d !== e.b.d && (r = !0, l11(e.d, e.b.d)), e.c === e ? y3(e.a, null) : (e.b.d.a = K(e), e.a.c = e.c, h6(e, K(e)), r || s15(e, e.d)), t.c === t ? (y3(t.a, null), l11(t.d, null)) : (e.d.a = K(t), t.a.c = t.c, h6(t, K(t))), p5(e);
                }
                function M(e) {
                    var t = i27(e), r = t.b;
                    return h6(t, e.e), t.a = e.b.a, o41(r, t.a), t.d = r.d = e.d, t = t.b, h6(e.b, K(e.b)), h6(e.b, t), e.b.a = t.a, t.b.a.c = t.b, t.b.d = e.b.d, t.f = e.f, t.b.f = e.b.f, t;
                }
                function f7(e, t) {
                    var r = !1, n = i27(e), o = n.b;
                    return t.d !== e.d && (r = !0, l11(t.d, e.d)), h6(n, e.e), h6(o, t), n.a = e.b.a, o.a = t.a, n.d = o.d = e.d, e.d.a = o, r || s15(n, e.d), n;
                }
                function i27(e) {
                    var t = new Q, r = new Q, n = e.b.h;
                    return (((r.h = n).b.h = t).h = e).b.h = r, t.b = r, ((t.c = t).e = r).b = t, (r.c = r).e = t;
                }
                function h6(e, t) {
                    var r = e.c, n = t.c;
                    r.b.e = t, (n.b.e = e).c = n, t.c = r;
                }
                function o41(e, t) {
                    var r = t.f, n = new $(t, r);
                    for(r.e = n, r = (t.f = n).c = e; r.a = n, (r = r.c) !== e;);
                }
                function s15(e, t) {
                    var r = t.d, n = new Z(t, r);
                    for(r.b = n, (t.d = n).a = e, n.c = t.c, r = e; r.d = n, (r = r.e) !== e;);
                }
                function p5(e) {
                    var t = e.h;
                    e = e.b.h, (t.b.h = e).b.h = t;
                }
                function y3(e, t) {
                    for(var r = e.c, n = r; n.a = t, (n = n.c) !== r;);
                    r = e.f, ((n = e.e).f = r).e = n;
                }
                function l11(e, t) {
                    for(var r = e.a, n = r; n.d = t, (n = n.e) !== r;);
                    r = e.d, ((n = e.b).d = r).b = n;
                }
                function E(e) {
                    var t = 0;
                    return Math.abs(e[1]) > Math.abs(e[0]) && (t = 1), Math.abs(e[2]) > Math.abs(e[t]) && (t = 2), t;
                }
                function T(e, t) {
                    e.f += t.f, e.b.f += t.b.f;
                }
                function u7(e, t, r) {
                    return e = e.a, t = t.a, r = r.a, t.b.a === e ? r.b.a === e ? g(t.a, r.a) ? b(r.b.a, t.a, r.a) <= 0 : 0 <= b(t.b.a, r.a, t.a) : b(r.b.a, e, r.a) <= 0 : r.b.a === e ? 0 <= b(t.b.a, e, t.a) : (t = v(t.b.a, e, t.a), (e = v(r.b.a, e, r.a)) <= t);
                }
                function O(e) {
                    e.a.i = null;
                    var t = e.e;
                    t.a.c = t.c, t.c.a = t.a, e.e = null;
                }
                function c7(e, t) {
                    d8(e.a), e.c = !1, (e.a = t).i = e;
                }
                function C(e) {
                    for(var t = e.a.a; (e = de(e)).a.a === t;);
                    return e.c && (c7(e, t = f7(ce(e).a.b, e.a.e)), e = de(e)), e;
                }
                function L(e, t, r) {
                    var n = new ue;
                    return n.a = r, n.e = H(e.f, t.e, n), r.i = n;
                }
                function P(e, t) {
                    switch(e.s){
                        case 100130:
                            return 0 != (1 & t);
                        case 100131:
                            return 0 !== t;
                        case 100132:
                            return 0 < t;
                        case 100133:
                            return t < 0;
                        case 100134:
                            return 2 <= t || t <= -2;
                    }
                    return !1;
                }
                function k(e) {
                    var t = e.a, r = t.d;
                    r.c = e.d, r.a = t, O(e);
                }
                function A(e, t, r) {
                    for(t = (e = t).a; e !== r;){
                        e.c = !1;
                        var n = ce(e), o = n.a;
                        if (o.a !== t.a) {
                            if (!n.c) {
                                k(e);
                                break;
                            }
                            c7(n, o = f7(t.c.b, o.b));
                        }
                        t.c !== o && (j(K(o), o), j(t, o)), k(e), t = n.a, e = n;
                    }
                    return t;
                }
                function R(e, t, r, n, o, i) {
                    for(var a = !0; L(e, t, r.b), (r = r.c) !== n;);
                    for(null === o && (o = ce(t).a.b.c); (r = (n = ce(t)).a.b).a === o.a;)r.c !== o && (j(K(r), r), j(K(o), r)), n.f = t.f - r.f, n.d = P(e, n.f), t.b = !0, !a && N(e, t) && (T(r, o), O(t), d8(o)), a = !1, t = n, o = r;
                    t.b = !0, i && B(e, t);
                }
                function D(e, t, r, n, o) {
                    var i = [
                        t.g[0],
                        t.g[1],
                        t.g[2]
                    ];
                    t.d = null, t.d = e.o && e.o(i, r, n, e.c) || null, null === t.d && (o ? e.n || (Y(e, 100156), e.n = !0) : t.d = r[0]);
                }
                function I(e, t, r) {
                    var n = [
                        null,
                        null,
                        null,
                        null
                    ];
                    n[0] = t.a.d, n[1] = r.a.d, D(e, t.a, n, [
                        0.5,
                        0.5,
                        0,
                        0
                    ], !1), j(t, r);
                }
                function U(e, t, r, n, o) {
                    var i = Math.abs(t.b - e.b) + Math.abs(t.a - e.a), a = Math.abs(r.b - e.b) + Math.abs(r.a - e.a), s = o + 1;
                    n[o] = 0.5 * a / (i + a), n[s] = 0.5 * i / (i + a), e.g[0] += n[o] * t.g[0] + n[s] * r.g[0], e.g[1] += n[o] * t.g[1] + n[s] * r.g[1], e.g[2] += n[o] * t.g[2] + n[s] * r.g[2];
                }
                function N(e, t) {
                    var r = ce(t), n = t.a, o = r.a;
                    if (g(n.a, o.a)) {
                        if (0 < b(o.b.a, n.a, o.a)) return !1;
                        if (m(n.a, o.a)) {
                            if (n.a !== o.a) {
                                r = e.e;
                                var i = n.a.h;
                                if (0 <= i) {
                                    var a = (r = r.b).d, s = r.e, l = r.c, u = l[i];
                                    a[u] = a[r.a], (l[a[u]] = u) <= --r.a && (u <= 1 ? se(r, u) : g(s[a[u >> 1]], s[a[u]]) ? se(r, u) : le(r, u)), s[i] = null, l[i] = r.b, r.b = i;
                                } else for(r.c[-(i + 1)] = null; 0 < r.a && null === r.c[r.d[r.a - 1]];)--r.a;
                                I(e, K(o), n);
                            }
                        } else M(o.b), j(n, K(o)), t.b = r.b = !0;
                    } else {
                        if (b(n.b.a, o.a, n.a) < 0) return !1;
                        de(t).b = t.b = !0, M(n.b), j(K(o), n);
                    }
                    return !0;
                }
                function F(e, t) {
                    var r = ce(t), n = t.a, o = r.a, i = n.a, a = o.a, s = n.b.a, l = o.b.a, u = new $;
                    if (b(s, e.a, i), b(l, e.a, a), i === a || Math.min(i.a, s.a) > Math.max(a.a, l.a)) return !1;
                    if (g(i, a)) {
                        if (0 < b(l, i, a)) return !1;
                    } else if (b(s, a, i) < 0) return !1;
                    var c, d, f = s, h = i, p = l, y = a;
                    if (g(f, h) || (c = f, f = h, h = c), g(p, y) || (c = p, p = y, y = c), g(f, p) || (c = f, f = p, p = c, c = h, h = y, y = c), g(p, h) ? g(h, y) ? ((c = v(f, p, h)) + (d = v(p, h, y)) < 0 && (c = -c, d = -d), u.b = S(c, p.b, d, h.b)) : ((c = b(f, p, h)) + (d = -b(f, y, h)) < 0 && (c = -c, d = -d), u.b = S(c, p.b, d, y.b)) : u.b = (p.b + h.b) / 2, _(f, h) || (c = f, f = h, h = c), _(p, y) || (c = p, p = y, y = c), _(f, p) || (c = f, f = p, p = c, c = h, h = y, y = c), _(p, h) ? _(h, y) ? ((c = x(f, p, h)) + (d = x(p, h, y)) < 0 && (c = -c, d = -d), u.a = S(c, p.a, d, h.a)) : ((c = w(f, p, h)) + (d = -w(f, y, h)) < 0 && (c = -c, d = -d), u.a = S(c, p.a, d, y.a)) : u.a = (p.a + h.a) / 2, g(u, e.a) && (u.b = e.a.b, u.a = e.a.a), f = g(i, a) ? i : a, g(f, u) && (u.b = f.b, u.a = f.a), m(u, i) || m(u, a)) return N(e, t), !1;
                    if (!m(s, e.a) && 0 <= b(s, e.a, u) || !m(l, e.a) && b(l, e.a, u) <= 0) {
                        if (l === e.a) return M(n.b), j(o.b, n), n = ce(t = C(t)).a, A(e, ce(t), r), R(e, t, K(n), n, n, !0), !0;
                        if (s !== e.a) return 0 <= b(s, e.a, u) && (de(t).b = t.b = !0, M(n.b), n.a.b = e.a.b, n.a.a = e.a.a), b(l, e.a, u) <= 0 && (t.b = r.b = !0, M(o.b), o.a.b = e.a.b, o.a.a = e.a.a), !1;
                        for(M(o.b), j(n.e, K(o)), a = (i = r = t).a.b.a; (i = de(i)).a.b.a === a;);
                        return i = ce(t = i).a.b.c, r.a = K(o), R(e, t, (o = A(e, r, null)).c, n.b.c, i, !0), !0;
                    }
                    return M(n.b), M(o.b), j(K(o), n), n.a.b = u.b, n.a.a = u.a, n.a.h = te(e.e, n.a), n = n.a, o = [
                        0,
                        0,
                        0,
                        0
                    ], u = [
                        i.d,
                        s.d,
                        a.d,
                        l.d
                    ], n.g[0] = n.g[1] = n.g[2] = 0, U(n, i, s, o, 0), U(n, a, l, o, 2), D(e, n, u, o, !0), de(t).b = t.b = r.b = !0, !1;
                }
                function B(e, t) {
                    for(var r = ce(t);;){
                        for(; r.b;)r = ce(t = r);
                        if (!t.b && (null === (t = de(r = t)) || !t.b)) break;
                        t.b = !1;
                        var n, o = t.a, i = r.a;
                        if (n = o.b.a !== i.b.a) e: {
                            var a = ce(n = t), s = n.a, l = a.a, u = void 0;
                            if (g(s.b.a, l.b.a)) {
                                if (b(s.b.a, l.b.a, s.a) < 0) {
                                    n = !1;
                                    break e;
                                }
                                de(n).b = n.b = !0, u = M(s), j(l.b, u), u.d.c = n.d;
                            } else {
                                if (0 < b(l.b.a, s.b.a, l.a)) {
                                    n = !1;
                                    break e;
                                }
                                n.b = a.b = !0, u = M(l), j(s.e, l.b), u.b.d.c = n.d;
                            }
                            n = !0;
                        }
                        if (n && (r.c ? (O(r), d8(i), i = (r = ce(t)).a) : t.c && (O(t), d8(o), o = (t = de(r)).a)), o.a !== i.a) {
                            if (o.b.a === i.b.a || t.c || r.c || o.b.a !== e.a && i.b.a !== e.a) N(e, t);
                            else if (F(e, t)) break;
                        }
                        o.a === i.a && o.b.a === i.b.a && (T(i, o), O(t), d8(o), t = de(r));
                    }
                }
                function G(e, t) {
                    for(var r = (e.a = t).c; null === r.i;)if ((r = r.c) === t.c) {
                        r = e;
                        var n = t;
                        (a = new ue).a = n.c.b;
                        for(var o = (l = r.f).a; null !== (o = o.a).b && !l.c(l.b, a, o.b););
                        var i = ce(l = o.b), a = l.a;
                        o = i.a;
                        if (0 === b(a.b.a, n, a.a)) m((a = l.a).a, n) || m(a.b.a, n) || (M(a.b), l.c && (d8(a.c), l.c = !1), j(n.c, a), G(r, n));
                        else {
                            var s = g(o.b.a, a.b.a) ? l : i;
                            i = void 0;
                            l.d || s.c ? (i = s === l ? f7(n.c.b, a.e) : f7(o.b.c.b, n.c).b, s.c ? c7(s, i) : ((l = L(a = r, l, i)).f = de(l).f + l.a.f, l.d = P(a, l.f)), G(r, n)) : R(r, l, n.c, n.c, null, !0);
                        }
                        return;
                    }
                    if (l = (a = ce(r = C(r.i))).a, (a = A(e, a, null)).c === l) {
                        a = (l = a).c, o = ce(r), i = r.a, s = o.a;
                        var l, u = !1;
                        i.b.a !== s.b.a && F(e, r), m(i.a, e.a) && (j(K(a), i), a = ce(r = C(r)).a, A(e, ce(r), o), u = !0), m(s.a, e.a) && (j(l, K(s)), l = A(e, o, null), u = !0), u ? R(e, r, l.c, a, a, !0) : (n = g(s.a, i.a) ? K(s) : i, R(e, r, n = f7(l.c.b, n), n.c, n.c, !1), n.b.i.c = !0, B(e, r));
                    } else R(e, r, a.c, l, l, !0);
                }
                function V(e, t) {
                    var r = new ue, n = a20(e.b);
                    n.a.b = 4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, n.a.a = t, n.b.a.b = -4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, n.b.a.a = t, e.a = n.b.a, r.a = n, r.f = 0, r.d = !1, r.c = !1, r.h = !0, r.b = !1, n = H(n = e.f, n.a, r), r.e = n;
                }
                function z(e) {
                    this.a = new q, this.b = e, this.c = u7;
                }
                function H(e, t, r) {
                    for(; null !== (t = t.c).b && !e.c(e.b, t.b, r););
                    return e = new q(r, t.a, t), t.a.c = e, t.a = e;
                }
                function q(e, t, r) {
                    this.b = e || null, this.a = t || this, this.c = r || this;
                }
                function W() {
                    this.d = 0, this.p = this.b = this.q = null, this.j = [
                        0,
                        0,
                        0
                    ], this.s = 100130, this.n = !1, this.o = this.a = this.e = this.f = null, this.m = !1, this.c = this.r = this.i = this.k = this.l = this.h = null;
                }
                function X(e, t) {
                    if (e.d !== t) for(; e.d !== t;)if (e.d < t) switch(e.d){
                        case 0:
                            Y(e, 100151), e.u(null);
                            break;
                        case 1:
                            Y(e, 100152), e.t();
                    }
                    else switch(e.d){
                        case 2:
                            Y(e, 100154), e.v();
                            break;
                        case 1:
                            Y(e, 100153), e.w();
                    }
                }
                function Y(e, t) {
                    e.p && e.p(t, e.c);
                }
                function Z(e, t) {
                    this.b = e || this, this.d = t || this, this.a = null, this.c = !1;
                }
                function Q() {
                    (this.h = this).i = this.d = this.a = this.e = this.c = this.b = null, this.f = 0;
                }
                function K(e) {
                    return e.b.e;
                }
                function J() {
                    this.c = new $, this.a = new Z, this.b = new Q, this.d = new Q, this.b.b = this.d, this.d.b = this.b;
                }
                function $(e, t) {
                    this.e = e || this, this.f = t || this, this.d = this.c = null, this.g = [
                        0,
                        0,
                        0
                    ], this.h = this.a = this.b = 0;
                }
                function ee() {
                    this.c = [], this.d = null, this.a = 0, this.e = !1, this.b = new ne;
                }
                function te(e, t) {
                    if (e.e) {
                        var r, n = e.b, o = ++n.a;
                        return 2 * o > n.f && (n.f *= 2, n.c = oe(n.c, n.f + 1)), 0 === n.b ? r = o : (r = n.b, n.b = n.c[n.b]), n.e[r] = t, n.c[r] = o, n.d[o] = r, n.h && le(n, o), r;
                    }
                    return n = e.a++, e.c[n] = t, -(n + 1);
                }
                function re(e) {
                    if (0 === e.a) return ae(e.b);
                    var t = e.c[e.d[e.a - 1]];
                    if (0 !== e.b.a && g(ie(e.b), t)) return ae(e.b);
                    for(; --e.a, 0 < e.a && null === e.c[e.d[e.a - 1]];);
                    return t;
                }
                function ne() {
                    this.d = oe([
                        0
                    ], 33), this.e = [
                        null,
                        null
                    ], this.c = [
                        0,
                        0
                    ], this.a = 0, this.f = 32, this.b = 0, this.h = !1, this.d[1] = 1;
                }
                function oe(e, t) {
                    for(var r = Array(t), n = 0; n < e.length; n++)r[n] = e[n];
                    for(; n < t; n++)r[n] = 0;
                    return r;
                }
                function ie(e) {
                    return e.e[e.d[1]];
                }
                function ae(e) {
                    var t = e.d, r = e.e, n = e.c, o = t[1], i = r[o];
                    return 0 < e.a && (t[1] = t[e.a], n[t[1]] = 1, r[o] = null, n[o] = e.b, e.b = o, 0 < --e.a && se(e, 1)), i;
                }
                function se(e, t) {
                    for(var r = e.d, n = e.e, o = e.c, i = t, a = r[i];;){
                        var s = i << 1;
                        s < e.a && g(n[r[s + 1]], n[r[s]]) && (s += 1);
                        var l = r[s];
                        if (s > e.a || g(n[a], n[l])) {
                            o[r[i] = a] = i;
                            break;
                        }
                        o[r[i] = l] = i, i = s;
                    }
                }
                function le(e, t) {
                    for(var r = e.d, n = e.e, o = e.c, i = t, a = r[i];;){
                        var s = i >> 1, l = r[s];
                        if (0 == s || g(n[l], n[a])) {
                            o[r[i] = a] = i;
                            break;
                        }
                        o[r[i] = l] = i, i = s;
                    }
                }
                function ue() {
                    this.e = this.a = null, this.f = 0, this.c = this.b = this.h = this.d = !1;
                }
                function ce(e) {
                    return e.e.c.b;
                }
                function de(e) {
                    return e.e.a.b;
                }
                (n65 = W.prototype).x = function() {
                    X(this, 0);
                }, n65.B = function(e, t) {
                    switch(e){
                        case 100142:
                            return;
                        case 100140:
                            switch(t){
                                case 100130:
                                case 100131:
                                case 100132:
                                case 100133:
                                case 100134:
                                    return void (this.s = t);
                            }
                            break;
                        case 100141:
                            return void (this.m = !!t);
                        default:
                            return void Y(this, 100900);
                    }
                    Y(this, 100901);
                }, n65.y = function(e) {
                    switch(e){
                        case 100142:
                            return 0;
                        case 100140:
                            return this.s;
                        case 100141:
                            return this.m;
                        default:
                            Y(this, 100900);
                    }
                    return !1;
                }, n65.A = function(e, t, r) {
                    this.j[0] = e, this.j[1] = t, this.j[2] = r;
                }, n65.z = function(e, t) {
                    var r = t || null;
                    switch(e){
                        case 100100:
                        case 100106:
                            this.h = r;
                            break;
                        case 100104:
                        case 100110:
                            this.l = r;
                            break;
                        case 100101:
                        case 100107:
                            this.k = r;
                            break;
                        case 100102:
                        case 100108:
                            this.i = r;
                            break;
                        case 100103:
                        case 100109:
                            this.p = r;
                            break;
                        case 100105:
                        case 100111:
                            this.o = r;
                            break;
                        case 100112:
                            this.r = r;
                            break;
                        default:
                            Y(this, 100900);
                    }
                }, n65.C = function(e, t) {
                    var r = !1, n = [
                        0,
                        0,
                        0
                    ];
                    X(this, 2);
                    for(var o = 0; o < 3; ++o){
                        var i = e[o];
                        i < -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 && (i = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, r = !0), 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 < i && (i = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, r = !0), n[o] = i;
                    }
                    r && Y(this, 100155), null === (r = this.q) ? j(r = a20(this.b), r.b) : (M(r), r = r.e), r.a.d = t, r.a.g[0] = n[0], r.a.g[1] = n[1], r.a.g[2] = n[2], r.f = 1, r.b.f = -1, this.q = r;
                }, n65.u = function(e) {
                    X(this, 0), this.d = 1, this.b = new J, this.c = e;
                }, n65.t = function() {
                    X(this, 1), this.d = 2, this.q = null;
                }, n65.v = function() {
                    X(this, 2), this.d = 1;
                }, n65.w = function() {
                    X(this, 1), this.d = 0;
                    var e257, t166, r125 = !1, n = [
                        l = this.j[0],
                        o = this.j[1],
                        a = this.j[2]
                    ];
                    if (0 === l && 0 === o && 0 === a) {
                        for(var o = [
                            -2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
                            -2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
                            -2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                        ], i = [
                            2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
                            2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
                            2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                        ], a = [], s = [], l = (r125 = this.b.c).e; l !== r125; l = l.e)for(var u = 0; u < 3; ++u){
                            var c = l.g[u];
                            c < i[u] && (i[u] = c, s[u] = l), c > o[u] && (o[u] = c, a[u] = l);
                        }
                        if (l = 0, o[1] - i[1] > o[0] - i[0] && (l = 1), o[2] - i[2] > o[l] - i[l] && (l = 2), i[l] >= o[l]) n[0] = 0, n[1] = 0, n[2] = 1;
                        else {
                            for(o = 0, i = s[l], a = a[l], s = [
                                0,
                                0,
                                0
                            ], i = [
                                i.g[0] - a.g[0],
                                i.g[1] - a.g[1],
                                i.g[2] - a.g[2]
                            ], u = [
                                0,
                                0,
                                0
                            ], l = r125.e; l !== r125; l = l.e)u[0] = l.g[0] - a.g[0], u[1] = l.g[1] - a.g[1], u[2] = l.g[2] - a.g[2], s[0] = i[1] * u[2] - i[2] * u[1], s[1] = i[2] * u[0] - i[0] * u[2], s[2] = i[0] * u[1] - i[1] * u[0], o < (c = s[0] * s[0] + s[1] * s[1] + s[2] * s[2]) && (o = c, n[0] = s[0], n[1] = s[1], n[2] = s[2]);
                            o <= 0 && (n[0] = n[1] = n[2] = 0, n[E(i)] = 1);
                        }
                        r125 = !0;
                    }
                    for(s = E(n), l = this.b.c, o = (s + 1) % 3, a = (s + 2) % 3, s = 0 < n[s] ? 1 : -1, n = l.e; n !== l; n = n.e)n.b = n.g[o], n.a = s * n.g[a];
                    if (r125) {
                        for(n = 0, l = (r125 = this.b.a).b; l !== r125; l = l.b)if (!((o = l.a).f <= 0)) for(; n += (o.a.b - o.b.a.b) * (o.a.a + o.b.a.a), (o = o.e) !== l.a;);
                        if (n < 0) for(r125 = (n = this.b.c).e; r125 !== n; r125 = r125.e)r125.a = -r125.a;
                    }
                    for(this.n = !1, l = (n = this.b.b).h; l !== n; l = r125)r125 = l.h, o = l.e, m(l.a, l.b.a) && l.e.e !== l && (I(this, o, l), d8(l), o = (l = o).e), o.e === l && (o !== l && (o !== r125 && o !== r125.b || (r125 = r125.h), d8(o)), l !== r125 && l !== r125.b || (r125 = r125.h), d8(l));
                    for(this.e = n = new ee, l = (r125 = this.b.c).e; l !== r125; l = l.e)l.h = te(n, l);
                    for(!function(e258) {
                        e258.d = [];
                        for(var t167 = 0; t167 < e258.a; t167++)e258.d[t167] = t167;
                        e258.d.sort(function(r) {
                            return function(e, t) {
                                return g(r[e], r[t]) ? 1 : -1;
                            };
                        }(e258.c)), e258.e = !0, (function(e) {
                            for(var t = e.a; 1 <= t; --t)se(e, t);
                            e.h = !0;
                        })(e258.b);
                    }(n), this.f = new z(this), V(this, -4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), V(this, 4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000); null !== (n = re(this.e));){
                        for(;;){
                            e: if (l = this.e, 0 === l.a) r125 = ie(l.b);
                            else if (r125 = l.c[l.d[l.a - 1]], 0 !== l.b.a && (l = ie(l.b), g(l, r125))) {
                                r125 = l;
                                break e;
                            }
                            if (null === r125 || !m(r125, n)) break;
                            r125 = re(this.e), I(this, n.c, r125.c);
                        }
                        G(this, n);
                    }
                    for(this.a = this.f.a.a.b.a.a, n = 0; null !== (r125 = this.f.a.a.b);)r125.h || ++n, O(r125);
                    for(this.f = null, (n = this.e).b = null, n.d = null, this.e = n.c = null, l = (n = this.b).a.b; l !== n.a; l = r125)r125 = l.b, (l = l.a).e.e === l && (T(l.c, l), d8(l));
                    if (!this.n) {
                        if (n = this.b, this.m) for(l = n.b.h; l !== n.b; l = r125)r125 = l.h, l.b.d.c !== l.d.c ? l.f = l.d.c ? 1 : -1 : d8(l);
                        else for(l = n.a.b; l !== n.a; l = r125)if (r125 = l.b, l.c) {
                            for(l = l.a; g(l.b.a, l.a); l = l.c.b);
                            for(; g(l.a, l.b.a); l = l.e);
                            for(o = l.c.b, a = void 0; l.e !== o;)if (g(l.b.a, o.a)) {
                                for(; o.e !== l && (g((t166 = o.e).b.a, t166.a) || b(o.a, o.b.a, o.e.b.a) <= 0);)o = (a = f7(o.e, o)).b;
                                o = o.c.b;
                            } else {
                                for(; o.e !== l && (g((e257 = l.c.b).a, e257.b.a) || 0 <= b(l.b.a, l.a, l.c.b.a));)l = (a = f7(l, l.c.b)).b;
                                l = l.e;
                            }
                            for(; o.e.e !== l;)o = (a = f7(o.e, o)).b;
                        }
                        if (this.h || this.i || this.k || this.l) {
                            if (this.m) {
                                for(r125 = (n = this.b).a.b; r125 !== n.a; r125 = r125.b)if (r125.c) {
                                    for(this.h && this.h(2, this.c), l = r125.a; this.k && this.k(l.a.d, this.c), (l = l.e) !== r125.a;);
                                    this.i && this.i(this.c);
                                }
                            } else {
                                for(n = this.b, r125 = !!this.l, l = !1, o = -1, a = n.a.d; a !== n.a; a = a.d)if (a.c) for(l || (this.h && this.h(4, this.c), l = !0), s = a.a; r125 && o !== (i = s.b.d.c ? 0 : 1) && (o = i, this.l && this.l(!!o, this.c)), this.k && this.k(s.a.d, this.c), (s = s.e) !== a.a;);
                                l && this.i && this.i(this.c);
                            }
                        }
                        if (this.r) {
                            for(l = (n = this.b).a.b; l !== n.a; l = r125)if (r125 = l.b, !l.c) {
                                for(a = (o = l.a).e, s = void 0; a = (s = a).e, (s.d = null) === s.b.d && (s.c === s ? y3(s.a, null) : (s.a.c = s.c, h6(s, K(s))), (i = s.b).c === i ? y3(i.a, null) : (i.a.c = i.c, h6(i, K(i))), p5(s)), s !== o;);
                                o = l.d, ((l = l.b).d = o).b = l;
                            }
                            return this.r(this.b), void (this.c = this.b = null);
                        }
                    }
                    this.b = this.c = null;
                }, this.libtess = {
                    GluTesselator: W,
                    windingRule: {
                        GLU_TESS_WINDING_ODD: 100130,
                        GLU_TESS_WINDING_NONZERO: 100131,
                        GLU_TESS_WINDING_POSITIVE: 100132,
                        GLU_TESS_WINDING_NEGATIVE: 100133,
                        GLU_TESS_WINDING_ABS_GEQ_TWO: 100134
                    },
                    primitiveType: {
                        GL_LINE_LOOP: 2,
                        GL_TRIANGLES: 4,
                        GL_TRIANGLE_STRIP: 5,
                        GL_TRIANGLE_FAN: 6
                    },
                    errorType: {
                        GLU_TESS_MISSING_BEGIN_POLYGON: 100151,
                        GLU_TESS_MISSING_END_POLYGON: 100153,
                        GLU_TESS_MISSING_BEGIN_CONTOUR: 100152,
                        GLU_TESS_MISSING_END_CONTOUR: 100154,
                        GLU_TESS_COORD_TOO_LARGE: 100155,
                        GLU_TESS_NEED_COMBINE_CALLBACK: 100156
                    },
                    gluEnum: {
                        GLU_TESS_MESH: 100112,
                        GLU_TESS_TOLERANCE: 100142,
                        GLU_TESS_WINDING_RULE: 100140,
                        GLU_TESS_BOUNDARY_ONLY: 100141,
                        GLU_INVALID_ENUM: 100900,
                        GLU_INVALID_VALUE: 100901,
                        GLU_TESS_BEGIN: 100100,
                        GLU_TESS_VERTEX: 100101,
                        GLU_TESS_END: 100102,
                        GLU_TESS_ERROR: 100103,
                        GLU_TESS_EDGE_FLAG: 100104,
                        GLU_TESS_COMBINE: 100105,
                        GLU_TESS_BEGIN_DATA: 100106,
                        GLU_TESS_VERTEX_DATA: 100107,
                        GLU_TESS_END_DATA: 100108,
                        GLU_TESS_ERROR_DATA: 100109,
                        GLU_TESS_EDGE_FLAG_DATA: 100110,
                        GLU_TESS_COMBINE_DATA: 100111
                    }
                }, W.prototype.gluDeleteTess = W.prototype.x, W.prototype.gluTessProperty = W.prototype.B, W.prototype.gluGetTessProperty = W.prototype.y, W.prototype.gluTessNormal = W.prototype.A, W.prototype.gluTessCallback = W.prototype.z, W.prototype.gluTessVertex = W.prototype.C, W.prototype.gluTessBeginPolygon = W.prototype.u, W.prototype.gluTessBeginContour = W.prototype.t, W.prototype.gluTessEndContour = W.prototype.v, W.prototype.gluTessEndPolygon = W.prototype.w, void 0 !== t165 && (t165.exports = this.libtess);
            },
            {
            }
        ],
        235: [
            function(e259, t168, r126) {
                "use strict";
                function O(e, t, r, n) {
                    for(var o = e[t++], i = 1 << o, a = 1 + i, s = 1 + a, l = o + 1, u = (1 << l) - 1, c = 0, d = 0, f = 0, h = e[t++], p = new Int32Array(4096), y = null;;){
                        for(; c < 16 && 0 !== h;)d |= e[t++] << c, c += 8, 1 === h ? h = e[t++] : --h;
                        if (c < l) break;
                        var m = d & u;
                        if (d >>= l, c -= l, m != i) {
                            if (m == a) break;
                            for(var g = m < s ? m : y, v = 0, b = g; i < b;)b = p[b] >> 8, ++v;
                            var _ = b;
                            if (n < f + v + (g !== m ? 1 : 0)) return void console.log("Warning, gif stream longer than expected.");
                            r[f++] = _;
                            var x = f += v;
                            for(g !== m && (r[f++] = _), b = g; v--;)b = p[b], r[--x] = 255 & b, b >>= 8;
                            null !== y && s < 4096 && (p[s++] = y << 8 | _, u + 1 <= s && l < 12 && (++l, u = u << 1 | 1)), y = m;
                        } else s = 1 + a, u = (1 << (l = o + 1)) - 1, y = null;
                    }
                    return f !== n && console.log("Warning, gif stream shorter than expected."), r;
                }
                try {
                    r126.GifWriter = function(g2, e260, t169, r127) {
                        var v2 = 0, n66 = void 0 === (r127 = void 0 === r127 ? {
                        } : r127).loop ? null : r127.loop, b = void 0 === r127.palette ? null : r127.palette;
                        if (e260 <= 0 || t169 <= 0 || 65535 < e260 || 65535 < t169) throw new Error("Width/Height invalid.");
                        function _1(e) {
                            var t = e.length;
                            if (t < 2 || 256 < t || t & t - 1) throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");
                            return t;
                        }
                        g2[v2++] = 71, g2[v2++] = 73, g2[v2++] = 70, g2[v2++] = 56, g2[v2++] = 57, g2[v2++] = 97;
                        var o42 = 0, i28 = 0;
                        if (null !== b) {
                            for(var a = _1(b); a >>= 1;)++o42;
                            if (a = 1 << o42, --o42, void 0 !== r127.background) {
                                if (a <= (i28 = r127.background)) throw new Error("Background index out of range.");
                                if (0 === i28) throw new Error("Background index explicitly passed as 0.");
                            }
                        }
                        if (g2[v2++] = 255 & e260, g2[v2++] = e260 >> 8 & 255, g2[v2++] = 255 & t169, g2[v2++] = t169 >> 8 & 255, g2[v2++] = (null !== b ? 128 : 0) | o42, g2[v2++] = i28, g2[v2++] = 0, null !== b) for(var s16 = 0, l12 = b.length; s16 < l12; ++s16){
                            var u = b[s16];
                            g2[v2++] = u >> 16 & 255, g2[v2++] = u >> 8 & 255, g2[v2++] = 255 & u;
                        }
                        if (null !== n66) {
                            if (n66 < 0 || 65535 < n66) throw new Error("Loop count invalid.");
                            g2[v2++] = 33, g2[v2++] = 255, g2[v2++] = 11, g2[v2++] = 78, g2[v2++] = 69, g2[v2++] = 84, g2[v2++] = 83, g2[v2++] = 67, g2[v2++] = 65, g2[v2++] = 80, g2[v2++] = 69, g2[v2++] = 50, g2[v2++] = 46, g2[v2++] = 48, g2[v2++] = 3, g2[v2++] = 1, g2[v2++] = 255 & n66, g2[v2++] = n66 >> 8 & 255, g2[v2++] = 0;
                        }
                        var x = !1;
                        this.addFrame = function(e261, t170, r128, n67, o43, i29) {
                            if (!0 === x && (--v2, x = !1), i29 = void 0 === i29 ? {
                            } : i29, e261 < 0 || t170 < 0 || 65535 < e261 || 65535 < t170) throw new Error("x/y invalid.");
                            if (r128 <= 0 || n67 <= 0 || 65535 < r128 || 65535 < n67) throw new Error("Width/Height invalid.");
                            if (o43.length < r128 * n67) throw new Error("Not enough pixels for the frame size.");
                            var a21 = !0, s17 = i29.palette;
                            if (null == s17 && (a21 = !1, s17 = b), null == s17) throw new Error("Must supply either a local or global palette.");
                            for(var l13 = _1(s17), u8 = 0; l13 >>= 1;)++u8;
                            l13 = 1 << u8;
                            var c8 = void 0 === i29.delay ? 0 : i29.delay, d9 = void 0 === i29.disposal ? 0 : i29.disposal;
                            if (d9 < 0 || 3 < d9) throw new Error("Disposal out of range.");
                            var f8 = !1, h7 = 0;
                            if (void 0 !== i29.transparent && null !== i29.transparent && (f8 = !0, (h7 = i29.transparent) < 0 || l13 <= h7)) throw new Error("Transparent color index.");
                            if (0 === d9 && !f8 && 0 === c8 || (g2[v2++] = 33, g2[v2++] = 249, g2[v2++] = 4, g2[v2++] = d9 << 2 | (!0 === f8 ? 1 : 0), g2[v2++] = 255 & c8, g2[v2++] = c8 >> 8 & 255, g2[v2++] = h7, g2[v2++] = 0), g2[v2++] = 44, g2[v2++] = 255 & e261, g2[v2++] = e261 >> 8 & 255, g2[v2++] = 255 & t170, g2[v2++] = t170 >> 8 & 255, g2[v2++] = 255 & r128, g2[v2++] = r128 >> 8 & 255, g2[v2++] = 255 & n67, g2[v2++] = n67 >> 8 & 255, g2[v2++] = !0 === a21 ? 128 | u8 - 1 : 0, !0 === a21) for(var p6 = 0, y4 = s17.length; p6 < y4; ++p6){
                                var m = s17[p6];
                                g2[v2++] = m >> 16 & 255, g2[v2++] = m >> 8 & 255, g2[v2++] = 255 & m;
                            }
                            return v2 = (function(t, r, e262, n) {
                                t[r++] = e262;
                                var o = r++, i = 1 << e262, a = i - 1, s = 1 + i, l = 1 + s, u = e262 + 1, c = 0, d = 0;
                                function f(e) {
                                    for(; e <= c;)t[r++] = 255 & d, d >>= 8, c -= 8, r === o + 256 && (t[o] = 255, o = r++);
                                }
                                function h(e) {
                                    d |= e << c, c += u, f(8);
                                }
                                var p = n[0] & a, y = {
                                };
                                h(i);
                                for(var m = 1, g = n.length; m < g; ++m){
                                    var v = n[m] & a, b = p << 8 | v, _ = y[b];
                                    if (void 0 === _) {
                                        for(d |= p << c, c += u; 8 <= c;)t[r++] = 255 & d, d >>= 8, c -= 8, r === o + 256 && (t[o] = 255, o = r++);
                                        4096 === l ? (h(i), l = 1 + s, u = e262 + 1, y = {
                                        }) : (1 << u <= l && ++u, y[b] = l++), p = v;
                                    } else p = _;
                                }
                                h(p), h(s), f(1), o + 1 === r ? t[o] = 0 : (t[o] = r - o - 1, t[r++] = 0);
                                return r;
                            })(g2, v2, u8 < 2 ? 2 : u8, o43);
                        }, this.end = function() {
                            return !1 === x && (g2[v2++] = 59, x = !0), v2;
                        }, this.getOutputBuffer = function() {
                            return g2;
                        }, this.setOutputBuffer = function(e) {
                            g2 = e;
                        }, this.getOutputBufferPosition = function() {
                            return v2;
                        }, this.setOutputBufferPosition = function(e) {
                            v2 = e;
                        };
                    }, r126.GifReader = function(x) {
                        var e263 = 0;
                        if (71 !== x[e263++] || 73 !== x[e263++] || 70 !== x[e263++] || 56 !== x[e263++] || 56 != (x[e263++] + 1 & 253) || 97 !== x[e263++]) throw new Error("Invalid GIF 87a/89a header.");
                        var w = x[e263++] | x[e263++] << 8, t171 = x[e263++] | x[e263++] << 8, r129 = x[e263++], n68 = r129 >> 7, o44 = 1 << 1 + (7 & r129);
                        x[e263++], x[e263++];
                        var i = null, a22 = null;
                        n68 && (i = e263, e263 += 3 * (a22 = o44));
                        var s18 = !0, l14 = [], u9 = 0, c9 = null, d10 = 0, f9 = null;
                        for(this.width = w, this.height = t171; s18 && e263 < x.length;)switch(x[e263++]){
                            case 33:
                                switch(x[e263++]){
                                    case 255:
                                        if (11 !== x[e263] || 78 == x[e263 + 1] && 69 == x[e263 + 2] && 84 == x[e263 + 3] && 83 == x[e263 + 4] && 67 == x[e263 + 5] && 65 == x[e263 + 6] && 80 == x[e263 + 7] && 69 == x[e263 + 8] && 50 == x[e263 + 9] && 46 == x[e263 + 10] && 48 == x[e263 + 11] && 3 == x[e263 + 12] && 1 == x[e263 + 13] && 0 == x[e263 + 16]) e263 += 14, f9 = x[e263++] | x[e263++] << 8, e263++;
                                        else for(e263 += 12;;){
                                            if (!(0 <= (T = x[e263++]))) throw Error("Invalid block size");
                                            if (0 === T) break;
                                            e263 += T;
                                        }
                                        break;
                                    case 249:
                                        if (4 !== x[e263++] || 0 !== x[e263 + 4]) throw new Error("Invalid graphics extension block.");
                                        var h8 = x[e263++];
                                        u9 = x[e263++] | x[e263++] << 8, c9 = x[e263++], 0 == (1 & h8) && (c9 = null), d10 = h8 >> 2 & 7, e263++;
                                        break;
                                    case 254:
                                        for(;;){
                                            if (!(0 <= (T = x[e263++]))) throw Error("Invalid block size");
                                            if (0 === T) break;
                                            e263 += T;
                                        }
                                        break;
                                    default:
                                        throw new Error("Unknown graphic control label: 0x" + x[e263 - 1].toString(16));
                                }
                                break;
                            case 44:
                                var p7 = x[e263++] | x[e263++] << 8, y5 = x[e263++] | x[e263++] << 8, m2 = x[e263++] | x[e263++] << 8, g3 = x[e263++] | x[e263++] << 8, v3 = x[e263++], b2 = v3 >> 6 & 1, _2 = 1 << 1 + (7 & v3), S = i, j = a22, M = !1;
                                if (v3 >> 7) {
                                    M = !0;
                                    S = e263, e263 += 3 * (j = _2);
                                }
                                var E = e263;
                                for(e263++;;){
                                    var T;
                                    if (!(0 <= (T = x[e263++]))) throw Error("Invalid block size");
                                    if (0 === T) break;
                                    e263 += T;
                                }
                                l14.push({
                                    x: p7,
                                    y: y5,
                                    width: m2,
                                    height: g3,
                                    has_local_palette: M,
                                    palette_offset: S,
                                    palette_size: j,
                                    data_offset: E,
                                    data_length: e263 - E,
                                    transparent_index: c9,
                                    interlaced: !!b2,
                                    delay: u9,
                                    disposal: d10
                                });
                                break;
                            case 59:
                                s18 = !1;
                                break;
                            default:
                                throw new Error("Unknown gif block: 0x" + x[e263 - 1].toString(16));
                        }
                        this.numFrames = function() {
                            return l14.length;
                        }, this.loopCount = function() {
                            return f9;
                        }, this.frameInfo = function(e) {
                            if (e < 0 || e >= l14.length) throw new Error("Frame index out of range.");
                            return l14[e];
                        }, this.decodeAndBlitFrameBGRA = function(e, t) {
                            var r = this.frameInfo(e), n = r.width * r.height, o = new Uint8Array(n);
                            O(x, r.data_offset, o, n);
                            var i = r.palette_offset, a = r.transparent_index;
                            null === a && (a = 256);
                            var s = r.width, l = w - s, u = s, c = 4 * (r.y * w + r.x), d = 4 * ((r.y + r.height) * w + r.x), f = c, h = 4 * l;
                            !0 === r.interlaced && (h += 4 * w * 7);
                            for(var p = 8, y = 0, m = o.length; y < m; ++y){
                                var g = o[y];
                                if (0 === u && (u = s, d <= (f += h) && (h = 4 * l + 4 * w * (p - 1), f = c + (s + l) * (p << 1), p >>= 1)), g === a) f += 4;
                                else {
                                    var v = x[i + 3 * g], b = x[i + 3 * g + 1], _ = x[i + 3 * g + 2];
                                    t[f++] = _, t[f++] = b, t[f++] = v, t[f++] = 255;
                                }
                                --u;
                            }
                        }, this.decodeAndBlitFrameRGBA = function(e, t) {
                            var r = this.frameInfo(e), n = r.width * r.height, o = new Uint8Array(n);
                            O(x, r.data_offset, o, n);
                            var i = r.palette_offset, a = r.transparent_index;
                            null === a && (a = 256);
                            var s = r.width, l = w - s, u = s, c = 4 * (r.y * w + r.x), d = 4 * ((r.y + r.height) * w + r.x), f = c, h = 4 * l;
                            !0 === r.interlaced && (h += 4 * w * 7);
                            for(var p = 8, y = 0, m = o.length; y < m; ++y){
                                var g = o[y];
                                if (0 === u && (u = s, d <= (f += h) && (h = 4 * l + 4 * w * (p - 1), f = c + (s + l) * (p << 1), p >>= 1)), g === a) f += 4;
                                else {
                                    var v = x[i + 3 * g], b = x[i + 3 * g + 1], _ = x[i + 3 * g + 2];
                                    t[f++] = v, t[f++] = b, t[f++] = _, t[f++] = 255;
                                }
                                --u;
                            }
                        };
                    };
                } catch (e) {
                }
            },
            {
            }
        ],
        236: [
            function(Br, t172, r130) {
                (function(Fr) {
                    var e264;
                    e264 = this, (function(M1) {
                        function e265(e) {
                            if (null == this) throw TypeError();
                            var t = String(this), r = t.length, n = e ? Number(e) : 0;
                            if (n != n && (n = 0), !(n < 0 || r <= n)) {
                                var o, i = t.charCodeAt(n);
                                return 55296 <= i && i <= 56319 && n + 1 < r && 56320 <= (o = t.charCodeAt(n + 1)) && o <= 57343 ? 1024 * (i - 55296) + o - 56320 + 65536 : i;
                            }
                        }
                        var t173;
                        String.prototype.codePointAt || ((t173 = (function() {
                            try {
                                var e = {
                                }, t = Object.defineProperty, r = t(e, e, e) && t;
                            } catch (e) {
                            }
                            return r;
                        })()) ? t173(String.prototype, "codePointAt", {
                            value: e265,
                            configurable: !0,
                            writable: !0
                        }) : String.prototype.codePointAt = e265);
                        var l15 = 0, i30 = -3;
                        function r131() {
                            this.table = new Uint16Array(16), this.trans = new Uint16Array(288);
                        }
                        function a23(e, t) {
                            this.source = e, this.sourceIndex = 0, this.tag = 0, this.bitcount = 0, this.dest = t, this.destLen = 0, this.ltree = new r131, this.dtree = new r131;
                        }
                        var s19 = new r131, u10 = new r131, c10 = new Uint8Array(30), d11 = new Uint16Array(30), f10 = new Uint8Array(30), h9 = new Uint16Array(30), p8 = new Uint8Array([
                            16,
                            17,
                            18,
                            0,
                            8,
                            7,
                            9,
                            6,
                            10,
                            5,
                            11,
                            4,
                            12,
                            3,
                            13,
                            2,
                            14,
                            1,
                            15
                        ]), y6 = new r131, m3 = new Uint8Array(320);
                        function n69(e, t, r, n) {
                            var o, i;
                            for(o = 0; o < r; ++o)e[o] = 0;
                            for(o = 0; o < 30 - r; ++o)e[o + r] = o / r | 0;
                            for(i = n, o = 0; o < 30; ++o)t[o] = i, i += 1 << e[o];
                        }
                        var g4 = new Uint16Array(16);
                        function v4(e, t, r, n) {
                            var o, i;
                            for(o = 0; o < 16; ++o)e.table[o] = 0;
                            for(o = 0; o < n; ++o)e.table[t[r + o]]++;
                            for(o = i = e.table[0] = 0; o < 16; ++o)g4[o] = i, i += e.table[o];
                            for(o = 0; o < n; ++o)t[r + o] && (e.trans[g4[t[r + o]]++] = o);
                        }
                        function b3(e) {
                            (e.bitcount--) || (e.tag = e.source[e.sourceIndex++], e.bitcount = 7);
                            var t = 1 & e.tag;
                            return e.tag >>>= 1, t;
                        }
                        function _3(e, t, r) {
                            if (!t) return r;
                            for(; e.bitcount < 24;)e.tag |= e.source[e.sourceIndex++] << e.bitcount, e.bitcount += 8;
                            var n = e.tag & 65535 >>> 16 - t;
                            return e.tag >>>= t, e.bitcount -= t, n + r;
                        }
                        function x1(e, t) {
                            for(; e.bitcount < 24;)e.tag |= e.source[e.sourceIndex++] << e.bitcount, e.bitcount += 8;
                            for(var r = 0, n = 0, o = 0, i = e.tag; n = 2 * n + (1 & i), i >>>= 1, ++o, r += t.table[o], 0 <= (n -= t.table[o]););
                            return e.tag = i, e.bitcount -= o, t.trans[r + n];
                        }
                        function w1(e, t, r) {
                            var n, o, i, a, s, l;
                            for(n = _3(e, 5, 257), o = _3(e, 5, 1), i = _3(e, 4, 4), a = 0; a < 19; ++a)m3[a] = 0;
                            for(a = 0; a < i; ++a){
                                var u = _3(e, 3, 0);
                                m3[p8[a]] = u;
                            }
                            for(v4(y6, m3, 0, 19), s = 0; s < n + o;){
                                var c = x1(e, y6);
                                switch(c){
                                    case 16:
                                        var d = m3[s - 1];
                                        for(l = _3(e, 2, 3); l; --l)m3[s++] = d;
                                        break;
                                    case 17:
                                        for(l = _3(e, 3, 3); l; --l)m3[s++] = 0;
                                        break;
                                    case 18:
                                        for(l = _3(e, 7, 11); l; --l)m3[s++] = 0;
                                        break;
                                    default:
                                        m3[s++] = c;
                                }
                            }
                            v4(t, m3, 0, n), v4(r, m3, n, o);
                        }
                        function S1(e, t, r) {
                            for(;;){
                                var n, o, i, a, s = x1(e, t);
                                if (256 === s) return l15;
                                if (s < 256) e.dest[e.destLen++] = s;
                                else for(n = _3(e, c10[s -= 257], d11[s]), o = x1(e, r), a = i = e.destLen - _3(e, f10[o], h9[o]); a < i + n; ++a)e.dest[e.destLen++] = e.dest[a];
                            }
                        }
                        function j1(e) {
                            for(var t, r; 8 < e.bitcount;)e.sourceIndex--, e.bitcount -= 8;
                            if ((t = 256 * (t = e.source[e.sourceIndex + 1]) + e.source[e.sourceIndex]) !== (65535 & ~(256 * e.source[e.sourceIndex + 3] + e.source[e.sourceIndex + 2]))) return i30;
                            for(e.sourceIndex += 4, r = t; r; --r)e.dest[e.destLen++] = e.source[e.sourceIndex++];
                            return e.bitcount = 0, l15;
                        }
                        !function(e, t) {
                            var r;
                            for(r = 0; r < 7; ++r)e.table[r] = 0;
                            for(e.table[7] = 24, e.table[8] = 152, e.table[9] = 112, r = 0; r < 24; ++r)e.trans[r] = 256 + r;
                            for(r = 0; r < 144; ++r)e.trans[24 + r] = r;
                            for(r = 0; r < 8; ++r)e.trans[168 + r] = 280 + r;
                            for(r = 0; r < 112; ++r)e.trans[176 + r] = 144 + r;
                            for(r = 0; r < 5; ++r)t.table[r] = 0;
                            for(t.table[5] = 32, r = 0; r < 32; ++r)t.trans[r] = r;
                        }(s19, u10), n69(c10, d11, 4, 3), n69(f10, h9, 2, 1), c10[28] = 0, d11[28] = 258;
                        var o45 = function(e, t) {
                            var r, n, o = new a23(e, t);
                            do {
                                switch(r = b3(o), _3(o, 2, 0)){
                                    case 0:
                                        n = j1(o);
                                        break;
                                    case 1:
                                        n = S1(o, s19, u10);
                                        break;
                                    case 2:
                                        w1(o, o.ltree, o.dtree), n = S1(o, o.ltree, o.dtree);
                                        break;
                                    default:
                                        n = i30;
                                }
                                if (n !== l15) throw new Error("Data error");
                            }while (!r)
                            return o.destLen < o.dest.length ? "function" == typeof o.dest.slice ? o.dest.slice(0, o.destLen) : o.dest.subarray(0, o.destLen) : o.dest;
                        };
                        function E1(e, t, r, n, o) {
                            return Math.pow(1 - o, 3) * e + 3 * Math.pow(1 - o, 2) * o * t + 3 * (1 - o) * Math.pow(o, 2) * r + Math.pow(o, 3) * n;
                        }
                        function T1() {
                            this.x1 = Number.NaN, this.y1 = Number.NaN, this.x2 = Number.NaN, this.y2 = Number.NaN;
                        }
                        function D1() {
                            this.commands = [], this.fill = "black", this.stroke = null, this.strokeWidth = 1;
                        }
                        function O1(e) {
                            throw new Error(e);
                        }
                        function C1(e, t) {
                            e || O1(t);
                        }
                        T1.prototype.isEmpty = function() {
                            return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
                        }, T1.prototype.addPoint = function(e, t) {
                            "number" == typeof e && ((isNaN(this.x1) || isNaN(this.x2)) && (this.x1 = e, this.x2 = e), e < this.x1 && (this.x1 = e), e > this.x2 && (this.x2 = e)), "number" == typeof t && ((isNaN(this.y1) || isNaN(this.y2)) && (this.y1 = t, this.y2 = t), t < this.y1 && (this.y1 = t), t > this.y2 && (this.y2 = t));
                        }, T1.prototype.addX = function(e) {
                            this.addPoint(e, null);
                        }, T1.prototype.addY = function(e) {
                            this.addPoint(null, e);
                        }, T1.prototype.addBezier = function(e, t, r, n, o, i, a, s) {
                            var l = [
                                e,
                                t
                            ], u = [
                                r,
                                n
                            ], c = [
                                o,
                                i
                            ], d = [
                                a,
                                s
                            ];
                            this.addPoint(e, t), this.addPoint(a, s);
                            for(var f = 0; f <= 1; f++){
                                var h = 6 * l[f] - 12 * u[f] + 6 * c[f], p = -3 * l[f] + 9 * u[f] - 9 * c[f] + 3 * d[f], y = 3 * u[f] - 3 * l[f];
                                if (0 != p) {
                                    var m = Math.pow(h, 2) - 4 * y * p;
                                    if (!(m < 0)) {
                                        var g = (-h + Math.sqrt(m)) / (2 * p);
                                        0 < g && g < 1 && (0 === f && this.addX(E1(l[f], u[f], c[f], d[f], g)), 1 === f && this.addY(E1(l[f], u[f], c[f], d[f], g)));
                                        var v = (-h - Math.sqrt(m)) / (2 * p);
                                        0 < v && v < 1 && (0 === f && this.addX(E1(l[f], u[f], c[f], d[f], v)), 1 === f && this.addY(E1(l[f], u[f], c[f], d[f], v)));
                                    }
                                } else {
                                    if (0 == h) continue;
                                    var b = -y / h;
                                    0 < b && b < 1 && (0 === f && this.addX(E1(l[f], u[f], c[f], d[f], b)), 1 === f && this.addY(E1(l[f], u[f], c[f], d[f], b)));
                                }
                            }
                        }, T1.prototype.addQuad = function(e, t, r, n, o, i) {
                            var a = e + 2 / 3 * (r - e), s = t + 2 / 3 * (n - t), l = a + 1 / 3 * (o - e), u = s + 1 / 3 * (i - t);
                            this.addBezier(e, t, a, s, l, u, o, i);
                        }, D1.prototype.moveTo = function(e, t) {
                            this.commands.push({
                                type: "M",
                                x: e,
                                y: t
                            });
                        }, D1.prototype.lineTo = function(e, t) {
                            this.commands.push({
                                type: "L",
                                x: e,
                                y: t
                            });
                        }, D1.prototype.curveTo = D1.prototype.bezierCurveTo = function(e, t, r, n, o, i) {
                            this.commands.push({
                                type: "C",
                                x1: e,
                                y1: t,
                                x2: r,
                                y2: n,
                                x: o,
                                y: i
                            });
                        }, D1.prototype.quadTo = D1.prototype.quadraticCurveTo = function(e, t, r, n) {
                            this.commands.push({
                                type: "Q",
                                x1: e,
                                y1: t,
                                x: r,
                                y: n
                            });
                        }, D1.prototype.close = D1.prototype.closePath = function() {
                            this.commands.push({
                                type: "Z"
                            });
                        }, D1.prototype.extend = function(e) {
                            if (e.commands) e = e.commands;
                            else if (e instanceof T1) {
                                var t = e;
                                return this.moveTo(t.x1, t.y1), this.lineTo(t.x2, t.y1), this.lineTo(t.x2, t.y2), this.lineTo(t.x1, t.y2), void this.close();
                            }
                            Array.prototype.push.apply(this.commands, e);
                        }, D1.prototype.getBoundingBox = function() {
                            for(var e = new T1, t = 0, r = 0, n = 0, o = 0, i = 0; i < this.commands.length; i++){
                                var a = this.commands[i];
                                switch(a.type){
                                    case "M":
                                        e.addPoint(a.x, a.y), t = n = a.x, r = o = a.y;
                                        break;
                                    case "L":
                                        e.addPoint(a.x, a.y), n = a.x, o = a.y;
                                        break;
                                    case "Q":
                                        e.addQuad(n, o, a.x1, a.y1, a.x, a.y), n = a.x, o = a.y;
                                        break;
                                    case "C":
                                        e.addBezier(n, o, a.x1, a.y1, a.x2, a.y2, a.x, a.y), n = a.x, o = a.y;
                                        break;
                                    case "Z":
                                        n = t, o = r;
                                        break;
                                    default:
                                        throw new Error("Unexpected path command " + a.type);
                                }
                            }
                            return e.isEmpty() && e.addPoint(0, 0), e;
                        }, D1.prototype.draw = function(e) {
                            e.beginPath();
                            for(var t = 0; t < this.commands.length; t += 1){
                                var r = this.commands[t];
                                "M" === r.type ? e.moveTo(r.x, r.y) : "L" === r.type ? e.lineTo(r.x, r.y) : "C" === r.type ? e.bezierCurveTo(r.x1, r.y1, r.x2, r.y2, r.x, r.y) : "Q" === r.type ? e.quadraticCurveTo(r.x1, r.y1, r.x, r.y) : "Z" === r.type && e.closePath();
                            }
                            this.fill && (e.fillStyle = this.fill, e.fill()), this.stroke && (e.strokeStyle = this.stroke, e.lineWidth = this.strokeWidth, e.stroke());
                        }, D1.prototype.toPathData = function(i) {
                            function e266() {
                                for(var e, t = arguments, r = "", n = 0; n < arguments.length; n += 1){
                                    var o = t[n];
                                    0 <= o && 0 < n && (r += " "), r += (e = o, Math.round(e) === e ? "" + Math.round(e) : e.toFixed(i));
                                }
                                return r;
                            }
                            i = void 0 !== i ? i : 2;
                            for(var t174 = "", r132 = 0; r132 < this.commands.length; r132 += 1){
                                var n70 = this.commands[r132];
                                "M" === n70.type ? t174 += "M" + e266(n70.x, n70.y) : "L" === n70.type ? t174 += "L" + e266(n70.x, n70.y) : "C" === n70.type ? t174 += "C" + e266(n70.x1, n70.y1, n70.x2, n70.y2, n70.x, n70.y) : "Q" === n70.type ? t174 += "Q" + e266(n70.x1, n70.y1, n70.x, n70.y) : "Z" === n70.type && (t174 += "Z");
                            }
                            return t174;
                        }, D1.prototype.toSVG = function(e) {
                            var t = '<path d="';
                            return t += this.toPathData(e), t += '"', this.fill && "black" !== this.fill && (null === this.fill ? t += ' fill="none"' : t += ' fill="' + this.fill + '"'), this.stroke && (t += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"'), t += "/>";
                        }, D1.prototype.toDOMElement = function(e) {
                            var t = this.toPathData(e), r = document.createElementNS("http://www.w3.org/2000/svg", "path");
                            return r.setAttribute("d", t), r;
                        };
                        var L1 = {
                            fail: O1,
                            argument: C1,
                            assert: C1
                        }, P1 = {
                        }, k1 = {
                        }, A1 = {
                        };
                        function R1(e) {
                            return function() {
                                return e;
                            };
                        }
                        k1.BYTE = function(e) {
                            return L1.argument(0 <= e && e <= 255, "Byte value should be between 0 and 255."), [
                                e
                            ];
                        }, A1.BYTE = R1(1), k1.CHAR = function(e) {
                            return [
                                e.charCodeAt(0)
                            ];
                        }, A1.CHAR = R1(1), k1.CHARARRAY = function(e) {
                            for(var t = [], r = 0; r < e.length; r += 1)t[r] = e.charCodeAt(r);
                            return t;
                        }, A1.CHARARRAY = function(e) {
                            return e.length;
                        }, k1.USHORT = function(e) {
                            return [
                                e >> 8 & 255,
                                255 & e
                            ];
                        }, A1.USHORT = R1(2), k1.SHORT = function(e) {
                            return 32768 <= e && (e = -(65536 - e)), [
                                e >> 8 & 255,
                                255 & e
                            ];
                        }, A1.SHORT = R1(2), k1.UINT24 = function(e) {
                            return [
                                e >> 16 & 255,
                                e >> 8 & 255,
                                255 & e
                            ];
                        }, A1.UINT24 = R1(3), k1.ULONG = function(e) {
                            return [
                                e >> 24 & 255,
                                e >> 16 & 255,
                                e >> 8 & 255,
                                255 & e
                            ];
                        }, A1.ULONG = R1(4), k1.LONG = function(e) {
                            return 2147483648 <= e && (e = -(4294967296 - e)), [
                                e >> 24 & 255,
                                e >> 16 & 255,
                                e >> 8 & 255,
                                255 & e
                            ];
                        }, A1.LONG = R1(4), k1.FIXED = k1.ULONG, A1.FIXED = A1.ULONG, k1.FWORD = k1.SHORT, A1.FWORD = A1.SHORT, k1.UFWORD = k1.USHORT, A1.UFWORD = A1.USHORT, k1.LONGDATETIME = function(e) {
                            return [
                                0,
                                0,
                                0,
                                0,
                                e >> 24 & 255,
                                e >> 16 & 255,
                                e >> 8 & 255,
                                255 & e
                            ];
                        }, A1.LONGDATETIME = R1(8), k1.TAG = function(e) {
                            return L1.argument(4 === e.length, "Tag should be exactly 4 ASCII characters."), [
                                e.charCodeAt(0),
                                e.charCodeAt(1),
                                e.charCodeAt(2),
                                e.charCodeAt(3)
                            ];
                        }, A1.TAG = R1(4), k1.Card8 = k1.BYTE, A1.Card8 = A1.BYTE, k1.Card16 = k1.USHORT, A1.Card16 = A1.USHORT, k1.OffSize = k1.BYTE, A1.OffSize = A1.BYTE, k1.SID = k1.USHORT, A1.SID = A1.USHORT, k1.NUMBER = function(e) {
                            return -107 <= e && e <= 107 ? [
                                e + 139
                            ] : 108 <= e && e <= 1131 ? [
                                247 + ((e -= 108) >> 8),
                                255 & e
                            ] : -1131 <= e && e <= -108 ? [
                                251 + ((e = -e - 108) >> 8),
                                255 & e
                            ] : -32768 <= e && e <= 32767 ? k1.NUMBER16(e) : k1.NUMBER32(e);
                        }, A1.NUMBER = function(e) {
                            return k1.NUMBER(e).length;
                        }, k1.NUMBER16 = function(e) {
                            return [
                                28,
                                e >> 8 & 255,
                                255 & e
                            ];
                        }, A1.NUMBER16 = R1(3), k1.NUMBER32 = function(e) {
                            return [
                                29,
                                e >> 24 & 255,
                                e >> 16 & 255,
                                e >> 8 & 255,
                                255 & e
                            ];
                        }, A1.NUMBER32 = R1(5), k1.REAL = function(e) {
                            var t = e.toString(), r = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t);
                            if (r) {
                                var n = parseFloat("1e" + ((r[2] ? +r[2] : 0) + r[1].length));
                                t = (Math.round(e * n) / n).toString();
                            }
                            for(var o = "", i = 0, a = t.length; i < a; i += 1){
                                var s = t[i];
                                o += "e" === s ? "-" === t[++i] ? "c" : "b" : "." === s ? "a" : "-" === s ? "e" : s;
                            }
                            for(var l = [
                                30
                            ], u = 0, c = (o += 1 & o.length ? "f" : "ff").length; u < c; u += 2)l.push(parseInt(o.substr(u, 2), 16));
                            return l;
                        }, A1.REAL = function(e) {
                            return k1.REAL(e).length;
                        }, k1.NAME = k1.CHARARRAY, A1.NAME = A1.CHARARRAY, k1.STRING = k1.CHARARRAY, A1.STRING = A1.CHARARRAY, P1.UTF8 = function(e, t, r) {
                            for(var n = [], o = r, i = 0; i < o; i++, t += 1)n[i] = e.getUint8(t);
                            return String.fromCharCode.apply(null, n);
                        }, P1.UTF16 = function(e, t, r) {
                            for(var n = [], o = r / 2, i = 0; i < o; i++, t += 2)n[i] = e.getUint16(t);
                            return String.fromCharCode.apply(null, n);
                        }, k1.UTF16 = function(e) {
                            for(var t = [], r = 0; r < e.length; r += 1){
                                var n = e.charCodeAt(r);
                                t[t.length] = n >> 8 & 255, t[t.length] = 255 & n;
                            }
                            return t;
                        }, A1.UTF16 = function(e) {
                            return 2 * e.length;
                        };
                        var I1 = {
                            "x-mac-croatian": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ",
                            "x-mac-cyrillic": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю",
                            "x-mac-gaelic": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ",
                            "x-mac-greek": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­",
                            "x-mac-icelandic": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ",
                            "x-mac-inuit": "ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł",
                            "x-mac-ce": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",
                            macintosh: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ",
                            "x-mac-romanian": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ",
                            "x-mac-turkish": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"
                        };
                        P1.MACSTRING = function(e, t, r, n) {
                            var o = I1[n];
                            if (void 0 !== o) {
                                for(var i = "", a = 0; a < r; a++){
                                    var s = e.getUint8(t + a);
                                    i += s <= 127 ? String.fromCharCode(s) : o[127 & s];
                                }
                                return i;
                            }
                        };
                        var U1, N1 = "function" == typeof WeakMap && new WeakMap;
                        function F1(e) {
                            return -128 <= e && e <= 127;
                        }
                        function B1(e, t, r) {
                            for(var n = 0, o = e.length; t < o && n < 64 && 0 === e[t];)++t, ++n;
                            return r.push(128 | n - 1), t;
                        }
                        function G1(e, t, r) {
                            for(var n = 0, o = e.length, i = t; i < o && n < 64;){
                                var a = e[i];
                                if (!F1(a)) break;
                                if (0 === a && i + 1 < o && 0 === e[i + 1]) break;
                                ++i, ++n;
                            }
                            r.push(n - 1);
                            for(var s = t; s < i; ++s)r.push(e[s] + 256 & 255);
                            return i;
                        }
                        function V1(e, t, r) {
                            for(var n = 0, o = e.length, i = t; i < o && n < 64;){
                                var a = e[i];
                                if (0 === a) break;
                                if (F1(a) && i + 1 < o && F1(e[i + 1])) break;
                                ++i, ++n;
                            }
                            r.push(64 | n - 1);
                            for(var s = t; s < i; ++s){
                                var l = e[s];
                                r.push(l + 65536 >> 8 & 255, l + 256 & 255);
                            }
                            return i;
                        }
                        k1.MACSTRING = function(e, t175) {
                            var r133 = function(e) {
                                if (!U1) for(var t in U1 = {
                                }, I1)U1[t] = new String(t);
                                var r = U1[e];
                                if (void 0 !== r) {
                                    if (N1) {
                                        var n = N1.get(r);
                                        if (void 0 !== n) return n;
                                    }
                                    var o = I1[e];
                                    if (void 0 !== o) {
                                        for(var i = {
                                        }, a = 0; a < o.length; a++)i[o.charCodeAt(a)] = a + 128;
                                        return N1 && N1.set(r, i), i;
                                    }
                                }
                            }(t175);
                            if (void 0 !== r133) {
                                for(var n71 = [], o46 = 0; o46 < e.length; o46++){
                                    var i31 = e.charCodeAt(o46);
                                    if (128 <= i31 && void 0 === (i31 = r133[i31])) return;
                                    n71[o46] = i31;
                                }
                                return n71;
                            }
                        }, A1.MACSTRING = function(e, t) {
                            var r = k1.MACSTRING(e, t);
                            return void 0 !== r ? r.length : 0;
                        }, k1.VARDELTAS = function(e) {
                            for(var t = 0, r = []; t < e.length;){
                                var n = e[t];
                                t = 0 === n ? B1(e, t, r) : -128 <= n && n <= 127 ? G1(e, t, r) : V1(e, t, r);
                            }
                            return r;
                        }, k1.INDEX = function(e) {
                            for(var t = 1, r = [
                                t
                            ], n = [], o = 0; o < e.length; o += 1){
                                var i = k1.OBJECT(e[o]);
                                Array.prototype.push.apply(n, i), t += i.length, r.push(t);
                            }
                            if (0 === n.length) return [
                                0,
                                0
                            ];
                            for(var a = [], s = 1 + Math.floor(Math.log(t) / Math.log(2)) / 8 | 0, l = [
                                void 0,
                                k1.BYTE,
                                k1.USHORT,
                                k1.UINT24,
                                k1.ULONG
                            ][s], u = 0; u < r.length; u += 1){
                                var c = l(r[u]);
                                Array.prototype.push.apply(a, c);
                            }
                            return Array.prototype.concat(k1.Card16(e.length), k1.OffSize(s), a, n);
                        }, A1.INDEX = function(e) {
                            return k1.INDEX(e).length;
                        }, k1.DICT = function(e) {
                            for(var t = [], r = Object.keys(e), n = r.length, o = 0; o < n; o += 1){
                                var i = parseInt(r[o], 0), a = e[i];
                                t = (t = t.concat(k1.OPERAND(a.value, a.type))).concat(k1.OPERATOR(i));
                            }
                            return t;
                        }, A1.DICT = function(e) {
                            return k1.DICT(e).length;
                        }, k1.OPERATOR = function(e) {
                            return e < 1200 ? [
                                e
                            ] : [
                                12,
                                e - 1200
                            ];
                        }, k1.OPERAND = function(e, t) {
                            var r = [];
                            if (Array.isArray(t)) for(var n = 0; n < t.length; n += 1)L1.argument(e.length === t.length, "Not enough arguments given for type" + t), r = r.concat(k1.OPERAND(e[n], t[n]));
                            else if ("SID" === t) r = r.concat(k1.NUMBER(e));
                            else if ("offset" === t) r = r.concat(k1.NUMBER32(e));
                            else if ("number" === t) r = r.concat(k1.NUMBER(e));
                            else {
                                if ("real" !== t) throw new Error("Unknown operand type " + t);
                                r = r.concat(k1.REAL(e));
                            }
                            return r;
                        }, k1.OP = k1.BYTE, A1.OP = A1.BYTE;
                        var z1 = "function" == typeof WeakMap && new WeakMap;
                        function H(e, t, r) {
                            for(var n = 0; n < t.length; n += 1){
                                var o = t[n];
                                this[o.name] = o.value;
                            }
                            if (this.tableName = e, this.fields = t, r) for(var i = Object.keys(r), a = 0; a < i.length; a += 1){
                                var s = i[a], l = r[s];
                                void 0 !== this[s] && (this[s] = l);
                            }
                        }
                        function q(e, t, r) {
                            void 0 === r && (r = t.length);
                            var n = new Array(t.length + 1);
                            n[0] = {
                                name: e + "Count",
                                type: "USHORT",
                                value: r
                            };
                            for(var o = 0; o < t.length; o++)n[o + 1] = {
                                name: e + o,
                                type: "USHORT",
                                value: t[o]
                            };
                            return n;
                        }
                        function W(e, t, r) {
                            var n = t.length, o = new Array(n + 1);
                            o[0] = {
                                name: e + "Count",
                                type: "USHORT",
                                value: n
                            };
                            for(var i = 0; i < n; i++)o[i + 1] = {
                                name: e + i,
                                type: "TABLE",
                                value: r(t[i], i)
                            };
                            return o;
                        }
                        function X(e, t, r) {
                            var n = t.length, o = [];
                            o[0] = {
                                name: e + "Count",
                                type: "USHORT",
                                value: n
                            };
                            for(var i = 0; i < n; i++)o = o.concat(r(t[i], i));
                            return o;
                        }
                        function Y(e) {
                            1 === e.format ? H.call(this, "coverageTable", [
                                {
                                    name: "coverageFormat",
                                    type: "USHORT",
                                    value: 1
                                }
                            ].concat(q("glyph", e.glyphs))) : L1.assert(!1, "Can't create coverage table format 2 yet.");
                        }
                        function Z(e267) {
                            H.call(this, "scriptListTable", X("scriptRecord", e267, function(e268, t176) {
                                var r134 = e268.script, n = r134.defaultLangSys;
                                return L1.assert(!!n, "Unable to write GSUB: script " + e268.tag + " has no default language system."), [
                                    {
                                        name: "scriptTag" + t176,
                                        type: "TAG",
                                        value: e268.tag
                                    },
                                    {
                                        name: "script" + t176,
                                        type: "TABLE",
                                        value: new H("scriptTable", [
                                            {
                                                name: "defaultLangSys",
                                                type: "TABLE",
                                                value: new H("defaultLangSys", [
                                                    {
                                                        name: "lookupOrder",
                                                        type: "USHORT",
                                                        value: 0
                                                    },
                                                    {
                                                        name: "reqFeatureIndex",
                                                        type: "USHORT",
                                                        value: n.reqFeatureIndex
                                                    }
                                                ].concat(q("featureIndex", n.featureIndexes)))
                                            }
                                        ].concat(X("langSys", r134.langSysRecords, function(e, t) {
                                            var r = e.langSys;
                                            return [
                                                {
                                                    name: "langSysTag" + t,
                                                    type: "TAG",
                                                    value: e.tag
                                                },
                                                {
                                                    name: "langSys" + t,
                                                    type: "TABLE",
                                                    value: new H("langSys", [
                                                        {
                                                            name: "lookupOrder",
                                                            type: "USHORT",
                                                            value: 0
                                                        },
                                                        {
                                                            name: "reqFeatureIndex",
                                                            type: "USHORT",
                                                            value: r.reqFeatureIndex
                                                        }
                                                    ].concat(q("featureIndex", r.featureIndexes)))
                                                }
                                            ];
                                        })))
                                    }
                                ];
                            }));
                        }
                        function Q(e269) {
                            H.call(this, "featureListTable", X("featureRecord", e269, function(e, t) {
                                var r = e.feature;
                                return [
                                    {
                                        name: "featureTag" + t,
                                        type: "TAG",
                                        value: e.tag
                                    },
                                    {
                                        name: "feature" + t,
                                        type: "TABLE",
                                        value: new H("featureTable", [
                                            {
                                                name: "featureParams",
                                                type: "USHORT",
                                                value: r.featureParams
                                            }
                                        ].concat(q("lookupListIndex", r.lookupListIndexes)))
                                    }
                                ];
                            }));
                        }
                        function K(e270, r) {
                            H.call(this, "lookupListTable", W("lookup", e270, function(e) {
                                var t = r[e.lookupType];
                                return L1.assert(!!t, "Unable to write GSUB lookup type " + e.lookupType + " tables."), new H("lookupTable", [
                                    {
                                        name: "lookupType",
                                        type: "USHORT",
                                        value: e.lookupType
                                    },
                                    {
                                        name: "lookupFlag",
                                        type: "USHORT",
                                        value: e.lookupFlag
                                    }
                                ].concat(W("subtable", e.subtables, t)));
                            }));
                        }
                        k1.CHARSTRING = function(e) {
                            if (z1) {
                                var t = z1.get(e);
                                if (void 0 !== t) return t;
                            }
                            for(var r = [], n = e.length, o = 0; o < n; o += 1){
                                var i = e[o];
                                r = r.concat(k1[i.type](i.value));
                            }
                            return z1 && z1.set(e, r), r;
                        }, A1.CHARSTRING = function(e) {
                            return k1.CHARSTRING(e).length;
                        }, k1.OBJECT = function(e) {
                            var t = k1[e.type];
                            return L1.argument(void 0 !== t, "No encoding function for type " + e.type), t(e.value);
                        }, A1.OBJECT = function(e) {
                            var t = A1[e.type];
                            return L1.argument(void 0 !== t, "No sizeOf function for type " + e.type), t(e.value);
                        }, k1.TABLE = function(e) {
                            for(var t = [], r = e.fields.length, n = [], o = [], i = 0; i < r; i += 1){
                                var a = e.fields[i], s = k1[a.type];
                                L1.argument(void 0 !== s, "No encoding function for field type " + a.type + " (" + a.name + ")");
                                var l = e[a.name];
                                void 0 === l && (l = a.value);
                                var u = s(l);
                                "TABLE" === a.type ? (o.push(t.length), t = t.concat([
                                    0,
                                    0
                                ]), n.push(u)) : t = t.concat(u);
                            }
                            for(var c = 0; c < n.length; c += 1){
                                var d = o[c], f = t.length;
                                L1.argument(f < 65536, "Table " + e.tableName + " too big."), t[d] = f >> 8, t[d + 1] = 255 & f, t = t.concat(n[c]);
                            }
                            return t;
                        }, A1.TABLE = function(e) {
                            for(var t = 0, r = e.fields.length, n = 0; n < r; n += 1){
                                var o = e.fields[n], i = A1[o.type];
                                L1.argument(void 0 !== i, "No sizeOf function for field type " + o.type + " (" + o.name + ")");
                                var a = e[o.name];
                                void 0 === a && (a = o.value), t += i(a), "TABLE" === o.type && (t += 2);
                            }
                            return t;
                        }, k1.RECORD = k1.TABLE, A1.RECORD = A1.TABLE, k1.LITERAL = function(e) {
                            return e;
                        }, A1.LITERAL = function(e) {
                            return e.length;
                        }, H.prototype.encode = function() {
                            return k1.TABLE(this);
                        }, H.prototype.sizeOf = function() {
                            return A1.TABLE(this);
                        };
                        var J = {
                            Table: H,
                            Record: H,
                            Coverage: (Y.prototype = Object.create(H.prototype)).constructor = Y,
                            ScriptList: (Z.prototype = Object.create(H.prototype)).constructor = Z,
                            FeatureList: (Q.prototype = Object.create(H.prototype)).constructor = Q,
                            LookupList: (K.prototype = Object.create(H.prototype)).constructor = K,
                            ushortList: q,
                            tableList: W,
                            recordList: X
                        };
                        function $(e, t) {
                            return e.getUint8(t);
                        }
                        function ee(e, t) {
                            return e.getUint16(t, !1);
                        }
                        function te(e, t) {
                            return e.getUint32(t, !1);
                        }
                        function re(e, t) {
                            return e.getInt16(t, !1) + e.getUint16(t + 2, !1) / 65535;
                        }
                        var ne = {
                            byte: 1,
                            uShort: 2,
                            short: 2,
                            uLong: 4,
                            fixed: 4,
                            longDateTime: 8,
                            tag: 4
                        };
                        function oe(e, t) {
                            this.data = e, this.offset = t, this.relativeOffset = 0;
                        }
                        oe.prototype.parseByte = function() {
                            var e = this.data.getUint8(this.offset + this.relativeOffset);
                            return this.relativeOffset += 1, e;
                        }, oe.prototype.parseChar = function() {
                            var e = this.data.getInt8(this.offset + this.relativeOffset);
                            return this.relativeOffset += 1, e;
                        }, oe.prototype.parseCard8 = oe.prototype.parseByte, oe.prototype.parseCard16 = oe.prototype.parseUShort = function() {
                            var e = this.data.getUint16(this.offset + this.relativeOffset);
                            return this.relativeOffset += 2, e;
                        }, oe.prototype.parseSID = oe.prototype.parseUShort, oe.prototype.parseOffset16 = oe.prototype.parseUShort, oe.prototype.parseShort = function() {
                            var e = this.data.getInt16(this.offset + this.relativeOffset);
                            return this.relativeOffset += 2, e;
                        }, oe.prototype.parseF2Dot14 = function() {
                            var e = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
                            return this.relativeOffset += 2, e;
                        }, oe.prototype.parseOffset32 = oe.prototype.parseULong = function() {
                            var e = te(this.data, this.offset + this.relativeOffset);
                            return this.relativeOffset += 4, e;
                        }, oe.prototype.parseFixed = function() {
                            var e = re(this.data, this.offset + this.relativeOffset);
                            return this.relativeOffset += 4, e;
                        }, oe.prototype.parseString = function(e) {
                            var t = this.data, r = this.offset + this.relativeOffset, n = "";
                            this.relativeOffset += e;
                            for(var o = 0; o < e; o++)n += String.fromCharCode(t.getUint8(r + o));
                            return n;
                        }, oe.prototype.parseTag = function() {
                            return this.parseString(4);
                        }, oe.prototype.parseLongDateTime = function() {
                            var e = te(this.data, this.offset + this.relativeOffset + 4);
                            return e -= 2082844800, this.relativeOffset += 8, e;
                        }, oe.prototype.parseVersion = function(e) {
                            var t = ee(this.data, this.offset + this.relativeOffset), r = ee(this.data, this.offset + this.relativeOffset + 2);
                            return this.relativeOffset += 4, void 0 === e && (e = 4096), t + r / e / 10;
                        }, oe.prototype.skip = function(e, t) {
                            void 0 === t && (t = 1), this.relativeOffset += ne[e] * t;
                        }, oe.prototype.parseULongList = function(e) {
                            void 0 === e && (e = this.parseULong());
                            for(var t = new Array(e), r = this.data, n = this.offset + this.relativeOffset, o = 0; o < e; o++)t[o] = r.getUint32(n), n += 4;
                            return this.relativeOffset += 4 * e, t;
                        }, oe.prototype.parseOffset16List = oe.prototype.parseUShortList = function(e) {
                            void 0 === e && (e = this.parseUShort());
                            for(var t = new Array(e), r = this.data, n = this.offset + this.relativeOffset, o = 0; o < e; o++)t[o] = r.getUint16(n), n += 2;
                            return this.relativeOffset += 2 * e, t;
                        }, oe.prototype.parseShortList = function(e) {
                            for(var t = new Array(e), r = this.data, n = this.offset + this.relativeOffset, o = 0; o < e; o++)t[o] = r.getInt16(n), n += 2;
                            return this.relativeOffset += 2 * e, t;
                        }, oe.prototype.parseByteList = function(e) {
                            for(var t = new Array(e), r = this.data, n = this.offset + this.relativeOffset, o = 0; o < e; o++)t[o] = r.getUint8(n++);
                            return this.relativeOffset += e, t;
                        }, oe.prototype.parseList = function(e, t) {
                            t || (t = e, e = this.parseUShort());
                            for(var r = new Array(e), n = 0; n < e; n++)r[n] = t.call(this);
                            return r;
                        }, oe.prototype.parseList32 = function(e, t) {
                            t || (t = e, e = this.parseULong());
                            for(var r = new Array(e), n = 0; n < e; n++)r[n] = t.call(this);
                            return r;
                        }, oe.prototype.parseRecordList = function(e, t) {
                            t || (t = e, e = this.parseUShort());
                            for(var r = new Array(e), n = Object.keys(t), o = 0; o < e; o++){
                                for(var i = {
                                }, a = 0; a < n.length; a++){
                                    var s = n[a], l = t[s];
                                    i[s] = l.call(this);
                                }
                                r[o] = i;
                            }
                            return r;
                        }, oe.prototype.parseRecordList32 = function(e, t) {
                            t || (t = e, e = this.parseULong());
                            for(var r = new Array(e), n = Object.keys(t), o = 0; o < e; o++){
                                for(var i = {
                                }, a = 0; a < n.length; a++){
                                    var s = n[a], l = t[s];
                                    i[s] = l.call(this);
                                }
                                r[o] = i;
                            }
                            return r;
                        }, oe.prototype.parseStruct = function(e) {
                            if ("function" == typeof e) return e.call(this);
                            for(var t = Object.keys(e), r = {
                            }, n = 0; n < t.length; n++){
                                var o = t[n], i = e[o];
                                r[o] = i.call(this);
                            }
                            return r;
                        }, oe.prototype.parseValueRecord = function(e) {
                            if (void 0 === e && (e = this.parseUShort()), 0 !== e) {
                                var t = {
                                };
                                return 1 & e && (t.xPlacement = this.parseShort()), 2 & e && (t.yPlacement = this.parseShort()), 4 & e && (t.xAdvance = this.parseShort()), 8 & e && (t.yAdvance = this.parseShort()), 16 & e && (t.xPlaDevice = void 0, this.parseShort()), 32 & e && (t.yPlaDevice = void 0, this.parseShort()), 64 & e && (t.xAdvDevice = void 0, this.parseShort()), 128 & e && (t.yAdvDevice = void 0, this.parseShort()), t;
                            }
                        }, oe.prototype.parseValueRecordList = function() {
                            for(var e = this.parseUShort(), t = this.parseUShort(), r = new Array(t), n = 0; n < t; n++)r[n] = this.parseValueRecord(e);
                            return r;
                        }, oe.prototype.parsePointer = function(e) {
                            var t = this.parseOffset16();
                            if (0 < t) return new oe(this.data, this.offset + t).parseStruct(e);
                        }, oe.prototype.parsePointer32 = function(e) {
                            var t = this.parseOffset32();
                            if (0 < t) return new oe(this.data, this.offset + t).parseStruct(e);
                        }, oe.prototype.parseListOfLists = function(e) {
                            for(var t = this.parseOffset16List(), r = t.length, n = this.relativeOffset, o = new Array(r), i = 0; i < r; i++){
                                var a = t[i];
                                if (0 !== a) {
                                    if (this.relativeOffset = a, e) {
                                        for(var s = this.parseOffset16List(), l = new Array(s.length), u = 0; u < s.length; u++)this.relativeOffset = a + s[u], l[u] = e.call(this);
                                        o[i] = l;
                                    } else o[i] = this.parseUShortList();
                                } else o[i] = void 0;
                            }
                            return this.relativeOffset = n, o;
                        }, oe.prototype.parseCoverage = function() {
                            var e = this.offset + this.relativeOffset, t = this.parseUShort(), r = this.parseUShort();
                            if (1 === t) return {
                                format: 1,
                                glyphs: this.parseUShortList(r)
                            };
                            if (2 !== t) throw new Error("0x" + e.toString(16) + ": Coverage format must be 1 or 2.");
                            for(var n = new Array(r), o = 0; o < r; o++)n[o] = {
                                start: this.parseUShort(),
                                end: this.parseUShort(),
                                index: this.parseUShort()
                            };
                            return {
                                format: 2,
                                ranges: n
                            };
                        }, oe.prototype.parseClassDef = function() {
                            var e = this.offset + this.relativeOffset, t = this.parseUShort();
                            if (1 === t) return {
                                format: 1,
                                startGlyph: this.parseUShort(),
                                classes: this.parseUShortList()
                            };
                            if (2 === t) return {
                                format: 2,
                                ranges: this.parseRecordList({
                                    start: oe.uShort,
                                    end: oe.uShort,
                                    classId: oe.uShort
                                })
                            };
                            throw new Error("0x" + e.toString(16) + ": ClassDef format must be 1 or 2.");
                        }, oe.list = function(e, t) {
                            return function() {
                                return this.parseList(e, t);
                            };
                        }, oe.list32 = function(e, t) {
                            return function() {
                                return this.parseList32(e, t);
                            };
                        }, oe.recordList = function(e, t) {
                            return function() {
                                return this.parseRecordList(e, t);
                            };
                        }, oe.recordList32 = function(e, t) {
                            return function() {
                                return this.parseRecordList32(e, t);
                            };
                        }, oe.pointer = function(e) {
                            return function() {
                                return this.parsePointer(e);
                            };
                        }, oe.pointer32 = function(e) {
                            return function() {
                                return this.parsePointer32(e);
                            };
                        }, oe.tag = oe.prototype.parseTag, oe.byte = oe.prototype.parseByte, oe.uShort = oe.offset16 = oe.prototype.parseUShort, oe.uShortList = oe.prototype.parseUShortList, oe.uLong = oe.offset32 = oe.prototype.parseULong, oe.uLongList = oe.prototype.parseULongList, oe.struct = oe.prototype.parseStruct, oe.coverage = oe.prototype.parseCoverage, oe.classDef = oe.prototype.parseClassDef;
                        var ie = {
                            reserved: oe.uShort,
                            reqFeatureIndex: oe.uShort,
                            featureIndexes: oe.uShortList
                        };
                        oe.prototype.parseScriptList = function() {
                            return this.parsePointer(oe.recordList({
                                tag: oe.tag,
                                script: oe.pointer({
                                    defaultLangSys: oe.pointer(ie),
                                    langSysRecords: oe.recordList({
                                        tag: oe.tag,
                                        langSys: oe.pointer(ie)
                                    })
                                })
                            })) || [];
                        }, oe.prototype.parseFeatureList = function() {
                            return this.parsePointer(oe.recordList({
                                tag: oe.tag,
                                feature: oe.pointer({
                                    featureParams: oe.offset16,
                                    lookupListIndexes: oe.uShortList
                                })
                            })) || [];
                        }, oe.prototype.parseLookupList = function(n) {
                            return this.parsePointer(oe.list(oe.pointer(function() {
                                var e = this.parseUShort();
                                L1.argument(1 <= e && e <= 9, "GPOS/GSUB lookup type " + e + " unknown.");
                                var t = this.parseUShort(), r = 16 & t;
                                return {
                                    lookupType: e,
                                    lookupFlag: t,
                                    subtables: this.parseList(oe.pointer(n[e])),
                                    markFilteringSet: r ? this.parseUShort() : void 0
                                };
                            }))) || [];
                        }, oe.prototype.parseFeatureVariationsList = function() {
                            return this.parsePointer32(function() {
                                var e = this.parseUShort(), t = this.parseUShort();
                                return L1.argument(1 === e && t < 1, "GPOS/GSUB feature variations table unknown."), this.parseRecordList32({
                                    conditionSetOffset: oe.offset32,
                                    featureTableSubstitutionOffset: oe.offset32
                                });
                            }) || [];
                        };
                        var ae = {
                            getByte: $,
                            getCard8: $,
                            getUShort: ee,
                            getCard16: ee,
                            getShort: function(e, t) {
                                return e.getInt16(t, !1);
                            },
                            getULong: te,
                            getFixed: re,
                            getTag: function(e, t) {
                                for(var r = "", n = t; n < t + 4; n += 1)r += String.fromCharCode(e.getInt8(n));
                                return r;
                            },
                            getOffset: function(e, t, r) {
                                for(var n = 0, o = 0; o < r; o += 1)n <<= 8, n += e.getUint8(t + o);
                                return n;
                            },
                            getBytes: function(e, t, r) {
                                for(var n = [], o = t; o < r; o += 1)n.push(e.getUint8(o));
                                return n;
                            },
                            bytesToString: function(e) {
                                for(var t = "", r = 0; r < e.length; r += 1)t += String.fromCharCode(e[r]);
                                return t;
                            },
                            Parser: oe
                        };
                        var se = {
                            parse: function(e271, t177) {
                                var r135 = {
                                };
                                r135.version = ae.getUShort(e271, t177), L1.argument(0 === r135.version, "cmap table version should be 0."), r135.numTables = ae.getUShort(e271, t177 + 2);
                                for(var n72 = -1, o47 = r135.numTables - 1; 0 <= o47; --o47){
                                    var i = ae.getUShort(e271, t177 + 4 + 8 * o47), a = ae.getUShort(e271, t177 + 4 + 8 * o47 + 2);
                                    if (3 === i && (0 === a || 1 === a || 10 === a) || 0 === i && (0 === a || 1 === a || 2 === a || 3 === a || 4 === a)) {
                                        n72 = ae.getULong(e271, t177 + 4 + 8 * o47 + 4);
                                        break;
                                    }
                                }
                                if (-1 === n72) throw new Error("No valid cmap sub-tables found.");
                                var s20 = new ae.Parser(e271, t177 + n72);
                                if (r135.format = s20.parseUShort(), 12 === r135.format) !function(e, t) {
                                    var r;
                                    t.parseUShort(), e.length = t.parseULong(), e.language = t.parseULong(), e.groupCount = r = t.parseULong(), e.glyphIndexMap = {
                                    };
                                    for(var n = 0; n < r; n += 1)for(var o = t.parseULong(), i = t.parseULong(), a = t.parseULong(), s = o; s <= i; s += 1)e.glyphIndexMap[s] = a, a++;
                                }(r135, s20);
                                else {
                                    if (4 !== r135.format) throw new Error("Only format 4 and 12 cmap tables are supported (found format " + r135.format + ").");
                                    !function(e, t, r, n, o) {
                                        var i;
                                        e.length = t.parseUShort(), e.language = t.parseUShort(), e.segCount = i = t.parseUShort() >> 1, t.skip("uShort", 3), e.glyphIndexMap = {
                                        };
                                        for(var a = new ae.Parser(r, n + o + 14), s = new ae.Parser(r, n + o + 16 + 2 * i), l = new ae.Parser(r, n + o + 16 + 4 * i), u = new ae.Parser(r, n + o + 16 + 6 * i), c = n + o + 16 + 8 * i, d = 0; d < i - 1; d += 1)for(var f = void 0, h = a.parseUShort(), p = s.parseUShort(), y = l.parseShort(), m = u.parseUShort(), g = p; g <= h; g += 1)0 !== m ? (c = u.offset + u.relativeOffset - 2, c += m, c += 2 * (g - p), 0 !== (f = ae.getUShort(r, c)) && (f = f + y & 65535)) : f = g + y & 65535, e.glyphIndexMap[g] = f;
                                    }(r135, s20, e271, t177, n72);
                                }
                                return r135;
                            },
                            make: function(e272) {
                                var t178, r = !0;
                                for(t178 = e272.length - 1; 0 < t178; --t178)if (65535 < e272.get(t178).unicode) {
                                    console.log("Adding CMAP format 12 (needed!)"), r = !1;
                                    break;
                                }
                                var n = [
                                    {
                                        name: "version",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "numTables",
                                        type: "USHORT",
                                        value: r ? 1 : 2
                                    },
                                    {
                                        name: "platformID",
                                        type: "USHORT",
                                        value: 3
                                    },
                                    {
                                        name: "encodingID",
                                        type: "USHORT",
                                        value: 1
                                    },
                                    {
                                        name: "offset",
                                        type: "ULONG",
                                        value: r ? 12 : 20
                                    }
                                ];
                                r || (n = n.concat([
                                    {
                                        name: "cmap12PlatformID",
                                        type: "USHORT",
                                        value: 3
                                    },
                                    {
                                        name: "cmap12EncodingID",
                                        type: "USHORT",
                                        value: 10
                                    },
                                    {
                                        name: "cmap12Offset",
                                        type: "ULONG",
                                        value: 0
                                    }
                                ])), n = n.concat([
                                    {
                                        name: "format",
                                        type: "USHORT",
                                        value: 4
                                    },
                                    {
                                        name: "cmap4Length",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "language",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "segCountX2",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "searchRange",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "entrySelector",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "rangeShift",
                                        type: "USHORT",
                                        value: 0
                                    }
                                ]);
                                var o, i, a, s = new J.Table("cmap", n);
                                for(s.segments = [], t178 = 0; t178 < e272.length; t178 += 1){
                                    for(var l = e272.get(t178), u = 0; u < l.unicodes.length; u += 1)o = s, i = l.unicodes[u], a = t178, o.segments.push({
                                        end: i,
                                        start: i,
                                        delta: -(i - a),
                                        offset: 0,
                                        glyphIndex: a
                                    });
                                    s.segments = s.segments.sort(function(e, t) {
                                        return e.start - t.start;
                                    });
                                }
                                s.segments.push({
                                    end: 65535,
                                    start: 65535,
                                    delta: 1,
                                    offset: 0
                                });
                                var c = s.segments.length, d = 0, f = [], h = [], p = [], y = [], m = [], g = [];
                                for(t178 = 0; t178 < c; t178 += 1){
                                    var v = s.segments[t178];
                                    v.end <= 65535 && v.start <= 65535 ? (f = f.concat({
                                        name: "end_" + t178,
                                        type: "USHORT",
                                        value: v.end
                                    }), h = h.concat({
                                        name: "start_" + t178,
                                        type: "USHORT",
                                        value: v.start
                                    }), p = p.concat({
                                        name: "idDelta_" + t178,
                                        type: "SHORT",
                                        value: v.delta
                                    }), y = y.concat({
                                        name: "idRangeOffset_" + t178,
                                        type: "USHORT",
                                        value: v.offset
                                    }), void 0 !== v.glyphId && (m = m.concat({
                                        name: "glyph_" + t178,
                                        type: "USHORT",
                                        value: v.glyphId
                                    }))) : d += 1, r || void 0 === v.glyphIndex || (g = (g = (g = g.concat({
                                        name: "cmap12Start_" + t178,
                                        type: "ULONG",
                                        value: v.start
                                    })).concat({
                                        name: "cmap12End_" + t178,
                                        type: "ULONG",
                                        value: v.end
                                    })).concat({
                                        name: "cmap12Glyph_" + t178,
                                        type: "ULONG",
                                        value: v.glyphIndex
                                    }));
                                }
                                if (s.segCountX2 = 2 * (c - d), s.searchRange = 2 * Math.pow(2, Math.floor(Math.log(c - d) / Math.log(2))), s.entrySelector = Math.log(s.searchRange / 2) / Math.log(2), s.rangeShift = s.segCountX2 - s.searchRange, s.fields = s.fields.concat(f), s.fields.push({
                                    name: "reservedPad",
                                    type: "USHORT",
                                    value: 0
                                }), s.fields = s.fields.concat(h), s.fields = s.fields.concat(p), s.fields = s.fields.concat(y), s.fields = s.fields.concat(m), s.cmap4Length = 14 + 2 * f.length + 2 + 2 * h.length + 2 * p.length + 2 * y.length + 2 * m.length, !r) {
                                    var b = 16 + 4 * g.length;
                                    s.cmap12Offset = 20 + s.cmap4Length, s.fields = s.fields.concat([
                                        {
                                            name: "cmap12Format",
                                            type: "USHORT",
                                            value: 12
                                        },
                                        {
                                            name: "cmap12Reserved",
                                            type: "USHORT",
                                            value: 0
                                        },
                                        {
                                            name: "cmap12Length",
                                            type: "ULONG",
                                            value: b
                                        },
                                        {
                                            name: "cmap12Language",
                                            type: "ULONG",
                                            value: 0
                                        },
                                        {
                                            name: "cmap12nGroups",
                                            type: "ULONG",
                                            value: g.length / 3
                                        }
                                    ]), s.fields = s.fields.concat(g);
                                }
                                return s;
                            }
                        }, le = [
                            ".notdef",
                            "space",
                            "exclam",
                            "quotedbl",
                            "numbersign",
                            "dollar",
                            "percent",
                            "ampersand",
                            "quoteright",
                            "parenleft",
                            "parenright",
                            "asterisk",
                            "plus",
                            "comma",
                            "hyphen",
                            "period",
                            "slash",
                            "zero",
                            "one",
                            "two",
                            "three",
                            "four",
                            "five",
                            "six",
                            "seven",
                            "eight",
                            "nine",
                            "colon",
                            "semicolon",
                            "less",
                            "equal",
                            "greater",
                            "question",
                            "at",
                            "A",
                            "B",
                            "C",
                            "D",
                            "E",
                            "F",
                            "G",
                            "H",
                            "I",
                            "J",
                            "K",
                            "L",
                            "M",
                            "N",
                            "O",
                            "P",
                            "Q",
                            "R",
                            "S",
                            "T",
                            "U",
                            "V",
                            "W",
                            "X",
                            "Y",
                            "Z",
                            "bracketleft",
                            "backslash",
                            "bracketright",
                            "asciicircum",
                            "underscore",
                            "quoteleft",
                            "a",
                            "b",
                            "c",
                            "d",
                            "e",
                            "f",
                            "g",
                            "h",
                            "i",
                            "j",
                            "k",
                            "l",
                            "m",
                            "n",
                            "o",
                            "p",
                            "q",
                            "r",
                            "s",
                            "t",
                            "u",
                            "v",
                            "w",
                            "x",
                            "y",
                            "z",
                            "braceleft",
                            "bar",
                            "braceright",
                            "asciitilde",
                            "exclamdown",
                            "cent",
                            "sterling",
                            "fraction",
                            "yen",
                            "florin",
                            "section",
                            "currency",
                            "quotesingle",
                            "quotedblleft",
                            "guillemotleft",
                            "guilsinglleft",
                            "guilsinglright",
                            "fi",
                            "fl",
                            "endash",
                            "dagger",
                            "daggerdbl",
                            "periodcentered",
                            "paragraph",
                            "bullet",
                            "quotesinglbase",
                            "quotedblbase",
                            "quotedblright",
                            "guillemotright",
                            "ellipsis",
                            "perthousand",
                            "questiondown",
                            "grave",
                            "acute",
                            "circumflex",
                            "tilde",
                            "macron",
                            "breve",
                            "dotaccent",
                            "dieresis",
                            "ring",
                            "cedilla",
                            "hungarumlaut",
                            "ogonek",
                            "caron",
                            "emdash",
                            "AE",
                            "ordfeminine",
                            "Lslash",
                            "Oslash",
                            "OE",
                            "ordmasculine",
                            "ae",
                            "dotlessi",
                            "lslash",
                            "oslash",
                            "oe",
                            "germandbls",
                            "onesuperior",
                            "logicalnot",
                            "mu",
                            "trademark",
                            "Eth",
                            "onehalf",
                            "plusminus",
                            "Thorn",
                            "onequarter",
                            "divide",
                            "brokenbar",
                            "degree",
                            "thorn",
                            "threequarters",
                            "twosuperior",
                            "registered",
                            "minus",
                            "eth",
                            "multiply",
                            "threesuperior",
                            "copyright",
                            "Aacute",
                            "Acircumflex",
                            "Adieresis",
                            "Agrave",
                            "Aring",
                            "Atilde",
                            "Ccedilla",
                            "Eacute",
                            "Ecircumflex",
                            "Edieresis",
                            "Egrave",
                            "Iacute",
                            "Icircumflex",
                            "Idieresis",
                            "Igrave",
                            "Ntilde",
                            "Oacute",
                            "Ocircumflex",
                            "Odieresis",
                            "Ograve",
                            "Otilde",
                            "Scaron",
                            "Uacute",
                            "Ucircumflex",
                            "Udieresis",
                            "Ugrave",
                            "Yacute",
                            "Ydieresis",
                            "Zcaron",
                            "aacute",
                            "acircumflex",
                            "adieresis",
                            "agrave",
                            "aring",
                            "atilde",
                            "ccedilla",
                            "eacute",
                            "ecircumflex",
                            "edieresis",
                            "egrave",
                            "iacute",
                            "icircumflex",
                            "idieresis",
                            "igrave",
                            "ntilde",
                            "oacute",
                            "ocircumflex",
                            "odieresis",
                            "ograve",
                            "otilde",
                            "scaron",
                            "uacute",
                            "ucircumflex",
                            "udieresis",
                            "ugrave",
                            "yacute",
                            "ydieresis",
                            "zcaron",
                            "exclamsmall",
                            "Hungarumlautsmall",
                            "dollaroldstyle",
                            "dollarsuperior",
                            "ampersandsmall",
                            "Acutesmall",
                            "parenleftsuperior",
                            "parenrightsuperior",
                            "266 ff",
                            "onedotenleader",
                            "zerooldstyle",
                            "oneoldstyle",
                            "twooldstyle",
                            "threeoldstyle",
                            "fouroldstyle",
                            "fiveoldstyle",
                            "sixoldstyle",
                            "sevenoldstyle",
                            "eightoldstyle",
                            "nineoldstyle",
                            "commasuperior",
                            "threequartersemdash",
                            "periodsuperior",
                            "questionsmall",
                            "asuperior",
                            "bsuperior",
                            "centsuperior",
                            "dsuperior",
                            "esuperior",
                            "isuperior",
                            "lsuperior",
                            "msuperior",
                            "nsuperior",
                            "osuperior",
                            "rsuperior",
                            "ssuperior",
                            "tsuperior",
                            "ff",
                            "ffi",
                            "ffl",
                            "parenleftinferior",
                            "parenrightinferior",
                            "Circumflexsmall",
                            "hyphensuperior",
                            "Gravesmall",
                            "Asmall",
                            "Bsmall",
                            "Csmall",
                            "Dsmall",
                            "Esmall",
                            "Fsmall",
                            "Gsmall",
                            "Hsmall",
                            "Ismall",
                            "Jsmall",
                            "Ksmall",
                            "Lsmall",
                            "Msmall",
                            "Nsmall",
                            "Osmall",
                            "Psmall",
                            "Qsmall",
                            "Rsmall",
                            "Ssmall",
                            "Tsmall",
                            "Usmall",
                            "Vsmall",
                            "Wsmall",
                            "Xsmall",
                            "Ysmall",
                            "Zsmall",
                            "colonmonetary",
                            "onefitted",
                            "rupiah",
                            "Tildesmall",
                            "exclamdownsmall",
                            "centoldstyle",
                            "Lslashsmall",
                            "Scaronsmall",
                            "Zcaronsmall",
                            "Dieresissmall",
                            "Brevesmall",
                            "Caronsmall",
                            "Dotaccentsmall",
                            "Macronsmall",
                            "figuredash",
                            "hypheninferior",
                            "Ogoneksmall",
                            "Ringsmall",
                            "Cedillasmall",
                            "questiondownsmall",
                            "oneeighth",
                            "threeeighths",
                            "fiveeighths",
                            "seveneighths",
                            "onethird",
                            "twothirds",
                            "zerosuperior",
                            "foursuperior",
                            "fivesuperior",
                            "sixsuperior",
                            "sevensuperior",
                            "eightsuperior",
                            "ninesuperior",
                            "zeroinferior",
                            "oneinferior",
                            "twoinferior",
                            "threeinferior",
                            "fourinferior",
                            "fiveinferior",
                            "sixinferior",
                            "seveninferior",
                            "eightinferior",
                            "nineinferior",
                            "centinferior",
                            "dollarinferior",
                            "periodinferior",
                            "commainferior",
                            "Agravesmall",
                            "Aacutesmall",
                            "Acircumflexsmall",
                            "Atildesmall",
                            "Adieresissmall",
                            "Aringsmall",
                            "AEsmall",
                            "Ccedillasmall",
                            "Egravesmall",
                            "Eacutesmall",
                            "Ecircumflexsmall",
                            "Edieresissmall",
                            "Igravesmall",
                            "Iacutesmall",
                            "Icircumflexsmall",
                            "Idieresissmall",
                            "Ethsmall",
                            "Ntildesmall",
                            "Ogravesmall",
                            "Oacutesmall",
                            "Ocircumflexsmall",
                            "Otildesmall",
                            "Odieresissmall",
                            "OEsmall",
                            "Oslashsmall",
                            "Ugravesmall",
                            "Uacutesmall",
                            "Ucircumflexsmall",
                            "Udieresissmall",
                            "Yacutesmall",
                            "Thornsmall",
                            "Ydieresissmall",
                            "001.000",
                            "001.001",
                            "001.002",
                            "001.003",
                            "Black",
                            "Bold",
                            "Book",
                            "Light",
                            "Medium",
                            "Regular",
                            "Roman",
                            "Semibold"
                        ], ue = [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "space",
                            "exclam",
                            "quotedbl",
                            "numbersign",
                            "dollar",
                            "percent",
                            "ampersand",
                            "quoteright",
                            "parenleft",
                            "parenright",
                            "asterisk",
                            "plus",
                            "comma",
                            "hyphen",
                            "period",
                            "slash",
                            "zero",
                            "one",
                            "two",
                            "three",
                            "four",
                            "five",
                            "six",
                            "seven",
                            "eight",
                            "nine",
                            "colon",
                            "semicolon",
                            "less",
                            "equal",
                            "greater",
                            "question",
                            "at",
                            "A",
                            "B",
                            "C",
                            "D",
                            "E",
                            "F",
                            "G",
                            "H",
                            "I",
                            "J",
                            "K",
                            "L",
                            "M",
                            "N",
                            "O",
                            "P",
                            "Q",
                            "R",
                            "S",
                            "T",
                            "U",
                            "V",
                            "W",
                            "X",
                            "Y",
                            "Z",
                            "bracketleft",
                            "backslash",
                            "bracketright",
                            "asciicircum",
                            "underscore",
                            "quoteleft",
                            "a",
                            "b",
                            "c",
                            "d",
                            "e",
                            "f",
                            "g",
                            "h",
                            "i",
                            "j",
                            "k",
                            "l",
                            "m",
                            "n",
                            "o",
                            "p",
                            "q",
                            "r",
                            "s",
                            "t",
                            "u",
                            "v",
                            "w",
                            "x",
                            "y",
                            "z",
                            "braceleft",
                            "bar",
                            "braceright",
                            "asciitilde",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "exclamdown",
                            "cent",
                            "sterling",
                            "fraction",
                            "yen",
                            "florin",
                            "section",
                            "currency",
                            "quotesingle",
                            "quotedblleft",
                            "guillemotleft",
                            "guilsinglleft",
                            "guilsinglright",
                            "fi",
                            "fl",
                            "",
                            "endash",
                            "dagger",
                            "daggerdbl",
                            "periodcentered",
                            "",
                            "paragraph",
                            "bullet",
                            "quotesinglbase",
                            "quotedblbase",
                            "quotedblright",
                            "guillemotright",
                            "ellipsis",
                            "perthousand",
                            "",
                            "questiondown",
                            "",
                            "grave",
                            "acute",
                            "circumflex",
                            "tilde",
                            "macron",
                            "breve",
                            "dotaccent",
                            "dieresis",
                            "",
                            "ring",
                            "cedilla",
                            "",
                            "hungarumlaut",
                            "ogonek",
                            "caron",
                            "emdash",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "AE",
                            "",
                            "ordfeminine",
                            "",
                            "",
                            "",
                            "",
                            "Lslash",
                            "Oslash",
                            "OE",
                            "ordmasculine",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "ae",
                            "",
                            "",
                            "",
                            "dotlessi",
                            "",
                            "",
                            "lslash",
                            "oslash",
                            "oe",
                            "germandbls"
                        ], ce = [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "space",
                            "exclamsmall",
                            "Hungarumlautsmall",
                            "",
                            "dollaroldstyle",
                            "dollarsuperior",
                            "ampersandsmall",
                            "Acutesmall",
                            "parenleftsuperior",
                            "parenrightsuperior",
                            "twodotenleader",
                            "onedotenleader",
                            "comma",
                            "hyphen",
                            "period",
                            "fraction",
                            "zerooldstyle",
                            "oneoldstyle",
                            "twooldstyle",
                            "threeoldstyle",
                            "fouroldstyle",
                            "fiveoldstyle",
                            "sixoldstyle",
                            "sevenoldstyle",
                            "eightoldstyle",
                            "nineoldstyle",
                            "colon",
                            "semicolon",
                            "commasuperior",
                            "threequartersemdash",
                            "periodsuperior",
                            "questionsmall",
                            "",
                            "asuperior",
                            "bsuperior",
                            "centsuperior",
                            "dsuperior",
                            "esuperior",
                            "",
                            "",
                            "isuperior",
                            "",
                            "",
                            "lsuperior",
                            "msuperior",
                            "nsuperior",
                            "osuperior",
                            "",
                            "",
                            "rsuperior",
                            "ssuperior",
                            "tsuperior",
                            "",
                            "ff",
                            "fi",
                            "fl",
                            "ffi",
                            "ffl",
                            "parenleftinferior",
                            "",
                            "parenrightinferior",
                            "Circumflexsmall",
                            "hyphensuperior",
                            "Gravesmall",
                            "Asmall",
                            "Bsmall",
                            "Csmall",
                            "Dsmall",
                            "Esmall",
                            "Fsmall",
                            "Gsmall",
                            "Hsmall",
                            "Ismall",
                            "Jsmall",
                            "Ksmall",
                            "Lsmall",
                            "Msmall",
                            "Nsmall",
                            "Osmall",
                            "Psmall",
                            "Qsmall",
                            "Rsmall",
                            "Ssmall",
                            "Tsmall",
                            "Usmall",
                            "Vsmall",
                            "Wsmall",
                            "Xsmall",
                            "Ysmall",
                            "Zsmall",
                            "colonmonetary",
                            "onefitted",
                            "rupiah",
                            "Tildesmall",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "exclamdownsmall",
                            "centoldstyle",
                            "Lslashsmall",
                            "",
                            "",
                            "Scaronsmall",
                            "Zcaronsmall",
                            "Dieresissmall",
                            "Brevesmall",
                            "Caronsmall",
                            "",
                            "Dotaccentsmall",
                            "",
                            "",
                            "Macronsmall",
                            "",
                            "",
                            "figuredash",
                            "hypheninferior",
                            "",
                            "",
                            "Ogoneksmall",
                            "Ringsmall",
                            "Cedillasmall",
                            "",
                            "",
                            "",
                            "onequarter",
                            "onehalf",
                            "threequarters",
                            "questiondownsmall",
                            "oneeighth",
                            "threeeighths",
                            "fiveeighths",
                            "seveneighths",
                            "onethird",
                            "twothirds",
                            "",
                            "",
                            "zerosuperior",
                            "onesuperior",
                            "twosuperior",
                            "threesuperior",
                            "foursuperior",
                            "fivesuperior",
                            "sixsuperior",
                            "sevensuperior",
                            "eightsuperior",
                            "ninesuperior",
                            "zeroinferior",
                            "oneinferior",
                            "twoinferior",
                            "threeinferior",
                            "fourinferior",
                            "fiveinferior",
                            "sixinferior",
                            "seveninferior",
                            "eightinferior",
                            "nineinferior",
                            "centinferior",
                            "dollarinferior",
                            "periodinferior",
                            "commainferior",
                            "Agravesmall",
                            "Aacutesmall",
                            "Acircumflexsmall",
                            "Atildesmall",
                            "Adieresissmall",
                            "Aringsmall",
                            "AEsmall",
                            "Ccedillasmall",
                            "Egravesmall",
                            "Eacutesmall",
                            "Ecircumflexsmall",
                            "Edieresissmall",
                            "Igravesmall",
                            "Iacutesmall",
                            "Icircumflexsmall",
                            "Idieresissmall",
                            "Ethsmall",
                            "Ntildesmall",
                            "Ogravesmall",
                            "Oacutesmall",
                            "Ocircumflexsmall",
                            "Otildesmall",
                            "Odieresissmall",
                            "OEsmall",
                            "Oslashsmall",
                            "Ugravesmall",
                            "Uacutesmall",
                            "Ucircumflexsmall",
                            "Udieresissmall",
                            "Yacutesmall",
                            "Thornsmall",
                            "Ydieresissmall"
                        ], de = [
                            ".notdef",
                            ".null",
                            "nonmarkingreturn",
                            "space",
                            "exclam",
                            "quotedbl",
                            "numbersign",
                            "dollar",
                            "percent",
                            "ampersand",
                            "quotesingle",
                            "parenleft",
                            "parenright",
                            "asterisk",
                            "plus",
                            "comma",
                            "hyphen",
                            "period",
                            "slash",
                            "zero",
                            "one",
                            "two",
                            "three",
                            "four",
                            "five",
                            "six",
                            "seven",
                            "eight",
                            "nine",
                            "colon",
                            "semicolon",
                            "less",
                            "equal",
                            "greater",
                            "question",
                            "at",
                            "A",
                            "B",
                            "C",
                            "D",
                            "E",
                            "F",
                            "G",
                            "H",
                            "I",
                            "J",
                            "K",
                            "L",
                            "M",
                            "N",
                            "O",
                            "P",
                            "Q",
                            "R",
                            "S",
                            "T",
                            "U",
                            "V",
                            "W",
                            "X",
                            "Y",
                            "Z",
                            "bracketleft",
                            "backslash",
                            "bracketright",
                            "asciicircum",
                            "underscore",
                            "grave",
                            "a",
                            "b",
                            "c",
                            "d",
                            "e",
                            "f",
                            "g",
                            "h",
                            "i",
                            "j",
                            "k",
                            "l",
                            "m",
                            "n",
                            "o",
                            "p",
                            "q",
                            "r",
                            "s",
                            "t",
                            "u",
                            "v",
                            "w",
                            "x",
                            "y",
                            "z",
                            "braceleft",
                            "bar",
                            "braceright",
                            "asciitilde",
                            "Adieresis",
                            "Aring",
                            "Ccedilla",
                            "Eacute",
                            "Ntilde",
                            "Odieresis",
                            "Udieresis",
                            "aacute",
                            "agrave",
                            "acircumflex",
                            "adieresis",
                            "atilde",
                            "aring",
                            "ccedilla",
                            "eacute",
                            "egrave",
                            "ecircumflex",
                            "edieresis",
                            "iacute",
                            "igrave",
                            "icircumflex",
                            "idieresis",
                            "ntilde",
                            "oacute",
                            "ograve",
                            "ocircumflex",
                            "odieresis",
                            "otilde",
                            "uacute",
                            "ugrave",
                            "ucircumflex",
                            "udieresis",
                            "dagger",
                            "degree",
                            "cent",
                            "sterling",
                            "section",
                            "bullet",
                            "paragraph",
                            "germandbls",
                            "registered",
                            "copyright",
                            "trademark",
                            "acute",
                            "dieresis",
                            "notequal",
                            "AE",
                            "Oslash",
                            "infinity",
                            "plusminus",
                            "lessequal",
                            "greaterequal",
                            "yen",
                            "mu",
                            "partialdiff",
                            "summation",
                            "product",
                            "pi",
                            "integral",
                            "ordfeminine",
                            "ordmasculine",
                            "Omega",
                            "ae",
                            "oslash",
                            "questiondown",
                            "exclamdown",
                            "logicalnot",
                            "radical",
                            "florin",
                            "approxequal",
                            "Delta",
                            "guillemotleft",
                            "guillemotright",
                            "ellipsis",
                            "nonbreakingspace",
                            "Agrave",
                            "Atilde",
                            "Otilde",
                            "OE",
                            "oe",
                            "endash",
                            "emdash",
                            "quotedblleft",
                            "quotedblright",
                            "quoteleft",
                            "quoteright",
                            "divide",
                            "lozenge",
                            "ydieresis",
                            "Ydieresis",
                            "fraction",
                            "currency",
                            "guilsinglleft",
                            "guilsinglright",
                            "fi",
                            "fl",
                            "daggerdbl",
                            "periodcentered",
                            "quotesinglbase",
                            "quotedblbase",
                            "perthousand",
                            "Acircumflex",
                            "Ecircumflex",
                            "Aacute",
                            "Edieresis",
                            "Egrave",
                            "Iacute",
                            "Icircumflex",
                            "Idieresis",
                            "Igrave",
                            "Oacute",
                            "Ocircumflex",
                            "apple",
                            "Ograve",
                            "Uacute",
                            "Ucircumflex",
                            "Ugrave",
                            "dotlessi",
                            "circumflex",
                            "tilde",
                            "macron",
                            "breve",
                            "dotaccent",
                            "ring",
                            "cedilla",
                            "hungarumlaut",
                            "ogonek",
                            "caron",
                            "Lslash",
                            "lslash",
                            "Scaron",
                            "scaron",
                            "Zcaron",
                            "zcaron",
                            "brokenbar",
                            "Eth",
                            "eth",
                            "Yacute",
                            "yacute",
                            "Thorn",
                            "thorn",
                            "minus",
                            "multiply",
                            "onesuperior",
                            "twosuperior",
                            "threesuperior",
                            "onehalf",
                            "onequarter",
                            "threequarters",
                            "franc",
                            "Gbreve",
                            "gbreve",
                            "Idotaccent",
                            "Scedilla",
                            "scedilla",
                            "Cacute",
                            "cacute",
                            "Ccaron",
                            "ccaron",
                            "dcroat"
                        ];
                        function fe(e) {
                            this.font = e;
                        }
                        function he(e) {
                            this.cmap = e;
                        }
                        function pe(e, t) {
                            this.encoding = e, this.charset = t;
                        }
                        function ye(e) {
                            switch(e.version){
                                case 1:
                                    this.names = de.slice();
                                    break;
                                case 2:
                                    this.names = new Array(e.numberOfGlyphs);
                                    for(var t = 0; t < e.numberOfGlyphs; t++)e.glyphNameIndex[t] < de.length ? this.names[t] = de[e.glyphNameIndex[t]] : this.names[t] = e.names[e.glyphNameIndex[t] - de.length];
                                    break;
                                case 2.5:
                                    this.names = new Array(e.numberOfGlyphs);
                                    for(var r = 0; r < e.numberOfGlyphs; r++)this.names[r] = de[r + e.glyphNameIndex[r]];
                                    break;
                                case 3:
                                default:
                                    this.names = [];
                            }
                        }
                        fe.prototype.charToGlyphIndex = function(e) {
                            var t = e.codePointAt(0), r = this.font.glyphs;
                            if (r) {
                                for(var n = 0; n < r.length; n += 1)for(var o = r.get(n), i = 0; i < o.unicodes.length; i += 1)if (o.unicodes[i] === t) return n;
                            }
                            return null;
                        }, he.prototype.charToGlyphIndex = function(e) {
                            return this.cmap.glyphIndexMap[e.codePointAt(0)] || 0;
                        }, pe.prototype.charToGlyphIndex = function(e) {
                            var t = e.codePointAt(0), r = this.encoding[t];
                            return this.charset.indexOf(r);
                        }, ye.prototype.nameToGlyphIndex = function(e) {
                            return this.names.indexOf(e);
                        }, ye.prototype.glyphIndexToName = function(e) {
                            return this.names[e];
                        };
                        var me = {
                            line: function(e, t, r, n, o) {
                                e.beginPath(), e.moveTo(t, r), e.lineTo(n, o), e.stroke();
                            }
                        };
                        function ge(e) {
                            this.bindConstructorValues(e);
                        }
                        function ve(t, e273, r) {
                            Object.defineProperty(t, e273, {
                                get: function() {
                                    return t.path, t[r];
                                },
                                set: function(e) {
                                    t[r] = e;
                                },
                                enumerable: !0,
                                configurable: !0
                            });
                        }
                        function be(e, t) {
                            if (this.font = e, this.glyphs = {
                            }, Array.isArray(t)) for(var r = 0; r < t.length; r++)this.glyphs[r] = t[r];
                            this.length = t && t.length || 0;
                        }
                        ge.prototype.bindConstructorValues = function(e274) {
                            var t, r;
                            this.index = e274.index || 0, this.name = e274.name || null, this.unicode = e274.unicode || void 0, this.unicodes = e274.unicodes || void 0 !== e274.unicode ? [
                                e274.unicode
                            ] : [], e274.xMin && (this.xMin = e274.xMin), e274.yMin && (this.yMin = e274.yMin), e274.xMax && (this.xMax = e274.xMax), e274.yMax && (this.yMax = e274.yMax), e274.advanceWidth && (this.advanceWidth = e274.advanceWidth), Object.defineProperty(this, "path", (t = e274.path, r = t || new D1, {
                                configurable: !0,
                                get: function() {
                                    return "function" == typeof r && (r = r()), r;
                                },
                                set: function(e) {
                                    r = e;
                                }
                            }));
                        }, ge.prototype.addUnicode = function(e) {
                            0 === this.unicodes.length && (this.unicode = e), this.unicodes.push(e);
                        }, ge.prototype.getBoundingBox = function() {
                            return this.path.getBoundingBox();
                        }, ge.prototype.getPath = function(e, t, r, n, o) {
                            var i, a;
                            e = void 0 !== e ? e : 0, t = void 0 !== t ? t : 0, r = void 0 !== r ? r : 72;
                            var s = (n = n || {
                            }).xScale, l = n.yScale;
                            if (n.hinting && o && o.hinting && (a = this.path && o.hinting.exec(this, r)), a) i = o.hinting.getCommands(a), e = Math.round(e), t = Math.round(t), s = l = 1;
                            else {
                                i = this.path.commands;
                                var u = 1 / this.path.unitsPerEm * r;
                                void 0 === s && (s = u), void 0 === l && (l = u);
                            }
                            for(var c = new D1, d = 0; d < i.length; d += 1){
                                var f = i[d];
                                "M" === f.type ? c.moveTo(e + f.x * s, t + -f.y * l) : "L" === f.type ? c.lineTo(e + f.x * s, t + -f.y * l) : "Q" === f.type ? c.quadraticCurveTo(e + f.x1 * s, t + -f.y1 * l, e + f.x * s, t + -f.y * l) : "C" === f.type ? c.curveTo(e + f.x1 * s, t + -f.y1 * l, e + f.x2 * s, t + -f.y2 * l, e + f.x * s, t + -f.y * l) : "Z" === f.type && c.closePath();
                            }
                            return c;
                        }, ge.prototype.getContours = function() {
                            if (void 0 === this.points) return [];
                            for(var e = [], t = [], r = 0; r < this.points.length; r += 1){
                                var n = this.points[r];
                                t.push(n), n.lastPointOfContour && (e.push(t), t = []);
                            }
                            return L1.argument(0 === t.length, "There are still points left in the current contour."), e;
                        }, ge.prototype.getMetrics = function() {
                            for(var e = this.path.commands, t = [], r = [], n = 0; n < e.length; n += 1){
                                var o = e[n];
                                "Z" !== o.type && (t.push(o.x), r.push(o.y)), "Q" !== o.type && "C" !== o.type || (t.push(o.x1), r.push(o.y1)), "C" === o.type && (t.push(o.x2), r.push(o.y2));
                            }
                            var i = {
                                xMin: Math.min.apply(null, t),
                                yMin: Math.min.apply(null, r),
                                xMax: Math.max.apply(null, t),
                                yMax: Math.max.apply(null, r),
                                leftSideBearing: this.leftSideBearing
                            };
                            return isFinite(i.xMin) || (i.xMin = 0), isFinite(i.xMax) || (i.xMax = this.advanceWidth), isFinite(i.yMin) || (i.yMin = 0), isFinite(i.yMax) || (i.yMax = 0), i.rightSideBearing = this.advanceWidth - i.leftSideBearing - (i.xMax - i.xMin), i;
                        }, ge.prototype.draw = function(e, t, r, n, o) {
                            this.getPath(t, r, n, o).draw(e);
                        }, ge.prototype.drawPoints = function(a, e275, t179, r136) {
                            function n73(e, t, r, n) {
                                var o = 2 * Math.PI;
                                a.beginPath();
                                for(var i = 0; i < e.length; i += 1)a.moveTo(t + e[i].x * n, r + e[i].y * n), a.arc(t + e[i].x * n, r + e[i].y * n, 2, 0, o, !1);
                                a.closePath(), a.fill();
                            }
                            e275 = void 0 !== e275 ? e275 : 0, t179 = void 0 !== t179 ? t179 : 0, r136 = void 0 !== r136 ? r136 : 24;
                            for(var o48 = 1 / this.path.unitsPerEm * r136, i32 = [], s = [], l = this.path, u = 0; u < l.commands.length; u += 1){
                                var c = l.commands[u];
                                void 0 !== c.x && i32.push({
                                    x: c.x,
                                    y: -c.y
                                }), void 0 !== c.x1 && s.push({
                                    x: c.x1,
                                    y: -c.y1
                                }), void 0 !== c.x2 && s.push({
                                    x: c.x2,
                                    y: -c.y2
                                });
                            }
                            a.fillStyle = "blue", n73(i32, e275, t179, o48), a.fillStyle = "red", n73(s, e275, t179, o48);
                        }, ge.prototype.drawMetrics = function(e, t, r, n) {
                            var o;
                            t = void 0 !== t ? t : 0, r = void 0 !== r ? r : 0, n = void 0 !== n ? n : 24, o = 1 / this.path.unitsPerEm * n, e.lineWidth = 1, e.strokeStyle = "black", me.line(e, t, -10000, t, 10000), me.line(e, -10000, r, 10000, r);
                            var i = this.xMin || 0, a = this.yMin || 0, s = this.xMax || 0, l = this.yMax || 0, u = this.advanceWidth || 0;
                            e.strokeStyle = "blue", me.line(e, t + i * o, -10000, t + i * o, 10000), me.line(e, t + s * o, -10000, t + s * o, 10000), me.line(e, -10000, r + -a * o, 10000, r + -a * o), me.line(e, -10000, r + -l * o, 10000, r + -l * o), e.strokeStyle = "green", me.line(e, t + u * o, -10000, t + u * o, 10000);
                        }, be.prototype.get = function(e) {
                            return "function" == typeof this.glyphs[e] && (this.glyphs[e] = this.glyphs[e]()), this.glyphs[e];
                        }, be.prototype.push = function(e, t) {
                            this.glyphs[e] = t, this.length++;
                        };
                        var _e = {
                            GlyphSet: be,
                            glyphLoader: function(e, t) {
                                return new ge({
                                    index: t,
                                    font: e
                                });
                            },
                            ttfGlyphLoader: function(r, e276, n, o, i, a) {
                                return function() {
                                    var t = new ge({
                                        index: e276,
                                        font: r
                                    });
                                    return t.path = function() {
                                        n(t, o, i);
                                        var e = a(r.glyphs, t);
                                        return e.unitsPerEm = r.unitsPerEm, e;
                                    }, ve(t, "xMin", "_xMin"), ve(t, "xMax", "_xMax"), ve(t, "yMin", "_yMin"), ve(t, "yMax", "_yMax"), t;
                                };
                            },
                            cffGlyphLoader: function(r, e277, n, o) {
                                return function() {
                                    var t = new ge({
                                        index: e277,
                                        font: r
                                    });
                                    return t.path = function() {
                                        var e = n(r, t, o);
                                        return e.unitsPerEm = r.unitsPerEm, e;
                                    }, t;
                                };
                            }
                        };
                        function xe(e, t) {
                            if (e === t) return !0;
                            if (Array.isArray(e) && Array.isArray(t)) {
                                if (e.length !== t.length) return !1;
                                for(var r = 0; r < e.length; r += 1)if (!xe(e[r], t[r])) return !1;
                                return !0;
                            }
                            return !1;
                        }
                        function we(e) {
                            return e.length < 1240 ? 107 : e.length < 33900 ? 1131 : 32768;
                        }
                        function Se(e, t, r) {
                            var n, o, i = [], a = [], s = ae.getCard16(e, t);
                            if (0 !== s) {
                                var l = ae.getByte(e, t + 2);
                                n = t + (s + 1) * l + 2;
                                for(var u = t + 3, c = 0; c < s + 1; c += 1)i.push(ae.getOffset(e, u, l)), u += l;
                                o = n + i[s];
                            } else o = t + 2;
                            for(var d = 0; d < i.length - 1; d += 1){
                                var f = ae.getBytes(e, n + i[d], n + i[d + 1]);
                                r && (f = r(f)), a.push(f);
                            }
                            return {
                                objects: a,
                                startOffset: t,
                                endOffset: o
                            };
                        }
                        function je(e278, t180) {
                            if (28 === t180) return e278.parseByte() << 8 | e278.parseByte();
                            if (29 === t180) return e278.parseByte() << 24 | e278.parseByte() << 16 | e278.parseByte() << 8 | e278.parseByte();
                            if (30 === t180) return (function(e) {
                                for(var t = "", r = [
                                    "0",
                                    "1",
                                    "2",
                                    "3",
                                    "4",
                                    "5",
                                    "6",
                                    "7",
                                    "8",
                                    "9",
                                    ".",
                                    "E",
                                    "E-",
                                    null,
                                    "-"
                                ];;){
                                    var n = e.parseByte(), o = n >> 4, i = 15 & n;
                                    if (15 == o) break;
                                    if (t += r[o], 15 == i) break;
                                    t += r[i];
                                }
                                return parseFloat(t);
                            })(e278);
                            if (32 <= t180 && t180 <= 246) return t180 - 139;
                            if (247 <= t180 && t180 <= 250) return 256 * (t180 - 247) + e278.parseByte() + 108;
                            if (251 <= t180 && t180 <= 254) return 256 * -(t180 - 251) - e278.parseByte() - 108;
                            throw new Error("Invalid b0 " + t180);
                        }
                        function Me(e279, t181, r137) {
                            t181 = void 0 !== t181 ? t181 : 0;
                            var n74 = new ae.Parser(e279, t181), o49 = [], i33 = [];
                            for(r137 = void 0 !== r137 ? r137 : e279.length; n74.relativeOffset < r137;){
                                var a = n74.parseByte();
                                a <= 21 ? (12 === a && (a = 1200 + n74.parseByte()), o49.push([
                                    a,
                                    i33
                                ]), i33 = []) : i33.push(je(n74, a));
                            }
                            return (function(e) {
                                for(var t = {
                                }, r = 0; r < e.length; r += 1){
                                    var n = e[r][0], o = e[r][1], i = void 0;
                                    if (i = 1 === o.length ? o[0] : o, t.hasOwnProperty(n) && !isNaN(t[n])) throw new Error("Object " + t + " already has key " + n);
                                    t[n] = i;
                                }
                                return t;
                            })(o49);
                        }
                        function Ee(e, t) {
                            return t = t <= 390 ? le[t] : e[t - 391];
                        }
                        function Te(e, t, r) {
                            for(var n, o = {
                            }, i = 0; i < t.length; i += 1){
                                var a = t[i];
                                if (Array.isArray(a.type)) {
                                    var s = [];
                                    s.length = a.type.length;
                                    for(var l = 0; l < a.type.length; l++)void 0 === (n = void 0 !== e[a.op] ? e[a.op][l] : void 0) && (n = void 0 !== a.value && void 0 !== a.value[l] ? a.value[l] : null), "SID" === a.type[l] && (n = Ee(r, n)), s[l] = n;
                                    o[a.name] = s;
                                } else void 0 === (n = e[a.op]) && (n = void 0 !== a.value ? a.value : null), "SID" === a.type && (n = Ee(r, n)), o[a.name] = n;
                            }
                            return o;
                        }
                        var Oe = [
                            {
                                name: "version",
                                op: 0,
                                type: "SID"
                            },
                            {
                                name: "notice",
                                op: 1,
                                type: "SID"
                            },
                            {
                                name: "copyright",
                                op: 1200,
                                type: "SID"
                            },
                            {
                                name: "fullName",
                                op: 2,
                                type: "SID"
                            },
                            {
                                name: "familyName",
                                op: 3,
                                type: "SID"
                            },
                            {
                                name: "weight",
                                op: 4,
                                type: "SID"
                            },
                            {
                                name: "isFixedPitch",
                                op: 1201,
                                type: "number",
                                value: 0
                            },
                            {
                                name: "italicAngle",
                                op: 1202,
                                type: "number",
                                value: 0
                            },
                            {
                                name: "underlinePosition",
                                op: 1203,
                                type: "number",
                                value: -100
                            },
                            {
                                name: "underlineThickness",
                                op: 1204,
                                type: "number",
                                value: 50
                            },
                            {
                                name: "paintType",
                                op: 1205,
                                type: "number",
                                value: 0
                            },
                            {
                                name: "charstringType",
                                op: 1206,
                                type: "number",
                                value: 2
                            },
                            {
                                name: "fontMatrix",
                                op: 1207,
                                type: [
                                    "real",
                                    "real",
                                    "real",
                                    "real",
                                    "real",
                                    "real"
                                ],
                                value: [
                                    0.001,
                                    0,
                                    0,
                                    0.001,
                                    0,
                                    0
                                ]
                            },
                            {
                                name: "uniqueId",
                                op: 13,
                                type: "number"
                            },
                            {
                                name: "fontBBox",
                                op: 5,
                                type: [
                                    "number",
                                    "number",
                                    "number",
                                    "number"
                                ],
                                value: [
                                    0,
                                    0,
                                    0,
                                    0
                                ]
                            },
                            {
                                name: "strokeWidth",
                                op: 1208,
                                type: "number",
                                value: 0
                            },
                            {
                                name: "xuid",
                                op: 14,
                                type: [],
                                value: null
                            },
                            {
                                name: "charset",
                                op: 15,
                                type: "offset",
                                value: 0
                            },
                            {
                                name: "encoding",
                                op: 16,
                                type: "offset",
                                value: 0
                            },
                            {
                                name: "charStrings",
                                op: 17,
                                type: "offset",
                                value: 0
                            },
                            {
                                name: "private",
                                op: 18,
                                type: [
                                    "number",
                                    "offset"
                                ],
                                value: [
                                    0,
                                    0
                                ]
                            },
                            {
                                name: "ros",
                                op: 1230,
                                type: [
                                    "SID",
                                    "SID",
                                    "number"
                                ]
                            },
                            {
                                name: "cidFontVersion",
                                op: 1231,
                                type: "number",
                                value: 0
                            },
                            {
                                name: "cidFontRevision",
                                op: 1232,
                                type: "number",
                                value: 0
                            },
                            {
                                name: "cidFontType",
                                op: 1233,
                                type: "number",
                                value: 0
                            },
                            {
                                name: "cidCount",
                                op: 1234,
                                type: "number",
                                value: 8720
                            },
                            {
                                name: "uidBase",
                                op: 1235,
                                type: "number"
                            },
                            {
                                name: "fdArray",
                                op: 1236,
                                type: "offset"
                            },
                            {
                                name: "fdSelect",
                                op: 1237,
                                type: "offset"
                            },
                            {
                                name: "fontName",
                                op: 1238,
                                type: "SID"
                            }
                        ], Ce = [
                            {
                                name: "subrs",
                                op: 19,
                                type: "offset",
                                value: 0
                            },
                            {
                                name: "defaultWidthX",
                                op: 20,
                                type: "number",
                                value: 0
                            },
                            {
                                name: "nominalWidthX",
                                op: 21,
                                type: "number",
                                value: 0
                            }
                        ];
                        function Le(e, t, r, n) {
                            return Te(Me(e, t, r), Ce, n);
                        }
                        function Pe(e, t, r, n) {
                            for(var o, i, a = [], s = 0; s < r.length; s += 1){
                                var l = new DataView(new Uint8Array(r[s]).buffer), u = (i = n, Te(Me(o = l, 0, o.byteLength), Oe, i));
                                u._subrs = [], u._subrsBias = 0;
                                var c = u.private[0], d = u.private[1];
                                if (0 !== c && 0 !== d) {
                                    var f = Le(e, d + t, c, n);
                                    if (u._defaultWidthX = f.defaultWidthX, u._nominalWidthX = f.nominalWidthX, 0 !== f.subrs) {
                                        var h = Se(e, d + f.subrs + t);
                                        u._subrs = h.objects, u._subrsBias = we(u._subrs);
                                    }
                                    u._privateDict = f;
                                }
                                a.push(u);
                            }
                            return a;
                        }
                        function ke(m, g, e280) {
                            var v, b, _, x, w, S, t182, j, M = new D1, E = [], T = 0, O = !1, C = !1, L = 0, P = 0;
                            if (m.isCIDFont) {
                                var r = m.tables.cff.topDict._fdSelect[g.index], n = m.tables.cff.topDict._fdArray[r];
                                w = n._subrs, S = n._subrsBias, t182 = n._defaultWidthX, j = n._nominalWidthX;
                            } else w = m.tables.cff.topDict._subrs, S = m.tables.cff.topDict._subrsBias, t182 = m.tables.cff.topDict._defaultWidthX, j = m.tables.cff.topDict._nominalWidthX;
                            var k = t182;
                            function A(e, t) {
                                C && M.closePath(), M.moveTo(e, t), C = !0;
                            }
                            function R() {
                                E.length % 2 == 0 || O || (k = E.shift() + j), T += E.length >> 1, E.length = 0, O = !0;
                            }
                            return (function e(t) {
                                for(var r, n, o, i, a, s, l, u, c, d, f, h, p = 0; p < t.length;){
                                    var y = t[p];
                                    switch(p += 1, y){
                                        case 1:
                                        case 3:
                                            R();
                                            break;
                                        case 4:
                                            1 < E.length && !O && (k = E.shift() + j, O = !0), P += E.pop(), A(L, P);
                                            break;
                                        case 5:
                                            for(; 0 < E.length;)L += E.shift(), P += E.shift(), M.lineTo(L, P);
                                            break;
                                        case 6:
                                            for(; 0 < E.length && (L += E.shift(), M.lineTo(L, P), 0 !== E.length);)P += E.shift(), M.lineTo(L, P);
                                            break;
                                        case 7:
                                            for(; 0 < E.length && (P += E.shift(), M.lineTo(L, P), 0 !== E.length);)L += E.shift(), M.lineTo(L, P);
                                            break;
                                        case 8:
                                            for(; 0 < E.length;)v = L + E.shift(), b = P + E.shift(), _ = v + E.shift(), x = b + E.shift(), L = _ + E.shift(), P = x + E.shift(), M.curveTo(v, b, _, x, L, P);
                                            break;
                                        case 10:
                                            a = E.pop() + S, (s = w[a]) && e(s);
                                            break;
                                        case 11:
                                            return;
                                        case 12:
                                            switch(y = t[p], p += 1, y){
                                                case 35:
                                                    v = L + E.shift(), b = P + E.shift(), _ = v + E.shift(), x = b + E.shift(), l = _ + E.shift(), u = x + E.shift(), c = l + E.shift(), d = u + E.shift(), f = c + E.shift(), h = d + E.shift(), L = f + E.shift(), P = h + E.shift(), E.shift(), M.curveTo(v, b, _, x, l, u), M.curveTo(c, d, f, h, L, P);
                                                    break;
                                                case 34:
                                                    v = L + E.shift(), b = P, _ = v + E.shift(), x = b + E.shift(), l = _ + E.shift(), u = x, c = l + E.shift(), d = x, f = c + E.shift(), h = P, L = f + E.shift(), M.curveTo(v, b, _, x, l, u), M.curveTo(c, d, f, h, L, P);
                                                    break;
                                                case 36:
                                                    v = L + E.shift(), b = P + E.shift(), _ = v + E.shift(), x = b + E.shift(), l = _ + E.shift(), u = x, c = l + E.shift(), d = x, f = c + E.shift(), h = d + E.shift(), L = f + E.shift(), M.curveTo(v, b, _, x, l, u), M.curveTo(c, d, f, h, L, P);
                                                    break;
                                                case 37:
                                                    v = L + E.shift(), b = P + E.shift(), _ = v + E.shift(), x = b + E.shift(), l = _ + E.shift(), u = x + E.shift(), c = l + E.shift(), d = u + E.shift(), f = c + E.shift(), h = d + E.shift(), Math.abs(f - L) > Math.abs(h - P) ? L = f + E.shift() : P = h + E.shift(), M.curveTo(v, b, _, x, l, u), M.curveTo(c, d, f, h, L, P);
                                                    break;
                                                default:
                                                    console.log("Glyph " + g.index + ": unknown operator 1200" + y), E.length = 0;
                                            }
                                            break;
                                        case 14:
                                            0 < E.length && !O && (k = E.shift() + j, O = !0), C && (M.closePath(), C = !1);
                                            break;
                                        case 18:
                                            R();
                                            break;
                                        case 19:
                                        case 20:
                                            R(), p += T + 7 >> 3;
                                            break;
                                        case 21:
                                            2 < E.length && !O && (k = E.shift() + j, O = !0), P += E.pop(), A(L += E.pop(), P);
                                            break;
                                        case 22:
                                            1 < E.length && !O && (k = E.shift() + j, O = !0), A(L += E.pop(), P);
                                            break;
                                        case 23:
                                            R();
                                            break;
                                        case 24:
                                            for(; 2 < E.length;)v = L + E.shift(), b = P + E.shift(), _ = v + E.shift(), x = b + E.shift(), L = _ + E.shift(), P = x + E.shift(), M.curveTo(v, b, _, x, L, P);
                                            L += E.shift(), P += E.shift(), M.lineTo(L, P);
                                            break;
                                        case 25:
                                            for(; 6 < E.length;)L += E.shift(), P += E.shift(), M.lineTo(L, P);
                                            v = L + E.shift(), b = P + E.shift(), _ = v + E.shift(), x = b + E.shift(), L = _ + E.shift(), P = x + E.shift(), M.curveTo(v, b, _, x, L, P);
                                            break;
                                        case 26:
                                            for(E.length % 2 && (L += E.shift()); 0 < E.length;)v = L, b = P + E.shift(), _ = v + E.shift(), x = b + E.shift(), L = _, P = x + E.shift(), M.curveTo(v, b, _, x, L, P);
                                            break;
                                        case 27:
                                            for(E.length % 2 && (P += E.shift()); 0 < E.length;)v = L + E.shift(), b = P, _ = v + E.shift(), x = b + E.shift(), L = _ + E.shift(), P = x, M.curveTo(v, b, _, x, L, P);
                                            break;
                                        case 28:
                                            r = t[p], n = t[p + 1], E.push((r << 24 | n << 16) >> 16), p += 2;
                                            break;
                                        case 29:
                                            a = E.pop() + m.gsubrsBias, (s = m.gsubrs[a]) && e(s);
                                            break;
                                        case 30:
                                            for(; 0 < E.length && (v = L, b = P + E.shift(), _ = v + E.shift(), x = b + E.shift(), L = _ + E.shift(), P = x + (1 === E.length ? E.shift() : 0), M.curveTo(v, b, _, x, L, P), 0 !== E.length);)v = L + E.shift(), b = P, _ = v + E.shift(), x = b + E.shift(), P = x + E.shift(), L = _ + (1 === E.length ? E.shift() : 0), M.curveTo(v, b, _, x, L, P);
                                            break;
                                        case 31:
                                            for(; 0 < E.length && (v = L + E.shift(), b = P, _ = v + E.shift(), x = b + E.shift(), P = x + E.shift(), L = _ + (1 === E.length ? E.shift() : 0), M.curveTo(v, b, _, x, L, P), 0 !== E.length);)v = L, b = P + E.shift(), _ = v + E.shift(), x = b + E.shift(), L = _ + E.shift(), P = x + (1 === E.length ? E.shift() : 0), M.curveTo(v, b, _, x, L, P);
                                            break;
                                        default:
                                            y < 32 ? console.log("Glyph " + g.index + ": unknown operator " + y) : y < 247 ? E.push(y - 139) : y < 251 ? (r = t[p], p += 1, E.push(256 * (y - 247) + r + 108)) : y < 255 ? (r = t[p], p += 1, E.push(256 * -(y - 251) - r - 108)) : (r = t[p], n = t[p + 1], o = t[p + 2], i = t[p + 3], p += 4, E.push((r << 24 | n << 16 | o << 8 | i) / 65536));
                                    }
                                }
                            })(e280), g.advanceWidth = k, M;
                        }
                        function Ae(e, t) {
                            var r, n = le.indexOf(e);
                            return 0 <= n && (r = n), 0 <= (n = t.indexOf(e)) ? r = n + le.length : (r = le.length + t.length, t.push(e)), r;
                        }
                        function Re(e, t, r) {
                            for(var n = {
                            }, o = 0; o < e.length; o += 1){
                                var i = e[o], a = t[i.name];
                                void 0 === a || xe(a, i.value) || ("SID" === i.type && (a = Ae(a, r)), n[i.op] = {
                                    name: i.name,
                                    type: i.type,
                                    value: a
                                });
                            }
                            return n;
                        }
                        function De(e, t) {
                            var r = new J.Record("Top DICT", [
                                {
                                    name: "dict",
                                    type: "DICT",
                                    value: {
                                    }
                                }
                            ]);
                            return r.dict = Re(Oe, e, t), r;
                        }
                        function Ie(e) {
                            var t = new J.Record("Top DICT INDEX", [
                                {
                                    name: "topDicts",
                                    type: "INDEX",
                                    value: []
                                }
                            ]);
                            return t.topDicts = [
                                {
                                    name: "topDict_0",
                                    type: "TABLE",
                                    value: e
                                }
                            ], t;
                        }
                        function Ue(e) {
                            var t = [], r = e.path;
                            t.push({
                                name: "width",
                                type: "NUMBER",
                                value: e.advanceWidth
                            });
                            for(var n = 0, o = 0, i = 0; i < r.commands.length; i += 1){
                                var a = void 0, s = void 0, l = r.commands[i];
                                if ("Q" === l.type) l = {
                                    type: "C",
                                    x: l.x,
                                    y: l.y,
                                    x1: 1 / 3 * n + 2 / 3 * l.x1,
                                    y1: 1 / 3 * o + 2 / 3 * l.y1,
                                    x2: 1 / 3 * l.x + 2 / 3 * l.x1,
                                    y2: 1 / 3 * l.y + 2 / 3 * l.y1
                                };
                                if ("M" === l.type) a = Math.round(l.x - n), s = Math.round(l.y - o), t.push({
                                    name: "dx",
                                    type: "NUMBER",
                                    value: a
                                }), t.push({
                                    name: "dy",
                                    type: "NUMBER",
                                    value: s
                                }), t.push({
                                    name: "rmoveto",
                                    type: "OP",
                                    value: 21
                                }), n = Math.round(l.x), o = Math.round(l.y);
                                else if ("L" === l.type) a = Math.round(l.x - n), s = Math.round(l.y - o), t.push({
                                    name: "dx",
                                    type: "NUMBER",
                                    value: a
                                }), t.push({
                                    name: "dy",
                                    type: "NUMBER",
                                    value: s
                                }), t.push({
                                    name: "rlineto",
                                    type: "OP",
                                    value: 5
                                }), n = Math.round(l.x), o = Math.round(l.y);
                                else if ("C" === l.type) {
                                    var u = Math.round(l.x1 - n), c = Math.round(l.y1 - o), d = Math.round(l.x2 - l.x1), f = Math.round(l.y2 - l.y1);
                                    a = Math.round(l.x - l.x2), s = Math.round(l.y - l.y2), t.push({
                                        name: "dx1",
                                        type: "NUMBER",
                                        value: u
                                    }), t.push({
                                        name: "dy1",
                                        type: "NUMBER",
                                        value: c
                                    }), t.push({
                                        name: "dx2",
                                        type: "NUMBER",
                                        value: d
                                    }), t.push({
                                        name: "dy2",
                                        type: "NUMBER",
                                        value: f
                                    }), t.push({
                                        name: "dx",
                                        type: "NUMBER",
                                        value: a
                                    }), t.push({
                                        name: "dy",
                                        type: "NUMBER",
                                        value: s
                                    }), t.push({
                                        name: "rrcurveto",
                                        type: "OP",
                                        value: 8
                                    }), n = Math.round(l.x), o = Math.round(l.y);
                                }
                            }
                            return t.push({
                                name: "endchar",
                                type: "OP",
                                value: 14
                            }), t;
                        }
                        var Ne = {
                            parse: function(e281, t183, r138) {
                                r138.tables.cff = {
                                };
                                var n75, o50, i34, a24 = Se(e281, (n75 = e281, o50 = t183, (i34 = {
                                }).formatMajor = ae.getCard8(n75, o50), i34.formatMinor = ae.getCard8(n75, o50 + 1), i34.size = ae.getCard8(n75, o50 + 2), i34.offsetSize = ae.getCard8(n75, o50 + 3), i34.startOffset = o50, i34.endOffset = o50 + 4, i34).endOffset, ae.bytesToString), s21 = Se(e281, a24.endOffset), l16 = Se(e281, s21.endOffset, ae.bytesToString), u11 = Se(e281, l16.endOffset);
                                r138.gsubrs = u11.objects, r138.gsubrsBias = we(r138.gsubrs);
                                var c11 = Pe(e281, t183, s21.objects, l16.objects);
                                if (1 !== c11.length) throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = " + c11.length);
                                var d12 = c11[0];
                                if ((r138.tables.cff.topDict = d12)._privateDict && (r138.defaultWidthX = d12._privateDict.defaultWidthX, r138.nominalWidthX = d12._privateDict.nominalWidthX), void 0 !== d12.ros[0] && void 0 !== d12.ros[1] && (r138.isCIDFont = !0), r138.isCIDFont) {
                                    var f11 = d12.fdArray, h = d12.fdSelect;
                                    if (0 === f11 || 0 === h) throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");
                                    var p = Pe(e281, t183, Se(e281, f11 += t183).objects, l16.objects);
                                    d12._fdArray = p, h += t183, d12._fdSelect = (function(e, t, r, n) {
                                        var o, i = [], a = new ae.Parser(e, t), s = a.parseCard8();
                                        if (0 === s) for(var l = 0; l < r; l++){
                                            if (n <= (o = a.parseCard8())) throw new Error("CFF table CID Font FDSelect has bad FD index value " + o + " (FD count " + n + ")");
                                            i.push(o);
                                        }
                                        else {
                                            if (3 !== s) throw new Error("CFF Table CID Font FDSelect table has unsupported format " + s);
                                            var u, c = a.parseCard16(), d = a.parseCard16();
                                            if (0 !== d) throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID " + d);
                                            for(var f = 0; f < c; f++){
                                                if (o = a.parseCard8(), u = a.parseCard16(), n <= o) throw new Error("CFF table CID Font FDSelect has bad FD index value " + o + " (FD count " + n + ")");
                                                if (r < u) throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID " + u);
                                                for(; d < u; d++)i.push(o);
                                                d = u;
                                            }
                                            if (u !== r) throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID " + u);
                                        }
                                        return i;
                                    })(e281, h, r138.numGlyphs, p.length);
                                }
                                var y = t183 + d12.private[1], m = Le(e281, y, d12.private[0], l16.objects);
                                if (r138.defaultWidthX = m.defaultWidthX, r138.nominalWidthX = m.nominalWidthX, 0 !== m.subrs) {
                                    var g = Se(e281, y + m.subrs);
                                    r138.subrs = g.objects, r138.subrsBias = we(r138.subrs);
                                } else r138.subrs = [], r138.subrsBias = 0;
                                var v = Se(e281, t183 + d12.charStrings);
                                r138.nGlyphs = v.objects.length;
                                var b = function(e, t, r, n) {
                                    var o, i, a = new ae.Parser(e, t);
                                    --r;
                                    var s = [
                                        ".notdef"
                                    ], l = a.parseCard8();
                                    if (0 === l) for(var u = 0; u < r; u += 1)o = a.parseSID(), s.push(Ee(n, o));
                                    else if (1 === l) for(; s.length <= r;){
                                        o = a.parseSID(), i = a.parseCard8();
                                        for(var c = 0; c <= i; c += 1)s.push(Ee(n, o)), o += 1;
                                    }
                                    else {
                                        if (2 !== l) throw new Error("Unknown charset format " + l);
                                        for(; s.length <= r;){
                                            o = a.parseSID(), i = a.parseCard16();
                                            for(var d = 0; d <= i; d += 1)s.push(Ee(n, o)), o += 1;
                                        }
                                    }
                                    return s;
                                }(e281, t183 + d12.charset, r138.nGlyphs, l16.objects);
                                0 === d12.encoding ? r138.cffEncoding = new pe(ue, b) : 1 === d12.encoding ? r138.cffEncoding = new pe(ce, b) : r138.cffEncoding = (function(e, t, r) {
                                    var n, o = {
                                    }, i = new ae.Parser(e, t), a = i.parseCard8();
                                    if (0 === a) for(var s = i.parseCard8(), l = 0; l < s; l += 1)o[n = i.parseCard8()] = l;
                                    else {
                                        if (1 !== a) throw new Error("Unknown encoding format " + a);
                                        var u = i.parseCard8();
                                        n = 1;
                                        for(var c = 0; c < u; c += 1)for(var d = i.parseCard8(), f = i.parseCard8(), h = d; h <= d + f; h += 1)o[h] = n, n += 1;
                                    }
                                    return new pe(o, r);
                                })(e281, t183 + d12.encoding, b), r138.encoding = r138.encoding || r138.cffEncoding, r138.glyphs = new _e.GlyphSet(r138);
                                for(var _ = 0; _ < r138.nGlyphs; _ += 1){
                                    var x = v.objects[_];
                                    r138.glyphs.push(_, _e.cffGlyphLoader(r138, _, ke, x));
                                }
                            },
                            make: function(e282, t184) {
                                for(var r139, n76 = new J.Table("CFF ", [
                                    {
                                        name: "header",
                                        type: "RECORD"
                                    },
                                    {
                                        name: "nameIndex",
                                        type: "RECORD"
                                    },
                                    {
                                        name: "topDictIndex",
                                        type: "RECORD"
                                    },
                                    {
                                        name: "stringIndex",
                                        type: "RECORD"
                                    },
                                    {
                                        name: "globalSubrIndex",
                                        type: "RECORD"
                                    },
                                    {
                                        name: "charsets",
                                        type: "RECORD"
                                    },
                                    {
                                        name: "charStringsIndex",
                                        type: "RECORD"
                                    },
                                    {
                                        name: "privateDict",
                                        type: "RECORD"
                                    }
                                ]), o51 = 1 / t184.unitsPerEm, i = {
                                    version: t184.version,
                                    fullName: t184.fullName,
                                    familyName: t184.familyName,
                                    weight: t184.weightName,
                                    fontBBox: t184.fontBBox || [
                                        0,
                                        0,
                                        0,
                                        0
                                    ],
                                    fontMatrix: [
                                        o51,
                                        0,
                                        0,
                                        o51,
                                        0,
                                        0
                                    ],
                                    charset: 999,
                                    encoding: 0,
                                    charStrings: 999,
                                    private: [
                                        0,
                                        999
                                    ]
                                }, a = [], s = 1; s < e282.length; s += 1)r139 = e282.get(s), a.push(r139.name);
                                var l = [];
                                n76.header = new J.Record("Header", [
                                    {
                                        name: "major",
                                        type: "Card8",
                                        value: 1
                                    },
                                    {
                                        name: "minor",
                                        type: "Card8",
                                        value: 0
                                    },
                                    {
                                        name: "hdrSize",
                                        type: "Card8",
                                        value: 4
                                    },
                                    {
                                        name: "major",
                                        type: "Card8",
                                        value: 1
                                    }
                                ]), n76.nameIndex = (function(e) {
                                    var t = new J.Record("Name INDEX", [
                                        {
                                            name: "names",
                                            type: "INDEX",
                                            value: []
                                        }
                                    ]);
                                    t.names = [];
                                    for(var r = 0; r < e.length; r += 1)t.names.push({
                                        name: "name_" + r,
                                        type: "NAME",
                                        value: e[r]
                                    });
                                    return t;
                                })([
                                    t184.postScriptName
                                ]);
                                var u, c, d, f = De(i, l);
                                n76.topDictIndex = Ie(f), n76.globalSubrIndex = new J.Record("Global Subr INDEX", [
                                    {
                                        name: "subrs",
                                        type: "INDEX",
                                        value: []
                                    }
                                ]), n76.charsets = (function(e, t) {
                                    for(var r = new J.Record("Charsets", [
                                        {
                                            name: "format",
                                            type: "Card8",
                                            value: 0
                                        }
                                    ]), n = 0; n < e.length; n += 1){
                                        var o = Ae(e[n], t);
                                        r.fields.push({
                                            name: "glyph_" + n,
                                            type: "SID",
                                            value: o
                                        });
                                    }
                                    return r;
                                })(a, l), n76.charStringsIndex = (function(e) {
                                    for(var t = new J.Record("CharStrings INDEX", [
                                        {
                                            name: "charStrings",
                                            type: "INDEX",
                                            value: []
                                        }
                                    ]), r = 0; r < e.length; r += 1){
                                        var n = e.get(r), o = Ue(n);
                                        t.charStrings.push({
                                            name: n.name,
                                            type: "CHARSTRING",
                                            value: o
                                        });
                                    }
                                    return t;
                                })(e282), n76.privateDict = (u = {
                                }, c = l, (d = new J.Record("Private DICT", [
                                    {
                                        name: "dict",
                                        type: "DICT",
                                        value: {
                                        }
                                    }
                                ])).dict = Re(Ce, u, c), d), n76.stringIndex = (function(e) {
                                    var t = new J.Record("String INDEX", [
                                        {
                                            name: "strings",
                                            type: "INDEX",
                                            value: []
                                        }
                                    ]);
                                    t.strings = [];
                                    for(var r = 0; r < e.length; r += 1)t.strings.push({
                                        name: "string_" + r,
                                        type: "STRING",
                                        value: e[r]
                                    });
                                    return t;
                                })(l);
                                var h = n76.header.sizeOf() + n76.nameIndex.sizeOf() + n76.topDictIndex.sizeOf() + n76.stringIndex.sizeOf() + n76.globalSubrIndex.sizeOf();
                                return i.charset = h, i.encoding = 0, i.charStrings = i.charset + n76.charsets.sizeOf(), i.private[1] = i.charStrings + n76.charStringsIndex.sizeOf(), f = De(i, l), n76.topDictIndex = Ie(f), n76;
                            }
                        };
                        var Fe = {
                            parse: function(e, t) {
                                var r = {
                                }, n = new ae.Parser(e, t);
                                return r.version = n.parseVersion(), r.fontRevision = Math.round(1000 * n.parseFixed()) / 1000, r.checkSumAdjustment = n.parseULong(), r.magicNumber = n.parseULong(), L1.argument(1594834165 === r.magicNumber, "Font header has wrong magic number."), r.flags = n.parseUShort(), r.unitsPerEm = n.parseUShort(), r.created = n.parseLongDateTime(), r.modified = n.parseLongDateTime(), r.xMin = n.parseShort(), r.yMin = n.parseShort(), r.xMax = n.parseShort(), r.yMax = n.parseShort(), r.macStyle = n.parseUShort(), r.lowestRecPPEM = n.parseUShort(), r.fontDirectionHint = n.parseShort(), r.indexToLocFormat = n.parseShort(), r.glyphDataFormat = n.parseShort(), r;
                            },
                            make: function(e) {
                                var t = Math.round((new Date).getTime() / 1000) + 2082844800, r = t;
                                return e.createdTimestamp && (r = e.createdTimestamp + 2082844800), new J.Table("head", [
                                    {
                                        name: "version",
                                        type: "FIXED",
                                        value: 65536
                                    },
                                    {
                                        name: "fontRevision",
                                        type: "FIXED",
                                        value: 65536
                                    },
                                    {
                                        name: "checkSumAdjustment",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "magicNumber",
                                        type: "ULONG",
                                        value: 1594834165
                                    },
                                    {
                                        name: "flags",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "unitsPerEm",
                                        type: "USHORT",
                                        value: 1000
                                    },
                                    {
                                        name: "created",
                                        type: "LONGDATETIME",
                                        value: r
                                    },
                                    {
                                        name: "modified",
                                        type: "LONGDATETIME",
                                        value: t
                                    },
                                    {
                                        name: "xMin",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "yMin",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "xMax",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "yMax",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "macStyle",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "lowestRecPPEM",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "fontDirectionHint",
                                        type: "SHORT",
                                        value: 2
                                    },
                                    {
                                        name: "indexToLocFormat",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "glyphDataFormat",
                                        type: "SHORT",
                                        value: 0
                                    }
                                ], e);
                            }
                        };
                        var Be = {
                            parse: function(e, t) {
                                var r = {
                                }, n = new ae.Parser(e, t);
                                return r.version = n.parseVersion(), r.ascender = n.parseShort(), r.descender = n.parseShort(), r.lineGap = n.parseShort(), r.advanceWidthMax = n.parseUShort(), r.minLeftSideBearing = n.parseShort(), r.minRightSideBearing = n.parseShort(), r.xMaxExtent = n.parseShort(), r.caretSlopeRise = n.parseShort(), r.caretSlopeRun = n.parseShort(), r.caretOffset = n.parseShort(), n.relativeOffset += 8, r.metricDataFormat = n.parseShort(), r.numberOfHMetrics = n.parseUShort(), r;
                            },
                            make: function(e) {
                                return new J.Table("hhea", [
                                    {
                                        name: "version",
                                        type: "FIXED",
                                        value: 65536
                                    },
                                    {
                                        name: "ascender",
                                        type: "FWORD",
                                        value: 0
                                    },
                                    {
                                        name: "descender",
                                        type: "FWORD",
                                        value: 0
                                    },
                                    {
                                        name: "lineGap",
                                        type: "FWORD",
                                        value: 0
                                    },
                                    {
                                        name: "advanceWidthMax",
                                        type: "UFWORD",
                                        value: 0
                                    },
                                    {
                                        name: "minLeftSideBearing",
                                        type: "FWORD",
                                        value: 0
                                    },
                                    {
                                        name: "minRightSideBearing",
                                        type: "FWORD",
                                        value: 0
                                    },
                                    {
                                        name: "xMaxExtent",
                                        type: "FWORD",
                                        value: 0
                                    },
                                    {
                                        name: "caretSlopeRise",
                                        type: "SHORT",
                                        value: 1
                                    },
                                    {
                                        name: "caretSlopeRun",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "caretOffset",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "reserved1",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "reserved2",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "reserved3",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "reserved4",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "metricDataFormat",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "numberOfHMetrics",
                                        type: "USHORT",
                                        value: 0
                                    }
                                ], e);
                            }
                        };
                        var Ge = {
                            parse: function(e, t, r, n, o) {
                                for(var i, a, s = new ae.Parser(e, t), l = 0; l < n; l += 1){
                                    l < r && (i = s.parseUShort(), a = s.parseShort());
                                    var u = o.get(l);
                                    u.advanceWidth = i, u.leftSideBearing = a;
                                }
                            },
                            make: function(e) {
                                for(var t = new J.Table("hmtx", []), r = 0; r < e.length; r += 1){
                                    var n = e.get(r), o = n.advanceWidth || 0, i = n.leftSideBearing || 0;
                                    t.fields.push({
                                        name: "advanceWidth_" + r,
                                        type: "USHORT",
                                        value: o
                                    }), t.fields.push({
                                        name: "leftSideBearing_" + r,
                                        type: "SHORT",
                                        value: i
                                    });
                                }
                                return t;
                            }
                        };
                        var Ve = {
                            make: function(e) {
                                for(var t = new J.Table("ltag", [
                                    {
                                        name: "version",
                                        type: "ULONG",
                                        value: 1
                                    },
                                    {
                                        name: "flags",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "numTags",
                                        type: "ULONG",
                                        value: e.length
                                    }
                                ]), r = "", n = 12 + 4 * e.length, o = 0; o < e.length; ++o){
                                    var i = r.indexOf(e[o]);
                                    i < 0 && (i = r.length, r += e[o]), t.fields.push({
                                        name: "offset " + o,
                                        type: "USHORT",
                                        value: n + i
                                    }), t.fields.push({
                                        name: "length " + o,
                                        type: "USHORT",
                                        value: e[o].length
                                    });
                                }
                                return t.fields.push({
                                    name: "stringPool",
                                    type: "CHARARRAY",
                                    value: r
                                }), t;
                            },
                            parse: function(e, t) {
                                var r = new ae.Parser(e, t), n = r.parseULong();
                                L1.argument(1 === n, "Unsupported ltag table version."), r.skip("uLong", 1);
                                for(var o = r.parseULong(), i = [], a = 0; a < o; a++){
                                    for(var s = "", l = t + r.parseUShort(), u = r.parseUShort(), c = l; c < l + u; ++c)s += String.fromCharCode(e.getInt8(c));
                                    i.push(s);
                                }
                                return i;
                            }
                        };
                        var ze = {
                            parse: function(e, t) {
                                var r = {
                                }, n = new ae.Parser(e, t);
                                return r.version = n.parseVersion(), r.numGlyphs = n.parseUShort(), 1 === r.version && (r.maxPoints = n.parseUShort(), r.maxContours = n.parseUShort(), r.maxCompositePoints = n.parseUShort(), r.maxCompositeContours = n.parseUShort(), r.maxZones = n.parseUShort(), r.maxTwilightPoints = n.parseUShort(), r.maxStorage = n.parseUShort(), r.maxFunctionDefs = n.parseUShort(), r.maxInstructionDefs = n.parseUShort(), r.maxStackElements = n.parseUShort(), r.maxSizeOfInstructions = n.parseUShort(), r.maxComponentElements = n.parseUShort(), r.maxComponentDepth = n.parseUShort()), r;
                            },
                            make: function(e) {
                                return new J.Table("maxp", [
                                    {
                                        name: "version",
                                        type: "FIXED",
                                        value: 20480
                                    },
                                    {
                                        name: "numGlyphs",
                                        type: "USHORT",
                                        value: e
                                    }
                                ]);
                            }
                        }, He = [
                            "copyright",
                            "fontFamily",
                            "fontSubfamily",
                            "uniqueID",
                            "fullName",
                            "version",
                            "postScriptName",
                            "trademark",
                            "manufacturer",
                            "designer",
                            "description",
                            "manufacturerURL",
                            "designerURL",
                            "license",
                            "licenseURL",
                            "reserved",
                            "preferredFamily",
                            "preferredSubfamily",
                            "compatibleFullName",
                            "sampleText",
                            "postScriptFindFontName",
                            "wwsFamily",
                            "wwsSubfamily"
                        ], qe = {
                            0: "en",
                            1: "fr",
                            2: "de",
                            3: "it",
                            4: "nl",
                            5: "sv",
                            6: "es",
                            7: "da",
                            8: "pt",
                            9: "no",
                            10: "he",
                            11: "ja",
                            12: "ar",
                            13: "fi",
                            14: "el",
                            15: "is",
                            16: "mt",
                            17: "tr",
                            18: "hr",
                            19: "zh-Hant",
                            20: "ur",
                            21: "hi",
                            22: "th",
                            23: "ko",
                            24: "lt",
                            25: "pl",
                            26: "hu",
                            27: "es",
                            28: "lv",
                            29: "se",
                            30: "fo",
                            31: "fa",
                            32: "ru",
                            33: "zh",
                            34: "nl-BE",
                            35: "ga",
                            36: "sq",
                            37: "ro",
                            38: "cz",
                            39: "sk",
                            40: "si",
                            41: "yi",
                            42: "sr",
                            43: "mk",
                            44: "bg",
                            45: "uk",
                            46: "be",
                            47: "uz",
                            48: "kk",
                            49: "az-Cyrl",
                            50: "az-Arab",
                            51: "hy",
                            52: "ka",
                            53: "mo",
                            54: "ky",
                            55: "tg",
                            56: "tk",
                            57: "mn-CN",
                            58: "mn",
                            59: "ps",
                            60: "ks",
                            61: "ku",
                            62: "sd",
                            63: "bo",
                            64: "ne",
                            65: "sa",
                            66: "mr",
                            67: "bn",
                            68: "as",
                            69: "gu",
                            70: "pa",
                            71: "or",
                            72: "ml",
                            73: "kn",
                            74: "ta",
                            75: "te",
                            76: "si",
                            77: "my",
                            78: "km",
                            79: "lo",
                            80: "vi",
                            81: "id",
                            82: "tl",
                            83: "ms",
                            84: "ms-Arab",
                            85: "am",
                            86: "ti",
                            87: "om",
                            88: "so",
                            89: "sw",
                            90: "rw",
                            91: "rn",
                            92: "ny",
                            93: "mg",
                            94: "eo",
                            128: "cy",
                            129: "eu",
                            130: "ca",
                            131: "la",
                            132: "qu",
                            133: "gn",
                            134: "ay",
                            135: "tt",
                            136: "ug",
                            137: "dz",
                            138: "jv",
                            139: "su",
                            140: "gl",
                            141: "af",
                            142: "br",
                            143: "iu",
                            144: "gd",
                            145: "gv",
                            146: "ga",
                            147: "to",
                            148: "el-polyton",
                            149: "kl",
                            150: "az",
                            151: "nn"
                        }, We = {
                            0: 0,
                            1: 0,
                            2: 0,
                            3: 0,
                            4: 0,
                            5: 0,
                            6: 0,
                            7: 0,
                            8: 0,
                            9: 0,
                            10: 5,
                            11: 1,
                            12: 4,
                            13: 0,
                            14: 6,
                            15: 0,
                            16: 0,
                            17: 0,
                            18: 0,
                            19: 2,
                            20: 4,
                            21: 9,
                            22: 21,
                            23: 3,
                            24: 29,
                            25: 29,
                            26: 29,
                            27: 29,
                            28: 29,
                            29: 0,
                            30: 0,
                            31: 4,
                            32: 7,
                            33: 25,
                            34: 0,
                            35: 0,
                            36: 0,
                            37: 0,
                            38: 29,
                            39: 29,
                            40: 0,
                            41: 5,
                            42: 7,
                            43: 7,
                            44: 7,
                            45: 7,
                            46: 7,
                            47: 7,
                            48: 7,
                            49: 7,
                            50: 4,
                            51: 24,
                            52: 23,
                            53: 7,
                            54: 7,
                            55: 7,
                            56: 7,
                            57: 27,
                            58: 7,
                            59: 4,
                            60: 4,
                            61: 4,
                            62: 4,
                            63: 26,
                            64: 9,
                            65: 9,
                            66: 9,
                            67: 13,
                            68: 13,
                            69: 11,
                            70: 10,
                            71: 12,
                            72: 17,
                            73: 16,
                            74: 14,
                            75: 15,
                            76: 18,
                            77: 19,
                            78: 20,
                            79: 22,
                            80: 30,
                            81: 0,
                            82: 0,
                            83: 0,
                            84: 4,
                            85: 28,
                            86: 28,
                            87: 28,
                            88: 0,
                            89: 0,
                            90: 0,
                            91: 0,
                            92: 0,
                            93: 0,
                            94: 0,
                            128: 0,
                            129: 0,
                            130: 0,
                            131: 0,
                            132: 0,
                            133: 0,
                            134: 0,
                            135: 7,
                            136: 4,
                            137: 26,
                            138: 0,
                            139: 0,
                            140: 0,
                            141: 0,
                            142: 0,
                            143: 28,
                            144: 0,
                            145: 0,
                            146: 0,
                            147: 0,
                            148: 6,
                            149: 0,
                            150: 0,
                            151: 0
                        }, Xe = {
                            1078: "af",
                            1052: "sq",
                            1156: "gsw",
                            1118: "am",
                            5121: "ar-DZ",
                            15361: "ar-BH",
                            3073: "ar",
                            2049: "ar-IQ",
                            11265: "ar-JO",
                            13313: "ar-KW",
                            12289: "ar-LB",
                            4097: "ar-LY",
                            6145: "ary",
                            8193: "ar-OM",
                            16385: "ar-QA",
                            1025: "ar-SA",
                            10241: "ar-SY",
                            7169: "aeb",
                            14337: "ar-AE",
                            9217: "ar-YE",
                            1067: "hy",
                            1101: "as",
                            2092: "az-Cyrl",
                            1068: "az",
                            1133: "ba",
                            1069: "eu",
                            1059: "be",
                            2117: "bn",
                            1093: "bn-IN",
                            8218: "bs-Cyrl",
                            5146: "bs",
                            1150: "br",
                            1026: "bg",
                            1027: "ca",
                            3076: "zh-HK",
                            5124: "zh-MO",
                            2052: "zh",
                            4100: "zh-SG",
                            1028: "zh-TW",
                            1155: "co",
                            1050: "hr",
                            4122: "hr-BA",
                            1029: "cs",
                            1030: "da",
                            1164: "prs",
                            1125: "dv",
                            2067: "nl-BE",
                            1043: "nl",
                            3081: "en-AU",
                            10249: "en-BZ",
                            4105: "en-CA",
                            9225: "en-029",
                            16393: "en-IN",
                            6153: "en-IE",
                            8201: "en-JM",
                            17417: "en-MY",
                            5129: "en-NZ",
                            13321: "en-PH",
                            18441: "en-SG",
                            7177: "en-ZA",
                            11273: "en-TT",
                            2057: "en-GB",
                            1033: "en",
                            12297: "en-ZW",
                            1061: "et",
                            1080: "fo",
                            1124: "fil",
                            1035: "fi",
                            2060: "fr-BE",
                            3084: "fr-CA",
                            1036: "fr",
                            5132: "fr-LU",
                            6156: "fr-MC",
                            4108: "fr-CH",
                            1122: "fy",
                            1110: "gl",
                            1079: "ka",
                            3079: "de-AT",
                            1031: "de",
                            5127: "de-LI",
                            4103: "de-LU",
                            2055: "de-CH",
                            1032: "el",
                            1135: "kl",
                            1095: "gu",
                            1128: "ha",
                            1037: "he",
                            1081: "hi",
                            1038: "hu",
                            1039: "is",
                            1136: "ig",
                            1057: "id",
                            1117: "iu",
                            2141: "iu-Latn",
                            2108: "ga",
                            1076: "xh",
                            1077: "zu",
                            1040: "it",
                            2064: "it-CH",
                            1041: "ja",
                            1099: "kn",
                            1087: "kk",
                            1107: "km",
                            1158: "quc",
                            1159: "rw",
                            1089: "sw",
                            1111: "kok",
                            1042: "ko",
                            1088: "ky",
                            1108: "lo",
                            1062: "lv",
                            1063: "lt",
                            2094: "dsb",
                            1134: "lb",
                            1071: "mk",
                            2110: "ms-BN",
                            1086: "ms",
                            1100: "ml",
                            1082: "mt",
                            1153: "mi",
                            1146: "arn",
                            1102: "mr",
                            1148: "moh",
                            1104: "mn",
                            2128: "mn-CN",
                            1121: "ne",
                            1044: "nb",
                            2068: "nn",
                            1154: "oc",
                            1096: "or",
                            1123: "ps",
                            1045: "pl",
                            1046: "pt",
                            2070: "pt-PT",
                            1094: "pa",
                            1131: "qu-BO",
                            2155: "qu-EC",
                            3179: "qu",
                            1048: "ro",
                            1047: "rm",
                            1049: "ru",
                            9275: "smn",
                            4155: "smj-NO",
                            5179: "smj",
                            3131: "se-FI",
                            1083: "se",
                            2107: "se-SE",
                            8251: "sms",
                            6203: "sma-NO",
                            7227: "sms",
                            1103: "sa",
                            7194: "sr-Cyrl-BA",
                            3098: "sr",
                            6170: "sr-Latn-BA",
                            2074: "sr-Latn",
                            1132: "nso",
                            1074: "tn",
                            1115: "si",
                            1051: "sk",
                            1060: "sl",
                            11274: "es-AR",
                            16394: "es-BO",
                            13322: "es-CL",
                            9226: "es-CO",
                            5130: "es-CR",
                            7178: "es-DO",
                            12298: "es-EC",
                            17418: "es-SV",
                            4106: "es-GT",
                            18442: "es-HN",
                            2058: "es-MX",
                            19466: "es-NI",
                            6154: "es-PA",
                            15370: "es-PY",
                            10250: "es-PE",
                            20490: "es-PR",
                            3082: "es",
                            1034: "es",
                            21514: "es-US",
                            14346: "es-UY",
                            8202: "es-VE",
                            2077: "sv-FI",
                            1053: "sv",
                            1114: "syr",
                            1064: "tg",
                            2143: "tzm",
                            1097: "ta",
                            1092: "tt",
                            1098: "te",
                            1054: "th",
                            1105: "bo",
                            1055: "tr",
                            1090: "tk",
                            1152: "ug",
                            1058: "uk",
                            1070: "hsb",
                            1056: "ur",
                            2115: "uz-Cyrl",
                            1091: "uz",
                            1066: "vi",
                            1106: "cy",
                            1160: "wo",
                            1157: "sah",
                            1144: "ii",
                            1130: "yo"
                        };
                        function Ye(e, t, r) {
                            switch(e){
                                case 0:
                                    if (65535 === t) return "und";
                                    if (r) return r[t];
                                    break;
                                case 1:
                                    return qe[t];
                                case 3:
                                    return Xe[t];
                            }
                        }
                        var Ze = "utf-16", Qe = {
                            0: "macintosh",
                            1: "x-mac-japanese",
                            2: "x-mac-chinesetrad",
                            3: "x-mac-korean",
                            6: "x-mac-greek",
                            7: "x-mac-cyrillic",
                            9: "x-mac-devanagai",
                            10: "x-mac-gurmukhi",
                            11: "x-mac-gujarati",
                            12: "x-mac-oriya",
                            13: "x-mac-bengali",
                            14: "x-mac-tamil",
                            15: "x-mac-telugu",
                            16: "x-mac-kannada",
                            17: "x-mac-malayalam",
                            18: "x-mac-sinhalese",
                            19: "x-mac-burmese",
                            20: "x-mac-khmer",
                            21: "x-mac-thai",
                            22: "x-mac-lao",
                            23: "x-mac-georgian",
                            24: "x-mac-armenian",
                            25: "x-mac-chinesesimp",
                            26: "x-mac-tibetan",
                            27: "x-mac-mongolian",
                            28: "x-mac-ethiopic",
                            29: "x-mac-ce",
                            30: "x-mac-vietnamese",
                            31: "x-mac-extarabic"
                        }, Ke = {
                            15: "x-mac-icelandic",
                            17: "x-mac-turkish",
                            18: "x-mac-croatian",
                            24: "x-mac-ce",
                            25: "x-mac-ce",
                            26: "x-mac-ce",
                            27: "x-mac-ce",
                            28: "x-mac-ce",
                            30: "x-mac-icelandic",
                            37: "x-mac-romanian",
                            38: "x-mac-ce",
                            39: "x-mac-ce",
                            40: "x-mac-ce",
                            143: "x-mac-inuit",
                            146: "x-mac-gaelic"
                        };
                        function Je(e, t, r) {
                            switch(e){
                                case 0:
                                    return Ze;
                                case 1:
                                    return Ke[r] || Qe[t];
                                case 3:
                                    if (1 === t || 10 === t) return Ze;
                            }
                        }
                        function $e(e) {
                            var t = {
                            };
                            for(var r in e)t[e[r]] = parseInt(r);
                            return t;
                        }
                        function et(e, t, r, n, o, i) {
                            return new J.Record("NameRecord", [
                                {
                                    name: "platformID",
                                    type: "USHORT",
                                    value: e
                                },
                                {
                                    name: "encodingID",
                                    type: "USHORT",
                                    value: t
                                },
                                {
                                    name: "languageID",
                                    type: "USHORT",
                                    value: r
                                },
                                {
                                    name: "nameID",
                                    type: "USHORT",
                                    value: n
                                },
                                {
                                    name: "length",
                                    type: "USHORT",
                                    value: o
                                },
                                {
                                    name: "offset",
                                    type: "USHORT",
                                    value: i
                                }
                            ]);
                        }
                        function tt(e283, t185) {
                            var r140 = function(e, t) {
                                var r = e.length, n = t.length - r + 1;
                                e: for(var o = 0; o < n; o++)for(; o < n; o++){
                                    for(var i = 0; i < r; i++)if (t[o + i] !== e[i]) continue e;
                                    return o;
                                }
                                return -1;
                            }(e283, t185);
                            if (r140 < 0) {
                                r140 = t185.length;
                                for(var n77 = 0, o52 = e283.length; n77 < o52; ++n77)t185.push(e283[n77]);
                            }
                            return r140;
                        }
                        var rt = {
                            parse: function(e, t, r) {
                                for(var n = {
                                }, o = new ae.Parser(e, t), i = o.parseUShort(), a = o.parseUShort(), s = o.offset + o.parseUShort(), l = 0; l < a; l++){
                                    var u = o.parseUShort(), c = o.parseUShort(), d = o.parseUShort(), f = o.parseUShort(), h = He[f] || f, p = o.parseUShort(), y = o.parseUShort(), m = Ye(u, d, r), g = Je(u, c, d);
                                    if (void 0 !== g && void 0 !== m) {
                                        var v = void 0;
                                        if (v = g === Ze ? P1.UTF16(e, s + y, p) : P1.MACSTRING(e, s + y, p, g)) {
                                            var b = n[h];
                                            void 0 === b && (b = n[h] = {
                                            }), b[m] = v;
                                        }
                                    }
                                }
                                return 1 === i && o.parseUShort(), n;
                            },
                            make: function(e284, t186) {
                                var r, n = [], o = {
                                }, i = $e(He);
                                for(var a in e284){
                                    var s = i[a];
                                    if (void 0 === s && (s = a), r = parseInt(s), isNaN(r)) throw new Error('Name table entry "' + a + '" does not exist, see nameTableNames for complete list.');
                                    o[r] = e284[a], n.push(r);
                                }
                                for(var l = $e(qe), u = $e(Xe), c = [], d = [], f = 0; f < n.length; f++){
                                    var h = o[r = n[f]];
                                    for(var p in h){
                                        var y = h[p], m = 1, g = l[p], v = We[g], b = Je(m, v, g), _ = k1.MACSTRING(y, b);
                                        void 0 === _ && (m = 0, (g = t186.indexOf(p)) < 0 && (g = t186.length, t186.push(p)), v = 4, _ = k1.UTF16(y));
                                        var x = tt(_, d);
                                        c.push(et(m, v, g, r, _.length, x));
                                        var w = u[p];
                                        if (void 0 !== w) {
                                            var S = k1.UTF16(y), j = tt(S, d);
                                            c.push(et(3, 1, w, r, S.length, j));
                                        }
                                    }
                                }
                                c.sort(function(e, t) {
                                    return e.platformID - t.platformID || e.encodingID - t.encodingID || e.languageID - t.languageID || e.nameID - t.nameID;
                                });
                                for(var M = new J.Table("name", [
                                    {
                                        name: "format",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "count",
                                        type: "USHORT",
                                        value: c.length
                                    },
                                    {
                                        name: "stringOffset",
                                        type: "USHORT",
                                        value: 6 + 12 * c.length
                                    }
                                ]), E = 0; E < c.length; E++)M.fields.push({
                                    name: "record_" + E,
                                    type: "RECORD",
                                    value: c[E]
                                });
                                return M.fields.push({
                                    name: "strings",
                                    type: "LITERAL",
                                    value: d
                                }), M;
                            }
                        }, nt = [
                            {
                                begin: 0,
                                end: 127
                            },
                            {
                                begin: 128,
                                end: 255
                            },
                            {
                                begin: 256,
                                end: 383
                            },
                            {
                                begin: 384,
                                end: 591
                            },
                            {
                                begin: 592,
                                end: 687
                            },
                            {
                                begin: 688,
                                end: 767
                            },
                            {
                                begin: 768,
                                end: 879
                            },
                            {
                                begin: 880,
                                end: 1023
                            },
                            {
                                begin: 11392,
                                end: 11519
                            },
                            {
                                begin: 1024,
                                end: 1279
                            },
                            {
                                begin: 1328,
                                end: 1423
                            },
                            {
                                begin: 1424,
                                end: 1535
                            },
                            {
                                begin: 42240,
                                end: 42559
                            },
                            {
                                begin: 1536,
                                end: 1791
                            },
                            {
                                begin: 1984,
                                end: 2047
                            },
                            {
                                begin: 2304,
                                end: 2431
                            },
                            {
                                begin: 2432,
                                end: 2559
                            },
                            {
                                begin: 2560,
                                end: 2687
                            },
                            {
                                begin: 2688,
                                end: 2815
                            },
                            {
                                begin: 2816,
                                end: 2943
                            },
                            {
                                begin: 2944,
                                end: 3071
                            },
                            {
                                begin: 3072,
                                end: 3199
                            },
                            {
                                begin: 3200,
                                end: 3327
                            },
                            {
                                begin: 3328,
                                end: 3455
                            },
                            {
                                begin: 3584,
                                end: 3711
                            },
                            {
                                begin: 3712,
                                end: 3839
                            },
                            {
                                begin: 4256,
                                end: 4351
                            },
                            {
                                begin: 6912,
                                end: 7039
                            },
                            {
                                begin: 4352,
                                end: 4607
                            },
                            {
                                begin: 7680,
                                end: 7935
                            },
                            {
                                begin: 7936,
                                end: 8191
                            },
                            {
                                begin: 8192,
                                end: 8303
                            },
                            {
                                begin: 8304,
                                end: 8351
                            },
                            {
                                begin: 8352,
                                end: 8399
                            },
                            {
                                begin: 8400,
                                end: 8447
                            },
                            {
                                begin: 8448,
                                end: 8527
                            },
                            {
                                begin: 8528,
                                end: 8591
                            },
                            {
                                begin: 8592,
                                end: 8703
                            },
                            {
                                begin: 8704,
                                end: 8959
                            },
                            {
                                begin: 8960,
                                end: 9215
                            },
                            {
                                begin: 9216,
                                end: 9279
                            },
                            {
                                begin: 9280,
                                end: 9311
                            },
                            {
                                begin: 9312,
                                end: 9471
                            },
                            {
                                begin: 9472,
                                end: 9599
                            },
                            {
                                begin: 9600,
                                end: 9631
                            },
                            {
                                begin: 9632,
                                end: 9727
                            },
                            {
                                begin: 9728,
                                end: 9983
                            },
                            {
                                begin: 9984,
                                end: 10175
                            },
                            {
                                begin: 12288,
                                end: 12351
                            },
                            {
                                begin: 12352,
                                end: 12447
                            },
                            {
                                begin: 12448,
                                end: 12543
                            },
                            {
                                begin: 12544,
                                end: 12591
                            },
                            {
                                begin: 12592,
                                end: 12687
                            },
                            {
                                begin: 43072,
                                end: 43135
                            },
                            {
                                begin: 12800,
                                end: 13055
                            },
                            {
                                begin: 13056,
                                end: 13311
                            },
                            {
                                begin: 44032,
                                end: 55215
                            },
                            {
                                begin: 55296,
                                end: 57343
                            },
                            {
                                begin: 67840,
                                end: 67871
                            },
                            {
                                begin: 19968,
                                end: 40959
                            },
                            {
                                begin: 57344,
                                end: 63743
                            },
                            {
                                begin: 12736,
                                end: 12783
                            },
                            {
                                begin: 64256,
                                end: 64335
                            },
                            {
                                begin: 64336,
                                end: 65023
                            },
                            {
                                begin: 65056,
                                end: 65071
                            },
                            {
                                begin: 65040,
                                end: 65055
                            },
                            {
                                begin: 65104,
                                end: 65135
                            },
                            {
                                begin: 65136,
                                end: 65279
                            },
                            {
                                begin: 65280,
                                end: 65519
                            },
                            {
                                begin: 65520,
                                end: 65535
                            },
                            {
                                begin: 3840,
                                end: 4095
                            },
                            {
                                begin: 1792,
                                end: 1871
                            },
                            {
                                begin: 1920,
                                end: 1983
                            },
                            {
                                begin: 3456,
                                end: 3583
                            },
                            {
                                begin: 4096,
                                end: 4255
                            },
                            {
                                begin: 4608,
                                end: 4991
                            },
                            {
                                begin: 5024,
                                end: 5119
                            },
                            {
                                begin: 5120,
                                end: 5759
                            },
                            {
                                begin: 5760,
                                end: 5791
                            },
                            {
                                begin: 5792,
                                end: 5887
                            },
                            {
                                begin: 6016,
                                end: 6143
                            },
                            {
                                begin: 6144,
                                end: 6319
                            },
                            {
                                begin: 10240,
                                end: 10495
                            },
                            {
                                begin: 40960,
                                end: 42127
                            },
                            {
                                begin: 5888,
                                end: 5919
                            },
                            {
                                begin: 66304,
                                end: 66351
                            },
                            {
                                begin: 66352,
                                end: 66383
                            },
                            {
                                begin: 66560,
                                end: 66639
                            },
                            {
                                begin: 118784,
                                end: 119039
                            },
                            {
                                begin: 119808,
                                end: 120831
                            },
                            {
                                begin: 1044480,
                                end: 1048573
                            },
                            {
                                begin: 65024,
                                end: 65039
                            },
                            {
                                begin: 917504,
                                end: 917631
                            },
                            {
                                begin: 6400,
                                end: 6479
                            },
                            {
                                begin: 6480,
                                end: 6527
                            },
                            {
                                begin: 6528,
                                end: 6623
                            },
                            {
                                begin: 6656,
                                end: 6687
                            },
                            {
                                begin: 11264,
                                end: 11359
                            },
                            {
                                begin: 11568,
                                end: 11647
                            },
                            {
                                begin: 19904,
                                end: 19967
                            },
                            {
                                begin: 43008,
                                end: 43055
                            },
                            {
                                begin: 65536,
                                end: 65663
                            },
                            {
                                begin: 65856,
                                end: 65935
                            },
                            {
                                begin: 66432,
                                end: 66463
                            },
                            {
                                begin: 66464,
                                end: 66527
                            },
                            {
                                begin: 66640,
                                end: 66687
                            },
                            {
                                begin: 66688,
                                end: 66735
                            },
                            {
                                begin: 67584,
                                end: 67647
                            },
                            {
                                begin: 68096,
                                end: 68191
                            },
                            {
                                begin: 119552,
                                end: 119647
                            },
                            {
                                begin: 73728,
                                end: 74751
                            },
                            {
                                begin: 119648,
                                end: 119679
                            },
                            {
                                begin: 7040,
                                end: 7103
                            },
                            {
                                begin: 7168,
                                end: 7247
                            },
                            {
                                begin: 7248,
                                end: 7295
                            },
                            {
                                begin: 43136,
                                end: 43231
                            },
                            {
                                begin: 43264,
                                end: 43311
                            },
                            {
                                begin: 43312,
                                end: 43359
                            },
                            {
                                begin: 43520,
                                end: 43615
                            },
                            {
                                begin: 65936,
                                end: 65999
                            },
                            {
                                begin: 66000,
                                end: 66047
                            },
                            {
                                begin: 66208,
                                end: 66271
                            },
                            {
                                begin: 127024,
                                end: 127135
                            }
                        ];
                        var ot = {
                            parse: function(e, t) {
                                var r = {
                                }, n = new ae.Parser(e, t);
                                r.version = n.parseUShort(), r.xAvgCharWidth = n.parseShort(), r.usWeightClass = n.parseUShort(), r.usWidthClass = n.parseUShort(), r.fsType = n.parseUShort(), r.ySubscriptXSize = n.parseShort(), r.ySubscriptYSize = n.parseShort(), r.ySubscriptXOffset = n.parseShort(), r.ySubscriptYOffset = n.parseShort(), r.ySuperscriptXSize = n.parseShort(), r.ySuperscriptYSize = n.parseShort(), r.ySuperscriptXOffset = n.parseShort(), r.ySuperscriptYOffset = n.parseShort(), r.yStrikeoutSize = n.parseShort(), r.yStrikeoutPosition = n.parseShort(), r.sFamilyClass = n.parseShort(), r.panose = [];
                                for(var o = 0; o < 10; o++)r.panose[o] = n.parseByte();
                                return r.ulUnicodeRange1 = n.parseULong(), r.ulUnicodeRange2 = n.parseULong(), r.ulUnicodeRange3 = n.parseULong(), r.ulUnicodeRange4 = n.parseULong(), r.achVendID = String.fromCharCode(n.parseByte(), n.parseByte(), n.parseByte(), n.parseByte()), r.fsSelection = n.parseUShort(), r.usFirstCharIndex = n.parseUShort(), r.usLastCharIndex = n.parseUShort(), r.sTypoAscender = n.parseShort(), r.sTypoDescender = n.parseShort(), r.sTypoLineGap = n.parseShort(), r.usWinAscent = n.parseUShort(), r.usWinDescent = n.parseUShort(), 1 <= r.version && (r.ulCodePageRange1 = n.parseULong(), r.ulCodePageRange2 = n.parseULong()), 2 <= r.version && (r.sxHeight = n.parseShort(), r.sCapHeight = n.parseShort(), r.usDefaultChar = n.parseUShort(), r.usBreakChar = n.parseUShort(), r.usMaxContent = n.parseUShort()), r;
                            },
                            make: function(e) {
                                return new J.Table("OS/2", [
                                    {
                                        name: "version",
                                        type: "USHORT",
                                        value: 3
                                    },
                                    {
                                        name: "xAvgCharWidth",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "usWeightClass",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "usWidthClass",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "fsType",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "ySubscriptXSize",
                                        type: "SHORT",
                                        value: 650
                                    },
                                    {
                                        name: "ySubscriptYSize",
                                        type: "SHORT",
                                        value: 699
                                    },
                                    {
                                        name: "ySubscriptXOffset",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "ySubscriptYOffset",
                                        type: "SHORT",
                                        value: 140
                                    },
                                    {
                                        name: "ySuperscriptXSize",
                                        type: "SHORT",
                                        value: 650
                                    },
                                    {
                                        name: "ySuperscriptYSize",
                                        type: "SHORT",
                                        value: 699
                                    },
                                    {
                                        name: "ySuperscriptXOffset",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "ySuperscriptYOffset",
                                        type: "SHORT",
                                        value: 479
                                    },
                                    {
                                        name: "yStrikeoutSize",
                                        type: "SHORT",
                                        value: 49
                                    },
                                    {
                                        name: "yStrikeoutPosition",
                                        type: "SHORT",
                                        value: 258
                                    },
                                    {
                                        name: "sFamilyClass",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "bFamilyType",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "bSerifStyle",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "bWeight",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "bProportion",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "bContrast",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "bStrokeVariation",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "bArmStyle",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "bLetterform",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "bMidline",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "bXHeight",
                                        type: "BYTE",
                                        value: 0
                                    },
                                    {
                                        name: "ulUnicodeRange1",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "ulUnicodeRange2",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "ulUnicodeRange3",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "ulUnicodeRange4",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "achVendID",
                                        type: "CHARARRAY",
                                        value: "XXXX"
                                    },
                                    {
                                        name: "fsSelection",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "usFirstCharIndex",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "usLastCharIndex",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "sTypoAscender",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "sTypoDescender",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "sTypoLineGap",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "usWinAscent",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "usWinDescent",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "ulCodePageRange1",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "ulCodePageRange2",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "sxHeight",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "sCapHeight",
                                        type: "SHORT",
                                        value: 0
                                    },
                                    {
                                        name: "usDefaultChar",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "usBreakChar",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "usMaxContext",
                                        type: "USHORT",
                                        value: 0
                                    }
                                ], e);
                            },
                            unicodeRanges: nt,
                            getUnicodeRange: function(e) {
                                for(var t = 0; t < nt.length; t += 1){
                                    var r = nt[t];
                                    if (e >= r.begin && e < r.end) return t;
                                }
                                return -1;
                            }
                        };
                        var it = {
                            parse: function(e, t) {
                                var r = {
                                }, n = new ae.Parser(e, t);
                                switch(r.version = n.parseVersion(), r.italicAngle = n.parseFixed(), r.underlinePosition = n.parseShort(), r.underlineThickness = n.parseShort(), r.isFixedPitch = n.parseULong(), r.minMemType42 = n.parseULong(), r.maxMemType42 = n.parseULong(), r.minMemType1 = n.parseULong(), r.maxMemType1 = n.parseULong(), r.version){
                                    case 1:
                                        r.names = de.slice();
                                        break;
                                    case 2:
                                        r.numberOfGlyphs = n.parseUShort(), r.glyphNameIndex = new Array(r.numberOfGlyphs);
                                        for(var o = 0; o < r.numberOfGlyphs; o++)r.glyphNameIndex[o] = n.parseUShort();
                                        r.names = [];
                                        for(var i = 0; i < r.numberOfGlyphs; i++)if (r.glyphNameIndex[i] >= de.length) {
                                            var a = n.parseChar();
                                            r.names.push(n.parseString(a));
                                        }
                                        break;
                                    case 2.5:
                                        r.numberOfGlyphs = n.parseUShort(), r.offset = new Array(r.numberOfGlyphs);
                                        for(var s = 0; s < r.numberOfGlyphs; s++)r.offset[s] = n.parseChar();
                                }
                                return r;
                            },
                            make: function() {
                                return new J.Table("post", [
                                    {
                                        name: "version",
                                        type: "FIXED",
                                        value: 196608
                                    },
                                    {
                                        name: "italicAngle",
                                        type: "FIXED",
                                        value: 0
                                    },
                                    {
                                        name: "underlinePosition",
                                        type: "FWORD",
                                        value: 0
                                    },
                                    {
                                        name: "underlineThickness",
                                        type: "FWORD",
                                        value: 0
                                    },
                                    {
                                        name: "isFixedPitch",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "minMemType42",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "maxMemType42",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "minMemType1",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "maxMemType1",
                                        type: "ULONG",
                                        value: 0
                                    }
                                ]);
                            }
                        }, at = new Array(9);
                        at[1] = function() {
                            var e = this.offset + this.relativeOffset, t = this.parseUShort();
                            return 1 === t ? {
                                substFormat: 1,
                                coverage: this.parsePointer(oe.coverage),
                                deltaGlyphId: this.parseUShort()
                            } : 2 === t ? {
                                substFormat: 2,
                                coverage: this.parsePointer(oe.coverage),
                                substitute: this.parseOffset16List()
                            } : void L1.assert(!1, "0x" + e.toString(16) + ": lookup type 1 format must be 1 or 2.");
                        }, at[2] = function() {
                            var e = this.parseUShort();
                            return L1.argument(1 === e, "GSUB Multiple Substitution Subtable identifier-format must be 1"), {
                                substFormat: e,
                                coverage: this.parsePointer(oe.coverage),
                                sequences: this.parseListOfLists()
                            };
                        }, at[3] = function() {
                            var e = this.parseUShort();
                            return L1.argument(1 === e, "GSUB Alternate Substitution Subtable identifier-format must be 1"), {
                                substFormat: e,
                                coverage: this.parsePointer(oe.coverage),
                                alternateSets: this.parseListOfLists()
                            };
                        }, at[4] = function() {
                            var e = this.parseUShort();
                            return L1.argument(1 === e, "GSUB ligature table identifier-format must be 1"), {
                                substFormat: e,
                                coverage: this.parsePointer(oe.coverage),
                                ligatureSets: this.parseListOfLists(function() {
                                    return {
                                        ligGlyph: this.parseUShort(),
                                        components: this.parseUShortList(this.parseUShort() - 1)
                                    };
                                })
                            };
                        };
                        var st = {
                            sequenceIndex: oe.uShort,
                            lookupListIndex: oe.uShort
                        };
                        at[5] = function() {
                            var e285 = this.offset + this.relativeOffset, t187 = this.parseUShort();
                            if (1 === t187) return {
                                substFormat: t187,
                                coverage: this.parsePointer(oe.coverage),
                                ruleSets: this.parseListOfLists(function() {
                                    var e = this.parseUShort(), t = this.parseUShort();
                                    return {
                                        input: this.parseUShortList(e - 1),
                                        lookupRecords: this.parseRecordList(t, st)
                                    };
                                })
                            };
                            if (2 === t187) return {
                                substFormat: t187,
                                coverage: this.parsePointer(oe.coverage),
                                classDef: this.parsePointer(oe.classDef),
                                classSets: this.parseListOfLists(function() {
                                    var e = this.parseUShort(), t = this.parseUShort();
                                    return {
                                        classes: this.parseUShortList(e - 1),
                                        lookupRecords: this.parseRecordList(t, st)
                                    };
                                })
                            };
                            if (3 === t187) {
                                var r = this.parseUShort(), n = this.parseUShort();
                                return {
                                    substFormat: t187,
                                    coverages: this.parseList(r, oe.pointer(oe.coverage)),
                                    lookupRecords: this.parseRecordList(n, st)
                                };
                            }
                            L1.assert(!1, "0x" + e285.toString(16) + ": lookup type 5 format must be 1, 2 or 3.");
                        }, at[6] = function() {
                            var e = this.offset + this.relativeOffset, t = this.parseUShort();
                            return 1 === t ? {
                                substFormat: 1,
                                coverage: this.parsePointer(oe.coverage),
                                chainRuleSets: this.parseListOfLists(function() {
                                    return {
                                        backtrack: this.parseUShortList(),
                                        input: this.parseUShortList(this.parseShort() - 1),
                                        lookahead: this.parseUShortList(),
                                        lookupRecords: this.parseRecordList(st)
                                    };
                                })
                            } : 2 === t ? {
                                substFormat: 2,
                                coverage: this.parsePointer(oe.coverage),
                                backtrackClassDef: this.parsePointer(oe.classDef),
                                inputClassDef: this.parsePointer(oe.classDef),
                                lookaheadClassDef: this.parsePointer(oe.classDef),
                                chainClassSet: this.parseListOfLists(function() {
                                    return {
                                        backtrack: this.parseUShortList(),
                                        input: this.parseUShortList(this.parseShort() - 1),
                                        lookahead: this.parseUShortList(),
                                        lookupRecords: this.parseRecordList(st)
                                    };
                                })
                            } : 3 === t ? {
                                substFormat: 3,
                                backtrackCoverage: this.parseList(oe.pointer(oe.coverage)),
                                inputCoverage: this.parseList(oe.pointer(oe.coverage)),
                                lookaheadCoverage: this.parseList(oe.pointer(oe.coverage)),
                                lookupRecords: this.parseRecordList(st)
                            } : void L1.assert(!1, "0x" + e.toString(16) + ": lookup type 6 format must be 1, 2 or 3.");
                        }, at[7] = function() {
                            var e = this.parseUShort();
                            L1.argument(1 === e, "GSUB Extension Substitution subtable identifier-format must be 1");
                            var t = this.parseUShort(), r = new oe(this.data, this.offset + this.parseULong());
                            return {
                                substFormat: 1,
                                lookupType: t,
                                extension: at[t].call(r)
                            };
                        }, at[8] = function() {
                            var e = this.parseUShort();
                            return L1.argument(1 === e, "GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"), {
                                substFormat: e,
                                coverage: this.parsePointer(oe.coverage),
                                backtrackCoverage: this.parseList(oe.pointer(oe.coverage)),
                                lookaheadCoverage: this.parseList(oe.pointer(oe.coverage)),
                                substitutes: this.parseUShortList()
                            };
                        };
                        var lt = new Array(9);
                        lt[1] = function(e) {
                            return 1 === e.substFormat ? new J.Table("substitutionTable", [
                                {
                                    name: "substFormat",
                                    type: "USHORT",
                                    value: 1
                                },
                                {
                                    name: "coverage",
                                    type: "TABLE",
                                    value: new J.Coverage(e.coverage)
                                },
                                {
                                    name: "deltaGlyphID",
                                    type: "USHORT",
                                    value: e.deltaGlyphId
                                }
                            ]) : new J.Table("substitutionTable", [
                                {
                                    name: "substFormat",
                                    type: "USHORT",
                                    value: 2
                                },
                                {
                                    name: "coverage",
                                    type: "TABLE",
                                    value: new J.Coverage(e.coverage)
                                }
                            ].concat(J.ushortList("substitute", e.substitute)));
                        }, lt[3] = function(e286) {
                            return L1.assert(1 === e286.substFormat, "Lookup type 3 substFormat must be 1."), new J.Table("substitutionTable", [
                                {
                                    name: "substFormat",
                                    type: "USHORT",
                                    value: 1
                                },
                                {
                                    name: "coverage",
                                    type: "TABLE",
                                    value: new J.Coverage(e286.coverage)
                                }
                            ].concat(J.tableList("altSet", e286.alternateSets, function(e) {
                                return new J.Table("alternateSetTable", J.ushortList("alternate", e));
                            })));
                        }, lt[4] = function(e287) {
                            return L1.assert(1 === e287.substFormat, "Lookup type 4 substFormat must be 1."), new J.Table("substitutionTable", [
                                {
                                    name: "substFormat",
                                    type: "USHORT",
                                    value: 1
                                },
                                {
                                    name: "coverage",
                                    type: "TABLE",
                                    value: new J.Coverage(e287.coverage)
                                }
                            ].concat(J.tableList("ligSet", e287.ligatureSets, function(e288) {
                                return new J.Table("ligatureSetTable", J.tableList("ligature", e288, function(e) {
                                    return new J.Table("ligatureTable", [
                                        {
                                            name: "ligGlyph",
                                            type: "USHORT",
                                            value: e.ligGlyph
                                        }
                                    ].concat(J.ushortList("component", e.components, e.components.length + 1)));
                                }));
                            })));
                        };
                        var ut = {
                            parse: function(e, t) {
                                var r = new oe(e, t = t || 0), n = r.parseVersion(1);
                                return L1.argument(1 === n || 1.1 === n, "Unsupported GSUB table version."), 1 === n ? {
                                    version: n,
                                    scripts: r.parseScriptList(),
                                    features: r.parseFeatureList(),
                                    lookups: r.parseLookupList(at)
                                } : {
                                    version: n,
                                    scripts: r.parseScriptList(),
                                    features: r.parseFeatureList(),
                                    lookups: r.parseLookupList(at),
                                    variations: r.parseFeatureVariationsList()
                                };
                            },
                            make: function(e) {
                                return new J.Table("GSUB", [
                                    {
                                        name: "version",
                                        type: "ULONG",
                                        value: 65536
                                    },
                                    {
                                        name: "scripts",
                                        type: "TABLE",
                                        value: new J.ScriptList(e.scripts)
                                    },
                                    {
                                        name: "features",
                                        type: "TABLE",
                                        value: new J.FeatureList(e.features)
                                    },
                                    {
                                        name: "lookups",
                                        type: "TABLE",
                                        value: new J.LookupList(e.lookups, lt)
                                    }
                                ]);
                            }
                        };
                        var ct = {
                            parse: function(e, t) {
                                var r = new ae.Parser(e, t), n = r.parseULong();
                                L1.argument(1 === n, "Unsupported META table version."), r.parseULong(), r.parseULong();
                                for(var o = r.parseULong(), i = {
                                }, a = 0; a < o; a++){
                                    var s = r.parseTag(), l = r.parseULong(), u = r.parseULong(), c = P1.UTF8(e, t + l, u);
                                    i[s] = c;
                                }
                                return i;
                            },
                            make: function(e) {
                                var t = Object.keys(e).length, r = "", n = 16 + 12 * t, o = new J.Table("meta", [
                                    {
                                        name: "version",
                                        type: "ULONG",
                                        value: 1
                                    },
                                    {
                                        name: "flags",
                                        type: "ULONG",
                                        value: 0
                                    },
                                    {
                                        name: "offset",
                                        type: "ULONG",
                                        value: n
                                    },
                                    {
                                        name: "numTags",
                                        type: "ULONG",
                                        value: t
                                    }
                                ]);
                                for(var i in e){
                                    var a = r.length;
                                    r += e[i], o.fields.push({
                                        name: "tag " + i,
                                        type: "TAG",
                                        value: i
                                    }), o.fields.push({
                                        name: "offset " + i,
                                        type: "ULONG",
                                        value: n + a
                                    }), o.fields.push({
                                        name: "length " + i,
                                        type: "ULONG",
                                        value: e[i].length
                                    });
                                }
                                return o.fields.push({
                                    name: "stringPool",
                                    type: "CHARARRAY",
                                    value: r
                                }), o;
                            }
                        };
                        function dt(e) {
                            return Math.log(e) / Math.log(2) | 0;
                        }
                        function ft(e) {
                            for(; e.length % 4 != 0;)e.push(0);
                            for(var t = 0, r = 0; r < e.length; r += 4)t += (e[r] << 24) + (e[r + 1] << 16) + (e[r + 2] << 8) + e[r + 3];
                            return t %= Math.pow(2, 32);
                        }
                        function ht(e, t, r, n) {
                            return new J.Record("Table Record", [
                                {
                                    name: "tag",
                                    type: "TAG",
                                    value: void 0 !== e ? e : ""
                                },
                                {
                                    name: "checkSum",
                                    type: "ULONG",
                                    value: void 0 !== t ? t : 0
                                },
                                {
                                    name: "offset",
                                    type: "ULONG",
                                    value: void 0 !== r ? r : 0
                                },
                                {
                                    name: "length",
                                    type: "ULONG",
                                    value: void 0 !== n ? n : 0
                                }
                            ]);
                        }
                        function pt(e289) {
                            var t188 = new J.Table("sfnt", [
                                {
                                    name: "version",
                                    type: "TAG",
                                    value: "OTTO"
                                },
                                {
                                    name: "numTables",
                                    type: "USHORT",
                                    value: 0
                                },
                                {
                                    name: "searchRange",
                                    type: "USHORT",
                                    value: 0
                                },
                                {
                                    name: "entrySelector",
                                    type: "USHORT",
                                    value: 0
                                },
                                {
                                    name: "rangeShift",
                                    type: "USHORT",
                                    value: 0
                                }
                            ]);
                            t188.tables = e289, t188.numTables = e289.length;
                            var r = Math.pow(2, dt(t188.numTables));
                            t188.searchRange = 16 * r, t188.entrySelector = dt(r), t188.rangeShift = 16 * t188.numTables - t188.searchRange;
                            for(var n = [], o = [], i = t188.sizeOf() + ht().sizeOf() * t188.numTables; i % 4 != 0;)i += 1, o.push({
                                name: "padding",
                                type: "BYTE",
                                value: 0
                            });
                            for(var a = 0; a < e289.length; a += 1){
                                var s = e289[a];
                                L1.argument(4 === s.tableName.length, "Table name" + s.tableName + " is invalid.");
                                var l = s.sizeOf(), u = ht(s.tableName, ft(s.encode()), i, l);
                                for(n.push({
                                    name: u.tag + " Table Record",
                                    type: "RECORD",
                                    value: u
                                }), o.push({
                                    name: s.tableName + " table",
                                    type: "RECORD",
                                    value: s
                                }), i += l, L1.argument(!isNaN(i), "Something went wrong calculating the offset."); i % 4 != 0;)i += 1, o.push({
                                    name: "padding",
                                    type: "BYTE",
                                    value: 0
                                });
                            }
                            return n.sort(function(e, t) {
                                return e.value.tag > t.value.tag ? 1 : -1;
                            }), t188.fields = t188.fields.concat(n), t188.fields = t188.fields.concat(o), t188;
                        }
                        function yt(e, t, r) {
                            for(var n = 0; n < t.length; n += 1){
                                var o = e.charToGlyphIndex(t[n]);
                                if (0 < o) return e.glyphs.get(o).getMetrics();
                            }
                            return r;
                        }
                        var mt = {
                            make: pt,
                            fontToTable: function(e290) {
                                for(var t189, r141 = [], n = [], o = [], i = [], a = [], s = [], l = [], u = 0, c = 0, d = 0, f = 0, h = 0, p = 0; p < e290.glyphs.length; p += 1){
                                    var y = e290.glyphs.get(p), m = 0 | y.unicode;
                                    if (isNaN(y.advanceWidth)) throw new Error("Glyph " + y.name + " (" + p + "): advanceWidth is not a number.");
                                    (m < t189 || void 0 === t189) && 0 < m && (t189 = m), u < m && (u = m);
                                    var g = ot.getUnicodeRange(m);
                                    if (g < 32) c |= 1 << g;
                                    else if (g < 64) d |= 1 << g - 32;
                                    else if (g < 96) f |= 1 << g - 64;
                                    else {
                                        if (!(g < 123)) throw new Error("Unicode ranges bits > 123 are reserved for internal usage");
                                        h |= 1 << g - 96;
                                    }
                                    if (".notdef" !== y.name) {
                                        var v = y.getMetrics();
                                        r141.push(v.xMin), n.push(v.yMin), o.push(v.xMax), i.push(v.yMax), s.push(v.leftSideBearing), l.push(v.rightSideBearing), a.push(y.advanceWidth);
                                    }
                                }
                                var b = {
                                    xMin: Math.min.apply(null, r141),
                                    yMin: Math.min.apply(null, n),
                                    xMax: Math.max.apply(null, o),
                                    yMax: Math.max.apply(null, i),
                                    advanceWidthMax: Math.max.apply(null, a),
                                    advanceWidthAvg: function(e) {
                                        for(var t = 0, r = 0; r < e.length; r += 1)t += e[r];
                                        return t / e.length;
                                    }(a),
                                    minLeftSideBearing: Math.min.apply(null, s),
                                    maxLeftSideBearing: Math.max.apply(null, s),
                                    minRightSideBearing: Math.min.apply(null, l)
                                };
                                b.ascender = e290.ascender, b.descender = e290.descender;
                                var _ = Fe.make({
                                    flags: 3,
                                    unitsPerEm: e290.unitsPerEm,
                                    xMin: b.xMin,
                                    yMin: b.yMin,
                                    xMax: b.xMax,
                                    yMax: b.yMax,
                                    lowestRecPPEM: 3,
                                    createdTimestamp: e290.createdTimestamp
                                }), x = Be.make({
                                    ascender: b.ascender,
                                    descender: b.descender,
                                    advanceWidthMax: b.advanceWidthMax,
                                    minLeftSideBearing: b.minLeftSideBearing,
                                    minRightSideBearing: b.minRightSideBearing,
                                    xMaxExtent: b.maxLeftSideBearing + (b.xMax - b.xMin),
                                    numberOfHMetrics: e290.glyphs.length
                                }), w = ze.make(e290.glyphs.length), S = ot.make({
                                    xAvgCharWidth: Math.round(b.advanceWidthAvg),
                                    usWeightClass: e290.tables.os2.usWeightClass,
                                    usWidthClass: e290.tables.os2.usWidthClass,
                                    usFirstCharIndex: t189,
                                    usLastCharIndex: u,
                                    ulUnicodeRange1: c,
                                    ulUnicodeRange2: d,
                                    ulUnicodeRange3: f,
                                    ulUnicodeRange4: h,
                                    fsSelection: e290.tables.os2.fsSelection,
                                    sTypoAscender: b.ascender,
                                    sTypoDescender: b.descender,
                                    sTypoLineGap: 0,
                                    usWinAscent: b.yMax,
                                    usWinDescent: Math.abs(b.yMin),
                                    ulCodePageRange1: 1,
                                    sxHeight: yt(e290, "xyvw", {
                                        yMax: Math.round(b.ascender / 2)
                                    }).yMax,
                                    sCapHeight: yt(e290, "HIKLEFJMNTZBDPRAGOQSUVWXY", b).yMax,
                                    usDefaultChar: e290.hasChar(" ") ? 32 : 0,
                                    usBreakChar: e290.hasChar(" ") ? 32 : 0
                                }), j = Ge.make(e290.glyphs), M = se.make(e290.glyphs), E = e290.getEnglishName("fontFamily"), T = e290.getEnglishName("fontSubfamily"), O = E + " " + T, C = e290.getEnglishName("postScriptName");
                                C = C || E.replace(/\s/g, "") + "-" + T;
                                var L = {
                                };
                                for(var P in e290.names)L[P] = e290.names[P];
                                L.uniqueID || (L.uniqueID = {
                                    en: e290.getEnglishName("manufacturer") + ":" + O
                                }), L.postScriptName || (L.postScriptName = {
                                    en: C
                                }), L.preferredFamily || (L.preferredFamily = e290.names.fontFamily), L.preferredSubfamily || (L.preferredSubfamily = e290.names.fontSubfamily);
                                var k = [], A = rt.make(L, k), R = 0 < k.length ? Ve.make(k) : void 0, D = it.make(), I = Ne.make(e290.glyphs, {
                                    version: e290.getEnglishName("version"),
                                    fullName: O,
                                    familyName: E,
                                    weightName: T,
                                    postScriptName: C,
                                    unitsPerEm: e290.unitsPerEm,
                                    fontBBox: [
                                        0,
                                        b.yMin,
                                        b.ascender,
                                        b.advanceWidthMax
                                    ]
                                }), U = e290.metas && 0 < Object.keys(e290.metas).length ? ct.make(e290.metas) : void 0, N = [
                                    _,
                                    x,
                                    w,
                                    S,
                                    A,
                                    M,
                                    D,
                                    I,
                                    j
                                ];
                                R && N.push(R), e290.tables.gsub && N.push(ut.make(e290.tables.gsub)), U && N.push(U);
                                for(var F = pt(N), B = ft(F.encode()), G = F.fields, V = !1, z = 0; z < G.length; z += 1)if ("head table" === G[z].name) {
                                    G[z].value.checkSumAdjustment = 2981146554 - B, V = !0;
                                    break;
                                }
                                if (!V) throw new Error("Could not find head table with checkSum to adjust.");
                                return F;
                            },
                            computeCheckSum: ft
                        };
                        function gt(e, t) {
                            for(var r = 0, n = e.length - 1; r <= n;){
                                var o = r + n >>> 1, i = e[o].tag;
                                if (i === t) return o;
                                i < t ? r = 1 + o : n = o - 1;
                            }
                            return -r - 1;
                        }
                        function vt(e, t) {
                            for(var r = 0, n = e.length - 1; r <= n;){
                                var o = r + n >>> 1, i = e[o];
                                if (i === t) return o;
                                i < t ? r = 1 + o : n = o - 1;
                            }
                            return -r - 1;
                        }
                        function bt(e, t) {
                            for(var r, n = 0, o = e.length - 1; n <= o;){
                                var i = n + o >>> 1, a = (r = e[i]).start;
                                if (a === t) return r;
                                a < t ? n = 1 + i : o = i - 1;
                            }
                            if (0 < n) return t > (r = e[n - 1]).end ? 0 : r;
                        }
                        function _t(e, t) {
                            this.font = e, this.tableName = t;
                        }
                        function xt(e) {
                            _t.call(this, e, "gpos");
                        }
                        function wt(e) {
                            _t.call(this, e, "gsub");
                        }
                        function St(e, t) {
                            var r = e.length;
                            if (r !== t.length) return !1;
                            for(var n = 0; n < r; n++)if (e[n] !== t[n]) return !1;
                            return !0;
                        }
                        function jt(e, t, r) {
                            for(var n = e.subtables, o = 0; o < n.length; o++){
                                var i = n[o];
                                if (i.substFormat === t) return i;
                            }
                            if (r) return n.push(r), r;
                        }
                        function Mt(e) {
                            for(var t = new ArrayBuffer(e.length), r = new Uint8Array(t), n = 0; n < e.length; ++n)r[n] = e[n];
                            return t;
                        }
                        function Et(e, t) {
                            if (!e) throw t;
                        }
                        function Tt(e, t, r, n, o) {
                            var i;
                            return i = 0 < (t & n) ? (i = e.parseByte(), 0 == (t & o) && (i = -i), r + i) : 0 < (t & o) ? r : r + e.parseShort();
                        }
                        function Ot(e, t, r) {
                            var n, o, i = new ae.Parser(t, r);
                            if (e.numberOfContours = i.parseShort(), e._xMin = i.parseShort(), e._yMin = i.parseShort(), e._xMax = i.parseShort(), e._yMax = i.parseShort(), 0 < e.numberOfContours) {
                                for(var a = e.endPointIndices = [], s = 0; s < e.numberOfContours; s += 1)a.push(i.parseUShort());
                                e.instructionLength = i.parseUShort(), e.instructions = [];
                                for(var l = 0; l < e.instructionLength; l += 1)e.instructions.push(i.parseByte());
                                var u = a[a.length - 1] + 1;
                                n = [];
                                for(var c = 0; c < u; c += 1)if (o = i.parseByte(), n.push(o), 0 < (8 & o)) for(var d = i.parseByte(), f = 0; f < d; f += 1)n.push(o), c += 1;
                                if (L1.argument(n.length === u, "Bad flags."), 0 < a.length) {
                                    var h, p = [];
                                    if (0 < u) {
                                        for(var y = 0; y < u; y += 1)o = n[y], (h = {
                                        }).onCurve = !!(1 & o), h.lastPointOfContour = 0 <= a.indexOf(y), p.push(h);
                                        for(var m = 0, g = 0; g < u; g += 1)o = n[g], (h = p[g]).x = Tt(i, o, m, 2, 16), m = h.x;
                                        for(var v = 0, b = 0; b < u; b += 1)o = n[b], (h = p[b]).y = Tt(i, o, v, 4, 32), v = h.y;
                                    }
                                    e.points = p;
                                } else e.points = [];
                            } else if (0 === e.numberOfContours) e.points = [];
                            else {
                                e.isComposite = !0, e.points = [], e.components = [];
                                for(var _ = !0; _;){
                                    n = i.parseUShort();
                                    var x = {
                                        glyphIndex: i.parseUShort(),
                                        xScale: 1,
                                        scale01: 0,
                                        scale10: 0,
                                        yScale: 1,
                                        dx: 0,
                                        dy: 0
                                    };
                                    0 < (1 & n) ? 0 < (2 & n) ? (x.dx = i.parseShort(), x.dy = i.parseShort()) : x.matchedPoints = [
                                        i.parseUShort(),
                                        i.parseUShort()
                                    ] : 0 < (2 & n) ? (x.dx = i.parseChar(), x.dy = i.parseChar()) : x.matchedPoints = [
                                        i.parseByte(),
                                        i.parseByte()
                                    ], 0 < (8 & n) ? x.xScale = x.yScale = i.parseF2Dot14() : 0 < (64 & n) ? (x.xScale = i.parseF2Dot14(), x.yScale = i.parseF2Dot14()) : 0 < (128 & n) && (x.xScale = i.parseF2Dot14(), x.scale01 = i.parseF2Dot14(), x.scale10 = i.parseF2Dot14(), x.yScale = i.parseF2Dot14()), e.components.push(x), _ = !!(32 & n);
                                }
                                if (256 & n) {
                                    e.instructionLength = i.parseUShort(), e.instructions = [];
                                    for(var w = 0; w < e.instructionLength; w += 1)e.instructions.push(i.parseByte());
                                }
                            }
                        }
                        function Ct(e, t) {
                            for(var r = [], n = 0; n < e.length; n += 1){
                                var o = e[n], i = {
                                    x: t.xScale * o.x + t.scale01 * o.y + t.dx,
                                    y: t.scale10 * o.x + t.yScale * o.y + t.dy,
                                    onCurve: o.onCurve,
                                    lastPointOfContour: o.lastPointOfContour
                                };
                                r.push(i);
                            }
                            return r;
                        }
                        function Lt(e291) {
                            var t190 = new D1;
                            if (!e291) return t190;
                            for(var r142 = function(e) {
                                for(var t = [], r = [], n = 0; n < e.length; n += 1){
                                    var o = e[n];
                                    r.push(o), o.lastPointOfContour && (t.push(r), r = []);
                                }
                                return L1.argument(0 === r.length, "There are still points left in the current contour."), t;
                            }(e291), n78 = 0; n78 < r142.length; ++n78){
                                var o53 = r142[n78], i = null, a = o53[o53.length - 1], s = o53[0];
                                if (a.onCurve) t190.moveTo(a.x, a.y);
                                else if (s.onCurve) t190.moveTo(s.x, s.y);
                                else {
                                    var l = {
                                        x: 0.5 * (a.x + s.x),
                                        y: 0.5 * (a.y + s.y)
                                    };
                                    t190.moveTo(l.x, l.y);
                                }
                                for(var u = 0; u < o53.length; ++u)if (i = a, a = s, s = o53[(u + 1) % o53.length], a.onCurve) t190.lineTo(a.x, a.y);
                                else {
                                    var c = s;
                                    i.onCurve || (a.x, i.x, a.y, i.y), s.onCurve || (c = {
                                        x: 0.5 * (a.x + s.x),
                                        y: 0.5 * (a.y + s.y)
                                    }), t190.quadraticCurveTo(a.x, a.y, c.x, c.y);
                                }
                                t190.closePath();
                            }
                            return t190;
                        }
                        function Pt(e, t) {
                            if (t.isComposite) for(var r = 0; r < t.components.length; r += 1){
                                var n = t.components[r], o = e.get(n.glyphIndex);
                                if (o.getPath(), o.points) {
                                    var i = void 0;
                                    if (void 0 === n.matchedPoints) i = Ct(o.points, n);
                                    else {
                                        if (n.matchedPoints[0] > t.points.length - 1 || n.matchedPoints[1] > o.points.length - 1) throw Error("Matched points out of range in " + t.name);
                                        var a = t.points[n.matchedPoints[0]], s = o.points[n.matchedPoints[1]], l = {
                                            xScale: n.xScale,
                                            scale01: n.scale01,
                                            scale10: n.scale10,
                                            yScale: n.yScale,
                                            dx: 0,
                                            dy: 0
                                        };
                                        s = Ct([
                                            s
                                        ], l)[0], l.dx = a.x - s.x, l.dy = a.y - s.y, i = Ct(o.points, l);
                                    }
                                    t.points = t.points.concat(i);
                                }
                            }
                            return Lt(t.points);
                        }
                        (xt.prototype = _t.prototype = {
                            searchTag: gt,
                            binSearch: vt,
                            getTable: function(e) {
                                var t = this.font.tables[this.tableName];
                                return !t && e && (t = this.font.tables[this.tableName] = this.createDefaultTable()), t;
                            },
                            getScriptNames: function() {
                                var e292 = this.getTable();
                                return e292 ? e292.scripts.map(function(e) {
                                    return e.tag;
                                }) : [];
                            },
                            getDefaultScriptName: function() {
                                var e = this.getTable();
                                if (e) {
                                    for(var t = !1, r = 0; r < e.scripts.length; r++){
                                        var n = e.scripts[r].tag;
                                        if ("DFLT" === n) return n;
                                        "latn" === n && (t = !0);
                                    }
                                    return t ? "latn" : void 0;
                                }
                            },
                            getScriptTable: function(e, t) {
                                var r = this.getTable(t);
                                if (r) {
                                    e = e || "DFLT";
                                    var n = r.scripts, o = gt(r.scripts, e);
                                    if (0 <= o) return n[o].script;
                                    if (t) {
                                        var i = {
                                            tag: e,
                                            script: {
                                                defaultLangSys: {
                                                    reserved: 0,
                                                    reqFeatureIndex: 65535,
                                                    featureIndexes: []
                                                },
                                                langSysRecords: []
                                            }
                                        };
                                        return n.splice(-1 - o, 0, i), i.script;
                                    }
                                }
                            },
                            getLangSysTable: function(e, t, r) {
                                var n = this.getScriptTable(e, r);
                                if (n) {
                                    if (!t || "dflt" === t || "DFLT" === t) return n.defaultLangSys;
                                    var o = gt(n.langSysRecords, t);
                                    if (0 <= o) return n.langSysRecords[o].langSys;
                                    if (r) {
                                        var i = {
                                            tag: t,
                                            langSys: {
                                                reserved: 0,
                                                reqFeatureIndex: 65535,
                                                featureIndexes: []
                                            }
                                        };
                                        return n.langSysRecords.splice(-1 - o, 0, i), i.langSys;
                                    }
                                }
                            },
                            getFeatureTable: function(e, t, r, n) {
                                var o = this.getLangSysTable(e, t, n);
                                if (o) {
                                    for(var i, a = o.featureIndexes, s = this.font.tables[this.tableName].features, l = 0; l < a.length; l++)if ((i = s[a[l]]).tag === r) return i.feature;
                                    if (n) {
                                        var u = s.length;
                                        return L1.assert(0 === u || r >= s[u - 1].tag, "Features must be added in alphabetical order."), i = {
                                            tag: r,
                                            feature: {
                                                params: 0,
                                                lookupListIndexes: []
                                            }
                                        }, s.push(i), a.push(u), i.feature;
                                    }
                                }
                            },
                            getLookupTables: function(e, t, r, n, o) {
                                var i = this.getFeatureTable(e, t, r, o), a = [];
                                if (i) {
                                    for(var s, l = i.lookupListIndexes, u = this.font.tables[this.tableName].lookups, c = 0; c < l.length; c++)(s = u[l[c]]).lookupType === n && a.push(s);
                                    if (0 === a.length && o) {
                                        s = {
                                            lookupType: n,
                                            lookupFlag: 0,
                                            subtables: [],
                                            markFilteringSet: void 0
                                        };
                                        var d = u.length;
                                        return u.push(s), l.push(d), [
                                            s
                                        ];
                                    }
                                }
                                return a;
                            },
                            getGlyphClass: function(e, t) {
                                switch(e.format){
                                    case 1:
                                        return e.startGlyph <= t && t < e.startGlyph + e.classes.length ? e.classes[t - e.startGlyph] : 0;
                                    case 2:
                                        var r = bt(e.ranges, t);
                                        return r ? r.classId : 0;
                                }
                            },
                            getCoverageIndex: function(e, t) {
                                switch(e.format){
                                    case 1:
                                        var r = vt(e.glyphs, t);
                                        return 0 <= r ? r : -1;
                                    case 2:
                                        var n = bt(e.ranges, t);
                                        return n ? n.index + t - n.start : -1;
                                }
                            },
                            expandCoverage: function(e) {
                                if (1 === e.format) return e.glyphs;
                                for(var t = [], r = e.ranges, n = 0; n < r.length; n++)for(var o = r[n], i = o.start, a = o.end, s = i; s <= a; s++)t.push(s);
                                return t;
                            }
                        }).init = function() {
                            var e = this.getDefaultScriptName();
                            this.defaultKerningTables = this.getKerningTables(e);
                        }, xt.prototype.getKerningValue = function(e, t, r) {
                            for(var n = 0; n < e.length; n++)for(var o = e[n].subtables, i = 0; i < o.length; i++){
                                var a = o[i], s = this.getCoverageIndex(a.coverage, t);
                                if (!(s < 0)) switch(a.posFormat){
                                    case 1:
                                        for(var l = a.pairSets[s], u = 0; u < l.length; u++){
                                            var c = l[u];
                                            if (c.secondGlyph === r) return c.value1 && c.value1.xAdvance || 0;
                                        }
                                        break;
                                    case 2:
                                        var d = this.getGlyphClass(a.classDef1, t), f = this.getGlyphClass(a.classDef2, r), h = a.classRecords[d][f];
                                        return h.value1 && h.value1.xAdvance || 0;
                                }
                            }
                            return 0;
                        }, xt.prototype.getKerningTables = function(e, t) {
                            if (this.font.tables.gpos) return this.getLookupTables(e, t, "kern", 2);
                        }, (wt.prototype = _t.prototype).createDefaultTable = function() {
                            return {
                                version: 1,
                                scripts: [
                                    {
                                        tag: "DFLT",
                                        script: {
                                            defaultLangSys: {
                                                reserved: 0,
                                                reqFeatureIndex: 65535,
                                                featureIndexes: []
                                            },
                                            langSysRecords: []
                                        }
                                    }
                                ],
                                features: [],
                                lookups: []
                            };
                        }, wt.prototype.getSingle = function(e, t, r) {
                            for(var n = [], o = this.getLookupTables(t, r, e, 1), i = 0; i < o.length; i++)for(var a = o[i].subtables, s = 0; s < a.length; s++){
                                var l = a[s], u = this.expandCoverage(l.coverage), c = void 0;
                                if (1 === l.substFormat) {
                                    var d = l.deltaGlyphId;
                                    for(c = 0; c < u.length; c++){
                                        var f = u[c];
                                        n.push({
                                            sub: f,
                                            by: f + d
                                        });
                                    }
                                } else {
                                    var h = l.substitute;
                                    for(c = 0; c < u.length; c++)n.push({
                                        sub: u[c],
                                        by: h[c]
                                    });
                                }
                            }
                            return n;
                        }, wt.prototype.getAlternates = function(e, t, r) {
                            for(var n = [], o = this.getLookupTables(t, r, e, 3), i = 0; i < o.length; i++)for(var a = o[i].subtables, s = 0; s < a.length; s++)for(var l = a[s], u = this.expandCoverage(l.coverage), c = l.alternateSets, d = 0; d < u.length; d++)n.push({
                                sub: u[d],
                                by: c[d]
                            });
                            return n;
                        }, wt.prototype.getLigatures = function(e, t, r) {
                            for(var n = [], o = this.getLookupTables(t, r, e, 4), i = 0; i < o.length; i++)for(var a = o[i].subtables, s = 0; s < a.length; s++)for(var l = a[s], u = this.expandCoverage(l.coverage), c = l.ligatureSets, d = 0; d < u.length; d++)for(var f = u[d], h = c[d], p = 0; p < h.length; p++){
                                var y = h[p];
                                n.push({
                                    sub: [
                                        f
                                    ].concat(y.components),
                                    by: y.ligGlyph
                                });
                            }
                            return n;
                        }, wt.prototype.addSingle = function(e, t, r, n) {
                            var o = jt(this.getLookupTables(r, n, e, 1, !0)[0], 2, {
                                substFormat: 2,
                                coverage: {
                                    format: 1,
                                    glyphs: []
                                },
                                substitute: []
                            });
                            L1.assert(1 === o.coverage.format, "Ligature: unable to modify coverage table format " + o.coverage.format);
                            var i = t.sub, a = this.binSearch(o.coverage.glyphs, i);
                            a < 0 && (a = -1 - a, o.coverage.glyphs.splice(a, 0, i), o.substitute.splice(a, 0, 0)), o.substitute[a] = t.by;
                        }, wt.prototype.addAlternate = function(e, t, r, n) {
                            var o = jt(this.getLookupTables(r, n, e, 3, !0)[0], 1, {
                                substFormat: 1,
                                coverage: {
                                    format: 1,
                                    glyphs: []
                                },
                                alternateSets: []
                            });
                            L1.assert(1 === o.coverage.format, "Ligature: unable to modify coverage table format " + o.coverage.format);
                            var i = t.sub, a = this.binSearch(o.coverage.glyphs, i);
                            a < 0 && (a = -1 - a, o.coverage.glyphs.splice(a, 0, i), o.alternateSets.splice(a, 0, 0)), o.alternateSets[a] = t.by;
                        }, wt.prototype.addLigature = function(e, t, r, n) {
                            var o = this.getLookupTables(r, n, e, 4, !0)[0], i = o.subtables[0];
                            i || (i = {
                                substFormat: 1,
                                coverage: {
                                    format: 1,
                                    glyphs: []
                                },
                                ligatureSets: []
                            }, o.subtables[0] = i), L1.assert(1 === i.coverage.format, "Ligature: unable to modify coverage table format " + i.coverage.format);
                            var a = t.sub[0], s = t.sub.slice(1), l = {
                                ligGlyph: t.by,
                                components: s
                            }, u = this.binSearch(i.coverage.glyphs, a);
                            if (0 <= u) {
                                for(var c = i.ligatureSets[u], d = 0; d < c.length; d++)if (St(c[d].components, s)) return;
                                c.push(l);
                            } else u = -1 - u, i.coverage.glyphs.splice(u, 0, a), i.ligatureSets.splice(u, 0, [
                                l
                            ]);
                        }, wt.prototype.getFeature = function(e, t, r) {
                            if (/ss\d\d/.test(e)) return this.getSingle(e, t, r);
                            switch(e){
                                case "aalt":
                                case "salt":
                                    return this.getSingle(e, t, r).concat(this.getAlternates(e, t, r));
                                case "dlig":
                                case "liga":
                                case "rlig":
                                    return this.getLigatures(e, t, r);
                            }
                        }, wt.prototype.add = function(e, t, r, n) {
                            if (/ss\d\d/.test(e)) return this.addSingle(e, t, r, n);
                            switch(e){
                                case "aalt":
                                case "salt":
                                    return "number" == typeof t.by ? this.addSingle(e, t, r, n) : this.addAlternate(e, t, r, n);
                                case "dlig":
                                case "liga":
                                case "rlig":
                                    return this.addLigature(e, t, r, n);
                            }
                        };
                        var kt, At, Rt, Dt, It = {
                            getPath: Lt,
                            parse: function(e, t, r, n) {
                                for(var o = new _e.GlyphSet(n), i = 0; i < r.length - 1; i += 1){
                                    var a = r[i];
                                    a !== r[i + 1] ? o.push(i, _e.ttfGlyphLoader(n, i, Ot, e, t + a, Pt)) : o.push(i, _e.glyphLoader(n, i));
                                }
                                return o;
                            }
                        };
                        function Ut(e293) {
                            this.font = e293, this.getCommands = function(e) {
                                return It.getPath(e).commands;
                            }, this._fpgmState = this._prepState = void 0, this._errorState = 0;
                        }
                        function Nt(e) {
                            return e;
                        }
                        function Ft(e) {
                            return Math.sign(e) * Math.round(Math.abs(e));
                        }
                        function Bt(e) {
                            return Math.sign(e) * Math.round(Math.abs(2 * e)) / 2;
                        }
                        function Gt(e) {
                            return Math.sign(e) * (Math.round(Math.abs(e) + 0.5) - 0.5);
                        }
                        function Vt(e) {
                            return Math.sign(e) * Math.ceil(Math.abs(e));
                        }
                        function zt(e) {
                            return Math.sign(e) * Math.floor(Math.abs(e));
                        }
                        function Ht(e) {
                            var t = this.srPeriod, r = this.srPhase, n = 1;
                            return e < 0 && (e = -e, n = -1), e += this.srThreshold - r, e = Math.trunc(e / t) * t, (e += r) < 0 ? r * n : e * n;
                        }
                        var qt = {
                            x: 1,
                            y: 0,
                            axis: "x",
                            distance: function(e, t, r, n) {
                                return (r ? e.xo : e.x) - (n ? t.xo : t.x);
                            },
                            interpolate: function(e, t, r, n) {
                                var o, i, a, s, l, u, c;
                                if (!n || n === this) return o = e.xo - t.xo, i = e.xo - r.xo, l = t.x - t.xo, u = r.x - r.xo, 0 === (c = (a = Math.abs(o)) + (s = Math.abs(i))) ? void (e.x = e.xo + (l + u) / 2) : void (e.x = e.xo + (l * s + u * a) / c);
                                o = n.distance(e, t, !0, !0), i = n.distance(e, r, !0, !0), l = n.distance(t, t, !1, !0), u = n.distance(r, r, !1, !0), 0 !== (c = (a = Math.abs(o)) + (s = Math.abs(i))) ? qt.setRelative(e, e, (l * s + u * a) / c, n, !0) : qt.setRelative(e, e, (l + u) / 2, n, !0);
                            },
                            normalSlope: Number.NEGATIVE_INFINITY,
                            setRelative: function(e, t, r, n, o) {
                                if (n && n !== this) {
                                    var i = o ? t.xo : t.x, a = o ? t.yo : t.y, s = i + r * n.x, l = a + r * n.y;
                                    e.x = s + (e.y - l) / n.normalSlope;
                                } else e.x = (o ? t.xo : t.x) + r;
                            },
                            slope: 0,
                            touch: function(e) {
                                e.xTouched = !0;
                            },
                            touched: function(e) {
                                return e.xTouched;
                            },
                            untouch: function(e) {
                                e.xTouched = !1;
                            }
                        }, Wt = {
                            x: 0,
                            y: 1,
                            axis: "y",
                            distance: function(e, t, r, n) {
                                return (r ? e.yo : e.y) - (n ? t.yo : t.y);
                            },
                            interpolate: function(e, t, r, n) {
                                var o, i, a, s, l, u, c;
                                if (!n || n === this) return o = e.yo - t.yo, i = e.yo - r.yo, l = t.y - t.yo, u = r.y - r.yo, 0 === (c = (a = Math.abs(o)) + (s = Math.abs(i))) ? void (e.y = e.yo + (l + u) / 2) : void (e.y = e.yo + (l * s + u * a) / c);
                                o = n.distance(e, t, !0, !0), i = n.distance(e, r, !0, !0), l = n.distance(t, t, !1, !0), u = n.distance(r, r, !1, !0), 0 !== (c = (a = Math.abs(o)) + (s = Math.abs(i))) ? Wt.setRelative(e, e, (l * s + u * a) / c, n, !0) : Wt.setRelative(e, e, (l + u) / 2, n, !0);
                            },
                            normalSlope: 0,
                            setRelative: function(e, t, r, n, o) {
                                if (n && n !== this) {
                                    var i = o ? t.xo : t.x, a = o ? t.yo : t.y, s = i + r * n.x, l = a + r * n.y;
                                    e.y = l + n.normalSlope * (e.x - s);
                                } else e.y = (o ? t.yo : t.y) + r;
                            },
                            slope: Number.POSITIVE_INFINITY,
                            touch: function(e) {
                                e.yTouched = !0;
                            },
                            touched: function(e) {
                                return e.yTouched;
                            },
                            untouch: function(e) {
                                e.yTouched = !1;
                            }
                        };
                        function Xt(e, t) {
                            this.x = e, this.y = t, this.axis = void 0, this.slope = t / e, this.normalSlope = -e / t, Object.freeze(this);
                        }
                        function Yt(e, t) {
                            var r = Math.sqrt(e * e + t * t);
                            return t /= r, 1 === (e /= r) && 0 === t ? qt : 0 === e && 1 === t ? Wt : new Xt(e, t);
                        }
                        function Zt(e, t, r, n) {
                            this.x = this.xo = Math.round(64 * e) / 64, this.y = this.yo = Math.round(64 * t) / 64, this.lastPointOfContour = r, this.onCurve = n, this.prevPointOnContour = void 0, this.nextPointOnContour = void 0, this.xTouched = !1, this.yTouched = !1, Object.preventExtensions(this);
                        }
                        Object.freeze(qt), Object.freeze(Wt), Xt.prototype.distance = function(e, t, r, n) {
                            return this.x * qt.distance(e, t, r, n) + this.y * Wt.distance(e, t, r, n);
                        }, Xt.prototype.interpolate = function(e, t, r, n) {
                            var o, i, a, s, l, u, c;
                            a = n.distance(e, t, !0, !0), s = n.distance(e, r, !0, !0), o = n.distance(t, t, !1, !0), i = n.distance(r, r, !1, !0), 0 !== (c = (l = Math.abs(a)) + (u = Math.abs(s))) ? this.setRelative(e, e, (o * u + i * l) / c, n, !0) : this.setRelative(e, e, (o + i) / 2, n, !0);
                        }, Xt.prototype.setRelative = function(e, t, r, n, o) {
                            n = n || this;
                            var i = o ? t.xo : t.x, a = o ? t.yo : t.y, s = i + r * n.x, l = a + r * n.y, u = n.normalSlope, c = this.slope, d = e.x, f = e.y;
                            e.x = (c * d - u * s + l - f) / (c - u), e.y = c * (e.x - d) + f;
                        }, Xt.prototype.touch = function(e) {
                            e.xTouched = !0, e.yTouched = !0;
                        }, Zt.prototype.nextTouched = function(e) {
                            for(var t = this.nextPointOnContour; !e.touched(t) && t !== this;)t = t.nextPointOnContour;
                            return t;
                        }, Zt.prototype.prevTouched = function(e) {
                            for(var t = this.prevPointOnContour; !e.touched(t) && t !== this;)t = t.prevPointOnContour;
                            return t;
                        };
                        var Qt = Object.freeze(new Zt(0, 0)), Kt = {
                            cvCutIn: 17 / 16,
                            deltaBase: 9,
                            deltaShift: 0.125,
                            loop: 1,
                            minDis: 1,
                            autoFlip: !0
                        };
                        function Jt(e, t) {
                            switch(this.env = e, this.stack = [], this.prog = t, e){
                                case "glyf":
                                    this.zp0 = this.zp1 = this.zp2 = 1, this.rp0 = this.rp1 = this.rp2 = 0;
                                case "prep":
                                    this.fv = this.pv = this.dpv = qt, this.round = Ft;
                            }
                        }
                        function $t(e) {
                            for(var t = e.tZone = new Array(e.gZone.length), r = 0; r < t.length; r++)t[r] = new Zt(0, 0);
                        }
                        function er(e, t) {
                            var r, n = e.prog, o = e.ip, i = 1;
                            do {
                                if (88 === (r = n[++o])) i++;
                                else if (89 === r) i--;
                                else if (64 === r) o += n[o + 1] + 1;
                                else if (65 === r) o += 2 * n[o + 1] + 1;
                                else if (176 <= r && r <= 183) o += r - 176 + 1;
                                else if (184 <= r && r <= 191) o += 2 * (r - 184 + 1);
                                else if (t && 1 === i && 27 === r) break;
                            }while (0 < i)
                            e.ip = o;
                        }
                        function tr(e, t) {
                            M1.DEBUG && console.log(t.step, "SVTCA[" + e.axis + "]"), t.fv = t.pv = t.dpv = e;
                        }
                        function rr(e, t) {
                            M1.DEBUG && console.log(t.step, "SPVTCA[" + e.axis + "]"), t.pv = t.dpv = e;
                        }
                        function nr(e, t) {
                            M1.DEBUG && console.log(t.step, "SFVTCA[" + e.axis + "]"), t.fv = e;
                        }
                        function or(e, t) {
                            var r, n, o = t.stack, i = o.pop(), a = o.pop(), s = t.z2[i], l = t.z1[a];
                            M1.DEBUG && console.log("SPVTL[" + e + "]", i, a), n = e ? (r = s.y - l.y, l.x - s.x) : (r = l.x - s.x, l.y - s.y), t.pv = t.dpv = Yt(r, n);
                        }
                        function ir(e, t) {
                            var r, n, o = t.stack, i = o.pop(), a = o.pop(), s = t.z2[i], l = t.z1[a];
                            M1.DEBUG && console.log("SFVTL[" + e + "]", i, a), n = e ? (r = s.y - l.y, l.x - s.x) : (r = l.x - s.x, l.y - s.y), t.fv = Yt(r, n);
                        }
                        function ar(e) {
                            M1.DEBUG && console.log(e.step, "POP[]"), e.stack.pop();
                        }
                        function sr(e, t) {
                            var r = t.stack.pop(), n = t.z0[r], o = t.fv, i = t.pv;
                            M1.DEBUG && console.log(t.step, "MDAP[" + e + "]", r);
                            var a = i.distance(n, Qt);
                            e && (a = t.round(a)), o.setRelative(n, Qt, a, i), o.touch(n), t.rp0 = t.rp1 = r;
                        }
                        function lr(e, t) {
                            var r, n, o, i = t.z2, a = i.length - 2;
                            M1.DEBUG && console.log(t.step, "IUP[" + e.axis + "]");
                            for(var s = 0; s < a; s++)r = i[s], e.touched(r) || (n = r.prevTouched(e)) !== r && (n === (o = r.nextTouched(e)) && e.setRelative(r, r, e.distance(n, n, !1, !0), e, !0), e.interpolate(r, n, o, e));
                        }
                        function ur(e, t) {
                            for(var r = t.stack, n = e ? t.rp1 : t.rp2, o = (e ? t.z0 : t.z1)[n], i = t.fv, a = t.pv, s = t.loop, l = t.z2; s--;){
                                var u = r.pop(), c = l[u], d = a.distance(o, o, !1, !0);
                                i.setRelative(c, c, d, a), i.touch(c), M1.DEBUG && console.log(t.step, (1 < t.loop ? "loop " + (t.loop - s) + ": " : "") + "SHP[" + (e ? "rp1" : "rp2") + "]", u);
                            }
                            t.loop = 1;
                        }
                        function cr(e, t) {
                            var r = t.stack, n = e ? t.rp1 : t.rp2, o = (e ? t.z0 : t.z1)[n], i = t.fv, a = t.pv, s = r.pop(), l = t.z2[t.contours[s]], u = l;
                            M1.DEBUG && console.log(t.step, "SHC[" + e + "]", s);
                            for(var c = a.distance(o, o, !1, !0); u !== o && i.setRelative(u, u, c, a), (u = u.nextPointOnContour) !== l;);
                        }
                        function dr(e, t) {
                            var r, n, o = t.stack, i = e ? t.rp1 : t.rp2, a = (e ? t.z0 : t.z1)[i], s = t.fv, l = t.pv, u = o.pop();
                            switch(M1.DEBUG && console.log(t.step, "SHZ[" + e + "]", u), u){
                                case 0:
                                    r = t.tZone;
                                    break;
                                case 1:
                                    r = t.gZone;
                                    break;
                                default:
                                    throw new Error("Invalid zone");
                            }
                            for(var c = l.distance(a, a, !1, !0), d = r.length - 2, f = 0; f < d; f++)n = r[f], s.setRelative(n, n, c, l);
                        }
                        function fr(e, t) {
                            var r = t.stack, n = r.pop() / 64, o = r.pop(), i = t.z1[o], a = t.z0[t.rp0], s = t.fv, l = t.pv;
                            s.setRelative(i, a, n, l), s.touch(i), M1.DEBUG && console.log(t.step, "MSIRP[" + e + "]", n, o), t.rp1 = t.rp0, t.rp2 = o, e && (t.rp0 = o);
                        }
                        function hr(e, t) {
                            var r = t.stack, n = r.pop(), o = r.pop(), i = t.z0[o], a = t.fv, s = t.pv, l = t.cvt[n];
                            M1.DEBUG && console.log(t.step, "MIAP[" + e + "]", n, "(", l, ")", o);
                            var u = s.distance(i, Qt);
                            e && (Math.abs(u - l) < t.cvCutIn && (u = l), u = t.round(u)), a.setRelative(i, Qt, u, s), 0 === t.zp0 && (i.xo = i.x, i.yo = i.y), a.touch(i), t.rp0 = t.rp1 = o;
                        }
                        function pr(e, t) {
                            var r = t.stack, n = r.pop(), o = t.z2[n];
                            M1.DEBUG && console.log(t.step, "GC[" + e + "]", n), r.push(64 * t.dpv.distance(o, Qt, e, !1));
                        }
                        function yr(e, t) {
                            var r = t.stack, n = r.pop(), o = r.pop(), i = t.z1[n], a = t.z0[o], s = t.dpv.distance(a, i, e, e);
                            M1.DEBUG && console.log(t.step, "MD[" + e + "]", n, o, "->", s), t.stack.push(Math.round(64 * s));
                        }
                        function mr(e, t) {
                            var r = t.stack, n = r.pop(), o = t.fv, i = t.pv, a = t.ppem, s = t.deltaBase + 16 * (e - 1), l = t.deltaShift, u = t.z0;
                            M1.DEBUG && console.log(t.step, "DELTAP[" + e + "]", n, r);
                            for(var c = 0; c < n; c++){
                                var d = r.pop(), f = r.pop();
                                if (s + ((240 & f) >> 4) === a) {
                                    var h = (15 & f) - 8;
                                    0 <= h && h++, M1.DEBUG && console.log(t.step, "DELTAPFIX", d, "by", h * l);
                                    var p = u[d];
                                    o.setRelative(p, p, h * l, i);
                                }
                            }
                        }
                        function gr(e, t) {
                            var r = t.stack, n = r.pop();
                            M1.DEBUG && console.log(t.step, "ROUND[]"), r.push(64 * t.round(n / 64));
                        }
                        function vr(e, t) {
                            var r = t.stack, n = r.pop(), o = t.ppem, i = t.deltaBase + 16 * (e - 1), a = t.deltaShift;
                            M1.DEBUG && console.log(t.step, "DELTAC[" + e + "]", n, r);
                            for(var s = 0; s < n; s++){
                                var l = r.pop(), u = r.pop();
                                if (i + ((240 & u) >> 4) === o) {
                                    var c = (15 & u) - 8;
                                    0 <= c && c++;
                                    var d = c * a;
                                    M1.DEBUG && console.log(t.step, "DELTACFIX", l, "by", d), t.cvt[l] += d;
                                }
                            }
                        }
                        function br(e, t) {
                            var r, n, o = t.stack, i = o.pop(), a = o.pop(), s = t.z2[i], l = t.z1[a];
                            M1.DEBUG && console.log(t.step, "SDPVTL[" + e + "]", i, a), n = e ? (r = s.y - l.y, l.x - s.x) : (r = l.x - s.x, l.y - s.y), t.dpv = Yt(r, n);
                        }
                        function _r(e, t) {
                            var r = t.stack, n = t.prog, o = t.ip;
                            M1.DEBUG && console.log(t.step, "PUSHB[" + e + "]");
                            for(var i = 0; i < e; i++)r.push(n[++o]);
                            t.ip = o;
                        }
                        function xr(e, t) {
                            var r = t.ip, n = t.prog, o = t.stack;
                            M1.DEBUG && console.log(t.ip, "PUSHW[" + e + "]");
                            for(var i = 0; i < e; i++){
                                var a = n[++r] << 8 | n[++r];
                                32768 & a && (a = -(1 + (65535 ^ a))), o.push(a);
                            }
                            t.ip = r;
                        }
                        function wr(e, t, r, n, o, i) {
                            var a, s, l, u, c = i.stack, d = e && c.pop(), f = c.pop(), h = i.rp0, p = i.z0[h], y = i.z1[f], m = i.minDis, g = i.fv, v = i.dpv;
                            l = 0 <= (s = a = v.distance(y, p, !0, !0)) ? 1 : -1, s = Math.abs(s), e && (u = i.cvt[d], n && Math.abs(s - u) < i.cvCutIn && (s = u)), r && s < m && (s = m), n && (s = i.round(s)), g.setRelative(y, p, l * s, v), g.touch(y), M1.DEBUG && console.log(i.step, (e ? "MIRP[" : "MDRP[") + (t ? "M" : "m") + (r ? ">" : "_") + (n ? "R" : "_") + (0 === o ? "Gr" : 1 === o ? "Bl" : 2 === o ? "Wh" : "") + "]", e ? d + "(" + i.cvt[d] + "," + u + ")" : "", f, "(d =", a, "->", l * s, ")"), i.rp1 = i.rp0, i.rp2 = f, t && (i.rp0 = f);
                        }
                        Ut.prototype.exec = function(e, t) {
                            if ("number" != typeof t) throw new Error("Point size is not a number!");
                            if (!(2 < this._errorState)) {
                                var r = this.font, n = this._prepState;
                                if (!n || n.ppem !== t) {
                                    var o = this._fpgmState;
                                    if (!o) {
                                        Jt.prototype = Kt, (o = this._fpgmState = new Jt("fpgm", r.tables.fpgm)).funcs = [], o.font = r, M1.DEBUG && (console.log("---EXEC FPGM---"), o.step = -1);
                                        try {
                                            At(o);
                                        } catch (e) {
                                            return console.log("Hinting error in FPGM:" + e), void (this._errorState = 3);
                                        }
                                    }
                                    Jt.prototype = o, (n = this._prepState = new Jt("prep", r.tables.prep)).ppem = t;
                                    var i = r.tables.cvt;
                                    if (i) for(var a = n.cvt = new Array(i.length), s = t / r.unitsPerEm, l = 0; l < i.length; l++)a[l] = i[l] * s;
                                    else n.cvt = [];
                                    M1.DEBUG && (console.log("---EXEC PREP---"), n.step = -1);
                                    try {
                                        At(n);
                                    } catch (e) {
                                        this._errorState < 2 && console.log("Hinting error in PREP:" + e), this._errorState = 2;
                                    }
                                }
                                if (!(1 < this._errorState)) try {
                                    return Rt(e, n);
                                } catch (e) {
                                    return this._errorState < 1 && (console.log("Hinting error:" + e), console.log("Note: further hinting errors are silenced")), void (this._errorState = 1);
                                }
                            }
                        }, Rt = function(e, t) {
                            var r, n, o, i = t.ppem / t.font.unitsPerEm, a = i, s = e.components;
                            if (Jt.prototype = t, s) {
                                var l = t.font;
                                n = [], r = [];
                                for(var u = 0; u < s.length; u++){
                                    var c = s[u], d = l.glyphs.get(c.glyphIndex);
                                    o = new Jt("glyf", d.instructions), M1.DEBUG && (console.log("---EXEC COMP " + u + "---"), o.step = -1), Dt(d, o, i, a);
                                    for(var f = Math.round(c.dx * i), h = Math.round(c.dy * a), p = o.gZone, y = o.contours, m = 0; m < p.length; m++){
                                        var g = p[m];
                                        g.xTouched = g.yTouched = !1, g.xo = g.x = g.x + f, g.yo = g.y = g.y + h;
                                    }
                                    var v = n.length;
                                    n.push.apply(n, p);
                                    for(var b = 0; b < y.length; b++)r.push(y[b] + v);
                                }
                                e.instructions && !o.inhibitGridFit && ((o = new Jt("glyf", e.instructions)).gZone = o.z0 = o.z1 = o.z2 = n, o.contours = r, n.push(new Zt(0, 0), new Zt(Math.round(e.advanceWidth * i), 0)), M1.DEBUG && (console.log("---EXEC COMPOSITE---"), o.step = -1), At(o), n.length -= 2);
                            } else o = new Jt("glyf", e.instructions), M1.DEBUG && (console.log("---EXEC GLYPH---"), o.step = -1), Dt(e, o, i, a), n = o.gZone;
                            return n;
                        }, Dt = function(e, t, r, n) {
                            for(var o, i, a, s = e.points || [], l = s.length, u = t.gZone = t.z0 = t.z1 = t.z2 = [], c = t.contours = [], d = 0; d < l; d++)o = s[d], u[d] = new Zt(o.x * r, o.y * n, o.lastPointOfContour, o.onCurve);
                            for(var f = 0; f < l; f++)o = u[f], i || (i = o, c.push(f)), o.lastPointOfContour ? ((o.nextPointOnContour = i).prevPointOnContour = o, i = void 0) : (a = u[f + 1], (o.nextPointOnContour = a).prevPointOnContour = o);
                            if (!t.inhibitGridFit) {
                                if (M1.DEBUG) {
                                    console.log("PROCESSING GLYPH", t.stack);
                                    for(var h = 0; h < l; h++)console.log(h, u[h].x, u[h].y);
                                }
                                if (u.push(new Zt(0, 0), new Zt(Math.round(e.advanceWidth * r), 0)), At(t), u.length -= 2, M1.DEBUG) {
                                    console.log("FINISHED GLYPH", t.stack);
                                    for(var p = 0; p < l; p++)console.log(p, u[p].x, u[p].y);
                                }
                            }
                        }, At = function(e) {
                            var t = e.prog;
                            if (t) {
                                var r, n = t.length;
                                for(e.ip = 0; e.ip < n; e.ip++){
                                    if (M1.DEBUG && e.step++, !(r = kt[t[e.ip]])) throw new Error("unknown instruction: 0x" + Number(t[e.ip]).toString(16));
                                    r(e);
                                }
                            }
                        }, kt = [
                            tr.bind(void 0, Wt),
                            tr.bind(void 0, qt),
                            rr.bind(void 0, Wt),
                            rr.bind(void 0, qt),
                            nr.bind(void 0, Wt),
                            nr.bind(void 0, qt),
                            or.bind(void 0, 0),
                            or.bind(void 0, 1),
                            ir.bind(void 0, 0),
                            ir.bind(void 0, 1),
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "SPVFS[]", r, n), e.pv = e.dpv = Yt(n, r);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "SPVFS[]", r, n), e.fv = Yt(n, r);
                            },
                            function(e) {
                                var t = e.stack, r = e.pv;
                                M1.DEBUG && console.log(e.step, "GPV[]"), t.push(16384 * r.x), t.push(16384 * r.y);
                            },
                            function(e) {
                                var t = e.stack, r = e.fv;
                                M1.DEBUG && console.log(e.step, "GFV[]"), t.push(16384 * r.x), t.push(16384 * r.y);
                            },
                            function(e) {
                                e.fv = e.pv, M1.DEBUG && console.log(e.step, "SFVTPV[]");
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop(), o = t.pop(), i = t.pop(), a = t.pop(), s = e.z0, l = e.z1, u = s[r], c = s[n], d = l[o], f = l[i], h = e.z2[a];
                                M1.DEBUG && console.log("ISECT[], ", r, n, o, i, a);
                                var p = u.x, y = u.y, m = c.x, g = c.y, v = d.x, b = d.y, _ = f.x, x = f.y, w = (p - m) * (b - x) - (y - g) * (v - _), S = p * g - y * m, j = v * x - b * _;
                                h.x = (S * (v - _) - j * (p - m)) / w, h.y = (S * (b - x) - j * (y - g)) / w;
                            },
                            function(e) {
                                e.rp0 = e.stack.pop(), M1.DEBUG && console.log(e.step, "SRP0[]", e.rp0);
                            },
                            function(e) {
                                e.rp1 = e.stack.pop(), M1.DEBUG && console.log(e.step, "SRP1[]", e.rp1);
                            },
                            function(e) {
                                e.rp2 = e.stack.pop(), M1.DEBUG && console.log(e.step, "SRP2[]", e.rp2);
                            },
                            function(e) {
                                var t = e.stack.pop();
                                switch(M1.DEBUG && console.log(e.step, "SZP0[]", t), e.zp0 = t){
                                    case 0:
                                        e.tZone || $t(e), e.z0 = e.tZone;
                                        break;
                                    case 1:
                                        e.z0 = e.gZone;
                                        break;
                                    default:
                                        throw new Error("Invalid zone pointer");
                                }
                            },
                            function(e) {
                                var t = e.stack.pop();
                                switch(M1.DEBUG && console.log(e.step, "SZP1[]", t), e.zp1 = t){
                                    case 0:
                                        e.tZone || $t(e), e.z1 = e.tZone;
                                        break;
                                    case 1:
                                        e.z1 = e.gZone;
                                        break;
                                    default:
                                        throw new Error("Invalid zone pointer");
                                }
                            },
                            function(e) {
                                var t = e.stack.pop();
                                switch(M1.DEBUG && console.log(e.step, "SZP2[]", t), e.zp2 = t){
                                    case 0:
                                        e.tZone || $t(e), e.z2 = e.tZone;
                                        break;
                                    case 1:
                                        e.z2 = e.gZone;
                                        break;
                                    default:
                                        throw new Error("Invalid zone pointer");
                                }
                            },
                            function(e) {
                                var t = e.stack.pop();
                                switch(M1.DEBUG && console.log(e.step, "SZPS[]", t), e.zp0 = e.zp1 = e.zp2 = t, t){
                                    case 0:
                                        e.tZone || $t(e), e.z0 = e.z1 = e.z2 = e.tZone;
                                        break;
                                    case 1:
                                        e.z0 = e.z1 = e.z2 = e.gZone;
                                        break;
                                    default:
                                        throw new Error("Invalid zone pointer");
                                }
                            },
                            function(e) {
                                e.loop = e.stack.pop(), M1.DEBUG && console.log(e.step, "SLOOP[]", e.loop);
                            },
                            function(e) {
                                M1.DEBUG && console.log(e.step, "RTG[]"), e.round = Ft;
                            },
                            function(e) {
                                M1.DEBUG && console.log(e.step, "RTHG[]"), e.round = Gt;
                            },
                            function(e) {
                                var t = e.stack.pop();
                                M1.DEBUG && console.log(e.step, "SMD[]", t), e.minDis = t / 64;
                            },
                            function(e) {
                                M1.DEBUG && console.log(e.step, "ELSE[]"), er(e, !1);
                            },
                            function(e) {
                                var t = e.stack.pop();
                                M1.DEBUG && console.log(e.step, "JMPR[]", t), e.ip += t - 1;
                            },
                            function(e) {
                                var t = e.stack.pop();
                                M1.DEBUG && console.log(e.step, "SCVTCI[]", t), e.cvCutIn = t / 64;
                            },
                            void 0,
                            void 0,
                            function(e) {
                                var t = e.stack;
                                M1.DEBUG && console.log(e.step, "DUP[]"), t.push(t[t.length - 1]);
                            },
                            ar,
                            function(e) {
                                M1.DEBUG && console.log(e.step, "CLEAR[]"), e.stack.length = 0;
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "SWAP[]"), t.push(r), t.push(n);
                            },
                            function(e) {
                                var t = e.stack;
                                M1.DEBUG && console.log(e.step, "DEPTH[]"), t.push(t.length);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "CINDEX[]", r), t.push(t[t.length - r]);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "MINDEX[]", r), t.push(t.splice(t.length - r, 1)[0]);
                            },
                            void 0,
                            void 0,
                            void 0,
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "LOOPCALL[]", r, n);
                                var o = e.ip, i = e.prog;
                                e.prog = e.funcs[r];
                                for(var a = 0; a < n; a++)At(e), M1.DEBUG && console.log(++e.step, a + 1 < n ? "next loopcall" : "done loopcall", a);
                                e.ip = o, e.prog = i;
                            },
                            function(e) {
                                var t = e.stack.pop();
                                M1.DEBUG && console.log(e.step, "CALL[]", t);
                                var r = e.ip, n = e.prog;
                                e.prog = e.funcs[t], At(e), e.ip = r, e.prog = n, M1.DEBUG && console.log(++e.step, "returning from", t);
                            },
                            function(e) {
                                if ("fpgm" !== e.env) throw new Error("FDEF not allowed here");
                                var t = e.stack, r = e.prog, n = e.ip, o = t.pop(), i = n;
                                for(M1.DEBUG && console.log(e.step, "FDEF[]", o); 45 !== r[++n];);
                                e.ip = n, e.funcs[o] = r.slice(i + 1, n);
                            },
                            void 0,
                            sr.bind(void 0, 0),
                            sr.bind(void 0, 1),
                            lr.bind(void 0, Wt),
                            lr.bind(void 0, qt),
                            ur.bind(void 0, 0),
                            ur.bind(void 0, 1),
                            cr.bind(void 0, 0),
                            cr.bind(void 0, 1),
                            dr.bind(void 0, 0),
                            dr.bind(void 0, 1),
                            function(e) {
                                for(var t = e.stack, r = e.loop, n = e.fv, o = t.pop() / 64, i = e.z2; r--;){
                                    var a = t.pop(), s = i[a];
                                    M1.DEBUG && console.log(e.step, (1 < e.loop ? "loop " + (e.loop - r) + ": " : "") + "SHPIX[]", a, o), n.setRelative(s, s, o), n.touch(s);
                                }
                                e.loop = 1;
                            },
                            function(e) {
                                for(var t = e.stack, r = e.rp1, n = e.rp2, o = e.loop, i = e.z0[r], a = e.z1[n], s = e.fv, l = e.dpv, u = e.z2; o--;){
                                    var c = t.pop(), d = u[c];
                                    M1.DEBUG && console.log(e.step, (1 < e.loop ? "loop " + (e.loop - o) + ": " : "") + "IP[]", c, r, "<->", n), s.interpolate(d, i, a, l), s.touch(d);
                                }
                                e.loop = 1;
                            },
                            fr.bind(void 0, 0),
                            fr.bind(void 0, 1),
                            function(e) {
                                for(var t = e.stack, r = e.rp0, n = e.z0[r], o = e.loop, i = e.fv, a = e.pv, s = e.z1; o--;){
                                    var l = t.pop(), u = s[l];
                                    M1.DEBUG && console.log(e.step, (1 < e.loop ? "loop " + (e.loop - o) + ": " : "") + "ALIGNRP[]", l), i.setRelative(u, n, 0, a), i.touch(u);
                                }
                                e.loop = 1;
                            },
                            function(e) {
                                M1.DEBUG && console.log(e.step, "RTDG[]"), e.round = Bt;
                            },
                            hr.bind(void 0, 0),
                            hr.bind(void 0, 1),
                            function(e) {
                                var t = e.prog, r = e.ip, n = e.stack, o = t[++r];
                                M1.DEBUG && console.log(e.step, "NPUSHB[]", o);
                                for(var i = 0; i < o; i++)n.push(t[++r]);
                                e.ip = r;
                            },
                            function(e) {
                                var t = e.ip, r = e.prog, n = e.stack, o = r[++t];
                                M1.DEBUG && console.log(e.step, "NPUSHW[]", o);
                                for(var i = 0; i < o; i++){
                                    var a = r[++t] << 8 | r[++t];
                                    32768 & a && (a = -(1 + (65535 ^ a))), n.push(a);
                                }
                                e.ip = t;
                            },
                            function(e) {
                                var t = e.stack, r = e.store;
                                r = r || (e.store = []);
                                var n = t.pop(), o = t.pop();
                                M1.DEBUG && console.log(e.step, "WS", n, o), r[o] = n;
                            },
                            function(e) {
                                var t = e.stack, r = e.store, n = t.pop();
                                M1.DEBUG && console.log(e.step, "RS", n);
                                var o = r && r[n] || 0;
                                t.push(o);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "WCVTP", r, n), e.cvt[n] = r / 64;
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "RCVT", r), t.push(64 * e.cvt[r]);
                            },
                            pr.bind(void 0, 0),
                            pr.bind(void 0, 1),
                            void 0,
                            yr.bind(void 0, 0),
                            yr.bind(void 0, 1),
                            function(e) {
                                M1.DEBUG && console.log(e.step, "MPPEM[]"), e.stack.push(e.ppem);
                            },
                            void 0,
                            function(e) {
                                M1.DEBUG && console.log(e.step, "FLIPON[]"), e.autoFlip = !0;
                            },
                            void 0,
                            void 0,
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "LT[]", r, n), t.push(n < r ? 1 : 0);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "LTEQ[]", r, n), t.push(n <= r ? 1 : 0);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "GT[]", r, n), t.push(r < n ? 1 : 0);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "GTEQ[]", r, n), t.push(r <= n ? 1 : 0);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "EQ[]", r, n), t.push(r === n ? 1 : 0);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "NEQ[]", r, n), t.push(r !== n ? 1 : 0);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "ODD[]", r), t.push(Math.trunc(r) % 2 ? 1 : 0);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "EVEN[]", r), t.push(Math.trunc(r) % 2 ? 0 : 1);
                            },
                            function(e) {
                                var t = e.stack.pop();
                                M1.DEBUG && console.log(e.step, "IF[]", t), t || (er(e, !0), M1.DEBUG && console.log(e.step, "EIF[]"));
                            },
                            function(e) {
                                M1.DEBUG && console.log(e.step, "EIF[]");
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "AND[]", r, n), t.push(r && n ? 1 : 0);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "OR[]", r, n), t.push(r || n ? 1 : 0);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "NOT[]", r), t.push(r ? 0 : 1);
                            },
                            mr.bind(void 0, 1),
                            function(e) {
                                var t = e.stack.pop();
                                M1.DEBUG && console.log(e.step, "SDB[]", t), e.deltaBase = t;
                            },
                            function(e) {
                                var t = e.stack.pop();
                                M1.DEBUG && console.log(e.step, "SDS[]", t), e.deltaShift = Math.pow(0.5, t);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "ADD[]", r, n), t.push(n + r);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "SUB[]", r, n), t.push(n - r);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "DIV[]", r, n), t.push(64 * n / r);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "MUL[]", r, n), t.push(n * r / 64);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "ABS[]", r), t.push(Math.abs(r));
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "NEG[]", r), t.push(-r);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "FLOOR[]", r), t.push(64 * Math.floor(r / 64));
                            },
                            function(e) {
                                var t = e.stack, r = t.pop();
                                M1.DEBUG && console.log(e.step, "CEILING[]", r), t.push(64 * Math.ceil(r / 64));
                            },
                            gr.bind(void 0, 0),
                            gr.bind(void 0, 1),
                            gr.bind(void 0, 2),
                            gr.bind(void 0, 3),
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "WCVTF[]", r, n), e.cvt[n] = r * e.ppem / e.font.unitsPerEm;
                            },
                            mr.bind(void 0, 2),
                            mr.bind(void 0, 3),
                            vr.bind(void 0, 1),
                            vr.bind(void 0, 2),
                            vr.bind(void 0, 3),
                            function(e) {
                                var t, r = e.stack.pop();
                                switch(M1.DEBUG && console.log(e.step, "SROUND[]", r), e.round = Ht, 192 & r){
                                    case 0:
                                        t = 0.5;
                                        break;
                                    case 64:
                                        t = 1;
                                        break;
                                    case 128:
                                        t = 2;
                                        break;
                                    default:
                                        throw new Error("invalid SROUND value");
                                }
                                switch(e.srPeriod = t, 48 & r){
                                    case 0:
                                        e.srPhase = 0;
                                        break;
                                    case 16:
                                        e.srPhase = 0.25 * t;
                                        break;
                                    case 32:
                                        e.srPhase = 0.5 * t;
                                        break;
                                    case 48:
                                        e.srPhase = 0.75 * t;
                                        break;
                                    default:
                                        throw new Error("invalid SROUND value");
                                }
                                r &= 15, e.srThreshold = 0 === r ? 0 : (r / 8 - 0.5) * t;
                            },
                            function(e) {
                                var t, r = e.stack.pop();
                                switch(M1.DEBUG && console.log(e.step, "S45ROUND[]", r), e.round = Ht, 192 & r){
                                    case 0:
                                        t = Math.sqrt(2) / 2;
                                        break;
                                    case 64:
                                        t = Math.sqrt(2);
                                        break;
                                    case 128:
                                        t = 2 * Math.sqrt(2);
                                        break;
                                    default:
                                        throw new Error("invalid S45ROUND value");
                                }
                                switch(e.srPeriod = t, 48 & r){
                                    case 0:
                                        e.srPhase = 0;
                                        break;
                                    case 16:
                                        e.srPhase = 0.25 * t;
                                        break;
                                    case 32:
                                        e.srPhase = 0.5 * t;
                                        break;
                                    case 48:
                                        e.srPhase = 0.75 * t;
                                        break;
                                    default:
                                        throw new Error("invalid S45ROUND value");
                                }
                                r &= 15, e.srThreshold = 0 === r ? 0 : (r / 8 - 0.5) * t;
                            },
                            void 0,
                            void 0,
                            function(e) {
                                M1.DEBUG && console.log(e.step, "ROFF[]"), e.round = Nt;
                            },
                            void 0,
                            function(e) {
                                M1.DEBUG && console.log(e.step, "RUTG[]"), e.round = Vt;
                            },
                            function(e) {
                                M1.DEBUG && console.log(e.step, "RDTG[]"), e.round = zt;
                            },
                            ar,
                            ar,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            function(e) {
                                var t = e.stack.pop();
                                M1.DEBUG && console.log(e.step, "SCANCTRL[]", t);
                            },
                            br.bind(void 0, 0),
                            br.bind(void 0, 1),
                            function(e) {
                                var t = e.stack, r = t.pop(), n = 0;
                                M1.DEBUG && console.log(e.step, "GETINFO[]", r), 1 & r && (n = 35), 32 & r && (n |= 4096), t.push(n);
                            },
                            void 0,
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop(), o = t.pop();
                                M1.DEBUG && console.log(e.step, "ROLL[]"), t.push(n), t.push(r), t.push(o);
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "MAX[]", r, n), t.push(Math.max(n, r));
                            },
                            function(e) {
                                var t = e.stack, r = t.pop(), n = t.pop();
                                M1.DEBUG && console.log(e.step, "MIN[]", r, n), t.push(Math.min(n, r));
                            },
                            function(e) {
                                var t = e.stack.pop();
                                M1.DEBUG && console.log(e.step, "SCANTYPE[]", t);
                            },
                            function(e) {
                                var t = e.stack.pop(), r = e.stack.pop();
                                switch(M1.DEBUG && console.log(e.step, "INSTCTRL[]", t, r), t){
                                    case 1:
                                        return void (e.inhibitGridFit = !!r);
                                    case 2:
                                        return void (e.ignoreCvt = !!r);
                                    default:
                                        throw new Error("invalid INSTCTRL[] selector");
                                }
                            },
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            void 0,
                            _r.bind(void 0, 1),
                            _r.bind(void 0, 2),
                            _r.bind(void 0, 3),
                            _r.bind(void 0, 4),
                            _r.bind(void 0, 5),
                            _r.bind(void 0, 6),
                            _r.bind(void 0, 7),
                            _r.bind(void 0, 8),
                            xr.bind(void 0, 1),
                            xr.bind(void 0, 2),
                            xr.bind(void 0, 3),
                            xr.bind(void 0, 4),
                            xr.bind(void 0, 5),
                            xr.bind(void 0, 6),
                            xr.bind(void 0, 7),
                            xr.bind(void 0, 8),
                            wr.bind(void 0, 0, 0, 0, 0, 0),
                            wr.bind(void 0, 0, 0, 0, 0, 1),
                            wr.bind(void 0, 0, 0, 0, 0, 2),
                            wr.bind(void 0, 0, 0, 0, 0, 3),
                            wr.bind(void 0, 0, 0, 0, 1, 0),
                            wr.bind(void 0, 0, 0, 0, 1, 1),
                            wr.bind(void 0, 0, 0, 0, 1, 2),
                            wr.bind(void 0, 0, 0, 0, 1, 3),
                            wr.bind(void 0, 0, 0, 1, 0, 0),
                            wr.bind(void 0, 0, 0, 1, 0, 1),
                            wr.bind(void 0, 0, 0, 1, 0, 2),
                            wr.bind(void 0, 0, 0, 1, 0, 3),
                            wr.bind(void 0, 0, 0, 1, 1, 0),
                            wr.bind(void 0, 0, 0, 1, 1, 1),
                            wr.bind(void 0, 0, 0, 1, 1, 2),
                            wr.bind(void 0, 0, 0, 1, 1, 3),
                            wr.bind(void 0, 0, 1, 0, 0, 0),
                            wr.bind(void 0, 0, 1, 0, 0, 1),
                            wr.bind(void 0, 0, 1, 0, 0, 2),
                            wr.bind(void 0, 0, 1, 0, 0, 3),
                            wr.bind(void 0, 0, 1, 0, 1, 0),
                            wr.bind(void 0, 0, 1, 0, 1, 1),
                            wr.bind(void 0, 0, 1, 0, 1, 2),
                            wr.bind(void 0, 0, 1, 0, 1, 3),
                            wr.bind(void 0, 0, 1, 1, 0, 0),
                            wr.bind(void 0, 0, 1, 1, 0, 1),
                            wr.bind(void 0, 0, 1, 1, 0, 2),
                            wr.bind(void 0, 0, 1, 1, 0, 3),
                            wr.bind(void 0, 0, 1, 1, 1, 0),
                            wr.bind(void 0, 0, 1, 1, 1, 1),
                            wr.bind(void 0, 0, 1, 1, 1, 2),
                            wr.bind(void 0, 0, 1, 1, 1, 3),
                            wr.bind(void 0, 1, 0, 0, 0, 0),
                            wr.bind(void 0, 1, 0, 0, 0, 1),
                            wr.bind(void 0, 1, 0, 0, 0, 2),
                            wr.bind(void 0, 1, 0, 0, 0, 3),
                            wr.bind(void 0, 1, 0, 0, 1, 0),
                            wr.bind(void 0, 1, 0, 0, 1, 1),
                            wr.bind(void 0, 1, 0, 0, 1, 2),
                            wr.bind(void 0, 1, 0, 0, 1, 3),
                            wr.bind(void 0, 1, 0, 1, 0, 0),
                            wr.bind(void 0, 1, 0, 1, 0, 1),
                            wr.bind(void 0, 1, 0, 1, 0, 2),
                            wr.bind(void 0, 1, 0, 1, 0, 3),
                            wr.bind(void 0, 1, 0, 1, 1, 0),
                            wr.bind(void 0, 1, 0, 1, 1, 1),
                            wr.bind(void 0, 1, 0, 1, 1, 2),
                            wr.bind(void 0, 1, 0, 1, 1, 3),
                            wr.bind(void 0, 1, 1, 0, 0, 0),
                            wr.bind(void 0, 1, 1, 0, 0, 1),
                            wr.bind(void 0, 1, 1, 0, 0, 2),
                            wr.bind(void 0, 1, 1, 0, 0, 3),
                            wr.bind(void 0, 1, 1, 0, 1, 0),
                            wr.bind(void 0, 1, 1, 0, 1, 1),
                            wr.bind(void 0, 1, 1, 0, 1, 2),
                            wr.bind(void 0, 1, 1, 0, 1, 3),
                            wr.bind(void 0, 1, 1, 1, 0, 0),
                            wr.bind(void 0, 1, 1, 1, 0, 1),
                            wr.bind(void 0, 1, 1, 1, 0, 2),
                            wr.bind(void 0, 1, 1, 1, 0, 3),
                            wr.bind(void 0, 1, 1, 1, 1, 0),
                            wr.bind(void 0, 1, 1, 1, 1, 1),
                            wr.bind(void 0, 1, 1, 1, 1, 2),
                            wr.bind(void 0, 1, 1, 1, 1, 3)
                        ];
                        var Sr = Array.from || function(e) {
                            return e.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]?|[^\uD800-\uDFFF]|./g) || [];
                        };
                        function jr(e) {
                            (e = e || {
                            }).empty || (Et(e.familyName, "When creating a new Font object, familyName is required."), Et(e.styleName, "When creating a new Font object, styleName is required."), Et(e.unitsPerEm, "When creating a new Font object, unitsPerEm is required."), Et(e.ascender, "When creating a new Font object, ascender is required."), Et(e.descender, "When creating a new Font object, descender is required."), Et(e.descender < 0, "Descender should be negative (e.g. -512)."), this.names = {
                                fontFamily: {
                                    en: e.familyName || " "
                                },
                                fontSubfamily: {
                                    en: e.styleName || " "
                                },
                                fullName: {
                                    en: e.fullName || e.familyName + " " + e.styleName
                                },
                                postScriptName: {
                                    en: e.postScriptName || (e.familyName + e.styleName).replace(/\s/g, "")
                                },
                                designer: {
                                    en: e.designer || " "
                                },
                                designerURL: {
                                    en: e.designerURL || " "
                                },
                                manufacturer: {
                                    en: e.manufacturer || " "
                                },
                                manufacturerURL: {
                                    en: e.manufacturerURL || " "
                                },
                                license: {
                                    en: e.license || " "
                                },
                                licenseURL: {
                                    en: e.licenseURL || " "
                                },
                                version: {
                                    en: e.version || "Version 0.1"
                                },
                                description: {
                                    en: e.description || " "
                                },
                                copyright: {
                                    en: e.copyright || " "
                                },
                                trademark: {
                                    en: e.trademark || " "
                                }
                            }, this.unitsPerEm = e.unitsPerEm || 1000, this.ascender = e.ascender, this.descender = e.descender, this.createdTimestamp = e.createdTimestamp, this.tables = {
                                os2: {
                                    usWeightClass: e.weightClass || this.usWeightClasses.MEDIUM,
                                    usWidthClass: e.widthClass || this.usWidthClasses.MEDIUM,
                                    fsSelection: e.fsSelection || this.fsSelectionValues.REGULAR
                                }
                            }), this.supported = !0, this.glyphs = new _e.GlyphSet(this, e.glyphs || []), this.encoding = new fe(this), this.position = new xt(this), this.substitution = new wt(this), this.tables = this.tables || {
                            }, Object.defineProperty(this, "hinting", {
                                get: function() {
                                    return this._hinting ? this._hinting : "truetype" === this.outlinesFormat ? this._hinting = new Ut(this) : void 0;
                                }
                            });
                        }
                        function Mr(e, t) {
                            var r = JSON.stringify(e), n = 256;
                            for(var o in t){
                                var i = parseInt(o);
                                if (i && !(i < 256)) {
                                    if (JSON.stringify(t[o]) === r) return i;
                                    n <= i && (n = i + 1);
                                }
                            }
                            return t[n] = e, n;
                        }
                        function Er(e, t, r, n) {
                            for(var o = [
                                {
                                    name: "nameID_" + e,
                                    type: "USHORT",
                                    value: Mr(t.name, n)
                                },
                                {
                                    name: "flags_" + e,
                                    type: "USHORT",
                                    value: 0
                                }
                            ], i = 0; i < r.length; ++i){
                                var a = r[i].tag;
                                o.push({
                                    name: "axis_" + e + " " + a,
                                    type: "FIXED",
                                    value: t.coordinates[a] << 16
                                });
                            }
                            return o;
                        }
                        function Tr(e, t, r, n) {
                            var o = {
                            }, i = new ae.Parser(e, t);
                            o.name = n[i.parseUShort()] || {
                            }, i.skip("uShort", 1), o.coordinates = {
                            };
                            for(var a = 0; a < r.length; ++a)o.coordinates[r[a].tag] = i.parseFixed();
                            return o;
                        }
                        jr.prototype.hasChar = function(e) {
                            return null !== this.encoding.charToGlyphIndex(e);
                        }, jr.prototype.charToGlyphIndex = function(e) {
                            return this.encoding.charToGlyphIndex(e);
                        }, jr.prototype.charToGlyph = function(e) {
                            var t = this.charToGlyphIndex(e), r = this.glyphs.get(t);
                            return r = r || this.glyphs.get(0);
                        }, jr.prototype.stringToGlyphs = function(e, t) {
                            t = t || this.defaultRenderOptions;
                            for(var r = Sr(e), n = [], o = 0; o < r.length; o += 1){
                                var i = r[o];
                                n.push(this.charToGlyphIndex(i));
                            }
                            var a = n.length;
                            if (t.features) {
                                var s = t.script || this.substitution.getDefaultScriptName(), l = [];
                                t.features.liga && (l = l.concat(this.substitution.getFeature("liga", s, t.language))), t.features.rlig && (l = l.concat(this.substitution.getFeature("rlig", s, t.language)));
                                for(var u = 0; u < a; u += 1)for(var c = 0; c < l.length; c++){
                                    for(var d = l[c], f = d.sub, h = f.length, p = 0; p < h && f[p] === n[u + p];)p++;
                                    p === h && (n.splice(u, h, d.by), a = a - h + 1);
                                }
                            }
                            for(var y = new Array(a), m = this.glyphs.get(0), g = 0; g < a; g += 1)y[g] = this.glyphs.get(n[g]) || m;
                            return y;
                        }, jr.prototype.nameToGlyphIndex = function(e) {
                            return this.glyphNames.nameToGlyphIndex(e);
                        }, jr.prototype.nameToGlyph = function(e) {
                            var t = this.nameToGlyphIndex(e), r = this.glyphs.get(t);
                            return r = r || this.glyphs.get(0);
                        }, jr.prototype.glyphIndexToName = function(e) {
                            return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(e) : "";
                        }, jr.prototype.getKerningValue = function(e, t) {
                            e = e.index || e, t = t.index || t;
                            var r = this.position.defaultKerningTables;
                            return r ? this.position.getKerningValue(r, e, t) : this.kerningPairs[e + "," + t] || 0;
                        }, jr.prototype.defaultRenderOptions = {
                            kerning: !0,
                            features: {
                                liga: !0,
                                rlig: !0
                            }
                        }, jr.prototype.forEachGlyph = function(e, t, r, n, o, i) {
                            t = void 0 !== t ? t : 0, r = void 0 !== r ? r : 0, n = void 0 !== n ? n : 72, o = o || this.defaultRenderOptions;
                            var a, s = 1 / this.unitsPerEm * n, l = this.stringToGlyphs(e, o);
                            if (o.kerning) {
                                var u = o.script || this.position.getDefaultScriptName();
                                a = this.position.getKerningTables(u, o.language);
                            }
                            for(var c = 0; c < l.length; c += 1){
                                var d = l[c];
                                if (i.call(this, d, t, r, n, o), d.advanceWidth && (t += d.advanceWidth * s), o.kerning && c < l.length - 1) t += (a ? this.position.getKerningValue(a, d.index, l[c + 1].index) : this.getKerningValue(d, l[c + 1])) * s;
                                o.letterSpacing ? t += o.letterSpacing * n : o.tracking && (t += o.tracking / 1000 * n);
                            }
                            return t;
                        }, jr.prototype.getPath = function(e294, t191, r143, n79, i) {
                            var a = new D1;
                            return this.forEachGlyph(e294, t191, r143, n79, i, function(e, t, r, n) {
                                var o = e.getPath(t, r, n, i, this);
                                a.extend(o);
                            }), a;
                        }, jr.prototype.getPaths = function(e295, t192, r144, n80, i) {
                            var a = [];
                            return this.forEachGlyph(e295, t192, r144, n80, i, function(e, t, r, n) {
                                var o = e.getPath(t, r, n, i, this);
                                a.push(o);
                            }), a;
                        }, jr.prototype.getAdvanceWidth = function(e, t, r) {
                            return this.forEachGlyph(e, 0, 0, t, r, function() {
                            });
                        }, jr.prototype.draw = function(e, t, r, n, o, i) {
                            this.getPath(t, r, n, o, i).draw(e);
                        }, jr.prototype.drawPoints = function(o, e296, t193, r145, n81, i) {
                            this.forEachGlyph(e296, t193, r145, n81, i, function(e, t, r, n) {
                                e.drawPoints(o, t, r, n);
                            });
                        }, jr.prototype.drawMetrics = function(o, e297, t194, r146, n82, i) {
                            this.forEachGlyph(e297, t194, r146, n82, i, function(e, t, r, n) {
                                e.drawMetrics(o, t, r, n);
                            });
                        }, jr.prototype.getEnglishName = function(e) {
                            var t = this.names[e];
                            if (t) return t.en;
                        }, jr.prototype.validate = function() {
                            var r = this;
                            function e298(e) {
                                var t = r.getEnglishName(e);
                                t && t.trim().length;
                            }
                            e298("fontFamily"), e298("weightName"), e298("manufacturer"), e298("copyright"), e298("version"), this.unitsPerEm;
                        }, jr.prototype.toTables = function() {
                            return mt.fontToTable(this);
                        }, jr.prototype.toBuffer = function() {
                            return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."), this.toArrayBuffer();
                        }, jr.prototype.toArrayBuffer = function() {
                            for(var e = this.toTables().encode(), t = new ArrayBuffer(e.length), r = new Uint8Array(t), n = 0; n < e.length; n++)r[n] = e[n];
                            return t;
                        }, jr.prototype.download = function(t195) {
                            var e299 = this.getEnglishName("fontFamily"), r147 = this.getEnglishName("fontSubfamily");
                            t195 = t195 || e299.replace(/\s/g, "") + "-" + r147 + ".otf";
                            var o = this.toArrayBuffer();
                            if ("undefined" != typeof window) window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestFileSystem(window.TEMPORARY, o.byteLength, function(e300) {
                                e300.root.getFile(t195, {
                                    create: !0
                                }, function(n) {
                                    n.createWriter(function(e) {
                                        var t = new DataView(o), r = new Blob([
                                            t
                                        ], {
                                            type: "font/opentype"
                                        });
                                        e.write(r), e.addEventListener("writeend", function() {
                                            location.href = n.toURL();
                                        }, !1);
                                    });
                                });
                            }, function(e) {
                                throw new Error(e.name + ": " + e.message);
                            });
                            else {
                                var n83 = Br("fs"), i = function(e) {
                                    for(var t = new Fr(e.byteLength), r = new Uint8Array(e), n = 0; n < t.length; ++n)t[n] = r[n];
                                    return t;
                                }(o);
                                n83.writeFileSync(t195, i);
                            }
                        }, jr.prototype.fsSelectionValues = {
                            ITALIC: 1,
                            UNDERSCORE: 2,
                            NEGATIVE: 4,
                            OUTLINED: 8,
                            STRIKEOUT: 16,
                            BOLD: 32,
                            REGULAR: 64,
                            USER_TYPO_METRICS: 128,
                            WWS: 256,
                            OBLIQUE: 512
                        }, jr.prototype.usWidthClasses = {
                            ULTRA_CONDENSED: 1,
                            EXTRA_CONDENSED: 2,
                            CONDENSED: 3,
                            SEMI_CONDENSED: 4,
                            MEDIUM: 5,
                            SEMI_EXPANDED: 6,
                            EXPANDED: 7,
                            EXTRA_EXPANDED: 8,
                            ULTRA_EXPANDED: 9
                        }, jr.prototype.usWeightClasses = {
                            THIN: 100,
                            EXTRA_LIGHT: 200,
                            LIGHT: 300,
                            NORMAL: 400,
                            MEDIUM: 500,
                            SEMI_BOLD: 600,
                            BOLD: 700,
                            EXTRA_BOLD: 800,
                            BLACK: 900
                        };
                        var Or = {
                            make: function(e, t) {
                                var r, n, o, i, a = new J.Table("fvar", [
                                    {
                                        name: "version",
                                        type: "ULONG",
                                        value: 65536
                                    },
                                    {
                                        name: "offsetToData",
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "countSizePairs",
                                        type: "USHORT",
                                        value: 2
                                    },
                                    {
                                        name: "axisCount",
                                        type: "USHORT",
                                        value: e.axes.length
                                    },
                                    {
                                        name: "axisSize",
                                        type: "USHORT",
                                        value: 20
                                    },
                                    {
                                        name: "instanceCount",
                                        type: "USHORT",
                                        value: e.instances.length
                                    },
                                    {
                                        name: "instanceSize",
                                        type: "USHORT",
                                        value: 4 + 4 * e.axes.length
                                    }
                                ]);
                                a.offsetToData = a.sizeOf();
                                for(var s = 0; s < e.axes.length; s++)a.fields = a.fields.concat((r = s, n = e.axes[s], o = t, i = Mr(n.name, o), [
                                    {
                                        name: "tag_" + r,
                                        type: "TAG",
                                        value: n.tag
                                    },
                                    {
                                        name: "minValue_" + r,
                                        type: "FIXED",
                                        value: n.minValue << 16
                                    },
                                    {
                                        name: "defaultValue_" + r,
                                        type: "FIXED",
                                        value: n.defaultValue << 16
                                    },
                                    {
                                        name: "maxValue_" + r,
                                        type: "FIXED",
                                        value: n.maxValue << 16
                                    },
                                    {
                                        name: "flags_" + r,
                                        type: "USHORT",
                                        value: 0
                                    },
                                    {
                                        name: "nameID_" + r,
                                        type: "USHORT",
                                        value: i
                                    }
                                ]));
                                for(var l = 0; l < e.instances.length; l++)a.fields = a.fields.concat(Er(l, e.instances[l], e.axes, t));
                                return a;
                            },
                            parse: function(e, t, r) {
                                var n = new ae.Parser(e, t), o = n.parseULong();
                                L1.argument(65536 === o, "Unsupported fvar table version.");
                                var i = n.parseOffset16();
                                n.skip("uShort", 1);
                                for(var a, s, l, u, c, d = n.parseUShort(), f = n.parseUShort(), h = n.parseUShort(), p = n.parseUShort(), y = [], m = 0; m < d; m++)y.push((a = e, s = t + i + m * f, l = r, c = u = void 0, u = {
                                }, c = new ae.Parser(a, s), u.tag = c.parseTag(), u.minValue = c.parseFixed(), u.defaultValue = c.parseFixed(), u.maxValue = c.parseFixed(), c.skip("uShort", 1), u.name = l[c.parseUShort()] || {
                                }, u));
                                for(var g = [], v = t + i + d * f, b = 0; b < h; b++)g.push(Tr(e, v + b * p, y, r));
                                return {
                                    axes: y,
                                    instances: g
                                };
                            }
                        }, Cr = new Array(10);
                        Cr[1] = function() {
                            var e = this.offset + this.relativeOffset, t = this.parseUShort();
                            return 1 === t ? {
                                posFormat: 1,
                                coverage: this.parsePointer(oe.coverage),
                                value: this.parseValueRecord()
                            } : 2 === t ? {
                                posFormat: 2,
                                coverage: this.parsePointer(oe.coverage),
                                values: this.parseValueRecordList()
                            } : void L1.assert(!1, "0x" + e.toString(16) + ": GPOS lookup type 1 format must be 1 or 2.");
                        }, Cr[2] = function() {
                            var e = this.offset + this.relativeOffset, t = this.parseUShort();
                            L1.assert(1 === t || 2 === t, "0x" + e.toString(16) + ": GPOS lookup type 2 format must be 1 or 2.");
                            var r = this.parsePointer(oe.coverage), n = this.parseUShort(), o = this.parseUShort();
                            if (1 === t) return {
                                posFormat: t,
                                coverage: r,
                                valueFormat1: n,
                                valueFormat2: o,
                                pairSets: this.parseList(oe.pointer(oe.list(function() {
                                    return {
                                        secondGlyph: this.parseUShort(),
                                        value1: this.parseValueRecord(n),
                                        value2: this.parseValueRecord(o)
                                    };
                                })))
                            };
                            if (2 === t) {
                                var i = this.parsePointer(oe.classDef), a = this.parsePointer(oe.classDef), s = this.parseUShort(), l = this.parseUShort();
                                return {
                                    posFormat: t,
                                    coverage: r,
                                    valueFormat1: n,
                                    valueFormat2: o,
                                    classDef1: i,
                                    classDef2: a,
                                    class1Count: s,
                                    class2Count: l,
                                    classRecords: this.parseList(s, oe.list(l, function() {
                                        return {
                                            value1: this.parseValueRecord(n),
                                            value2: this.parseValueRecord(o)
                                        };
                                    }))
                                };
                            }
                        }, Cr[3] = function() {
                            return {
                                error: "GPOS Lookup 3 not supported"
                            };
                        }, Cr[4] = function() {
                            return {
                                error: "GPOS Lookup 4 not supported"
                            };
                        }, Cr[5] = function() {
                            return {
                                error: "GPOS Lookup 5 not supported"
                            };
                        }, Cr[6] = function() {
                            return {
                                error: "GPOS Lookup 6 not supported"
                            };
                        }, Cr[7] = function() {
                            return {
                                error: "GPOS Lookup 7 not supported"
                            };
                        }, Cr[8] = function() {
                            return {
                                error: "GPOS Lookup 8 not supported"
                            };
                        }, Cr[9] = function() {
                            return {
                                error: "GPOS Lookup 9 not supported"
                            };
                        };
                        var Lr = new Array(10);
                        var Pr = {
                            parse: function(e, t) {
                                var r = new oe(e, t = t || 0), n = r.parseVersion(1);
                                return L1.argument(1 === n || 1.1 === n, "Unsupported GPOS table version " + n), 1 === n ? {
                                    version: n,
                                    scripts: r.parseScriptList(),
                                    features: r.parseFeatureList(),
                                    lookups: r.parseLookupList(Cr)
                                } : {
                                    version: n,
                                    scripts: r.parseScriptList(),
                                    features: r.parseFeatureList(),
                                    lookups: r.parseLookupList(Cr),
                                    variations: r.parseFeatureVariationsList()
                                };
                            },
                            make: function(e) {
                                return new J.Table("GPOS", [
                                    {
                                        name: "version",
                                        type: "ULONG",
                                        value: 65536
                                    },
                                    {
                                        name: "scripts",
                                        type: "TABLE",
                                        value: new J.ScriptList(e.scripts)
                                    },
                                    {
                                        name: "features",
                                        type: "TABLE",
                                        value: new J.FeatureList(e.features)
                                    },
                                    {
                                        name: "lookups",
                                        type: "TABLE",
                                        value: new J.LookupList(e.lookups, Lr)
                                    }
                                ]);
                            }
                        };
                        var kr = {
                            parse: function(e301, t196) {
                                var r148 = new ae.Parser(e301, t196), n84 = r148.parseUShort();
                                if (0 === n84) return (function(e) {
                                    var t = {
                                    };
                                    e.skip("uShort");
                                    var r = e.parseUShort();
                                    L1.argument(0 === r, "Unsupported kern sub-table version."), e.skip("uShort", 2);
                                    var n = e.parseUShort();
                                    e.skip("uShort", 3);
                                    for(var o = 0; o < n; o += 1){
                                        var i = e.parseUShort(), a = e.parseUShort(), s = e.parseShort();
                                        t[i + "," + a] = s;
                                    }
                                    return t;
                                })(r148);
                                if (1 === n84) return (function(e) {
                                    var t = {
                                    };
                                    e.skip("uShort"), 1 < e.parseULong() && console.warn("Only the first kern subtable is supported."), e.skip("uLong");
                                    var r = 255 & e.parseUShort();
                                    if (e.skip("uShort"), 0 == r) {
                                        var n = e.parseUShort();
                                        e.skip("uShort", 3);
                                        for(var o = 0; o < n; o += 1){
                                            var i = e.parseUShort(), a = e.parseUShort(), s = e.parseShort();
                                            t[i + "," + a] = s;
                                        }
                                    }
                                    return t;
                                })(r148);
                                throw new Error("Unsupported kern table version (" + n84 + ").");
                            }
                        };
                        var Ar = {
                            parse: function(e, t, r, n) {
                                for(var o = new ae.Parser(e, t), i = n ? o.parseUShort : o.parseULong, a = [], s = 0; s < r + 1; s += 1){
                                    var l = i.call(o);
                                    n && (l *= 2), a.push(l);
                                }
                                return a;
                            }
                        };
                        function Rr(e302, r) {
                            Br("fs").readFile(e302, function(e, t) {
                                if (e) return r(e.message);
                                r(null, Mt(t));
                            });
                        }
                        function Dr(e, t) {
                            var r = new XMLHttpRequest;
                            r.open("get", e, !0), r.responseType = "arraybuffer", r.onload = function() {
                                return r.response ? t(null, r.response) : t("Font could not be loaded: " + r.statusText);
                            }, r.onerror = function() {
                                t("Font could not be loaded");
                            }, r.send();
                        }
                        function Ir(e, t) {
                            for(var r = [], n = 12, o = 0; o < t; o += 1){
                                var i = ae.getTag(e, n), a = ae.getULong(e, n + 4), s = ae.getULong(e, n + 8), l = ae.getULong(e, n + 12);
                                r.push({
                                    tag: i,
                                    checksum: a,
                                    offset: s,
                                    length: l,
                                    compression: !1
                                }), n += 16;
                            }
                            return r;
                        }
                        function Ur(e, t) {
                            if ("WOFF" !== t.compression) return {
                                data: e,
                                offset: t.offset
                            };
                            var r = new Uint8Array(e.buffer, t.offset + 2, t.compressedLength - 2), n = new Uint8Array(t.length);
                            if (o45(r, n), n.byteLength !== t.length) throw new Error("Decompression error: " + t.tag + " decompressed length doesn't match recorded length");
                            return {
                                data: new DataView(n.buffer, 0),
                                offset: 0
                            };
                        }
                        function Nr(e303) {
                            var t197, r149, n85, o54, i35, a25, s22, l17, u12, c, d, f, h, p, y = new jr({
                                empty: !0
                            }), m = new DataView(e303, 0), g = [], v = ae.getTag(m, 0);
                            if (v === String.fromCharCode(0, 1, 0, 0) || "true" === v || "typ1" === v) y.outlinesFormat = "truetype", g = Ir(m, n85 = ae.getUShort(m, 4));
                            else if ("OTTO" === v) y.outlinesFormat = "cff", g = Ir(m, n85 = ae.getUShort(m, 4));
                            else {
                                if ("wOFF" !== v) throw new Error("Unsupported OpenType signature " + v);
                                var b = ae.getTag(m, 4);
                                if (b === String.fromCharCode(0, 1, 0, 0)) y.outlinesFormat = "truetype";
                                else {
                                    if ("OTTO" !== b) throw new Error("Unsupported OpenType flavor " + v);
                                    y.outlinesFormat = "cff";
                                }
                                g = (function(e, t) {
                                    for(var r = [], n = 44, o = 0; o < t; o += 1){
                                        var i = ae.getTag(e, n), a = ae.getULong(e, n + 4), s = ae.getULong(e, n + 8), l = ae.getULong(e, n + 12), u = void 0;
                                        u = s < l && "WOFF", r.push({
                                            tag: i,
                                            offset: a,
                                            compression: u,
                                            compressedLength: s,
                                            length: l
                                        }), n += 20;
                                    }
                                    return r;
                                })(m, n85 = ae.getUShort(m, 12));
                            }
                            for(var _ = 0; _ < n85; _ += 1){
                                var x = g[_], w = void 0;
                                switch(x.tag){
                                    case "cmap":
                                        w = Ur(m, x), y.tables.cmap = se.parse(w.data, w.offset), y.encoding = new he(y.tables.cmap);
                                        break;
                                    case "cvt ":
                                        w = Ur(m, x), p = new ae.Parser(w.data, w.offset), y.tables.cvt = p.parseShortList(x.length / 2);
                                        break;
                                    case "fvar":
                                        i35 = x;
                                        break;
                                    case "fpgm":
                                        w = Ur(m, x), p = new ae.Parser(w.data, w.offset), y.tables.fpgm = p.parseByteList(x.length);
                                        break;
                                    case "head":
                                        w = Ur(m, x), y.tables.head = Fe.parse(w.data, w.offset), y.unitsPerEm = y.tables.head.unitsPerEm, t197 = y.tables.head.indexToLocFormat;
                                        break;
                                    case "hhea":
                                        w = Ur(m, x), y.tables.hhea = Be.parse(w.data, w.offset), y.ascender = y.tables.hhea.ascender, y.descender = y.tables.hhea.descender, y.numberOfHMetrics = y.tables.hhea.numberOfHMetrics;
                                        break;
                                    case "hmtx":
                                        u12 = x;
                                        break;
                                    case "ltag":
                                        w = Ur(m, x), r149 = Ve.parse(w.data, w.offset);
                                        break;
                                    case "maxp":
                                        w = Ur(m, x), y.tables.maxp = ze.parse(w.data, w.offset), y.numGlyphs = y.tables.maxp.numGlyphs;
                                        break;
                                    case "name":
                                        f = x;
                                        break;
                                    case "OS/2":
                                        w = Ur(m, x), y.tables.os2 = ot.parse(w.data, w.offset);
                                        break;
                                    case "post":
                                        w = Ur(m, x), y.tables.post = it.parse(w.data, w.offset), y.glyphNames = new ye(y.tables.post);
                                        break;
                                    case "prep":
                                        w = Ur(m, x), p = new ae.Parser(w.data, w.offset), y.tables.prep = p.parseByteList(x.length);
                                        break;
                                    case "glyf":
                                        a25 = x;
                                        break;
                                    case "loca":
                                        d = x;
                                        break;
                                    case "CFF ":
                                        o54 = x;
                                        break;
                                    case "kern":
                                        c = x;
                                        break;
                                    case "GPOS":
                                        s22 = x;
                                        break;
                                    case "GSUB":
                                        l17 = x;
                                        break;
                                    case "meta":
                                        h = x;
                                }
                            }
                            var S = Ur(m, f);
                            if (y.tables.name = rt.parse(S.data, S.offset, r149), y.names = y.tables.name, a25 && d) {
                                var j = 0 === t197, M = Ur(m, d), E = Ar.parse(M.data, M.offset, y.numGlyphs, j), T = Ur(m, a25);
                                y.glyphs = It.parse(T.data, T.offset, E, y);
                            } else {
                                if (!o54) throw new Error("Font doesn't contain TrueType or CFF outlines.");
                                var O = Ur(m, o54);
                                Ne.parse(O.data, O.offset, y);
                            }
                            var C = Ur(m, u12);
                            if (Ge.parse(C.data, C.offset, y.numberOfHMetrics, y.numGlyphs, y.glyphs), (function(e) {
                                for(var t, r = e.tables.cmap.glyphIndexMap, n = Object.keys(r), o = 0; o < n.length; o += 1){
                                    var i = n[o], a = r[i];
                                    (t = e.glyphs.get(a)).addUnicode(parseInt(i));
                                }
                                for(var s = 0; s < e.glyphs.length; s += 1)t = e.glyphs.get(s), e.cffEncoding ? e.isCIDFont ? t.name = "gid" + s : t.name = e.cffEncoding.charset[s] : e.glyphNames.names && (t.name = e.glyphNames.glyphIndexToName(s));
                            })(y), c) {
                                var L = Ur(m, c);
                                y.kerningPairs = kr.parse(L.data, L.offset);
                            } else y.kerningPairs = {
                            };
                            if (s22) {
                                var P = Ur(m, s22);
                                y.tables.gpos = Pr.parse(P.data, P.offset), y.position.init();
                            }
                            if (l17) {
                                var k = Ur(m, l17);
                                y.tables.gsub = ut.parse(k.data, k.offset);
                            }
                            if (i35) {
                                var A = Ur(m, i35);
                                y.tables.fvar = Or.parse(A.data, A.offset, y.names);
                            }
                            if (h) {
                                var R = Ur(m, h);
                                y.tables.meta = ct.parse(R.data, R.offset), y.metas = y.tables.meta;
                            }
                            return y;
                        }
                        M1.Font = jr, M1.Glyph = ge, M1.Path = D1, M1.BoundingBox = T1, M1._parse = ae, M1.parse = Nr, M1.load = function(e304, n) {
                            ("undefined" == typeof window ? Rr : Dr)(e304, function(e, t) {
                                if (e) return n(e);
                                var r;
                                try {
                                    r = Nr(t);
                                } catch (e305) {
                                    return n(e305, null);
                                }
                                return n(null, r);
                            });
                        }, M1.loadSync = function(e) {
                            return Nr(Mt(Br("fs").readFileSync(e)));
                        }, Object.defineProperty(M1, "__esModule", {
                            value: !0
                        });
                    })("object" == typeof r130 && void 0 !== t172 ? r130 : e264.opentype = {
                    });
                }).call(this, Br("buffer").Buffer);
            },
            {
                buffer: 4,
                fs: 2
            }
        ],
        237: [
            function(e306, t198, u) {
                (function(o55) {
                    function i36(e, t) {
                        for(var r = 0, n = e.length - 1; 0 <= n; n--){
                            var o = e[n];
                            "." === o ? e.splice(n, 1) : ".." === o ? (e.splice(n, 1), r++) : r && (e.splice(n, 1), r--);
                        }
                        if (t) for(; r--;)e.unshift("..");
                        return e;
                    }
                    function a26(e, t) {
                        if (e.filter) return e.filter(t);
                        for(var r = [], n = 0; n < e.length; n++)t(e[n], n, e) && r.push(e[n]);
                        return r;
                    }
                    u.resolve = function() {
                        for(var e307 = "", t = !1, r = arguments.length - 1; -1 <= r && !t; r--){
                            var n = 0 <= r ? arguments[r] : o55.cwd();
                            if ("string" != typeof n) throw new TypeError("Arguments to path.resolve must be strings");
                            n && (e307 = n + "/" + e307, t = "/" === n.charAt(0));
                        }
                        return (t ? "/" : "") + (e307 = i36(a26(e307.split("/"), function(e) {
                            return !!e;
                        }), !t).join("/")) || ".";
                    }, u.normalize = function(e308) {
                        var t = u.isAbsolute(e308), r = "/" === n86(e308, -1);
                        return (e308 = i36(a26(e308.split("/"), function(e) {
                            return !!e;
                        }), !t).join("/")) || t || (e308 = "."), e308 && r && (e308 += "/"), (t ? "/" : "") + e308;
                    }, u.isAbsolute = function(e) {
                        return "/" === e.charAt(0);
                    }, u.join = function() {
                        var e309 = Array.prototype.slice.call(arguments, 0);
                        return u.normalize(a26(e309, function(e, t) {
                            if ("string" != typeof e) throw new TypeError("Arguments to path.join must be strings");
                            return e;
                        }).join("/"));
                    }, u.relative = function(e310, t199) {
                        function r150(e) {
                            for(var t = 0; t < e.length && "" === e[t]; t++);
                            for(var r = e.length - 1; 0 <= r && "" === e[r]; r--);
                            return r < t ? [] : e.slice(t, r - t + 1);
                        }
                        e310 = u.resolve(e310).substr(1), t199 = u.resolve(t199).substr(1);
                        for(var n = r150(e310.split("/")), o = r150(t199.split("/")), i = Math.min(n.length, o.length), a = i, s = 0; s < i; s++)if (n[s] !== o[s]) {
                            a = s;
                            break;
                        }
                        var l = [];
                        for(s = a; s < n.length; s++)l.push("..");
                        return (l = l.concat(o.slice(a))).join("/");
                    }, u.sep = "/", u.delimiter = ":", u.dirname = function(e) {
                        if ("string" != typeof e && (e += ""), 0 === e.length) return ".";
                        for(var t = e.charCodeAt(0), r = 47 === t, n = -1, o = !0, i = e.length - 1; 1 <= i; --i)if (47 === (t = e.charCodeAt(i))) {
                            if (!o) {
                                n = i;
                                break;
                            }
                        } else o = !1;
                        return -1 === n ? r ? "/" : "." : r && 1 === n ? "/" : e.slice(0, n);
                    }, u.basename = function(e311, t200) {
                        var r151 = function(e) {
                            "string" != typeof e && (e += "");
                            var t, r = 0, n = -1, o = !0;
                            for(t = e.length - 1; 0 <= t; --t)if (47 === e.charCodeAt(t)) {
                                if (!o) {
                                    r = t + 1;
                                    break;
                                }
                            } else -1 === n && (o = !1, n = t + 1);
                            return -1 === n ? "" : e.slice(r, n);
                        }(e311);
                        return t200 && r151.substr(-1 * t200.length) === t200 && (r151 = r151.substr(0, r151.length - t200.length)), r151;
                    }, u.extname = function(e) {
                        "string" != typeof e && (e += "");
                        for(var t = -1, r = 0, n = -1, o = !0, i = 0, a = e.length - 1; 0 <= a; --a){
                            var s = e.charCodeAt(a);
                            if (47 === s) {
                                if (o) continue;
                                r = a + 1;
                                break;
                            }
                            -1 === n && (o = !1, n = a + 1), 46 === s ? -1 === t ? t = a : 1 !== i && (i = 1) : -1 !== t && (i = -1);
                        }
                        return -1 === t || -1 === n || 0 === i || 1 === i && t === n - 1 && t === r + 1 ? "" : e.slice(t, n);
                    };
                    var n86 = "b" === "ab".substr(-1) ? function(e, t, r) {
                        return e.substr(t, r);
                    } : function(e, t, r) {
                        return t < 0 && (t = e.length + t), e.substr(t, r);
                    };
                }).call(this, e306("_process"));
            },
            {
                _process: 238
            }
        ],
        238: [
            function(e313, t201, r152) {
                var n, o, i = t201.exports = {
                };
                function a() {
                    throw new Error("setTimeout has not been defined");
                }
                function s() {
                    throw new Error("clearTimeout has not been defined");
                }
                function l(t) {
                    if (n === setTimeout) return setTimeout(t, 0);
                    if ((n === a || !n) && setTimeout) return n = setTimeout, setTimeout(t, 0);
                    try {
                        return n(t, 0);
                    } catch (e) {
                        try {
                            return n.call(null, t, 0);
                        } catch (e) {
                            return n.call(this, t, 0);
                        }
                    }
                }
                !function() {
                    try {
                        n = "function" == typeof setTimeout ? setTimeout : a;
                    } catch (e) {
                        n = a;
                    }
                    try {
                        o = "function" == typeof clearTimeout ? clearTimeout : s;
                    } catch (e312) {
                        o = s;
                    }
                }();
                var u, c = [], d = !1, f = -1;
                function h() {
                    d && u && (d = !1, u.length ? c = u.concat(c) : f = -1, c.length && p());
                }
                function p() {
                    if (!d) {
                        var e = l(h);
                        d = !0;
                        for(var t202 = c.length; t202;){
                            for(u = c, c = []; ++f < t202;)u && u[f].run();
                            f = -1, t202 = c.length;
                        }
                        u = null, d = !1, (function(t) {
                            if (o === clearTimeout) return clearTimeout(t);
                            if ((o === s || !o) && clearTimeout) return o = clearTimeout, clearTimeout(t);
                            try {
                                o(t);
                            } catch (e) {
                                try {
                                    return o.call(null, t);
                                } catch (e) {
                                    return o.call(this, t);
                                }
                            }
                        })(e);
                    }
                }
                function y(e, t) {
                    this.fun = e, this.array = t;
                }
                function m() {
                }
                i.nextTick = function(e) {
                    var t = new Array(arguments.length - 1);
                    if (1 < arguments.length) for(var r = 1; r < arguments.length; r++)t[r - 1] = arguments[r];
                    c.push(new y(e, t)), 1 !== c.length || d || l(p);
                }, y.prototype.run = function() {
                    this.fun.apply(null, this.array);
                }, i.title = "browser", i.browser = !0, i.env = {
                }, i.argv = [], i.version = "", i.versions = {
                }, i.on = m, i.addListener = m, i.once = m, i.off = m, i.removeListener = m, i.removeAllListeners = m, i.emit = m, i.prependListener = m, i.prependOnceListener = m, i.listeners = function(e) {
                    return [];
                }, i.binding = function(e) {
                    throw new Error("process.binding is not supported");
                }, i.cwd = function() {
                    return "/";
                }, i.chdir = function(e) {
                    throw new Error("process.chdir is not supported");
                }, i.umask = function() {
                    return 0;
                };
            },
            {
            }
        ],
        239: [
            function(e314, t203, r153) {
                !function(e315) {
                    if (!e315.fetch) {
                        var t204 = "URLSearchParams" in e315, r154 = "Symbol" in e315 && "iterator" in Symbol, a = "FileReader" in e315 && "Blob" in e315 && function() {
                            try {
                                return new Blob, !0;
                            } catch (e) {
                                return !1;
                            }
                        }(), n87 = "FormData" in e315, o56 = "ArrayBuffer" in e315;
                        if (o56) var i37 = [
                            "[object Int8Array]",
                            "[object Uint8Array]",
                            "[object Uint8ClampedArray]",
                            "[object Int16Array]",
                            "[object Uint16Array]",
                            "[object Int32Array]",
                            "[object Uint32Array]",
                            "[object Float32Array]",
                            "[object Float64Array]"
                        ], s = function(e) {
                            return e && DataView.prototype.isPrototypeOf(e);
                        }, l = ArrayBuffer.isView || function(e) {
                            return e && -1 < i37.indexOf(Object.prototype.toString.call(e));
                        };
                        p.prototype.append = function(e, t) {
                            e = d(e), t = f(t);
                            var r = this.map[e];
                            this.map[e] = r ? r + "," + t : t;
                        }, p.prototype.delete = function(e) {
                            delete this.map[d(e)];
                        }, p.prototype.get = function(e) {
                            return e = d(e), this.has(e) ? this.map[e] : null;
                        }, p.prototype.has = function(e) {
                            return this.map.hasOwnProperty(d(e));
                        }, p.prototype.set = function(e, t) {
                            this.map[d(e)] = f(t);
                        }, p.prototype.forEach = function(e, t) {
                            for(var r in this.map)this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
                        }, p.prototype.keys = function() {
                            var r = [];
                            return this.forEach(function(e, t) {
                                r.push(t);
                            }), h(r);
                        }, p.prototype.values = function() {
                            var t = [];
                            return this.forEach(function(e) {
                                t.push(e);
                            }), h(t);
                        }, p.prototype.entries = function() {
                            var r = [];
                            return this.forEach(function(e, t) {
                                r.push([
                                    t,
                                    e
                                ]);
                            }), h(r);
                        }, r154 && (p.prototype[Symbol.iterator] = p.prototype.entries);
                        var u = [
                            "DELETE",
                            "GET",
                            "HEAD",
                            "OPTIONS",
                            "POST",
                            "PUT"
                        ];
                        _.prototype.clone = function() {
                            return new _(this, {
                                body: this._bodyInit
                            });
                        }, b.call(_.prototype), b.call(w.prototype), w.prototype.clone = function() {
                            return new w(this._bodyInit, {
                                status: this.status,
                                statusText: this.statusText,
                                headers: new p(this.headers),
                                url: this.url
                            });
                        }, w.error = function() {
                            var e = new w(null, {
                                status: 0,
                                statusText: ""
                            });
                            return e.type = "error", e;
                        };
                        var c = [
                            301,
                            302,
                            303,
                            307,
                            308
                        ];
                        w.redirect = function(e, t) {
                            if (-1 === c.indexOf(t)) throw new RangeError("Invalid status code");
                            return new w(null, {
                                status: t,
                                headers: {
                                    location: e
                                }
                            });
                        }, e315.Headers = p, e315.Request = _, e315.Response = w, e315.fetch = function(r155, o57) {
                            return new Promise(function(n88, e316) {
                                var t205 = new _(r155, o57), i = new XMLHttpRequest;
                                i.onload = function() {
                                    var e317, o, t206 = {
                                        status: i.status,
                                        statusText: i.statusText,
                                        headers: (e317 = i.getAllResponseHeaders() || "", o = new p, e317.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function(e) {
                                            var t = e.split(":"), r = t.shift().trim();
                                            if (r) {
                                                var n = t.join(":").trim();
                                                o.append(r, n);
                                            }
                                        }), o)
                                    };
                                    t206.url = "responseURL" in i ? i.responseURL : t206.headers.get("X-Request-URL");
                                    var r156 = "response" in i ? i.response : i.responseText;
                                    n88(new w(r156, t206));
                                }, i.onerror = function() {
                                    e316(new TypeError("Network request failed"));
                                }, i.ontimeout = function() {
                                    e316(new TypeError("Network request failed"));
                                }, i.open(t205.method, t205.url, !0), "include" === t205.credentials ? i.withCredentials = !0 : "omit" === t205.credentials && (i.withCredentials = !1), "responseType" in i && a && (i.responseType = "blob"), t205.headers.forEach(function(e, t) {
                                    i.setRequestHeader(t, e);
                                }), i.send(void 0 === t205._bodyInit ? null : t205._bodyInit);
                            });
                        }, e315.fetch.polyfill = !0;
                    }
                    function d(e) {
                        if ("string" != typeof e && (e = String(e)), /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e)) throw new TypeError("Invalid character in header field name");
                        return e.toLowerCase();
                    }
                    function f(e) {
                        return "string" != typeof e && (e = String(e)), e;
                    }
                    function h(t) {
                        var e318 = {
                            next: function() {
                                var e = t.shift();
                                return {
                                    done: void 0 === e,
                                    value: e
                                };
                            }
                        };
                        return r154 && (e318[Symbol.iterator] = function() {
                            return e318;
                        }), e318;
                    }
                    function p(t207) {
                        this.map = {
                        }, t207 instanceof p ? t207.forEach(function(e, t) {
                            this.append(t, e);
                        }, this) : Array.isArray(t207) ? t207.forEach(function(e) {
                            this.append(e[0], e[1]);
                        }, this) : t207 && Object.getOwnPropertyNames(t207).forEach(function(e) {
                            this.append(e, t207[e]);
                        }, this);
                    }
                    function y(e) {
                        if (e.bodyUsed) return Promise.reject(new TypeError("Already read"));
                        e.bodyUsed = !0;
                    }
                    function m(r) {
                        return new Promise(function(e, t) {
                            r.onload = function() {
                                e(r.result);
                            }, r.onerror = function() {
                                t(r.error);
                            };
                        });
                    }
                    function g(e) {
                        var t = new FileReader, r = m(t);
                        return t.readAsArrayBuffer(e), r;
                    }
                    function v(e) {
                        if (e.slice) return e.slice(0);
                        var t = new Uint8Array(e.byteLength);
                        return t.set(new Uint8Array(e)), t.buffer;
                    }
                    function b() {
                        return this.bodyUsed = !1, this._initBody = function(e) {
                            if (this._bodyInit = e) {
                                if ("string" == typeof e) this._bodyText = e;
                                else if (a && Blob.prototype.isPrototypeOf(e)) this._bodyBlob = e;
                                else if (n87 && FormData.prototype.isPrototypeOf(e)) this._bodyFormData = e;
                                else if (t204 && URLSearchParams.prototype.isPrototypeOf(e)) this._bodyText = e.toString();
                                else if (o56 && a && s(e)) this._bodyArrayBuffer = v(e.buffer), this._bodyInit = new Blob([
                                    this._bodyArrayBuffer
                                ]);
                                else {
                                    if (!o56 || !ArrayBuffer.prototype.isPrototypeOf(e) && !l(e)) throw new Error("unsupported BodyInit type");
                                    this._bodyArrayBuffer = v(e);
                                }
                            } else this._bodyText = "";
                            this.headers.get("content-type") || ("string" == typeof e ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : t204 && URLSearchParams.prototype.isPrototypeOf(e) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
                        }, a && (this.blob = function() {
                            var e = y(this);
                            if (e) return e;
                            if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                            if (this._bodyArrayBuffer) return Promise.resolve(new Blob([
                                this._bodyArrayBuffer
                            ]));
                            if (this._bodyFormData) throw new Error("could not read FormData body as blob");
                            return Promise.resolve(new Blob([
                                this._bodyText
                            ]));
                        }, this.arrayBuffer = function() {
                            return this._bodyArrayBuffer ? y(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(g);
                        }), this.text = function() {
                            var e319, t208, r157, n89 = y(this);
                            if (n89) return n89;
                            if (this._bodyBlob) return e319 = this._bodyBlob, t208 = new FileReader, r157 = m(t208), t208.readAsText(e319), r157;
                            if (this._bodyArrayBuffer) return Promise.resolve(function(e) {
                                for(var t = new Uint8Array(e), r = new Array(t.length), n = 0; n < t.length; n++)r[n] = String.fromCharCode(t[n]);
                                return r.join("");
                            }(this._bodyArrayBuffer));
                            if (this._bodyFormData) throw new Error("could not read FormData body as text");
                            return Promise.resolve(this._bodyText);
                        }, n87 && (this.formData = function() {
                            return this.text().then(x);
                        }), this.json = function() {
                            return this.text().then(JSON.parse);
                        }, this;
                    }
                    function _(e, t) {
                        var r, n, o = (t = t || {
                        }).body;
                        if (e instanceof _) {
                            if (e.bodyUsed) throw new TypeError("Already read");
                            this.url = e.url, this.credentials = e.credentials, t.headers || (this.headers = new p(e.headers)), this.method = e.method, this.mode = e.mode, o || null == e._bodyInit || (o = e._bodyInit, e.bodyUsed = !0);
                        } else this.url = String(e);
                        if (this.credentials = t.credentials || this.credentials || "omit", !t.headers && this.headers || (this.headers = new p(t.headers)), this.method = (r = t.method || this.method || "GET", n = r.toUpperCase(), -1 < u.indexOf(n) ? n : r), this.mode = t.mode || this.mode || null, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && o) throw new TypeError("Body not allowed for GET or HEAD requests");
                        this._initBody(o);
                    }
                    function x(e320) {
                        var o = new FormData;
                        return e320.trim().split("&").forEach(function(e) {
                            if (e) {
                                var t = e.split("="), r = t.shift().replace(/\+/g, " "), n = t.join("=").replace(/\+/g, " ");
                                o.append(decodeURIComponent(r), decodeURIComponent(n));
                            }
                        }), o;
                    }
                    function w(e, t) {
                        t = t || {
                        }, this.type = "default", this.status = void 0 === t.status ? 200 : t.status, this.ok = 200 <= this.status && this.status < 300, this.statusText = "statusText" in t ? t.statusText : "OK", this.headers = new p(t.headers), this.url = t.url || "", this._initBody(e);
                    }
                }("undefined" != typeof self ? self : this);
            },
            {
            }
        ],
        240: [
            function(e321, t209, r158) {
                "use strict";
                e321("core-js/modules/es.function.name"), e321("core-js/modules/es.object.to-string"), e321("core-js/modules/es.regexp.exec"), e321("core-js/modules/es.regexp.to-string"), e321("core-js/modules/es.string.split"), Object.defineProperty(r158, "__esModule", {
                    value: !0
                }), r158.default = void 0;
                var l, n = i38(e321("../core/main")), o58 = i38(e321("../color/color_conversion"));
                function i38(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                var u = [
                    {
                        h: 0,
                        s: 0,
                        b: 0.8275,
                        name: "gray"
                    },
                    {
                        h: 0,
                        s: 0,
                        b: 0.8627,
                        name: "gray"
                    },
                    {
                        h: 0,
                        s: 0,
                        b: 0.7529,
                        name: "gray"
                    },
                    {
                        h: 0.0167,
                        s: 0.1176,
                        b: 1,
                        name: "light pink"
                    }
                ], c = [
                    {
                        h: 0,
                        s: 0,
                        b: 0,
                        name: "black"
                    },
                    {
                        h: 0,
                        s: 0,
                        b: 0.5,
                        name: "gray"
                    },
                    {
                        h: 0,
                        s: 0,
                        b: 1,
                        name: "white"
                    },
                    {
                        h: 0,
                        s: 0.5,
                        b: 0.5,
                        name: "dark maroon"
                    },
                    {
                        h: 0,
                        s: 0.5,
                        b: 1,
                        name: "salmon pink"
                    },
                    {
                        h: 0,
                        s: 1,
                        b: 0,
                        name: "black"
                    },
                    {
                        h: 0,
                        s: 1,
                        b: 0.5,
                        name: "dark red"
                    },
                    {
                        h: 0,
                        s: 1,
                        b: 1,
                        name: "red"
                    },
                    {
                        h: 5,
                        s: 0,
                        b: 1,
                        name: "very light peach"
                    },
                    {
                        h: 5,
                        s: 0.5,
                        b: 0.5,
                        name: "brown"
                    },
                    {
                        h: 5,
                        s: 0.5,
                        b: 1,
                        name: "peach"
                    },
                    {
                        h: 5,
                        s: 1,
                        b: 0.5,
                        name: "brick red"
                    },
                    {
                        h: 5,
                        s: 1,
                        b: 1,
                        name: "crimson"
                    },
                    {
                        h: 10,
                        s: 0,
                        b: 1,
                        name: "light peach"
                    },
                    {
                        h: 10,
                        s: 0.5,
                        b: 0.5,
                        name: "brown"
                    },
                    {
                        h: 10,
                        s: 0.5,
                        b: 1,
                        name: "light orange"
                    },
                    {
                        h: 10,
                        s: 1,
                        b: 0.5,
                        name: "brown"
                    },
                    {
                        h: 10,
                        s: 1,
                        b: 1,
                        name: "orange"
                    },
                    {
                        h: 15,
                        s: 0,
                        b: 1,
                        name: "very light yellow"
                    },
                    {
                        h: 15,
                        s: 0.5,
                        b: 0.5,
                        name: "olive green"
                    },
                    {
                        h: 15,
                        s: 0.5,
                        b: 1,
                        name: "light yellow"
                    },
                    {
                        h: 15,
                        s: 1,
                        b: 0,
                        name: "dark olive green"
                    },
                    {
                        h: 15,
                        s: 1,
                        b: 0.5,
                        name: "olive green"
                    },
                    {
                        h: 15,
                        s: 1,
                        b: 1,
                        name: "yellow"
                    },
                    {
                        h: 20,
                        s: 0,
                        b: 1,
                        name: "very light yellow"
                    },
                    {
                        h: 20,
                        s: 0.5,
                        b: 0.5,
                        name: "olive green"
                    },
                    {
                        h: 20,
                        s: 0.5,
                        b: 1,
                        name: "light yellow green"
                    },
                    {
                        h: 20,
                        s: 1,
                        b: 0,
                        name: "dark olive green"
                    },
                    {
                        h: 20,
                        s: 1,
                        b: 0.5,
                        name: "dark yellow green"
                    },
                    {
                        h: 20,
                        s: 1,
                        b: 1,
                        name: "yellow green"
                    },
                    {
                        h: 25,
                        s: 0.5,
                        b: 0.5,
                        name: "dark yellow green"
                    },
                    {
                        h: 25,
                        s: 0.5,
                        b: 1,
                        name: "light green"
                    },
                    {
                        h: 25,
                        s: 1,
                        b: 0.5,
                        name: "dark green"
                    },
                    {
                        h: 25,
                        s: 1,
                        b: 1,
                        name: "green"
                    },
                    {
                        h: 30,
                        s: 0.5,
                        b: 1,
                        name: "light green"
                    },
                    {
                        h: 30,
                        s: 1,
                        b: 0.5,
                        name: "dark green"
                    },
                    {
                        h: 30,
                        s: 1,
                        b: 1,
                        name: "green"
                    },
                    {
                        h: 35,
                        s: 0,
                        b: 0.5,
                        name: "light green"
                    },
                    {
                        h: 35,
                        s: 0,
                        b: 1,
                        name: "very light green"
                    },
                    {
                        h: 35,
                        s: 0.5,
                        b: 0.5,
                        name: "dark green"
                    },
                    {
                        h: 35,
                        s: 0.5,
                        b: 1,
                        name: "light green"
                    },
                    {
                        h: 35,
                        s: 1,
                        b: 0,
                        name: "very dark green"
                    },
                    {
                        h: 35,
                        s: 1,
                        b: 0.5,
                        name: "dark green"
                    },
                    {
                        h: 35,
                        s: 1,
                        b: 1,
                        name: "green"
                    },
                    {
                        h: 40,
                        s: 0,
                        b: 1,
                        name: "very light green"
                    },
                    {
                        h: 40,
                        s: 0.5,
                        b: 0.5,
                        name: "dark green"
                    },
                    {
                        h: 40,
                        s: 0.5,
                        b: 1,
                        name: "light green"
                    },
                    {
                        h: 40,
                        s: 1,
                        b: 0.5,
                        name: "dark green"
                    },
                    {
                        h: 40,
                        s: 1,
                        b: 1,
                        name: "green"
                    },
                    {
                        h: 45,
                        s: 0.5,
                        b: 1,
                        name: "light turquoise"
                    },
                    {
                        h: 45,
                        s: 1,
                        b: 0.5,
                        name: "dark turquoise"
                    },
                    {
                        h: 45,
                        s: 1,
                        b: 1,
                        name: "turquoise"
                    },
                    {
                        h: 50,
                        s: 0,
                        b: 1,
                        name: "light sky blue"
                    },
                    {
                        h: 50,
                        s: 0.5,
                        b: 0.5,
                        name: "dark cyan"
                    },
                    {
                        h: 50,
                        s: 0.5,
                        b: 1,
                        name: "light cyan"
                    },
                    {
                        h: 50,
                        s: 1,
                        b: 0.5,
                        name: "dark cyan"
                    },
                    {
                        h: 50,
                        s: 1,
                        b: 1,
                        name: "cyan"
                    },
                    {
                        h: 55,
                        s: 0,
                        b: 1,
                        name: "light sky blue"
                    },
                    {
                        h: 55,
                        s: 0.5,
                        b: 1,
                        name: "light sky blue"
                    },
                    {
                        h: 55,
                        s: 1,
                        b: 0.5,
                        name: "dark blue"
                    },
                    {
                        h: 55,
                        s: 1,
                        b: 1,
                        name: "sky blue"
                    },
                    {
                        h: 60,
                        s: 0,
                        b: 0.5,
                        name: "gray"
                    },
                    {
                        h: 60,
                        s: 0,
                        b: 1,
                        name: "very light blue"
                    },
                    {
                        h: 60,
                        s: 0.5,
                        b: 0.5,
                        name: "blue"
                    },
                    {
                        h: 60,
                        s: 0.5,
                        b: 1,
                        name: "light blue"
                    },
                    {
                        h: 60,
                        s: 1,
                        b: 0.5,
                        name: "navy blue"
                    },
                    {
                        h: 60,
                        s: 1,
                        b: 1,
                        name: "blue"
                    },
                    {
                        h: 65,
                        s: 0,
                        b: 1,
                        name: "lavender"
                    },
                    {
                        h: 65,
                        s: 0.5,
                        b: 0.5,
                        name: "navy blue"
                    },
                    {
                        h: 65,
                        s: 0.5,
                        b: 1,
                        name: "light purple"
                    },
                    {
                        h: 65,
                        s: 1,
                        b: 0.5,
                        name: "dark navy blue"
                    },
                    {
                        h: 65,
                        s: 1,
                        b: 1,
                        name: "blue"
                    },
                    {
                        h: 70,
                        s: 0,
                        b: 1,
                        name: "lavender"
                    },
                    {
                        h: 70,
                        s: 0.5,
                        b: 0.5,
                        name: "navy blue"
                    },
                    {
                        h: 70,
                        s: 0.5,
                        b: 1,
                        name: "lavender blue"
                    },
                    {
                        h: 70,
                        s: 1,
                        b: 0.5,
                        name: "dark navy blue"
                    },
                    {
                        h: 70,
                        s: 1,
                        b: 1,
                        name: "blue"
                    },
                    {
                        h: 75,
                        s: 0.5,
                        b: 1,
                        name: "lavender"
                    },
                    {
                        h: 75,
                        s: 1,
                        b: 0.5,
                        name: "dark purple"
                    },
                    {
                        h: 75,
                        s: 1,
                        b: 1,
                        name: "purple"
                    },
                    {
                        h: 80,
                        s: 0.5,
                        b: 1,
                        name: "pinkish purple"
                    },
                    {
                        h: 80,
                        s: 1,
                        b: 0.5,
                        name: "dark purple"
                    },
                    {
                        h: 80,
                        s: 1,
                        b: 1,
                        name: "purple"
                    },
                    {
                        h: 85,
                        s: 0,
                        b: 1,
                        name: "light pink"
                    },
                    {
                        h: 85,
                        s: 0.5,
                        b: 0.5,
                        name: "purple"
                    },
                    {
                        h: 85,
                        s: 0.5,
                        b: 1,
                        name: "light fuchsia"
                    },
                    {
                        h: 85,
                        s: 1,
                        b: 0.5,
                        name: "dark fuchsia"
                    },
                    {
                        h: 85,
                        s: 1,
                        b: 1,
                        name: "fuchsia"
                    },
                    {
                        h: 90,
                        s: 0.5,
                        b: 0.5,
                        name: "dark fuchsia"
                    },
                    {
                        h: 90,
                        s: 0.5,
                        b: 1,
                        name: "hot pink"
                    },
                    {
                        h: 90,
                        s: 1,
                        b: 0.5,
                        name: "dark fuchsia"
                    },
                    {
                        h: 90,
                        s: 1,
                        b: 1,
                        name: "fuchsia"
                    },
                    {
                        h: 95,
                        s: 0,
                        b: 1,
                        name: "pink"
                    },
                    {
                        h: 95,
                        s: 0.5,
                        b: 1,
                        name: "light pink"
                    },
                    {
                        h: 95,
                        s: 1,
                        b: 0.5,
                        name: "dark magenta"
                    },
                    {
                        h: 95,
                        s: 1,
                        b: 1,
                        name: "magenta"
                    }
                ];
                n.default.prototype._rgbColorName = function(e322) {
                    var t210 = o58.default._rgbaToHSBA(e322);
                    return (function(e) {
                        var t;
                        if (0 !== e[0]) {
                            e[0] = Math.round(100 * e[0]);
                            var r = e[0].toString().split(""), n = r.length - 1;
                            r[n] = parseInt(r[n]), r[n] < 2.5 ? r[n] = 0 : 2.5 <= r[n] && r[n] < 7.5 && (r[n] = 5), 2 === r.length ? (r[0] = parseInt(r[0]), 7.5 <= r[n] && (r[n] = 0, r[0] = r[0] + 1), e[0] = 10 * r[0] + r[1]) : 7.5 <= r[n] ? e[0] = 10 : e[0] = r[n];
                        }
                        e[2] = e[2] / 255;
                        for(var o = e.length - 1; 1 <= o; o--)e[o] <= 0.25 ? e[o] = 0 : 0.25 < e[o] && e[o] < 0.75 ? e[o] = 0.5 : e[o] = 1;
                        if (0 === e[0] && 0 === e[1] && 1 === e[2]) {
                            for(var i = 2; 0 <= i; i--)l[i] = Math.round(10000 * l[i]) / 10000;
                            for(var a = 0; a < u.length; a++){
                                if (u[a].h === l[0] && u[a].s === l[1] && u[a].b === l[2]) {
                                    t = u[a].name;
                                    break;
                                }
                                t = "white";
                            }
                        } else for(var s = 0; s < c.length; s++)if (c[s].h === e[0] && c[s].s === e[1] && c[s].b === e[2]) {
                            t = c[s].name;
                            break;
                        }
                        return t;
                    })([
                        (l = t210)[0],
                        t210[1],
                        t210[2]
                    ]);
                };
                var a27 = n.default;
                r158.default = a27;
            },
            {
                "../color/color_conversion": 246,
                "../core/main": 260,
                "core-js/modules/es.function.name": 163,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.split": 188
            }
        ],
        241: [
            function(e323, t211, r159) {
                "use strict";
                e323("core-js/modules/es.array.concat"), e323("core-js/modules/es.regexp.exec"), e323("core-js/modules/es.string.ends-with"), e323("core-js/modules/es.string.replace"), Object.defineProperty(r159, "__esModule", {
                    value: !0
                }), r159.default = void 0;
                var n90, a28 = (n90 = e323("../core/main")) && n90.__esModule ? n90 : {
                    default: n90
                };
                var l = "_Description", u = "_fallbackDesc", c = "_fallbackTable", d = "_Label", f = "_labelDesc", h = "_labelTable";
                function s23(e) {
                    if ("label" === e || "fallback" === e) throw new Error("description should not be LABEL or FALLBACK");
                    return e.endsWith(".") || e.endsWith(";") || e.endsWith(",") || e.endsWith("?") || e.endsWith("!") || (e += "."), e;
                }
                a28.default.prototype.describe = function(e, t) {
                    if (a28.default._validateParameters("describe", arguments), "string" == typeof e) {
                        var r = this.canvas.id;
                        e = s23(e), this.dummyDOM || (this.dummyDOM = document.getElementById(r).parentNode), this.descriptions || (this.descriptions = {
                        }), this.descriptions.fallback ? this.descriptions.fallback.innerHTML !== e && (this.descriptions.fallback.innerHTML = e) : this._describeHTML("fallback", e), t === this.LABEL && (this.descriptions.label ? this.descriptions.label.innerHTML !== e && (this.descriptions.label.innerHTML = e) : this._describeHTML("label", e));
                    }
                }, a28.default.prototype.describeElement = function(e324, t, r) {
                    if (a28.default._validateParameters("describeElement", arguments), "string" == typeof t && "string" == typeof e324) {
                        var n = this.canvas.id;
                        t = s23(t);
                        var o = function(e) {
                            if ("label" === e || "fallback" === e) throw new Error("element name should not be LABEL or FALLBACK");
                            e.endsWith(".") || e.endsWith(";") || e.endsWith(",") ? e = e.replace(/.$/, ":") : e.endsWith(":") || (e += ":");
                            return e;
                        }(e324);
                        e324 = e324.replace(/[^a-zA-Z0-9 ]/g, "");
                        var i = '<th scope="row">'.concat(o, "</th><td>").concat(t, "</td>");
                        this.dummyDOM || (this.dummyDOM = document.getElementById(n).parentNode), this.descriptions ? this.descriptions.fallbackElements || (this.descriptions.fallbackElements = {
                        }) : this.descriptions = {
                            fallbackElements: {
                            }
                        }, this.descriptions.fallbackElements[e324] ? this.descriptions.fallbackElements[e324].innerHTML !== i && (this.descriptions.fallbackElements[e324].innerHTML = i) : this._describeElementHTML("fallback", e324, i), r === this.LABEL && (this.descriptions.labelElements || (this.descriptions.labelElements = {
                        }), this.descriptions.labelElements[e324] ? this.descriptions.labelElements[e324].innerHTML !== i && (this.descriptions.labelElements[e324].innerHTML = i) : this._describeElementHTML("label", e324, i));
                    }
                }, a28.default.prototype._describeHTML = function(e, t) {
                    var r = this.canvas.id;
                    if ("fallback" === e) {
                        if (this.dummyDOM.querySelector("#".concat(r + l))) this.dummyDOM.querySelector("#" + r + c).insertAdjacentHTML("beforebegin", '<p id="'.concat(r + u, '"></p>'));
                        else {
                            var n = '<div id="'.concat(r).concat(l, '" role="region" aria-label="Canvas Description"><p id="').concat(r).concat(u, '"></p></div>');
                            this.dummyDOM.querySelector("#".concat(r, "accessibleOutput")) ? this.dummyDOM.querySelector("#".concat(r, "accessibleOutput")).insertAdjacentHTML("beforebegin", n) : this.dummyDOM.querySelector("#".concat(r)).innerHTML = n;
                        }
                        return this.descriptions.fallback = this.dummyDOM.querySelector("#".concat(r).concat(u)), void (this.descriptions.fallback.innerHTML = t);
                    }
                    if ("label" === e) {
                        if (this.dummyDOM.querySelector("#".concat(r + d))) this.dummyDOM.querySelector("#".concat(r + h)) && this.dummyDOM.querySelector("#".concat(r + h)).insertAdjacentHTML("beforebegin", '<p id="'.concat(r).concat(f, '"></p>'));
                        else {
                            var o = '<div id="'.concat(r).concat(d, '" class="p5Label"><p id="').concat(r).concat(f, '"></p></div>');
                            this.dummyDOM.querySelector("#".concat(r, "accessibleOutputLabel")) ? this.dummyDOM.querySelector("#".concat(r, "accessibleOutputLabel")).insertAdjacentHTML("beforebegin", o) : this.dummyDOM.querySelector("#" + r).insertAdjacentHTML("afterend", o);
                        }
                        return this.descriptions.label = this.dummyDOM.querySelector("#" + r + f), void (this.descriptions.label.innerHTML = t);
                    }
                }, a28.default.prototype._describeElementHTML = function(e, t, r) {
                    var n = this.canvas.id;
                    if ("fallback" === e) {
                        if (this.dummyDOM.querySelector("#".concat(n + l))) this.dummyDOM.querySelector("#" + n + c) || this.dummyDOM.querySelector("#" + n + u).insertAdjacentHTML("afterend", '<table id="'.concat(n).concat(c, '"><caption>Canvas elements and their descriptions</caption></table>'));
                        else {
                            var o = '<div id="'.concat(n).concat(l, '" role="region" aria-label="Canvas Description"><table id="').concat(n).concat(c, '"><caption>Canvas elements and their descriptions</caption></table></div>');
                            this.dummyDOM.querySelector("#".concat(n, "accessibleOutput")) ? this.dummyDOM.querySelector("#".concat(n, "accessibleOutput")).insertAdjacentHTML("beforebegin", o) : this.dummyDOM.querySelector("#" + n).innerHTML = o;
                        }
                        var i = document.createElement("tr");
                        return i.id = n + "_fte_" + t, this.dummyDOM.querySelector("#" + n + c).appendChild(i), this.descriptions.fallbackElements[t] = this.dummyDOM.querySelector("#".concat(n).concat("_fte_").concat(t)), void (this.descriptions.fallbackElements[t].innerHTML = r);
                    }
                    if ("label" === e) {
                        if (this.dummyDOM.querySelector("#".concat(n + d))) this.dummyDOM.querySelector("#".concat(n + h)) || this.dummyDOM.querySelector("#" + n + f).insertAdjacentHTML("afterend", '<table id="'.concat(n + h, '"></table>'));
                        else {
                            var a = '<div id="'.concat(n).concat(d, '" class="p5Label"><table id="').concat(n).concat(h, '"></table></div>');
                            this.dummyDOM.querySelector("#".concat(n, "accessibleOutputLabel")) ? this.dummyDOM.querySelector("#".concat(n, "accessibleOutputLabel")).insertAdjacentHTML("beforebegin", a) : this.dummyDOM.querySelector("#" + n).insertAdjacentHTML("afterend", a);
                        }
                        var s = document.createElement("tr");
                        s.id = n + "_lte_" + t, this.dummyDOM.querySelector("#" + n + h).appendChild(s), this.descriptions.labelElements[t] = this.dummyDOM.querySelector("#".concat(n).concat("_lte_").concat(t)), this.descriptions.labelElements[t].innerHTML = r;
                    }
                };
                var o59 = a28.default;
                r159.default = o59;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.string.ends-with": 181,
                "core-js/modules/es.string.replace": 186
            }
        ],
        242: [
            function(e325, t212, r160) {
                "use strict";
                e325("core-js/modules/es.array.concat"), e325("core-js/modules/es.array.map"), Object.defineProperty(r160, "__esModule", {
                    value: !0
                }), r160.default = void 0;
                var n91, o60 = (n91 = e325("../core/main")) && n91.__esModule ? n91 : {
                    default: n91
                };
                o60.default.prototype._updateGridOutput = function(e326) {
                    if (this.dummyDOM.querySelector("#".concat(e326, "_summary"))) {
                        var t213 = this._accessibleOutputs[e326], r161 = function(e, t) {
                            var r = "", n = "", o = 0;
                            for(var i in t){
                                var a = 0;
                                for(var s in t[i]){
                                    var l = '<li id="'.concat(e, "shape").concat(o, '">').concat(t[i][s].color, " ").concat(i, ",");
                                    "line" === i ? l += " location = ".concat(t[i][s].pos, ", length = ").concat(t[i][s].length, " pixels") : (l += " location = ".concat(t[i][s].pos), "point" !== i && (l += ", area = ".concat(t[i][s].area, " %")), l += "</li>"), r += l, a++, o++;
                                }
                                n = 1 < a ? "".concat(n, " ").concat(a, " ").concat(i, "s") : "".concat(n, " ").concat(a, " ").concat(i);
                            }
                            return {
                                numShapes: [
                                    o,
                                    n
                                ],
                                details: r
                            };
                        }(e326, this.ingredients.shapes), n92 = function(e, t, r, n) {
                            var o = "".concat(t, " canvas, ").concat(r, " by ").concat(n, " pixels, contains ").concat(e[0]);
                            o = 1 === e[0] ? "".concat(o, " shape: ").concat(e[1]) : "".concat(o, " shapes: ").concat(e[1]);
                            return o;
                        }(r161.numShapes, this.ingredients.colors.background, this.width, this.height), o61 = function(e, t) {
                            var r = 0, n = "", o = Array.apply(null, Array(10)).map(function() {
                            });
                            for(var i in o)o[i] = Array.apply(null, Array(10)).map(function() {
                            });
                            for(var a in t)for(var s in t[a]){
                                var l = void 0;
                                l = "line" !== a ? '<a href="#'.concat(e, "shape").concat(r, '">').concat(t[a][s].color, " ").concat(a, "</a>") : '<a href="#'.concat(e, "shape").concat(r, '">').concat(t[a][s].color, " ").concat(a, " midpoint</a>"), o[t[a][s].loc.locY][t[a][s].loc.locX] ? o[t[a][s].loc.locY][t[a][s].loc.locX] = o[t[a][s].loc.locY][t[a][s].loc.locX] + "  " + l : o[t[a][s].loc.locY][t[a][s].loc.locX] = l, r++;
                            }
                            for(var u in o){
                                var c = "<tr>";
                                for(var d in o[u])c += "<td>", void 0 !== o[u][d] && (c += o[u][d]), c += "</td>";
                                n = n + c + "</tr>";
                            }
                            return n;
                        }(e326, this.ingredients.shapes);
                        n92 !== t213.summary.innerHTML && (t213.summary.innerHTML = n92), o61 !== t213.map.innerHTML && (t213.map.innerHTML = o61), r161.details !== t213.shapeDetails.innerHTML && (t213.shapeDetails.innerHTML = r161.details), this._accessibleOutputs[e326] = t213;
                    }
                };
                var i39 = o60.default;
                r160.default = i39;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.map": 159
            }
        ],
        243: [
            function(e327, t214, r162) {
                "use strict";
                e327("core-js/modules/es.array.concat"), e327("core-js/modules/es.array.fill"), e327("core-js/modules/es.array.map"), e327("core-js/modules/es.number.to-fixed"), Object.defineProperty(r162, "__esModule", {
                    value: !0
                }), r162.default = void 0;
                var n93, o62 = (n93 = e327("../core/main")) && n93.__esModule ? n93 : {
                    default: n93
                };
                function l18(e, t, r) {
                    return e[0] < 0.4 * t ? e[1] < 0.4 * r ? "top left" : e[1] > 0.6 * r ? "bottom left" : "mid left" : e[0] > 0.6 * t ? e[1] < 0.4 * r ? "top right" : e[1] > 0.6 * r ? "bottom right" : "mid right" : e[1] < 0.4 * r ? "top middle" : e[1] > 0.6 * r ? "bottom middle" : "middle";
                }
                function u13(e, t, r) {
                    var n = Math.floor(e[0] / t * 10), o = Math.floor(e[1] / r * 10);
                    return 10 === n && --n, 10 === o && --o, {
                        locX: n,
                        locY: o
                    };
                }
                o62.default.prototype.textOutput = function(e) {
                    o62.default._validateParameters("textOutput", arguments), this._accessibleOutputs.text || (this._accessibleOutputs.text = !0, this._createOutput("textOutput", "Fallback"), e === this.LABEL && (this._accessibleOutputs.textLabel = !0, this._createOutput("textOutput", "Label")));
                }, o62.default.prototype.gridOutput = function(e) {
                    o62.default._validateParameters("gridOutput", arguments), this._accessibleOutputs.grid || (this._accessibleOutputs.grid = !0, this._createOutput("gridOutput", "Fallback"), e === this.LABEL && (this._accessibleOutputs.gridLabel = !0, this._createOutput("gridOutput", "Label")));
                }, o62.default.prototype._addAccsOutput = function() {
                    return this._accessibleOutputs || (this._accessibleOutputs = {
                        text: !1,
                        grid: !1,
                        textLabel: !1,
                        gridLabel: !1
                    }), this._accessibleOutputs.grid || this._accessibleOutputs.text;
                }, o62.default.prototype._createOutput = function(e, t) {
                    var r, n, o, i = this.canvas.id;
                    this.ingredients || (this.ingredients = {
                        shapes: {
                        },
                        colors: {
                            background: "white",
                            fill: "white",
                            stroke: "black"
                        },
                        pShapes: ""
                    }), this.dummyDOM || (this.dummyDOM = document.getElementById(i).parentNode);
                    var a = "";
                    "Fallback" === t ? (r = i + e, n = i + "accessibleOutput", this.dummyDOM.querySelector("#".concat(n)) || (this.dummyDOM.querySelector("#".concat(i, "_Description")) ? this.dummyDOM.querySelector("#".concat(i, "_Description")).insertAdjacentHTML("afterend", '<div id="'.concat(n, '" role="region" aria-label="Canvas Outputs"></div>')) : this.dummyDOM.querySelector("#".concat(i)).innerHTML = '<div id="'.concat(n, '" role="region" aria-label="Canvas Outputs"></div>'))) : "Label" === t && (r = i + e + (a = t), n = i + "accessibleOutput" + t, this.dummyDOM.querySelector("#".concat(n)) || (this.dummyDOM.querySelector("#".concat(i, "_Label")) ? this.dummyDOM.querySelector("#".concat(i, "_Label")).insertAdjacentHTML("afterend", '<div id="'.concat(n, '"></div>')) : this.dummyDOM.querySelector("#".concat(i)).insertAdjacentHTML("afterend", '<div id="'.concat(n, '"></div>')))), this._accessibleOutputs[r] = {
                    }, "textOutput" === e ? (a = "#".concat(i, "gridOutput").concat(a), o = '<div id="'.concat(r, '">Text Output<div id="').concat(r, 'Summary" aria-label="text output summary"><p id="').concat(r, '_summary"></p><ul id="').concat(r, '_list"></ul></div><table id="').concat(r, '_shapeDetails" summary="text output shape details"></table></div>'), this.dummyDOM.querySelector(a) ? this.dummyDOM.querySelector(a).insertAdjacentHTML("beforebegin", o) : this.dummyDOM.querySelector("#".concat(n)).innerHTML = o, this._accessibleOutputs[r].list = this.dummyDOM.querySelector("#".concat(r, "_list"))) : "gridOutput" === e && (a = "#".concat(i, "textOutput").concat(a), o = '<div id="'.concat(r, '">Grid Output<p id="').concat(r, '_summary" aria-label="grid output summary"><table id="').concat(r, '_map" summary="grid output content"></table><ul id="').concat(r, '_shapeDetails" aria-label="grid output shape details"></ul></div>'), this.dummyDOM.querySelector(a) ? this.dummyDOM.querySelector(a).insertAdjacentHTML("afterend", o) : this.dummyDOM.querySelector("#".concat(n)).innerHTML = o, this._accessibleOutputs[r].map = this.dummyDOM.querySelector("#".concat(r, "_map"))), this._accessibleOutputs[r].shapeDetails = this.dummyDOM.querySelector("#".concat(r, "_shapeDetails")), this._accessibleOutputs[r].summary = this.dummyDOM.querySelector("#".concat(r, "_summary"));
                }, o62.default.prototype._updateAccsOutput = function() {
                    var e = this.canvas.id;
                    JSON.stringify(this.ingredients.shapes) !== this.ingredients.pShapes && (this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes), this._accessibleOutputs.text && this._updateTextOutput(e + "textOutput"), this._accessibleOutputs.grid && this._updateGridOutput(e + "gridOutput"), this._accessibleOutputs.textLabel && this._updateTextOutput(e + "textOutputLabel"), this._accessibleOutputs.gridLabel && this._updateGridOutput(e + "gridOutputLabel"));
                }, o62.default.prototype._accsBackground = function(e) {
                    this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes), this.ingredients.shapes = {
                    }, this.ingredients.colors.backgroundRGBA !== e && (this.ingredients.colors.backgroundRGBA = e, this.ingredients.colors.background = this._rgbColorName(e));
                }, o62.default.prototype._accsCanvasColors = function(e, t) {
                    "fill" === e ? this.ingredients.colors.fillRGBA !== t && (this.ingredients.colors.fillRGBA = t, this.ingredients.colors.fill = this._rgbColorName(t)) : "stroke" === e && this.ingredients.colors.strokeRGBA !== t && (this.ingredients.colors.strokeRGBA = t, this.ingredients.colors.stroke = this._rgbColorName(t));
                }, o62.default.prototype._accsOutput = function(e328, t215) {
                    "ellipse" === e328 && t215[2] === t215[3] ? e328 = "circle" : "rectangle" === e328 && t215[2] === t215[3] && (e328 = "square");
                    var r163 = {
                    }, n94 = !0, o63 = function(e, t) {
                        var r, n;
                        n = "rectangle" === e || "ellipse" === e || "arc" === e || "circle" === e || "square" === e ? (r = Math.round(t[0] + t[2] / 2), Math.round(t[1] + t[3] / 2)) : "triangle" === e ? (r = (t[0] + t[2] + t[4]) / 3, (t[1] + t[3] + t[5]) / 3) : "quadrilateral" === e ? (r = (t[0] + t[2] + t[4] + t[6]) / 4, (t[1] + t[3] + t[5] + t[7]) / 4) : "line" === e ? (r = (t[0] + t[2]) / 2, (t[1] + t[3]) / 2) : (r = t[0], t[1]);
                        return [
                            r,
                            n
                        ];
                    }(e328, t215);
                    if ("line" === e328) {
                        r163.color = this.ingredients.colors.stroke, r163.length = Math.round(this.dist(t215[0], t215[1], t215[2], t215[3]));
                        var i = l18([
                            t215[0],
                            [
                                1
                            ]
                        ], this.width, this.height), a = l18([
                            t215[2],
                            [
                                3
                            ]
                        ], this.width, this.height);
                        r163.loc = u13(o63, this.width, this.height), r163.pos = i === a ? "at ".concat(i) : "from ".concat(i, " to ").concat(a);
                    } else "point" === e328 ? r163.color = this.ingredients.colors.stroke : (r163.color = this.ingredients.colors.fill, r163.area = (function(e, t, r, n) {
                        var o = 0;
                        if ("arc" === e) {
                            var i = ((t[5] - t[4]) % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);
                            if (o = i * t[2] * t[3] / 8, "open" === t[6] || "chord" === t[6]) {
                                var a = t[0], s = t[1], l = t[0] + t[2] / 2 * Math.cos(t[4]).toFixed(2), u = t[1] + t[3] / 2 * Math.sin(t[4]).toFixed(2), c = t[0] + t[2] / 2 * Math.cos(t[5]).toFixed(2), d = t[1] + t[3] / 2 * Math.sin(t[5]).toFixed(2), f = Math.abs(a * (u - d) + l * (d - s) + c * (s - u)) / 2;
                                i > Math.PI ? o += f : o -= f;
                            }
                        } else "ellipse" === e || "circle" === e ? o = 3.14 * t[2] / 2 * t[3] / 2 : "line" === e ? o = 0 : "point" === e ? o = 0 : "quadrilateral" === e ? o = Math.abs((t[6] + t[0]) * (t[7] - t[1]) + (t[0] + t[2]) * (t[1] - t[3]) + (t[2] + t[4]) * (t[3] - t[5]) + (t[4] + t[6]) * (t[5] - t[7])) / 2 : "rectangle" === e || "square" === e ? o = t[2] * t[3] : "triangle" === e && (o = Math.abs(t[0] * (t[3] - t[5]) + t[2] * (t[5] - t[1]) + t[4] * (t[1] - t[3])) / 2);
                        return Math.round(100 * o / (r * n));
                    })(e328, t215, this.width, this.height)), r163.pos = l18(o63, this.width, this.height), r163.loc = u13(o63, this.width, this.height);
                    if (this.ingredients.shapes[e328]) {
                        if (this.ingredients.shapes[e328] !== [
                            r163
                        ]) {
                            for(var s24 in this.ingredients.shapes[e328])JSON.stringify(this.ingredients.shapes[e328][s24]) === JSON.stringify(r163) && (n94 = !1);
                            !0 === n94 && this.ingredients.shapes[e328].push(r163);
                        }
                    } else this.ingredients.shapes[e328] = [
                        r163
                    ];
                };
                var i40 = o62.default;
                r162.default = i40;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.fill": 150,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.number.to-fixed": 169
            }
        ],
        244: [
            function(e329, t216, r164) {
                "use strict";
                e329("core-js/modules/es.array.concat"), Object.defineProperty(r164, "__esModule", {
                    value: !0
                }), r164.default = void 0;
                var n95, o64 = (n95 = e329("../core/main")) && n95.__esModule ? n95 : {
                    default: n95
                };
                o64.default.prototype._updateTextOutput = function(e330) {
                    if (this.dummyDOM.querySelector("#".concat(e330, "_summary"))) {
                        var t217 = this._accessibleOutputs[e330], r165 = function(e, t) {
                            var r = "", n = 0;
                            for(var o in t)for(var i in t[o]){
                                var a = '<li><a href="#'.concat(e, "shape").concat(n, '">').concat(t[o][i].color, " ").concat(o, "</a>");
                                "line" === o ? a += ", ".concat(t[o][i].pos, ", ").concat(t[o][i].length, " pixels long.</li>") : (a += ", at ".concat(t[o][i].pos), "point" !== o && (a += ", covering ".concat(t[o][i].area, "% of the canvas")), a += ".</li>"), r += a, n++;
                            }
                            return {
                                numShapes: n,
                                listShapes: r
                            };
                        }(e330, this.ingredients.shapes), n96 = function(e, t, r, n) {
                            var o = "Your output is a, ".concat(r, " by ").concat(n, " pixels, ").concat(t, " canvas containing the following");
                            o = 1 === e ? "".concat(o, " shape:") : "".concat(o, " ").concat(e, " shapes:");
                            return o;
                        }(r165.numShapes, this.ingredients.colors.background, this.width, this.height), o65 = function(e, t) {
                            var r = "", n = 0;
                            for(var o in t)for(var i in t[o]){
                                var a = '<tr id="'.concat(e, "shape").concat(n, '"><th>').concat(t[o][i].color, " ").concat(o, "</th>");
                                "line" === o ? a += "<td>location = ".concat(t[o][i].pos, "</td><td>length = ").concat(t[o][i].length, " pixels</td></tr>") : (a += "<td>location = ".concat(t[o][i].pos, "</td>"), "point" !== o && (a += "<td> area = ".concat(t[o][i].area, "%</td>")), a += "</tr>"), r += a, n++;
                            }
                            return r;
                        }(e330, this.ingredients.shapes);
                        n96 !== t217.summary.innerHTML && (t217.summary.innerHTML = n96), r165.listShapes !== t217.list.innerHTML && (t217.list.innerHTML = r165.listShapes), o65 !== t217.shapeDetails.innerHTML && (t217.shapeDetails.innerHTML = o65), this._accessibleOutputs[e330] = t217;
                    }
                };
                var i = o64.default;
                r164.default = i;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148
            }
        ],
        245: [
            function(e, t, r) {
                "use strict";
                var n, o = (n = e("./core/main")) && n.__esModule ? n : {
                    default: n
                };
                e("./core/constants"), e("./core/environment"), e("./core/friendly_errors/stacktrace"), e("./core/friendly_errors/validate_params"), e("./core/friendly_errors/file_errors"), e("./core/friendly_errors/fes_core"), e("./core/helpers"), e("./core/legacy"), e("./core/preload"), e("./core/p5.Element"), e("./core/p5.Graphics"), e("./core/p5.Renderer"), e("./core/p5.Renderer2D"), e("./core/rendering"), e("./core/shim"), e("./core/structure"), e("./core/transform"), e("./core/shape/2d_primitives"), e("./core/shape/attributes"), e("./core/shape/curves"), e("./core/shape/vertex"), e("./accessibility/outputs"), e("./accessibility/textOutput"), e("./accessibility/gridOutput"), e("./accessibility/color_namer"), e("./color/color_conversion"), e("./color/creating_reading"), e("./color/p5.Color"), e("./color/setting"), e("./data/p5.TypedDict"), e("./data/local_storage.js"), e("./dom/dom"), e("./accessibility/describe"), e("./events/acceleration"), e("./events/keyboard"), e("./events/mouse"), e("./events/touch"), e("./image/filters"), e("./image/image"), e("./image/loading_displaying"), e("./image/p5.Image"), e("./image/pixels"), e("./io/files"), e("./io/p5.Table"), e("./io/p5.TableRow"), e("./io/p5.XML"), e("./math/calculation"), e("./math/math"), e("./math/noise"), e("./math/p5.Vector"), e("./math/random"), e("./math/trigonometry"), e("./typography/attributes"), e("./typography/loading_displaying"), e("./typography/p5.Font"), e("./utilities/array_functions"), e("./utilities/conversion"), e("./utilities/string_functions"), e("./utilities/time_date"), e("./webgl/3d_primitives"), e("./webgl/interaction"), e("./webgl/light"), e("./webgl/loading"), e("./webgl/material"), e("./webgl/p5.Camera"), e("./webgl/p5.Geometry"), e("./webgl/p5.Matrix"), e("./webgl/p5.RendererGL.Immediate"), e("./webgl/p5.RendererGL"), e("./webgl/p5.RendererGL.Retained"), e("./webgl/p5.Shader"), e("./webgl/p5.RenderBuffer"), e("./webgl/p5.Texture"), e("./webgl/text"), e("./core/init"), t.exports = o.default;
            },
            {
                "./accessibility/color_namer": 240,
                "./accessibility/describe": 241,
                "./accessibility/gridOutput": 242,
                "./accessibility/outputs": 243,
                "./accessibility/textOutput": 244,
                "./color/color_conversion": 246,
                "./color/creating_reading": 247,
                "./color/p5.Color": 248,
                "./color/setting": 249,
                "./core/constants": 250,
                "./core/environment": 251,
                "./core/friendly_errors/fes_core": 252,
                "./core/friendly_errors/file_errors": 253,
                "./core/friendly_errors/stacktrace": 254,
                "./core/friendly_errors/validate_params": 255,
                "./core/helpers": 256,
                "./core/init": 257,
                "./core/legacy": 259,
                "./core/main": 260,
                "./core/p5.Element": 261,
                "./core/p5.Graphics": 262,
                "./core/p5.Renderer": 263,
                "./core/p5.Renderer2D": 264,
                "./core/preload": 265,
                "./core/rendering": 266,
                "./core/shape/2d_primitives": 267,
                "./core/shape/attributes": 268,
                "./core/shape/curves": 269,
                "./core/shape/vertex": 270,
                "./core/shim": 271,
                "./core/structure": 272,
                "./core/transform": 273,
                "./data/local_storage.js": 274,
                "./data/p5.TypedDict": 275,
                "./dom/dom": 276,
                "./events/acceleration": 277,
                "./events/keyboard": 278,
                "./events/mouse": 279,
                "./events/touch": 280,
                "./image/filters": 281,
                "./image/image": 282,
                "./image/loading_displaying": 283,
                "./image/p5.Image": 284,
                "./image/pixels": 285,
                "./io/files": 286,
                "./io/p5.Table": 287,
                "./io/p5.TableRow": 288,
                "./io/p5.XML": 289,
                "./math/calculation": 290,
                "./math/math": 291,
                "./math/noise": 292,
                "./math/p5.Vector": 293,
                "./math/random": 294,
                "./math/trigonometry": 295,
                "./typography/attributes": 296,
                "./typography/loading_displaying": 297,
                "./typography/p5.Font": 298,
                "./utilities/array_functions": 299,
                "./utilities/conversion": 300,
                "./utilities/string_functions": 301,
                "./utilities/time_date": 302,
                "./webgl/3d_primitives": 303,
                "./webgl/interaction": 304,
                "./webgl/light": 305,
                "./webgl/loading": 306,
                "./webgl/material": 307,
                "./webgl/p5.Camera": 308,
                "./webgl/p5.Geometry": 309,
                "./webgl/p5.Matrix": 310,
                "./webgl/p5.RenderBuffer": 311,
                "./webgl/p5.RendererGL": 314,
                "./webgl/p5.RendererGL.Immediate": 312,
                "./webgl/p5.RendererGL.Retained": 313,
                "./webgl/p5.Shader": 315,
                "./webgl/p5.Texture": 316,
                "./webgl/text": 317
            }
        ],
        246: [
            function(e331, t218, r166) {
                "use strict";
                Object.defineProperty(r166, "__esModule", {
                    value: !0
                }), r166.default = void 0;
                var n97, o66 = (n97 = e331("../core/main")) && n97.__esModule ? n97 : {
                    default: n97
                };
                o66.default.ColorConversion = {
                }, o66.default.ColorConversion._hsbaToHSLA = function(e) {
                    var t = e[0], r = e[1], n = e[2], o = (2 - r) * n / 2;
                    return 0 != o && (1 == o ? r = 0 : o < 0.5 ? r /= 2 - r : r = r * n / (2 - 2 * o)), [
                        t,
                        r,
                        o,
                        e[3]
                    ];
                }, o66.default.ColorConversion._hsbaToRGBA = function(e) {
                    var t = 6 * e[0], r = e[1], n = e[2], o = [];
                    if (0 === r) o = [
                        n,
                        n,
                        n,
                        e[3]
                    ];
                    else {
                        var i, a, s, l = Math.floor(t), u = n * (1 - r), c = n * (1 - r * (t - l)), d = n * (1 - r * (1 + l - t));
                        s = 1 === l ? (i = c, a = n, u) : 2 === l ? (i = u, a = n, d) : 3 === l ? (i = u, a = c, n) : 4 === l ? (i = d, a = u, n) : 5 === l ? (i = n, a = u, c) : (i = n, a = d, u), o = [
                            i,
                            a,
                            s,
                            e[3]
                        ];
                    }
                    return o;
                }, o66.default.ColorConversion._hslaToHSBA = function(e) {
                    var t, r = e[0], n = e[1], o = e[2];
                    return [
                        r,
                        n = 2 * ((t = o < 0.5 ? (1 + n) * o : o + n - o * n) - o) / t,
                        t,
                        e[3]
                    ];
                }, o66.default.ColorConversion._hslaToRGBA = function(e332) {
                    var t219 = 6 * e332[0], r167 = e332[1], n = e332[2], o = [];
                    if (0 === r167) o = [
                        n,
                        n,
                        n,
                        e332[3]
                    ];
                    else {
                        var i, a = 2 * n - (i = n < 0.5 ? (1 + r167) * n : n + r167 - n * r167), s = function(e, t, r) {
                            return e < 0 ? e += 6 : 6 <= e && (e -= 6), e < 1 ? t + (r - t) * e : e < 3 ? r : e < 4 ? t + (r - t) * (4 - e) : t;
                        };
                        o = [
                            s(2 + t219, a, i),
                            s(t219, a, i),
                            s(t219 - 2, a, i),
                            e332[3]
                        ];
                    }
                    return o;
                }, o66.default.ColorConversion._rgbaToHSBA = function(e) {
                    var t, r, n = e[0], o = e[1], i = e[2], a = Math.max(n, o, i), s = a - Math.min(n, o, i);
                    return 0 == s ? r = t = 0 : (r = s / a, n === a ? t = (o - i) / s : o === a ? t = 2 + (i - n) / s : i === a && (t = 4 + (n - o) / s), t < 0 ? t += 6 : 6 <= t && (t -= 6)), [
                        t / 6,
                        r,
                        a,
                        e[3]
                    ];
                }, o66.default.ColorConversion._rgbaToHSLA = function(e) {
                    var t, r, n = e[0], o = e[1], i = e[2], a = Math.max(n, o, i), s = Math.min(n, o, i), l = a + s, u = a - s;
                    return 0 == u ? r = t = 0 : (r = l < 1 ? u / l : u / (2 - l), n === a ? t = (o - i) / u : o === a ? t = 2 + (i - n) / u : i === a && (t = 4 + (n - o) / u), t < 0 ? t += 6 : 6 <= t && (t -= 6)), [
                        t / 6,
                        r,
                        l / 2,
                        e[3]
                    ];
                };
                var i41 = o66.default.ColorConversion;
                r166.default = i41;
            },
            {
                "../core/main": 260
            }
        ],
        247: [
            function(e333, t220, r168) {
                "use strict";
                function a29(e334) {
                    return (a29 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e334);
                }
                e333("core-js/modules/es.array.map"), Object.defineProperty(r168, "__esModule", {
                    value: !0
                }), r168.default = void 0;
                var n98, d = (n98 = e333("../core/main")) && n98.__esModule ? n98 : {
                    default: n98
                }, f = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a29(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s25();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e333("../core/constants"));
                function s25() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s25 = function() {
                        return e;
                    }, e;
                }
                e333("./p5.Color"), e333("../core/friendly_errors/validate_params"), e333("../core/friendly_errors/file_errors"), e333("../core/friendly_errors/fes_core"), d.default.prototype.alpha = function(e) {
                    return d.default._validateParameters("alpha", arguments), this.color(e)._getAlpha();
                }, d.default.prototype.blue = function(e) {
                    return d.default._validateParameters("blue", arguments), this.color(e)._getBlue();
                }, d.default.prototype.brightness = function(e) {
                    return d.default._validateParameters("brightness", arguments), this.color(e)._getBrightness();
                }, d.default.prototype.color = function() {
                    if (d.default._validateParameters("color", arguments), arguments[0] instanceof d.default.Color) return arguments[0];
                    var e = arguments[0] instanceof Array ? arguments[0] : arguments;
                    return new d.default.Color(this, e);
                }, d.default.prototype.green = function(e) {
                    return d.default._validateParameters("green", arguments), this.color(e)._getGreen();
                }, d.default.prototype.hue = function(e) {
                    return d.default._validateParameters("hue", arguments), this.color(e)._getHue();
                }, d.default.prototype.lerpColor = function(e335, t221, r169) {
                    d.default._validateParameters("lerpColor", arguments);
                    var n, o, i, a, s, l, u = this._colorMode, c = this._colorMaxes;
                    if (u === f.RGB) s = e335.levels.map(function(e) {
                        return e / 255;
                    }), l = t221.levels.map(function(e) {
                        return e / 255;
                    });
                    else if (u === f.HSB) e335._getBrightness(), t221._getBrightness(), s = e335.hsba, l = t221.hsba;
                    else {
                        if (u !== f.HSL) throw new Error("".concat(u, "cannot be used for interpolation."));
                        e335._getLightness(), t221._getLightness(), s = e335.hsla, l = t221.hsla;
                    }
                    return r169 = Math.max(Math.min(r169, 1), 0), void 0 === this.lerp && (this.lerp = function(e, t, r) {
                        return r * (t - e) + e;
                    }), n = this.lerp(s[0], l[0], r169), o = this.lerp(s[1], l[1], r169), i = this.lerp(s[2], l[2], r169), a = this.lerp(s[3], l[3], r169), n *= c[u][0], o *= c[u][1], i *= c[u][2], a *= c[u][3], this.color(n, o, i, a);
                }, d.default.prototype.lightness = function(e) {
                    return d.default._validateParameters("lightness", arguments), this.color(e)._getLightness();
                }, d.default.prototype.red = function(e) {
                    return d.default._validateParameters("red", arguments), this.color(e)._getRed();
                }, d.default.prototype.saturation = function(e) {
                    return d.default._validateParameters("saturation", arguments), this.color(e)._getSaturation();
                };
                var o67 = d.default;
                r168.default = o67;
            },
            {
                "../core/constants": 250,
                "../core/friendly_errors/fes_core": 252,
                "../core/friendly_errors/file_errors": 253,
                "../core/friendly_errors/validate_params": 255,
                "../core/main": 260,
                "./p5.Color": 248,
                "core-js/modules/es.array.map": 159
            }
        ],
        248: [
            function(e336, t222, r170) {
                "use strict";
                function a30(e337) {
                    return (a30 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e337);
                }
                e336("core-js/modules/es.array.join"), e336("core-js/modules/es.array.map"), e336("core-js/modules/es.array.slice"), e336("core-js/modules/es.object.to-string"), e336("core-js/modules/es.regexp.constructor"), e336("core-js/modules/es.regexp.exec"), e336("core-js/modules/es.regexp.to-string"), e336("core-js/modules/es.string.trim"), Object.defineProperty(r170, "__esModule", {
                    value: !0
                }), r170.default = void 0;
                var d = n99(e336("../core/main")), f = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a30(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s26();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e336("../core/constants")), h = n99(e336("./color_conversion"));
                function s26() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s26 = function() {
                        return e;
                    }, e;
                }
                function n99(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                d.default.Color = function(e, t) {
                    if (this._storeModeAndMaxes(e._colorMode, e._colorMaxes), this.mode !== f.RGB && this.mode !== f.HSL && this.mode !== f.HSB) throw new Error("".concat(this.mode, " is an invalid colorMode."));
                    return this._array = d.default.Color._parseInputs.apply(this, t), this._calculateLevels(), this;
                }, d.default.Color.prototype.toString = function(e) {
                    var t = this.levels, r = this._array, n = r[3];
                    switch(e){
                        case "#rrggbb":
                            return "#".concat(t[0] < 16 ? "0".concat(t[0].toString(16)) : t[0].toString(16), t[1] < 16 ? "0".concat(t[1].toString(16)) : t[1].toString(16), t[2] < 16 ? "0".concat(t[2].toString(16)) : t[2].toString(16));
                        case "#rrggbbaa":
                            return "#".concat(t[0] < 16 ? "0".concat(t[0].toString(16)) : t[0].toString(16), t[1] < 16 ? "0".concat(t[1].toString(16)) : t[1].toString(16), t[2] < 16 ? "0".concat(t[2].toString(16)) : t[2].toString(16), t[3] < 16 ? "0".concat(t[3].toString(16)) : t[3].toString(16));
                        case "#rgb":
                            return "#".concat(Math.round(15 * r[0]).toString(16), Math.round(15 * r[1]).toString(16), Math.round(15 * r[2]).toString(16));
                        case "#rgba":
                            return "#".concat(Math.round(15 * r[0]).toString(16), Math.round(15 * r[1]).toString(16), Math.round(15 * r[2]).toString(16), Math.round(15 * r[3]).toString(16));
                        case "rgb":
                            return "rgb(".concat(t[0], ", ", t[1], ", ", t[2], ")");
                        case "rgb%":
                            return "rgb(".concat((100 * r[0]).toPrecision(3), "%, ", (100 * r[1]).toPrecision(3), "%, ", (100 * r[2]).toPrecision(3), "%)");
                        case "rgba%":
                            return "rgba(".concat((100 * r[0]).toPrecision(3), "%, ", (100 * r[1]).toPrecision(3), "%, ", (100 * r[2]).toPrecision(3), "%, ", (100 * r[3]).toPrecision(3), "%)");
                        case "hsb":
                        case "hsv":
                            return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsb(".concat(this.hsba[0] * this.maxes[f.HSB][0], ", ", this.hsba[1] * this.maxes[f.HSB][1], ", ", this.hsba[2] * this.maxes[f.HSB][2], ")");
                        case "hsb%":
                        case "hsv%":
                            return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsb(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%)");
                        case "hsba":
                        case "hsva":
                            return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsba(".concat(this.hsba[0] * this.maxes[f.HSB][0], ", ", this.hsba[1] * this.maxes[f.HSB][1], ", ", this.hsba[2] * this.maxes[f.HSB][2], ", ", n, ")");
                        case "hsba%":
                        case "hsva%":
                            return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsba(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%, ", (100 * n).toPrecision(3), "%)");
                        case "hsl":
                            return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsl(".concat(this.hsla[0] * this.maxes[f.HSL][0], ", ", this.hsla[1] * this.maxes[f.HSL][1], ", ", this.hsla[2] * this.maxes[f.HSL][2], ")");
                        case "hsl%":
                            return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%)");
                        case "hsla":
                            return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsla(".concat(this.hsla[0] * this.maxes[f.HSL][0], ", ", this.hsla[1] * this.maxes[f.HSL][1], ", ", this.hsla[2] * this.maxes[f.HSL][2], ", ", n, ")");
                        case "hsla%":
                            return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%, ", (100 * n).toPrecision(3), "%)");
                        case "rgba":
                        default:
                            return "rgba(".concat(t[0], ",", t[1], ",", t[2], ",", n, ")");
                    }
                }, d.default.Color.prototype.setRed = function(e) {
                    this._array[0] = e / this.maxes[f.RGB][0], this._calculateLevels();
                }, d.default.Color.prototype.setGreen = function(e) {
                    this._array[1] = e / this.maxes[f.RGB][1], this._calculateLevels();
                }, d.default.Color.prototype.setBlue = function(e) {
                    this._array[2] = e / this.maxes[f.RGB][2], this._calculateLevels();
                }, d.default.Color.prototype.setAlpha = function(e) {
                    this._array[3] = e / this.maxes[this.mode][3], this._calculateLevels();
                }, d.default.Color.prototype._calculateLevels = function() {
                    for(var e = this._array, t = this.levels = new Array(e.length), r = e.length - 1; 0 <= r; --r)t[r] = Math.round(255 * e[r]);
                }, d.default.Color.prototype._getAlpha = function() {
                    return this._array[3] * this.maxes[this.mode][3];
                }, d.default.Color.prototype._storeModeAndMaxes = function(e, t) {
                    this.mode = e, this.maxes = t;
                }, d.default.Color.prototype._getMode = function() {
                    return this.mode;
                }, d.default.Color.prototype._getMaxes = function() {
                    return this.maxes;
                }, d.default.Color.prototype._getBlue = function() {
                    return this._array[2] * this.maxes[f.RGB][2];
                }, d.default.Color.prototype._getBrightness = function() {
                    return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), this.hsba[2] * this.maxes[f.HSB][2];
                }, d.default.Color.prototype._getGreen = function() {
                    return this._array[1] * this.maxes[f.RGB][1];
                }, d.default.Color.prototype._getHue = function() {
                    return this.mode === f.HSB ? (this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), this.hsba[0] * this.maxes[f.HSB][0]) : (this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), this.hsla[0] * this.maxes[f.HSL][0]);
                }, d.default.Color.prototype._getLightness = function() {
                    return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), this.hsla[2] * this.maxes[f.HSL][2];
                }, d.default.Color.prototype._getRed = function() {
                    return this._array[0] * this.maxes[f.RGB][0];
                }, d.default.Color.prototype._getSaturation = function() {
                    return this.mode === f.HSB ? (this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), this.hsba[1] * this.maxes[f.HSB][1]) : (this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), this.hsla[1] * this.maxes[f.HSL][1]);
                };
                var p = {
                    aliceblue: "#f0f8ff",
                    antiquewhite: "#faebd7",
                    aqua: "#00ffff",
                    aquamarine: "#7fffd4",
                    azure: "#f0ffff",
                    beige: "#f5f5dc",
                    bisque: "#ffe4c4",
                    black: "#000000",
                    blanchedalmond: "#ffebcd",
                    blue: "#0000ff",
                    blueviolet: "#8a2be2",
                    brown: "#a52a2a",
                    burlywood: "#deb887",
                    cadetblue: "#5f9ea0",
                    chartreuse: "#7fff00",
                    chocolate: "#d2691e",
                    coral: "#ff7f50",
                    cornflowerblue: "#6495ed",
                    cornsilk: "#fff8dc",
                    crimson: "#dc143c",
                    cyan: "#00ffff",
                    darkblue: "#00008b",
                    darkcyan: "#008b8b",
                    darkgoldenrod: "#b8860b",
                    darkgray: "#a9a9a9",
                    darkgreen: "#006400",
                    darkgrey: "#a9a9a9",
                    darkkhaki: "#bdb76b",
                    darkmagenta: "#8b008b",
                    darkolivegreen: "#556b2f",
                    darkorange: "#ff8c00",
                    darkorchid: "#9932cc",
                    darkred: "#8b0000",
                    darksalmon: "#e9967a",
                    darkseagreen: "#8fbc8f",
                    darkslateblue: "#483d8b",
                    darkslategray: "#2f4f4f",
                    darkslategrey: "#2f4f4f",
                    darkturquoise: "#00ced1",
                    darkviolet: "#9400d3",
                    deeppink: "#ff1493",
                    deepskyblue: "#00bfff",
                    dimgray: "#696969",
                    dimgrey: "#696969",
                    dodgerblue: "#1e90ff",
                    firebrick: "#b22222",
                    floralwhite: "#fffaf0",
                    forestgreen: "#228b22",
                    fuchsia: "#ff00ff",
                    gainsboro: "#dcdcdc",
                    ghostwhite: "#f8f8ff",
                    gold: "#ffd700",
                    goldenrod: "#daa520",
                    gray: "#808080",
                    green: "#008000",
                    greenyellow: "#adff2f",
                    grey: "#808080",
                    honeydew: "#f0fff0",
                    hotpink: "#ff69b4",
                    indianred: "#cd5c5c",
                    indigo: "#4b0082",
                    ivory: "#fffff0",
                    khaki: "#f0e68c",
                    lavender: "#e6e6fa",
                    lavenderblush: "#fff0f5",
                    lawngreen: "#7cfc00",
                    lemonchiffon: "#fffacd",
                    lightblue: "#add8e6",
                    lightcoral: "#f08080",
                    lightcyan: "#e0ffff",
                    lightgoldenrodyellow: "#fafad2",
                    lightgray: "#d3d3d3",
                    lightgreen: "#90ee90",
                    lightgrey: "#d3d3d3",
                    lightpink: "#ffb6c1",
                    lightsalmon: "#ffa07a",
                    lightseagreen: "#20b2aa",
                    lightskyblue: "#87cefa",
                    lightslategray: "#778899",
                    lightslategrey: "#778899",
                    lightsteelblue: "#b0c4de",
                    lightyellow: "#ffffe0",
                    lime: "#00ff00",
                    limegreen: "#32cd32",
                    linen: "#faf0e6",
                    magenta: "#ff00ff",
                    maroon: "#800000",
                    mediumaquamarine: "#66cdaa",
                    mediumblue: "#0000cd",
                    mediumorchid: "#ba55d3",
                    mediumpurple: "#9370db",
                    mediumseagreen: "#3cb371",
                    mediumslateblue: "#7b68ee",
                    mediumspringgreen: "#00fa9a",
                    mediumturquoise: "#48d1cc",
                    mediumvioletred: "#c71585",
                    midnightblue: "#191970",
                    mintcream: "#f5fffa",
                    mistyrose: "#ffe4e1",
                    moccasin: "#ffe4b5",
                    navajowhite: "#ffdead",
                    navy: "#000080",
                    oldlace: "#fdf5e6",
                    olive: "#808000",
                    olivedrab: "#6b8e23",
                    orange: "#ffa500",
                    orangered: "#ff4500",
                    orchid: "#da70d6",
                    palegoldenrod: "#eee8aa",
                    palegreen: "#98fb98",
                    paleturquoise: "#afeeee",
                    palevioletred: "#db7093",
                    papayawhip: "#ffefd5",
                    peachpuff: "#ffdab9",
                    peru: "#cd853f",
                    pink: "#ffc0cb",
                    plum: "#dda0dd",
                    powderblue: "#b0e0e6",
                    purple: "#800080",
                    rebeccapurple: "#663399",
                    red: "#ff0000",
                    rosybrown: "#bc8f8f",
                    royalblue: "#4169e1",
                    saddlebrown: "#8b4513",
                    salmon: "#fa8072",
                    sandybrown: "#f4a460",
                    seagreen: "#2e8b57",
                    seashell: "#fff5ee",
                    sienna: "#a0522d",
                    silver: "#c0c0c0",
                    skyblue: "#87ceeb",
                    slateblue: "#6a5acd",
                    slategray: "#708090",
                    slategrey: "#708090",
                    snow: "#fffafa",
                    springgreen: "#00ff7f",
                    steelblue: "#4682b4",
                    tan: "#d2b48c",
                    teal: "#008080",
                    thistle: "#d8bfd8",
                    tomato: "#ff6347",
                    turquoise: "#40e0d0",
                    violet: "#ee82ee",
                    wheat: "#f5deb3",
                    white: "#ffffff",
                    whitesmoke: "#f5f5f5",
                    yellow: "#ffff00",
                    yellowgreen: "#9acd32"
                }, o68 = /\s*/, i42 = /(\d{1,3})/, l19 = /((?:\d+(?:\.\d+)?)|(?:\.\d+))/, u14 = new RegExp("".concat(l19.source, "%")), y = {
                    HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,
                    HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,
                    HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
                    HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
                    RGB: new RegExp([
                        "^rgb\\(",
                        i42.source,
                        ",",
                        i42.source,
                        ",",
                        i42.source,
                        "\\)$"
                    ].join(o68.source), "i"),
                    RGB_PERCENT: new RegExp([
                        "^rgb\\(",
                        u14.source,
                        ",",
                        u14.source,
                        ",",
                        u14.source,
                        "\\)$"
                    ].join(o68.source), "i"),
                    RGBA: new RegExp([
                        "^rgba\\(",
                        i42.source,
                        ",",
                        i42.source,
                        ",",
                        i42.source,
                        ",",
                        l19.source,
                        "\\)$"
                    ].join(o68.source), "i"),
                    RGBA_PERCENT: new RegExp([
                        "^rgba\\(",
                        u14.source,
                        ",",
                        u14.source,
                        ",",
                        u14.source,
                        ",",
                        l19.source,
                        "\\)$"
                    ].join(o68.source), "i"),
                    HSL: new RegExp([
                        "^hsl\\(",
                        i42.source,
                        ",",
                        u14.source,
                        ",",
                        u14.source,
                        "\\)$"
                    ].join(o68.source), "i"),
                    HSLA: new RegExp([
                        "^hsla\\(",
                        i42.source,
                        ",",
                        u14.source,
                        ",",
                        u14.source,
                        ",",
                        l19.source,
                        "\\)$"
                    ].join(o68.source), "i"),
                    HSB: new RegExp([
                        "^hsb\\(",
                        i42.source,
                        ",",
                        u14.source,
                        ",",
                        u14.source,
                        "\\)$"
                    ].join(o68.source), "i"),
                    HSBA: new RegExp([
                        "^hsba\\(",
                        i42.source,
                        ",",
                        u14.source,
                        ",",
                        u14.source,
                        ",",
                        l19.source,
                        "\\)$"
                    ].join(o68.source), "i")
                };
                d.default.Color._parseInputs = function(e338, t223, r, n) {
                    var o, i = arguments.length, a = this.mode, s = this.maxes[a], l = [];
                    if (3 <= i) {
                        for(l[0] = e338 / s[0], l[1] = t223 / s[1], l[2] = r / s[2], l[3] = "number" == typeof n ? n / s[3] : 1, o = l.length - 1; 0 <= o; --o){
                            var u = l[o];
                            u < 0 ? l[o] = 0 : 1 < u && (l[o] = 1);
                        }
                        return a === f.HSL ? h.default._hslaToRGBA(l) : a === f.HSB ? h.default._hsbaToRGBA(l) : l;
                    }
                    if (1 === i && "string" == typeof e338) {
                        var c = e338.trim().toLowerCase();
                        if (p[c]) return d.default.Color._parseInputs.call(this, p[c]);
                        if (y.HEX3.test(c)) return (l = y.HEX3.exec(c).slice(1).map(function(e) {
                            return parseInt(e + e, 16) / 255;
                        }))[3] = 1, l;
                        if (y.HEX6.test(c)) return (l = y.HEX6.exec(c).slice(1).map(function(e) {
                            return parseInt(e, 16) / 255;
                        }))[3] = 1, l;
                        if (y.HEX4.test(c)) return l = y.HEX4.exec(c).slice(1).map(function(e) {
                            return parseInt(e + e, 16) / 255;
                        });
                        if (y.HEX8.test(c)) return l = y.HEX8.exec(c).slice(1).map(function(e) {
                            return parseInt(e, 16) / 255;
                        });
                        if (y.RGB.test(c)) return (l = y.RGB.exec(c).slice(1).map(function(e) {
                            return e / 255;
                        }))[3] = 1, l;
                        if (y.RGB_PERCENT.test(c)) return (l = y.RGB_PERCENT.exec(c).slice(1).map(function(e) {
                            return parseFloat(e) / 100;
                        }))[3] = 1, l;
                        if (y.RGBA.test(c)) return l = y.RGBA.exec(c).slice(1).map(function(e, t) {
                            return 3 === t ? parseFloat(e) : e / 255;
                        });
                        if (y.RGBA_PERCENT.test(c)) return l = y.RGBA_PERCENT.exec(c).slice(1).map(function(e, t) {
                            return 3 === t ? parseFloat(e) : parseFloat(e) / 100;
                        });
                        if (y.HSL.test(c) ? (l = y.HSL.exec(c).slice(1).map(function(e, t) {
                            return 0 === t ? parseInt(e, 10) / 360 : parseInt(e, 10) / 100;
                        }))[3] = 1 : y.HSLA.test(c) && (l = y.HSLA.exec(c).slice(1).map(function(e, t) {
                            return 0 === t ? parseInt(e, 10) / 360 : 3 === t ? parseFloat(e) : parseInt(e, 10) / 100;
                        })), (l = l.map(function(e) {
                            return Math.max(Math.min(e, 1), 0);
                        })).length) return h.default._hslaToRGBA(l);
                        if (y.HSB.test(c) ? (l = y.HSB.exec(c).slice(1).map(function(e, t) {
                            return 0 === t ? parseInt(e, 10) / 360 : parseInt(e, 10) / 100;
                        }))[3] = 1 : y.HSBA.test(c) && (l = y.HSBA.exec(c).slice(1).map(function(e, t) {
                            return 0 === t ? parseInt(e, 10) / 360 : 3 === t ? parseFloat(e) : parseInt(e, 10) / 100;
                        })), l.length) {
                            for(o = l.length - 1; 0 <= o; --o)l[o] = Math.max(Math.min(l[o], 1), 0);
                            return h.default._hsbaToRGBA(l);
                        }
                        l = [
                            1,
                            1,
                            1,
                            1
                        ];
                    } else {
                        if (1 !== i && 2 !== i || "number" != typeof e338) throw new Error("".concat(arguments, "is not a valid color representation."));
                        l[0] = e338 / s[2], l[1] = e338 / s[2], l[2] = e338 / s[2], l[3] = "number" == typeof t223 ? t223 / s[3] : 1, l = l.map(function(e) {
                            return Math.max(Math.min(e, 1), 0);
                        });
                    }
                    return l;
                };
                var c12 = d.default.Color;
                r170.default = c12;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "./color_conversion": 246,
                "core-js/modules/es.array.join": 157,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.constructor": 177,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.trim": 190
            }
        ],
        249: [
            function(e339, t224, r171) {
                "use strict";
                function a(e340) {
                    return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e340);
                }
                e339("core-js/modules/es.array.fill"), Object.defineProperty(r171, "__esModule", {
                    value: !0
                }), r171.default = void 0;
                var n100, s = (n100 = e339("../core/main")) && n100.__esModule ? n100 : {
                    default: n100
                }, l = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = u();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e339("../core/constants"));
                function u() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return u = function() {
                        return e;
                    }, e;
                }
                e339("./p5.Color"), s.default.prototype.background = function() {
                    var e;
                    return (e = this._renderer).background.apply(e, arguments), this;
                }, s.default.prototype.clear = function() {
                    return this._renderer.clear(), this;
                }, s.default.prototype.colorMode = function(e, t, r, n, o) {
                    if (s.default._validateParameters("colorMode", arguments), e === l.RGB || e === l.HSB || e === l.HSL) {
                        this._colorMode = e;
                        var i = this._colorMaxes[e];
                        2 === arguments.length ? (i[0] = t, i[1] = t, i[2] = t, i[3] = t) : 4 === arguments.length ? (i[0] = t, i[1] = r, i[2] = n) : 5 === arguments.length && (i[0] = t, i[1] = r, i[2] = n, i[3] = o);
                    }
                    return this;
                }, s.default.prototype.fill = function() {
                    var e;
                    return this._renderer._setProperty("_fillSet", !0), this._renderer._setProperty("_doFill", !0), (e = this._renderer).fill.apply(e, arguments), this;
                }, s.default.prototype.noFill = function() {
                    return this._renderer._setProperty("_doFill", !1), this;
                }, s.default.prototype.noStroke = function() {
                    return this._renderer._setProperty("_doStroke", !1), this;
                }, s.default.prototype.stroke = function() {
                    var e;
                    return this._renderer._setProperty("_strokeSet", !0), this._renderer._setProperty("_doStroke", !0), (e = this._renderer).stroke.apply(e, arguments), this;
                }, s.default.prototype.erase = function() {
                    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 255, t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 255;
                    return this._renderer.erase(e, t), this;
                }, s.default.prototype.noErase = function() {
                    return this._renderer.noErase(), this;
                };
                var o69 = s.default;
                r171.default = o69;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "./p5.Color": 248,
                "core-js/modules/es.array.fill": 150
            }
        ],
        250: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                }), r.STROKE = r.CURVE = r.BEZIER = r.QUADRATIC = r.LINEAR = r._CTX_MIDDLE = r._DEFAULT_LEADMULT = r._DEFAULT_TEXT_FILL = r.BOLDITALIC = r.BOLD = r.ITALIC = r.NORMAL = r.BLUR = r.ERODE = r.DILATE = r.POSTERIZE = r.INVERT = r.OPAQUE = r.GRAY = r.THRESHOLD = r.BURN = r.DODGE = r.SOFT_LIGHT = r.HARD_LIGHT = r.OVERLAY = r.REPLACE = r.SCREEN = r.MULTIPLY = r.EXCLUSION = r.SUBTRACT = r.DIFFERENCE = r.LIGHTEST = r.DARKEST = r.ADD = r.REMOVE = r.BLEND = r.UP_ARROW = r.TAB = r.SHIFT = r.RIGHT_ARROW = r.RETURN = r.OPTION = r.LEFT_ARROW = r.ESCAPE = r.ENTER = r.DOWN_ARROW = r.DELETE = r.CONTROL = r.BACKSPACE = r.ALT = r.AUTO = r.HSL = r.HSB = r.RGB = r.MITER = r.BEVEL = r.ROUND = r.SQUARE = r.PROJECT = r.PIE = r.CHORD = r.OPEN = r.CLOSE = r.TESS = r.QUAD_STRIP = r.QUADS = r.TRIANGLE_STRIP = r.TRIANGLE_FAN = r.TRIANGLES = r.LINE_LOOP = r.LINE_STRIP = r.LINES = r.POINTS = r.BASELINE = r.BOTTOM = r.TOP = r.CENTER = r.LEFT = r.RIGHT = r.RADIUS = r.CORNERS = r.CORNER = r.RAD_TO_DEG = r.DEG_TO_RAD = r.RADIANS = r.DEGREES = r.TWO_PI = r.TAU = r.QUARTER_PI = r.PI = r.HALF_PI = r.WAIT = r.TEXT = r.MOVE = r.HAND = r.CROSS = r.ARROW = r.WEBGL = r.P2D = r.VERSION = void 0, r.FALLBACK = r.LABEL = r.AXES = r.GRID = r._DEFAULT_FILL = r._DEFAULT_STROKE = r.PORTRAIT = r.LANDSCAPE = r.MIRROR = r.CLAMP = r.REPEAT = r.NEAREST = r.IMAGE = r.IMMEDIATE = r.TEXTURE = r.FILL = void 0;
                var n = Math.PI;
                r.VERSION = "1.3.1";
                r.P2D = "p2d";
                r.WEBGL = "webgl";
                r.ARROW = "default";
                r.CROSS = "crosshair";
                r.HAND = "pointer";
                r.MOVE = "move";
                r.TEXT = "text";
                r.WAIT = "wait";
                var o = n / 2;
                r.HALF_PI = o;
                var i = n;
                r.PI = i;
                var a = n / 4;
                r.QUARTER_PI = a;
                var s = 2 * n;
                r.TAU = s;
                var l = 2 * n;
                r.TWO_PI = l;
                r.DEGREES = "degrees";
                r.RADIANS = "radians";
                var u = n / 180;
                r.DEG_TO_RAD = u;
                var c = 180 / n;
                r.RAD_TO_DEG = c;
                r.CORNER = "corner";
                r.CORNERS = "corners";
                r.RADIUS = "radius";
                r.RIGHT = "right";
                r.LEFT = "left";
                r.CENTER = "center";
                r.TOP = "top";
                r.BOTTOM = "bottom";
                r.BASELINE = "alphabetic";
                r.POINTS = 0;
                r.LINES = 1;
                r.LINE_STRIP = 3;
                r.LINE_LOOP = 2;
                r.TRIANGLES = 4;
                r.TRIANGLE_FAN = 6;
                r.TRIANGLE_STRIP = 5;
                r.QUADS = "quads";
                r.QUAD_STRIP = "quad_strip";
                r.TESS = "tess";
                r.CLOSE = "close";
                r.OPEN = "open";
                r.CHORD = "chord";
                r.PIE = "pie";
                r.PROJECT = "square";
                r.SQUARE = "butt";
                r.ROUND = "round";
                r.BEVEL = "bevel";
                r.MITER = "miter";
                r.RGB = "rgb";
                r.HSB = "hsb";
                r.HSL = "hsl";
                r.AUTO = "auto";
                r.ALT = 18;
                r.BACKSPACE = 8;
                r.CONTROL = 17;
                r.DELETE = 46;
                r.DOWN_ARROW = 40;
                r.ENTER = 13;
                r.ESCAPE = 27;
                r.LEFT_ARROW = 37;
                r.OPTION = 18;
                r.RETURN = 13;
                r.RIGHT_ARROW = 39;
                r.SHIFT = 16;
                r.TAB = 9;
                r.UP_ARROW = 38;
                r.BLEND = "source-over";
                r.REMOVE = "destination-out";
                r.ADD = "lighter";
                r.DARKEST = "darken";
                r.LIGHTEST = "lighten";
                r.DIFFERENCE = "difference";
                r.SUBTRACT = "subtract";
                r.EXCLUSION = "exclusion";
                r.MULTIPLY = "multiply";
                r.SCREEN = "screen";
                r.REPLACE = "copy";
                r.OVERLAY = "overlay";
                r.HARD_LIGHT = "hard-light";
                r.SOFT_LIGHT = "soft-light";
                r.DODGE = "color-dodge";
                r.BURN = "color-burn";
                r.THRESHOLD = "threshold";
                r.GRAY = "gray";
                r.OPAQUE = "opaque";
                r.INVERT = "invert";
                r.POSTERIZE = "posterize";
                r.DILATE = "dilate";
                r.ERODE = "erode";
                r.BLUR = "blur";
                r.NORMAL = "normal";
                r.ITALIC = "italic";
                r.BOLD = "bold";
                r.BOLDITALIC = "bold italic";
                r._DEFAULT_TEXT_FILL = "#000000";
                r._DEFAULT_LEADMULT = 1.25;
                r._CTX_MIDDLE = "middle";
                r.LINEAR = "linear";
                r.QUADRATIC = "quadratic";
                r.BEZIER = "bezier";
                r.CURVE = "curve";
                r.STROKE = "stroke";
                r.FILL = "fill";
                r.TEXTURE = "texture";
                r.IMMEDIATE = "immediate";
                r.IMAGE = "image";
                r.NEAREST = "nearest";
                r.REPEAT = "repeat";
                r.CLAMP = "clamp";
                r.MIRROR = "mirror";
                r.LANDSCAPE = "landscape";
                r.PORTRAIT = "portrait";
                r._DEFAULT_STROKE = "#000000";
                r._DEFAULT_FILL = "#FFFFFF";
                r.GRID = "grid";
                r.AXES = "axes";
                r.LABEL = "label";
                r.FALLBACK = "fallback";
            },
            {
            }
        ],
        251: [
            function(e341, t225, r172) {
                "use strict";
                function a(e342) {
                    return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e342);
                }
                e341("core-js/modules/es.array.concat"), e341("core-js/modules/es.array.filter"), e341("core-js/modules/es.array.includes"), e341("core-js/modules/es.regexp.exec"), e341("core-js/modules/es.string.includes"), e341("core-js/modules/es.string.search"), e341("core-js/modules/es.string.split"), Object.defineProperty(r172, "__esModule", {
                    value: !0
                }), r172.default = void 0;
                var n101, o70 = (n101 = e341("./main")) && n101.__esModule ? n101 : {
                    default: n101
                }, i43 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e341("./constants"));
                function s() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s = function() {
                        return e;
                    }, e;
                }
                var l = [
                    i43.ARROW,
                    i43.CROSS,
                    i43.HAND,
                    i43.MOVE,
                    i43.TEXT,
                    i43.WAIT
                ];
                o70.default.prototype._frameRate = 0, o70.default.prototype._lastFrameTime = window.performance.now(), o70.default.prototype._targetFrameRate = 60;
                var u = window.print;
                function c() {
                    return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth || 0;
                }
                function d() {
                    return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight || 0;
                }
                o70.default.prototype.print = function() {
                    var e;
                    arguments.length ? (e = console).log.apply(e, arguments) : u();
                }, o70.default.prototype.frameCount = 0, o70.default.prototype.deltaTime = 0, o70.default.prototype.focused = document.hasFocus(), o70.default.prototype.cursor = function(e, t, r) {
                    var n = "auto", o = this._curElement.elt;
                    if (l.includes(e)) n = e;
                    else if ("string" == typeof e) {
                        var i = "";
                        t && r && "number" == typeof t && "number" == typeof r && (i = "".concat(t, " ").concat(r)), n = "http://" === e.substring(0, 7) || "https://" === e.substring(0, 8) ? "url(".concat(e, ") ").concat(i, ", auto") : /\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(e) ? "url(".concat(e, ") ").concat(i, ", auto") : e;
                    }
                    o.style.cursor = n;
                }, o70.default.prototype.frameRate = function(e) {
                    return o70.default._validateParameters("frameRate", arguments), "number" != typeof e || e < 0 ? this._frameRate : (this._setProperty("_targetFrameRate", e), 0 === e && this._setProperty("_frameRate", e), this);
                }, o70.default.prototype.getFrameRate = function() {
                    return this.frameRate();
                }, o70.default.prototype.setFrameRate = function(e) {
                    return this.frameRate(e);
                }, o70.default.prototype.noCursor = function() {
                    this._curElement.elt.style.cursor = "none";
                }, o70.default.prototype.displayWidth = screen.width, o70.default.prototype.displayHeight = screen.height, o70.default.prototype.windowWidth = c(), o70.default.prototype.windowHeight = d(), o70.default.prototype._onresize = function(e) {
                    this._setProperty("windowWidth", c()), this._setProperty("windowHeight", d());
                    var t, r = this._isGlobal ? window : this;
                    "function" == typeof r.windowResized && (void 0 === (t = r.windowResized(e)) || t || e.preventDefault());
                }, o70.default.prototype.width = 0, o70.default.prototype.height = 0, o70.default.prototype.fullscreen = function(e343) {
                    if (o70.default._validateParameters("fullscreen", arguments), void 0 === e343) return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
                    e343 ? (function(e) {
                        if (!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled)) throw new Error("Fullscreen not enabled in this browser.");
                        e.requestFullscreen ? e.requestFullscreen() : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.webkitRequestFullscreen ? e.webkitRequestFullscreen() : e.msRequestFullscreen && e.msRequestFullscreen();
                    })(document.documentElement) : document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();
                }, o70.default.prototype.pixelDensity = function(e) {
                    var t;
                    return o70.default._validateParameters("pixelDensity", arguments), "number" == typeof e ? (e !== this._pixelDensity && (this._pixelDensity = e), (t = this).resizeCanvas(this.width, this.height, !0)) : t = this._pixelDensity, t;
                }, o70.default.prototype.displayDensity = function() {
                    return window.devicePixelRatio;
                }, o70.default.prototype.getURL = function() {
                    return location.href;
                }, o70.default.prototype.getURLPath = function() {
                    return location.pathname.split("/").filter(function(e) {
                        return "" !== e;
                    });
                }, o70.default.prototype.getURLParams = function() {
                    for(var e, t = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim, r = {
                    }; null != (e = t.exec(location.search));)e.index === t.lastIndex && t.lastIndex++, r[e[1]] = e[2];
                    return r;
                };
                var f = o70.default;
                r172.default = f;
            },
            {
                "./constants": 250,
                "./main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.string.includes": 182,
                "core-js/modules/es.string.search": 187,
                "core-js/modules/es.string.split": 188
            }
        ],
        252: [
            function(r173, e344, t226) {
                "use strict";
                r173("core-js/modules/es.symbol"), r173("core-js/modules/es.symbol.description"), r173("core-js/modules/es.symbol.iterator"), r173("core-js/modules/es.array.concat"), r173("core-js/modules/es.array.filter"), r173("core-js/modules/es.array.for-each"), r173("core-js/modules/es.array.includes"), r173("core-js/modules/es.array.iterator"), r173("core-js/modules/es.array.join"), r173("core-js/modules/es.array.map"), r173("core-js/modules/es.array.slice"), r173("core-js/modules/es.array.some"), r173("core-js/modules/es.function.name"), r173("core-js/modules/es.object.assign"), r173("core-js/modules/es.object.get-own-property-names"), r173("core-js/modules/es.object.keys"), r173("core-js/modules/es.object.to-string"), r173("core-js/modules/es.regexp.constructor"), r173("core-js/modules/es.regexp.exec"), r173("core-js/modules/es.regexp.to-string"), r173("core-js/modules/es.string.iterator"), r173("core-js/modules/es.string.match"), r173("core-js/modules/es.string.replace"), r173("core-js/modules/es.string.search"), r173("core-js/modules/es.string.split"), r173("core-js/modules/web.dom-collections.for-each"), r173("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(t226, "__esModule", {
                    value: !0
                }), t226.default = void 0;
                var n102, o = (n102 = r173("../main")) && n102.__esModule ? n102 : {
                    default: n102
                };
                r173("../internationalization");
                var i = null, a = null;
                o.default._friendlyError = o.default._checkForUserDefinedFunctions = o.default._fesErrorMonitor = function() {
                }, i = null;
                var s = "https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup";
                a = function() {
                    function e345(r) {
                        return Object.getOwnPropertyNames(r).filter(function(e) {
                            return "_" !== e[0] && !(e in t227) && (t227[e] = !0);
                        }).map(function(e) {
                            var t;
                            return t = "function" == typeof r[e] ? "function" : e === e.toUpperCase() ? "constant" : "variable", {
                                name: e,
                                type: t
                            };
                        });
                    }
                    var t227 = {
                    };
                    (i = [].concat(e345(o.default.prototype), e345(r173("../constants")))).sort(function(e, t) {
                        return t.name.length - e.name.length;
                    });
                };
                function l(r, n) {
                    n = n || console.log.bind(console), i || a(), i.some(function(e) {
                        if (r.message && null !== r.message.match("\\W?".concat(e.name, "\\W"))) {
                            var t = "function" === e.type ? "".concat(e.name, "()") : e.name;
                            return n("Did you just try to use p5.js's ".concat(t, " ").concat(e.type, "? If so, you may want to move it into your sketch's setup() function.\n\nFor more details, see: ").concat(s)), !0;
                        }
                    });
                }
                o.default.prototype._helpForMisusedAtTopLevelCode = l, "complete" !== document.readyState && (window.addEventListener("error", l, !1), window.addEventListener("load", function() {
                    window.removeEventListener("error", l, !1);
                }));
                var u = o.default;
                t226.default = u;
            },
            {
                "../constants": 250,
                "../internationalization": 258,
                "../main": 260,
                "./browser_errors": void 0,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.for-each": 152,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.join": 157,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.array.some": 161,
                "core-js/modules/es.function.name": 163,
                "core-js/modules/es.object.assign": 170,
                "core-js/modules/es.object.get-own-property-names": 171,
                "core-js/modules/es.object.keys": 173,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.constructor": 177,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.match": 184,
                "core-js/modules/es.string.replace": 186,
                "core-js/modules/es.string.search": 187,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.for-each": 225,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        253: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                }), r.default = void 0;
                var n, o = (n = e("../main")) && n.__esModule ? n : {
                    default: n
                };
                e("../internationalization");
                o.default._friendlyFileLoadError = function() {
                };
                var i = o.default;
                r.default = i;
            },
            {
                "../internationalization": 258,
                "../main": 260
            }
        ],
        254: [
            function(e346, t228, r174) {
                "use strict";
                e346("core-js/modules/es.array.filter"), e346("core-js/modules/es.array.index-of"), e346("core-js/modules/es.array.join"), e346("core-js/modules/es.array.map"), e346("core-js/modules/es.array.slice"), e346("core-js/modules/es.regexp.exec"), e346("core-js/modules/es.string.match"), e346("core-js/modules/es.string.replace"), e346("core-js/modules/es.string.split"), Object.defineProperty(r174, "__esModule", {
                    value: !0
                }), r174.default = void 0;
                var n103, o71 = (n103 = e346("../main")) && n103.__esModule ? n103 : {
                    default: n103
                };
                function i44() {
                    var t229 = /(^|@)\S+:\d+/, r175 = /^\s*at .*(\S+:\d+|\(native\))/m, n104 = /^(eval@)?(\[native code])?$/;
                    return {
                        parse: function(e) {
                            return void 0 !== e.stacktrace || void 0 !== e["opera#sourceloc"] ? this.parseOpera(e) : e.stack && e.stack.match(r175) ? this.parseV8OrIE(e) : e.stack ? this.parseFFOrSafari(e) : void 0;
                        },
                        extractLocation: function(e) {
                            if (-1 === e.indexOf(":")) return [
                                e
                            ];
                            var t = /(.+?)(?::(\d+))?(?::(\d+))?$/.exec(e.replace(/[()]/g, ""));
                            return [
                                t[1],
                                t[2] || void 0,
                                t[3] || void 0
                            ];
                        },
                        parseV8OrIE: function(e347) {
                            return e347.stack.split("\n").filter(function(e) {
                                return !!e.match(r175);
                            }, this).map(function(e) {
                                -1 < e.indexOf("(eval ") && (e = e.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, ""));
                                var t = e.replace(/^\s+/, "").replace(/\(eval code/g, "("), r = t.match(/ (\((.+):(\d+):(\d+)\)$)/), n = (t = r ? t.replace(r[0], "") : t).split(/\s+/).slice(1), o = this.extractLocation(r ? r[1] : n.pop());
                                return {
                                    functionName: n.join(" ") || void 0,
                                    fileName: -1 < [
                                        "eval",
                                        "<anonymous>"
                                    ].indexOf(o[0]) ? void 0 : o[0],
                                    lineNumber: o[1],
                                    columnNumber: o[2],
                                    source: e
                                };
                            }, this);
                        },
                        parseFFOrSafari: function(e348) {
                            return e348.stack.split("\n").filter(function(e) {
                                return !e.match(n104);
                            }, this).map(function(e) {
                                if (-1 < e.indexOf(" > eval") && (e = e.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1")), -1 === e.indexOf("@") && -1 === e.indexOf(":")) return {
                                    functionName: e
                                };
                                var t = /((.*".+"[^@]*)?[^@]*)(?:@)/, r = e.match(t), n = r && r[1] ? r[1] : void 0, o = this.extractLocation(e.replace(t, ""));
                                return {
                                    functionName: n,
                                    fileName: o[0],
                                    lineNumber: o[1],
                                    columnNumber: o[2],
                                    source: e
                                };
                            }, this);
                        },
                        parseOpera: function(e) {
                            return !e.stacktrace || -1 < e.message.indexOf("\n") && e.message.split("\n").length > e.stacktrace.split("\n").length ? this.parseOpera9(e) : e.stack ? this.parseOpera11(e) : this.parseOpera10(e);
                        },
                        parseOpera9: function(e) {
                            for(var t = /Line (\d+).*script (?:in )?(\S+)/i, r = e.message.split("\n"), n = [], o = 2, i = r.length; o < i; o += 2){
                                var a = t.exec(r[o]);
                                a && n.push({
                                    fileName: a[2],
                                    lineNumber: a[1],
                                    source: r[o]
                                });
                            }
                            return n;
                        },
                        parseOpera10: function(e) {
                            for(var t = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, r = e.stacktrace.split("\n"), n = [], o = 0, i = r.length; o < i; o += 2){
                                var a = t.exec(r[o]);
                                a && n.push({
                                    functionName: a[3] || void 0,
                                    fileName: a[2],
                                    lineNumber: a[1],
                                    source: r[o]
                                });
                            }
                            return n;
                        },
                        parseOpera11: function(e349) {
                            return e349.stack.split("\n").filter(function(e) {
                                return !!e.match(t229) && !e.match(/^Error created at/);
                            }, this).map(function(e) {
                                var t, r = e.split("@"), n = this.extractLocation(r.pop()), o = r.shift() || "", i = o.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
                                return o.match(/\(([^)]*)\)/) && (t = o.replace(/^[^(]+\(([^)]*)\)$/, "$1")), {
                                    functionName: i,
                                    args: void 0 === t || "[arguments not available]" === t ? void 0 : t.split(","),
                                    fileName: n[0],
                                    lineNumber: n[1],
                                    columnNumber: n[2],
                                    source: e
                                };
                            }, this);
                        }
                    };
                }
                o71.default._getErrorStackParser = function() {
                    return new i44;
                };
                var a31 = o71.default;
                r174.default = a31;
            },
            {
                "../main": 260,
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.join": 157,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.string.match": 184,
                "core-js/modules/es.string.replace": 186,
                "core-js/modules/es.string.split": 188
            }
        ],
        255: [
            function(e350, t230, r176) {
                "use strict";
                e350("core-js/modules/es.symbol"), e350("core-js/modules/es.symbol.description"), e350("core-js/modules/es.symbol.iterator"), e350("core-js/modules/es.array.concat"), e350("core-js/modules/es.array.for-each"), e350("core-js/modules/es.array.includes"), e350("core-js/modules/es.array.index-of"), e350("core-js/modules/es.array.iterator"), e350("core-js/modules/es.array.join"), e350("core-js/modules/es.array.last-index-of"), e350("core-js/modules/es.array.map"), e350("core-js/modules/es.array.slice"), e350("core-js/modules/es.function.name"), e350("core-js/modules/es.map"), e350("core-js/modules/es.number.constructor"), e350("core-js/modules/es.object.get-prototype-of"), e350("core-js/modules/es.object.keys"), e350("core-js/modules/es.object.to-string"), e350("core-js/modules/es.reflect.construct"), e350("core-js/modules/es.regexp.exec"), e350("core-js/modules/es.regexp.to-string"), e350("core-js/modules/es.set"), e350("core-js/modules/es.string.includes"), e350("core-js/modules/es.string.iterator"), e350("core-js/modules/es.string.split"), e350("core-js/modules/web.dom-collections.for-each"), e350("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r176, "__esModule", {
                    value: !0
                }), r176.default = void 0;
                var n105, o72 = (n105 = e350("../main")) && n105.__esModule ? n105 : {
                    default: n105
                };
                (function(e) {
                    if (e && e.__esModule) return;
                    if (null === e || "object" !== s(e) && "function" != typeof e) return;
                    var t = a();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                })(e350("../constants")), e350("../internationalization");
                function a() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return a = function() {
                        return e;
                    }, e;
                }
                function s(e351) {
                    return (s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e351);
                }
                o72.default._validateParameters = o72.default._clearValidateParamsCache = function() {
                };
                var i45 = o72.default;
                r176.default = i45;
            },
            {
                "../../../docs/parameterData.json": void 0,
                "../constants": 250,
                "../internationalization": 258,
                "../main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.for-each": 152,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.join": 157,
                "core-js/modules/es.array.last-index-of": 158,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.function.name": 163,
                "core-js/modules/es.map": 164,
                "core-js/modules/es.number.constructor": 167,
                "core-js/modules/es.object.get-prototype-of": 172,
                "core-js/modules/es.object.keys": 173,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.reflect.construct": 176,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.set": 180,
                "core-js/modules/es.string.includes": 182,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.for-each": 225,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        256: [
            function(e352, t231, r177) {
                "use strict";
                function a(e353) {
                    return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e353);
                }
                Object.defineProperty(r177, "__esModule", {
                    value: !0
                }), r177.default = void 0;
                var i46 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e352("./constants"));
                function s() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s = function() {
                        return e;
                    }, e;
                }
                var n106 = {
                    modeAdjust: function(e, t, r, n, o) {
                        return o === i46.CORNER ? {
                            x: e,
                            y: t,
                            w: r,
                            h: n
                        } : o === i46.CORNERS ? {
                            x: e,
                            y: t,
                            w: r - e,
                            h: n - t
                        } : o === i46.RADIUS ? {
                            x: e - r,
                            y: t - n,
                            w: 2 * r,
                            h: 2 * n
                        } : o === i46.CENTER ? {
                            x: e - 0.5 * r,
                            y: t - 0.5 * n,
                            w: r,
                            h: n
                        } : void 0;
                    }
                };
                r177.default = n106;
            },
            {
                "./constants": 250
            }
        ],
        257: [
            function(e354, t, r) {
                "use strict";
                e354("core-js/modules/es.array.iterator"), e354("core-js/modules/es.object.to-string"), e354("core-js/modules/es.promise"), e354("core-js/modules/es.string.iterator"), e354("core-js/modules/web.dom-collections.iterator");
                var n, o = (n = e354("../core/main")) && n.__esModule ? n : {
                    default: n
                };
                e354("./internationalization");
                var i = Promise.resolve();
                Promise.all([
                    new Promise(function(e, t) {
                        "complete" === document.readyState ? e() : window.addEventListener("load", e, !1);
                    }),
                    i
                ]).then(function() {
                    void 0 === window._setupDone ? window.mocha || (window.setup && "function" == typeof window.setup || window.draw && "function" == typeof window.draw) && !o.default.instance && new o.default : console.warn("p5.js seems to have been imported multiple times. Please remove the duplicate import");
                });
            },
            {
                "../core/main": 260,
                "./internationalization": 258,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.promise": 175,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        258: [
            function(e355, t232, r178) {
                "use strict";
                e355("core-js/modules/es.array.includes"), e355("core-js/modules/es.array.iterator"), e355("core-js/modules/es.array.join"), e355("core-js/modules/es.array.slice"), e355("core-js/modules/es.object.keys"), e355("core-js/modules/es.object.to-string"), e355("core-js/modules/es.promise"), e355("core-js/modules/es.regexp.exec"), e355("core-js/modules/es.string.includes"), e355("core-js/modules/es.string.iterator"), e355("core-js/modules/es.string.split"), e355("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r178, "__esModule", {
                    value: !0
                }), r178.initialize = r178.translator = void 0;
                var i, a, n107 = s(e355("i18next")), o73 = s(e355("i18next-browser-languagedetector"));
                function s(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                function l(e, t) {
                    for(var r = 0; r < t.length; r++){
                        var n = t[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                    }
                }
                var u = function() {
                    function r179(e357, t234) {
                        !function(e, t) {
                            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                        }(this, r179), this.init(e357, t234);
                    }
                    var e356, t233, n108;
                    return e356 = r179, t233 = [
                        {
                            key: "fetchWithTimeout",
                            value: function(e, t235, r) {
                                var n = 2 < arguments.length && void 0 !== r ? r : 2000;
                                return Promise.race([
                                    fetch(e, t235),
                                    new Promise(function(e, t) {
                                        return setTimeout(function() {
                                            return t(new Error("timeout"));
                                        }, n);
                                    })
                                ]);
                            }
                        },
                        {
                            key: "init",
                            value: function(e, t) {
                                var r = 1 < arguments.length && void 0 !== t ? t : {
                                };
                                this.services = e, this.options = r;
                            }
                        },
                        {
                            key: "read",
                            value: function(e, t, r) {
                                var n = this.options.loadPath;
                                if (e === this.options.fallback) r(null, i[e][t]);
                                else if (a.includes(e)) {
                                    var o = this.services.interpolator.interpolate(n, {
                                        lng: e,
                                        ns: t
                                    });
                                    this.loadUrl(o, r);
                                } else r("Not found", !1);
                            }
                        },
                        {
                            key: "loadUrl",
                            value: function(t, r) {
                                this.fetchWithTimeout(t).then(function(e) {
                                    if (!e.ok) throw new Error("failed loading ".concat(t));
                                    return e.json();
                                }, function() {
                                    throw new Error("failed loading ".concat(t));
                                }).then(function(e) {
                                    return r(null, e);
                                }).catch(r);
                            }
                        }
                    ], l(e356.prototype, t233), n108 && l(e356, n108), r179;
                }();
                u.type = "backend";
                var c = function(e, t) {
                    console.debug("p5.js translator called before translations were loaded"), n107.default.t(e, t);
                };
                r178.translator = c;
                r178.initialize = function() {
                    return n107.default.use(o73.default).use(u).init({
                        fallbackLng: "en",
                        nestingPrefix: "$tr(",
                        nestingSuffix: ")",
                        defaultNS: "translation",
                        returnEmptyString: !1,
                        interpolation: {
                            escapeValue: !1
                        },
                        detection: {
                            checkWhitelist: !1,
                            order: [
                                "querystring",
                                "navigator",
                                "htmlTag",
                                "path",
                                "subdomain"
                            ],
                            caches: []
                        },
                        backend: {
                            fallback: "en",
                            loadPath: "https://cdn.jsdelivr.net/npm/p5/translations/{{lng}}/{{ns}}.json"
                        },
                        partialBundledLanguages: !0,
                        resources: i
                    }).then(function(e) {
                        r178.translator = c = e;
                    }, function(e) {
                        return console.debug("Translations failed to load (".concat(e, ")"));
                    });
                };
            },
            {
                "../../translations": void 0,
                "../../translations/dev": void 0,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.join": 157,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.object.keys": 173,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.promise": 175,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.string.includes": 182,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/web.dom-collections.iterator": 226,
                i18next: 3,
                "i18next-browser-languagedetector": 3
            }
        ],
        259: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                }), r.default = void 0;
                var n, o = (n = e("./main")) && n.__esModule ? n : {
                    default: n
                };
                o.default.prototype.pushStyle = function() {
                    throw new Error("pushStyle() not used, see push()");
                }, o.default.prototype.popStyle = function() {
                    throw new Error("popStyle() not used, see pop()");
                }, o.default.prototype.popMatrix = function() {
                    throw new Error("popMatrix() not used, see pop()");
                }, o.default.prototype.pushMatrix = function() {
                    throw new Error("pushMatrix() not used, see push()");
                };
                var i = o.default;
                r.default = i;
            },
            {
                "./main": 260
            }
        ],
        260: [
            function(e358, t236, r180) {
                "use strict";
                function a32(e359) {
                    return (a32 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e359);
                }
                e358("core-js/modules/es.symbol"), e358("core-js/modules/es.symbol.description"), e358("core-js/modules/es.symbol.iterator"), e358("core-js/modules/es.array.for-each"), e358("core-js/modules/es.array.iterator"), e358("core-js/modules/es.array.slice"), e358("core-js/modules/es.object.get-own-property-names"), e358("core-js/modules/es.object.to-string"), e358("core-js/modules/es.string.iterator"), e358("core-js/modules/web.dom-collections.for-each"), e358("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r180, "__esModule", {
                    value: !0
                }), r180.default = void 0, e358("./shim");
                var n109 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a32(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s27();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e358("./constants"));
                function s27() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s27 = function() {
                        return e;
                    }, e;
                }
                function o74(e, t) {
                    for(var r = 0; r < t.length; r++){
                        var n = t[r];
                        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                    }
                }
                var i47 = function() {
                    function _(e361, t238, r182) {
                        var f = this;
                        !function(e, t) {
                            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                        }(this, _), this._setupDone = !1, this._pixelDensity = Math.ceil(window.devicePixelRatio) || 1, this._userNode = t238, this._curElement = null, this._elements = [], this._glAttributes = null, this._requestAnimId = 0, this._preloadCount = 0, this._isGlobal = !1, this._loop = !0, this._initializeInstanceVariables(), this._defaultCanvasSize = {
                            width: 100,
                            height: 100
                        }, this._events = {
                            mousemove: null,
                            mousedown: null,
                            mouseup: null,
                            dragend: null,
                            dragover: null,
                            click: null,
                            dblclick: null,
                            mouseover: null,
                            mouseout: null,
                            keydown: null,
                            keyup: null,
                            keypress: null,
                            touchstart: null,
                            touchmove: null,
                            touchend: null,
                            resize: null,
                            blur: null
                        }, this._millisStart = -1, this._lcg_random_state = null, this._gaussian_previous = !1, this._events.wheel = null, this._loadingScreenId = "p5_loading", this._registeredMethods = {
                        };
                        var n110 = Object.getOwnPropertyNames(_.prototype._registeredMethods), o75 = !0, i48 = !1, a33 = void 0;
                        try {
                            for(var s, l = n110[Symbol.iterator](); !(o75 = (s = l.next()).done); o75 = !0){
                                var u = s.value;
                                this._registeredMethods[u] = _.prototype._registeredMethods[u].slice();
                            }
                        } catch (e362) {
                            i48 = !0, a33 = e362;
                        } finally{
                            try {
                                o75 || null == l.return || l.return();
                            } finally{
                                if (i48) throw a33;
                            }
                        }
                        window.DeviceOrientationEvent && (this._events.deviceorientation = null), window.DeviceMotionEvent && !window._isNodeWebkit && (this._events.devicemotion = null), this._start = function() {
                            f._userNode && "string" == typeof f._userNode && (f._userNode = document.getElementById(f._userNode));
                            var e = f._isGlobal ? window : f;
                            if (e.preload) {
                                var t = document.getElementById(f._loadingScreenId);
                                if (!t) (t = document.createElement("div")).innerHTML = "Loading...", t.style.position = "absolute", t.id = f._loadingScreenId, (f._userNode || document.body).appendChild(t);
                                var r = f._preloadMethods;
                                for(var n in r){
                                    r[n] = r[n] || _;
                                    var o = r[n];
                                    o !== _.prototype && o !== _ || (f._isGlobal && (window[n] = f._wrapPreload(f, n)), o = f), f._registeredPreloadMethods[n] = o[n], o[n] = f._wrapPreload(o, n);
                                }
                                e.preload(), f._runIfPreloadsAreDone();
                            } else f._setup(), f._draw();
                        }, this._runIfPreloadsAreDone = function() {
                            var e = this._isGlobal ? window : this;
                            if (0 === e._preloadCount) {
                                var t = document.getElementById(e._loadingScreenId);
                                t && t.parentNode.removeChild(t), this._setupDone || (this._lastFrameTime = window.performance.now(), e._setup(), e._draw());
                            }
                        }, this._decrementPreload = function() {
                            var e = this._isGlobal ? window : this;
                            "function" == typeof e.preload && (e._setProperty("_preloadCount", e._preloadCount - 1), e._runIfPreloadsAreDone());
                        }, this._wrapPreload = function(n, o) {
                            var i = this;
                            return function() {
                                i._incrementPreload();
                                for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                                return i._registeredPreloadMethods[o].apply(n, t);
                            };
                        }, this._incrementPreload = function() {
                            var e = this._isGlobal ? window : this;
                            e._setProperty("_preloadCount", e._preloadCount + 1);
                        }, this._setup = function() {
                            f.createCanvas(f._defaultCanvasSize.width, f._defaultCanvasSize.height, "p2d");
                            var e = f._isGlobal ? window : f;
                            if ("function" == typeof e.preload) for(var t in f._preloadMethods)e[t] = f._preloadMethods[t][t], e[t] && f && (e[t] = e[t].bind(f));
                            f._millisStart = window.performance.now(), "function" == typeof e.setup && e.setup();
                            var r = document.getElementsByTagName("canvas"), n = !0, o = !1, i = void 0;
                            try {
                                for(var a, s = r[Symbol.iterator](); !(n = (a = s.next()).done); n = !0){
                                    var l = a.value;
                                    "true" === l.dataset.hidden && (l.style.visibility = "", delete l.dataset.hidden);
                                }
                            } catch (e363) {
                                o = !0, i = e363;
                            } finally{
                                try {
                                    n || null == s.return || s.return();
                                } finally{
                                    if (o) throw i;
                                }
                            }
                            f._lastFrameTime = window.performance.now(), f._setupDone = !0, (f._accessibleOutputs.grid || f._accessibleOutputs.text) && f._updateAccsOutput();
                        }, this._draw = function() {
                            var e = window.performance.now(), t = e - f._lastFrameTime, r = 1000 / f._targetFrameRate;
                            (!f._loop || r - 5 <= t) && (f.redraw(), f._frameRate = 1000 / (e - f._lastFrameTime), f.deltaTime = e - f._lastFrameTime, f._setProperty("deltaTime", f.deltaTime), f._lastFrameTime = e, void 0 !== f._updateMouseCoords && (f._updateMouseCoords(), f._setProperty("movedX", 0), f._setProperty("movedY", 0))), f._loop && (f._requestAnimId = window.requestAnimationFrame(f._draw));
                        }, this._setProperty = function(e, t) {
                            f[e] = t, f._isGlobal && (window[e] = t);
                        }, this.remove = function() {
                            var e365 = document.getElementById(f._loadingScreenId);
                            if (e365 && (e365.parentNode.removeChild(e365), f._incrementPreload()), f._curElement) {
                                for(var t in f._loop = !1, f._requestAnimId && window.cancelAnimationFrame(f._requestAnimId), f._events)window.removeEventListener(t, f._events[t]);
                                var r = !0, n = !1, o = void 0;
                                try {
                                    for(var i, a = f._elements[Symbol.iterator](); !(r = (i = a.next()).done); r = !0){
                                        var s = i.value;
                                        for(var l in s.elt && s.elt.parentNode && s.elt.parentNode.removeChild(s.elt), s._events)s.elt.removeEventListener(l, s._events[l]);
                                    }
                                } catch (e364) {
                                    n = !0, o = e364;
                                } finally{
                                    try {
                                        r || null == a.return || a.return();
                                    } finally{
                                        if (n) throw o;
                                    }
                                }
                                var u = f;
                                f._registeredMethods.remove.forEach(function(e) {
                                    void 0 !== e && e.call(u);
                                });
                            }
                            if (f._isGlobal) {
                                for(var c in _.prototype)try {
                                    delete window[c];
                                } catch (e) {
                                    window[c] = void 0;
                                }
                                for(var d in f)if (f.hasOwnProperty(d)) try {
                                    delete window[d];
                                } catch (e366) {
                                    window[d] = void 0;
                                }
                                _.instance = null;
                            }
                        }, this._registeredMethods.init.forEach(function(e) {
                            void 0 !== e && e.call(this);
                        }, this), this._setupPromisePreloads();
                        var c = this._createFriendlyGlobalFunctionBinder();
                        if (e361) e361(this), _._checkForUserDefinedFunctions(this);
                        else {
                            for(var d13 in this._isGlobal = !0, _.instance = this, _.prototype)if ("function" == typeof _.prototype[d13]) {
                                var h = d13.substring(2);
                                this._events.hasOwnProperty(h) || (Math.hasOwnProperty(d13) && Math[d13] === _.prototype[d13] ? c(d13, _.prototype[d13]) : c(d13, _.prototype[d13].bind(this)));
                            } else c(d13, _.prototype[d13]);
                            for(var p in this)this.hasOwnProperty(p) && c(p, this[p]);
                        }
                        for(var y in this._events){
                            var m = this["_on".concat(y)];
                            if (m) {
                                var g = m.bind(this);
                                window.addEventListener(y, g, {
                                    passive: !1
                                }), this._events[y] = g;
                            }
                        }
                        function v() {
                            f._setProperty("focused", !0);
                        }
                        function b() {
                            f._setProperty("focused", !1);
                        }
                        window.addEventListener("focus", v), window.addEventListener("blur", b), this.registerMethod("remove", function() {
                            window.removeEventListener("focus", v), window.removeEventListener("blur", b);
                        }), "complete" === document.readyState ? this._start() : window.addEventListener("load", this._start.bind(this), !1);
                    }
                    var e360, t237, r181;
                    return e360 = _, t237 = [
                        {
                            key: "_initializeInstanceVariables",
                            value: function() {
                                this._accessibleOutputs = {
                                    text: !1,
                                    grid: !1,
                                    textLabel: !1,
                                    gridLabel: !1
                                }, this._styles = [], this._bezierDetail = 20, this._curveDetail = 20, this._colorMode = n109.RGB, this._colorMaxes = {
                                    rgb: [
                                        255,
                                        255,
                                        255,
                                        255
                                    ],
                                    hsb: [
                                        360,
                                        100,
                                        100,
                                        1
                                    ],
                                    hsl: [
                                        360,
                                        100,
                                        100,
                                        1
                                    ]
                                }, this._downKeys = {
                                };
                            }
                        },
                        {
                            key: "registerPreloadMethod",
                            value: function(e, t) {
                                _.prototype._preloadMethods.hasOwnProperty(e) || (_.prototype._preloadMethods[e] = t);
                            }
                        },
                        {
                            key: "registerMethod",
                            value: function(e, t) {
                                var r = this || _.prototype;
                                r._registeredMethods.hasOwnProperty(e) || (r._registeredMethods[e] = []), r._registeredMethods[e].push(t);
                            }
                        },
                        {
                            key: "_createFriendlyGlobalFunctionBinder",
                            value: function(e) {
                                var t239 = 0 < arguments.length && void 0 !== e ? e : {
                                }, r = t239.globalObject || window;
                                t239.log || console.log.bind(console);
                                return function(e, t) {
                                    r[e] = t;
                                };
                            }
                        }
                    ], o74(e360.prototype, t237), r181 && o74(e360, r181), _;
                }();
                for(var l20 in i47.instance = null, i47.disableFriendlyErrors = !1, n109)i47.prototype[l20] = n109[l20];
                i47.prototype._preloadMethods = {
                    loadJSON: i47.prototype,
                    loadImage: i47.prototype,
                    loadStrings: i47.prototype,
                    loadXML: i47.prototype,
                    loadBytes: i47.prototype,
                    loadTable: i47.prototype,
                    loadFont: i47.prototype,
                    loadModel: i47.prototype,
                    loadShader: i47.prototype
                }, i47.prototype._registeredMethods = {
                    init: [],
                    pre: [],
                    post: [],
                    remove: []
                }, i47.prototype._registeredPreloadMethods = {
                };
                var u15 = i47;
                r180.default = u15;
            },
            {
                "./constants": 250,
                "./shim": 271,
                "core-js/modules/es.array.for-each": 152,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.object.get-own-property-names": 171,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.for-each": 225,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        261: [
            function(e367, t240, r183) {
                "use strict";
                Object.defineProperty(r183, "__esModule", {
                    value: !0
                }), r183.default = void 0;
                var n111, o = (n111 = e367("./main")) && n111.__esModule ? n111 : {
                    default: n111
                };
                o.default.Element = function(e, t) {
                    this.elt = e, this._pInst = this._pixelsState = t, this._events = {
                    }, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight;
                }, o.default.Element.prototype.parent = function(e) {
                    return void 0 === e ? this.elt.parentNode : ("string" == typeof e ? ("#" === e[0] && (e = e.substring(1)), e = document.getElementById(e)) : e instanceof o.default.Element && (e = e.elt), e.appendChild(this.elt), this);
                }, o.default.Element.prototype.id = function(e) {
                    return void 0 === e ? this.elt.id : (this.elt.id = e, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight, this);
                }, o.default.Element.prototype.class = function(e) {
                    return void 0 === e ? this.elt.className : (this.elt.className = e, this);
                }, o.default.Element.prototype.mousePressed = function(t) {
                    return o.default.Element._adjustListener("mousedown", function(e) {
                        return this._pInst._setProperty("mouseIsPressed", !0), this._pInst._setMouseButton(e), t.call(this);
                    }, this), this;
                }, o.default.Element.prototype.doubleClicked = function(e) {
                    return o.default.Element._adjustListener("dblclick", e, this), this;
                }, o.default.Element.prototype.mouseWheel = function(e) {
                    return o.default.Element._adjustListener("wheel", e, this), this;
                }, o.default.Element.prototype.mouseReleased = function(e) {
                    return o.default.Element._adjustListener("mouseup", e, this), this;
                }, o.default.Element.prototype.mouseClicked = function(e) {
                    return o.default.Element._adjustListener("click", e, this), this;
                }, o.default.Element.prototype.mouseMoved = function(e) {
                    return o.default.Element._adjustListener("mousemove", e, this), this;
                }, o.default.Element.prototype.mouseOver = function(e) {
                    return o.default.Element._adjustListener("mouseover", e, this), this;
                }, o.default.Element.prototype.mouseOut = function(e) {
                    return o.default.Element._adjustListener("mouseout", e, this), this;
                }, o.default.Element.prototype.touchStarted = function(e) {
                    return o.default.Element._adjustListener("touchstart", e, this), this;
                }, o.default.Element.prototype.touchMoved = function(e) {
                    return o.default.Element._adjustListener("touchmove", e, this), this;
                }, o.default.Element.prototype.touchEnded = function(e) {
                    return o.default.Element._adjustListener("touchend", e, this), this;
                }, o.default.Element.prototype.dragOver = function(e) {
                    return o.default.Element._adjustListener("dragover", e, this), this;
                }, o.default.Element.prototype.dragLeave = function(e) {
                    return o.default.Element._adjustListener("dragleave", e, this), this;
                }, o.default.Element._adjustListener = function(e, t, r) {
                    return !1 === t ? o.default.Element._detachListener(e, r) : o.default.Element._attachListener(e, t, r), this;
                }, o.default.Element._attachListener = function(e, t, r) {
                    r._events[e] && o.default.Element._detachListener(e, r);
                    var n = t.bind(r);
                    r.elt.addEventListener(e, n, !1), r._events[e] = n;
                }, o.default.Element._detachListener = function(e, t) {
                    var r = t._events[e];
                    t.elt.removeEventListener(e, r, !1), t._events[e] = null;
                }, o.default.Element.prototype._setProperty = function(e, t) {
                    this[e] = t;
                };
                var i = o.default.Element;
                r183.default = i;
            },
            {
                "./main": 260
            }
        ],
        262: [
            function(e368, t241, r184) {
                "use strict";
                function a(e369) {
                    return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e369);
                }
                e368("core-js/modules/es.array.index-of"), e368("core-js/modules/es.array.splice"), Object.defineProperty(r184, "__esModule", {
                    value: !0
                }), r184.default = void 0;
                var n112, s = (n112 = e368("./main")) && n112.__esModule ? n112 : {
                    default: n112
                }, l = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = u();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e368("./constants"));
                function u() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return u = function() {
                        return e;
                    }, e;
                }
                s.default.Graphics = function(e, t, r, n) {
                    var o = r || l.P2D;
                    this.canvas = document.createElement("canvas");
                    var i = n._userNode || document.body;
                    for(var a in i.appendChild(this.canvas), s.default.Element.call(this, this.canvas, n), s.default.prototype)this[a] || ("function" == typeof s.default.prototype[a] ? this[a] = s.default.prototype[a].bind(this) : this[a] = s.default.prototype[a]);
                    return s.default.prototype._initializeInstanceVariables.apply(this), this.width = e, this.height = t, this._pixelDensity = n._pixelDensity, o === l.WEBGL ? this._renderer = new s.default.RendererGL(this.canvas, this, !1) : this._renderer = new s.default.Renderer2D(this.canvas, this, !1), n._elements.push(this), Object.defineProperty(this, "deltaTime", {
                        get: function() {
                            return this._pInst.deltaTime;
                        }
                    }), this._renderer.resize(e, t), this._renderer._applyDefaults(), this;
                }, s.default.Graphics.prototype = Object.create(s.default.Element.prototype), s.default.Graphics.prototype.reset = function() {
                    this._renderer.resetMatrix(), this._renderer.isP3D && this._renderer._update();
                }, s.default.Graphics.prototype.remove = function() {
                    this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);
                    var e = this._pInst._elements.indexOf(this);
                    for(var t in -1 !== e && this._pInst._elements.splice(e, 1), this._events)this.elt.removeEventListener(t, this._events[t]);
                };
                var o76 = s.default.Graphics;
                r184.default = o76;
            },
            {
                "./constants": 250,
                "./main": 260,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.splice": 162
            }
        ],
        263: [
            function(e370, t242, r185) {
                "use strict";
                e370("core-js/modules/es.symbol"), e370("core-js/modules/es.symbol.description"), e370("core-js/modules/es.symbol.iterator"), e370("core-js/modules/es.array.iterator"), e370("core-js/modules/es.number.constructor"), e370("core-js/modules/es.object.assign"), e370("core-js/modules/es.object.to-string"), e370("core-js/modules/es.regexp.exec"), e370("core-js/modules/es.regexp.to-string"), e370("core-js/modules/es.string.iterator"), e370("core-js/modules/es.string.replace"), e370("core-js/modules/es.string.split"), e370("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r185, "__esModule", {
                    value: !0
                }), r185.default = void 0;
                var n113, l21 = (n113 = e370("./main")) && n113.__esModule ? n113 : {
                    default: n113
                }, _ = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== s28(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = a34();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e370("../core/constants"));
                function a34() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return a34 = function() {
                        return e;
                    }, e;
                }
                function s28(e371) {
                    return (s28 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e371);
                }
                function u16(e) {
                    var t = 0, r = 0;
                    if (e.offsetParent) for(; t += e.offsetLeft, r += e.offsetTop, e = e.offsetParent;);
                    else t += e.offsetLeft, r += e.offsetTop;
                    return [
                        t,
                        r
                    ];
                }
                l21.default.Renderer = function(e, t, r) {
                    l21.default.Element.call(this, e, t), this.canvas = e, this._pixelsState = t, r ? (this._isMainCanvas = !0, this._pInst._setProperty("_curElement", this), this._pInst._setProperty("canvas", this.canvas), this._pInst._setProperty("width", this.width), this._pInst._setProperty("height", this.height)) : (this.canvas.style.display = "none", this._styles = []), this._textSize = 12, this._textLeading = 15, this._textFont = "sans-serif", this._textStyle = _.NORMAL, this._textAscent = null, this._textDescent = null, this._textAlign = _.LEFT, this._textBaseline = _.BASELINE, this._rectMode = _.CORNER, this._ellipseMode = _.CENTER, this._curveTightness = 0, this._imageMode = _.CORNER, this._tint = null, this._doStroke = !0, this._doFill = !0, this._strokeSet = !1, this._fillSet = !1;
                }, l21.default.Renderer.prototype = Object.create(l21.default.Element.prototype), l21.default.Renderer.prototype.push = function() {
                    return {
                        properties: {
                            _doStroke: this._doStroke,
                            _strokeSet: this._strokeSet,
                            _doFill: this._doFill,
                            _fillSet: this._fillSet,
                            _tint: this._tint,
                            _imageMode: this._imageMode,
                            _rectMode: this._rectMode,
                            _ellipseMode: this._ellipseMode,
                            _textFont: this._textFont,
                            _textLeading: this._textLeading,
                            _textSize: this._textSize,
                            _textAlign: this._textAlign,
                            _textBaseline: this._textBaseline,
                            _textStyle: this._textStyle
                        }
                    };
                }, l21.default.Renderer.prototype.pop = function(e) {
                    e.properties && Object.assign(this, e.properties);
                }, l21.default.Renderer.prototype.resize = function(e, t) {
                    this.width = e, this.height = t, this.elt.width = e * this._pInst._pixelDensity, this.elt.height = t * this._pInst._pixelDensity, this.elt.style.width = "".concat(e, "px"), this.elt.style.height = "".concat(t, "px"), this._isMainCanvas && (this._pInst._setProperty("width", this.width), this._pInst._setProperty("height", this.height));
                }, l21.default.Renderer.prototype.get = function(e, t, r, n) {
                    var o = this._pixelsState, i = o._pixelDensity, a = this.canvas;
                    if (void 0 === e && void 0 === t) e = t = 0, r = o.width, n = o.height;
                    else if (e *= i, t *= i, void 0 === r && void 0 === n) return e < 0 || t < 0 || e >= a.width || t >= a.height ? [
                        0,
                        0,
                        0,
                        0
                    ] : this._getPixel(e, t);
                    var s = new l21.default.Image(r, n);
                    return s.canvas.getContext("2d").drawImage(a, e, t, r * i, n * i, 0, 0, r, n), s;
                }, l21.default.Renderer.prototype.textLeading = function(e) {
                    return "number" == typeof e ? (this._setProperty("_textLeading", e), this._pInst) : this._textLeading;
                }, l21.default.Renderer.prototype.textSize = function(e) {
                    return "number" == typeof e ? (this._setProperty("_textSize", e), this._setProperty("_textLeading", e * _._DEFAULT_LEADMULT), this._applyTextProperties()) : this._textSize;
                }, l21.default.Renderer.prototype.textStyle = function(e) {
                    return e ? (e !== _.NORMAL && e !== _.ITALIC && e !== _.BOLD && e !== _.BOLDITALIC || this._setProperty("_textStyle", e), this._applyTextProperties()) : this._textStyle;
                }, l21.default.Renderer.prototype.textAscent = function() {
                    return null === this._textAscent && this._updateTextMetrics(), this._textAscent;
                }, l21.default.Renderer.prototype.textDescent = function() {
                    return null === this._textDescent && this._updateTextMetrics(), this._textDescent;
                }, l21.default.Renderer.prototype.textAlign = function(e, t) {
                    return void 0 !== e ? (this._setProperty("_textAlign", e), void 0 !== t && this._setProperty("_textBaseline", t), this._applyTextProperties()) : {
                        horizontal: this._textAlign,
                        vertical: this._textBaseline
                    };
                }, l21.default.Renderer.prototype.text = function(e, t, r, n, o) {
                    var i, a, s, l, u, c, d, f, h, p, y = this._pInst, m = Number.MAX_VALUE;
                    if ((this._doFill || this._doStroke) && void 0 !== e) {
                        if ("string" != typeof e && (e = e.toString()), i = (e = e.replace(/(\t)/g, "  ")).split("\n"), void 0 !== n) {
                            for(d = 1, s = h = 0; s < i.length; s++){
                                for(u = "", f = i[s].split(" "), a = 0; a < f.length; a++)c = "".concat(u + f[a], " "), n < this.textWidth(c) && 1 < d ? (u = "".concat(f[a], " "), h += y.textLeading(), d = 1) : (u = c, d += 1);
                                s < i.length - 1 && (h += y.textLeading());
                            }
                            switch(this._rectMode === _.CENTER && (t -= n / 2, r -= o / 2), this._textAlign){
                                case _.CENTER:
                                    t += n / 2;
                                    break;
                                case _.RIGHT:
                                    t += n;
                            }
                            var g = !1;
                            if (void 0 !== o) {
                                switch(this._textBaseline){
                                    case _.BOTTOM:
                                        p = r + (o - h), r = Math.max(p, r);
                                        break;
                                    case _.CENTER:
                                        p = r + (o - h) / 2, r = Math.max(p, r);
                                        break;
                                    case _.BASELINE:
                                        g = !0, this._textBaseline = _.TOP;
                                }
                                m = r + o - y.textAscent();
                            }
                            for(s = 0; s < i.length; s++){
                                for(u = "", f = i[s].split(" "), a = 0; a < f.length; a++)c = "".concat(u + f[a], " "), n < this.textWidth(c) && 0 < u.length ? (this._renderText(y, u, t, r, m), u = "".concat(f[a], " "), r += y.textLeading()) : u = c;
                                this._renderText(y, u, t, r, m), r += y.textLeading(), g && (this._textBaseline = _.BASELINE);
                            }
                        } else {
                            var v = 0, b = y.textAlign().vertical;
                            for(b === _.CENTER ? v = (i.length - 1) * y.textLeading() / 2 : b === _.BOTTOM && (v = (i.length - 1) * y.textLeading()), l = 0; l < i.length; l++)this._renderText(y, i[l], t, r - v, m), r += y.textLeading();
                        }
                        return y;
                    }
                }, l21.default.Renderer.prototype._applyDefaults = function() {
                    return this;
                }, l21.default.Renderer.prototype._isOpenType = function() {
                    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : this._textFont;
                    return "object" === s28(e) && e.font && e.font.supported;
                }, l21.default.Renderer.prototype._updateTextMetrics = function() {
                    if (this._isOpenType()) return this._setProperty("_textAscent", this._textFont._textAscent()), this._setProperty("_textDescent", this._textFont._textDescent()), this;
                    var e = document.createElement("span");
                    e.style.fontFamily = this._textFont, e.style.fontSize = "".concat(this._textSize, "px"), e.innerHTML = "ABCjgq|";
                    var t = document.createElement("div");
                    t.style.display = "inline-block", t.style.width = "1px", t.style.height = "0px";
                    var r = document.createElement("div");
                    r.appendChild(e), r.appendChild(t), r.style.height = "0px", r.style.overflow = "hidden", document.body.appendChild(r), t.style.verticalAlign = "baseline";
                    var n = u16(t), o = u16(e), i = n[1] - o[1];
                    t.style.verticalAlign = "bottom", n = u16(t), o = u16(e);
                    var a = n[1] - o[1] - i;
                    return document.body.removeChild(r), this._setProperty("_textAscent", i), this._setProperty("_textDescent", a), this;
                };
                var o77 = l21.default.Renderer;
                r185.default = o77;
            },
            {
                "../core/constants": 250,
                "./main": 260,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.number.constructor": 167,
                "core-js/modules/es.object.assign": 170,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.replace": 186,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        264: [
            function(e372, t243, r186) {
                "use strict";
                function a35(e373) {
                    return (a35 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e373);
                }
                e372("core-js/modules/es.array.concat"), e372("core-js/modules/es.array.fill"), e372("core-js/modules/es.array.for-each"), e372("core-js/modules/es.array.slice"), e372("core-js/modules/es.function.name"), e372("core-js/modules/es.number.to-fixed"), e372("core-js/modules/es.object.to-string"), e372("core-js/modules/es.regexp.to-string"), Object.defineProperty(r186, "__esModule", {
                    value: !0
                }), r186.default = void 0;
                var d14 = n114(e372("./main")), p9 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a35(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s29();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e372("./constants")), f12 = n114(e372("../image/filters"));
                function s29() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s29 = function() {
                        return e;
                    }, e;
                }
                function n114(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                e372("./p5.Renderer");
                var m = "rgba(0,0,0,0)";
                d14.default.Renderer2D = function(e, t, r) {
                    return d14.default.Renderer.call(this, e, t, r), this.drawingContext = this.canvas.getContext("2d"), this._pInst._setProperty("drawingContext", this.drawingContext), this;
                }, d14.default.Renderer2D.prototype = Object.create(d14.default.Renderer.prototype), d14.default.Renderer2D.prototype._applyDefaults = function() {
                    this._cachedFillStyle = this._cachedStrokeStyle = void 0, this._cachedBlendMode = p9.BLEND, this._setFill(p9._DEFAULT_FILL), this._setStroke(p9._DEFAULT_STROKE), this.drawingContext.lineCap = p9.ROUND, this.drawingContext.font = "normal 12px sans-serif";
                }, d14.default.Renderer2D.prototype.resize = function(e, t) {
                    d14.default.Renderer.prototype.resize.call(this, e, t), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);
                }, d14.default.Renderer2D.prototype.background = function() {
                    if (this.drawingContext.save(), this.resetMatrix(), (arguments.length <= 0 ? void 0 : arguments[0]) instanceof d14.default.Image) this._pInst.image(arguments.length <= 0 ? void 0 : arguments[0], 0, 0, this.width, this.height);
                    else {
                        var e, t = this._getFill(), r = (e = this._pInst).color.apply(e, arguments);
                        this._pInst._addAccsOutput() && this._pInst._accsBackground(r.levels);
                        var n = r.toString();
                        this._setFill(n), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.fillRect(0, 0, this.width, this.height), this._setFill(t), this._isErasing && this._pInst.erase();
                    }
                    this.drawingContext.restore();
                }, d14.default.Renderer2D.prototype.clear = function() {
                    this.drawingContext.save(), this.resetMatrix(), this.drawingContext.clearRect(0, 0, this.width, this.height), this.drawingContext.restore();
                }, d14.default.Renderer2D.prototype.fill = function() {
                    var e, t = (e = this._pInst).color.apply(e, arguments);
                    this._setFill(t.toString()), this._pInst._addAccsOutput() && this._pInst._accsCanvasColors("fill", t.levels);
                }, d14.default.Renderer2D.prototype.stroke = function() {
                    var e, t = (e = this._pInst).color.apply(e, arguments);
                    this._setStroke(t.toString()), this._pInst._addAccsOutput() && this._pInst._accsCanvasColors("stroke", t.levels);
                }, d14.default.Renderer2D.prototype.erase = function(e, t) {
                    if (!this._isErasing) {
                        this._cachedFillStyle = this.drawingContext.fillStyle;
                        var r = this._pInst.color(255, e).toString();
                        this.drawingContext.fillStyle = r, this._cachedStrokeStyle = this.drawingContext.strokeStyle;
                        var n = this._pInst.color(255, t).toString();
                        this.drawingContext.strokeStyle = n;
                        var o = this._cachedBlendMode;
                        this.blendMode(p9.REMOVE), this._cachedBlendMode = o, this._isErasing = !0;
                    }
                }, d14.default.Renderer2D.prototype.noErase = function() {
                    this._isErasing && (this.drawingContext.fillStyle = this._cachedFillStyle, this.drawingContext.strokeStyle = this._cachedStrokeStyle, this.blendMode(this._cachedBlendMode), this._isErasing = !1);
                }, d14.default.Renderer2D.prototype.image = function(e, t, r, n, o, i, a, s, l) {
                    var u;
                    e.gifProperties && e._animateGif(this._pInst);
                    try {
                        this._tint && (d14.default.MediaElement && e instanceof d14.default.MediaElement && e.loadPixels(), e.canvas && (u = this._getTintedImageCanvas(e))), u = u || e.canvas || e.elt;
                        var c = 1;
                        e.width && 0 < e.width && (c = u.width / e.width), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.drawImage(u, c * t, c * r, c * n, c * o, i, a, s, l), this._isErasing && this._pInst.erase();
                    } catch (e374) {
                        if ("NS_ERROR_NOT_AVAILABLE" !== e374.name) throw e374;
                    }
                }, d14.default.Renderer2D.prototype._getTintedImageCanvas = function(e) {
                    if (!e.canvas) return e;
                    var t = f12.default._toPixels(e.canvas), r = document.createElement("canvas");
                    r.width = e.canvas.width, r.height = e.canvas.height;
                    for(var n = r.getContext("2d"), o = n.createImageData(e.canvas.width, e.canvas.height), i = o.data, a = 0; a < t.length; a += 4){
                        var s = t[a], l = t[a + 1], u = t[a + 2], c = t[a + 3];
                        i[a] = s * this._tint[0] / 255, i[a + 1] = l * this._tint[1] / 255, i[a + 2] = u * this._tint[2] / 255, i[a + 3] = c * this._tint[3] / 255;
                    }
                    return n.putImageData(o, 0, 0), r;
                }, d14.default.Renderer2D.prototype.blendMode = function(e) {
                    if (e === p9.SUBTRACT) console.warn("blendMode(SUBTRACT) only works in WEBGL mode.");
                    else {
                        if (e !== p9.BLEND && e !== p9.REMOVE && e !== p9.DARKEST && e !== p9.LIGHTEST && e !== p9.DIFFERENCE && e !== p9.MULTIPLY && e !== p9.EXCLUSION && e !== p9.SCREEN && e !== p9.REPLACE && e !== p9.OVERLAY && e !== p9.HARD_LIGHT && e !== p9.SOFT_LIGHT && e !== p9.DODGE && e !== p9.BURN && e !== p9.ADD) throw new Error("Mode ".concat(e, " not recognized."));
                        this._cachedBlendMode = e, this.drawingContext.globalCompositeOperation = e;
                    }
                }, d14.default.Renderer2D.prototype.blend = function() {
                    for(var e = this.drawingContext.globalCompositeOperation, t = arguments.length, r = new Array(t), n = 0; n < t; n++)r[n] = arguments[n];
                    var o = r[r.length - 1], i = Array.prototype.slice.call(r, 0, r.length - 1);
                    this.drawingContext.globalCompositeOperation = o, d14.default.prototype.copy.apply(this, i), this.drawingContext.globalCompositeOperation = e;
                }, d14.default.Renderer2D.prototype._getPixel = function(e, t) {
                    var r;
                    return [
                        (r = this.drawingContext.getImageData(e, t, 1, 1).data)[0],
                        r[1],
                        r[2],
                        r[3]
                    ];
                }, d14.default.Renderer2D.prototype.loadPixels = function() {
                    var e = this._pixelsState, t = e._pixelDensity, r = this.width * t, n = this.height * t, o = this.drawingContext.getImageData(0, 0, r, n);
                    e._setProperty("imageData", o), e._setProperty("pixels", o.data);
                }, d14.default.Renderer2D.prototype.set = function(e, t, r) {
                    e = Math.floor(e), t = Math.floor(t);
                    var n = this._pixelsState;
                    if (r instanceof d14.default.Image) this.drawingContext.save(), this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(n._pixelDensity, n._pixelDensity), this.drawingContext.clearRect(e, t, r.width, r.height), this.drawingContext.drawImage(r.canvas, e, t), this.drawingContext.restore();
                    else {
                        var o = 0, i = 0, a = 0, s = 0, l = 4 * (t * n._pixelDensity * (this.width * n._pixelDensity) + e * n._pixelDensity);
                        if (n.imageData || n.loadPixels.call(n), "number" == typeof r) l < n.pixels.length && (a = i = o = r, s = 255);
                        else if (r instanceof Array) {
                            if (r.length < 4) throw new Error("pixel array must be of the form [R, G, B, A]");
                            l < n.pixels.length && (o = r[0], i = r[1], a = r[2], s = r[3]);
                        } else r instanceof d14.default.Color && l < n.pixels.length && (o = r.levels[0], i = r.levels[1], a = r.levels[2], s = r.levels[3]);
                        for(var u = 0; u < n._pixelDensity; u++)for(var c = 0; c < n._pixelDensity; c++)l = 4 * ((t * n._pixelDensity + c) * this.width * n._pixelDensity + (e * n._pixelDensity + u)), n.pixels[l] = o, n.pixels[l + 1] = i, n.pixels[l + 2] = a, n.pixels[l + 3] = s;
                    }
                }, d14.default.Renderer2D.prototype.updatePixels = function(e, t, r, n) {
                    var o = this._pixelsState, i = o._pixelDensity;
                    void 0 === e && void 0 === t && void 0 === r && void 0 === n && (t = e = 0, r = this.width, n = this.height), e *= i, t *= i, r *= i, n *= i, this.gifProperties && (this.gifProperties.frames[this.gifProperties.displayIndex].image = o.imageData), this.drawingContext.putImageData(o.imageData, e, t, 0, 0, r, n);
                }, d14.default.Renderer2D.prototype._acuteArcToBezier = function(e, t) {
                    var r = t / 2, n = Math.cos(r), o = Math.sin(r), i = 1 / Math.tan(r), a = e + r, s = Math.cos(a), l = Math.sin(a), u = (4 - n) / 3, c = o + (n - u) * i;
                    return {
                        ax: Math.cos(e).toFixed(7),
                        ay: Math.sin(e).toFixed(7),
                        bx: (u * s + c * l).toFixed(7),
                        by: (u * l - c * s).toFixed(7),
                        cx: (u * s - c * l).toFixed(7),
                        cy: (u * l + c * s).toFixed(7),
                        dx: Math.cos(e + t).toFixed(7),
                        dy: Math.sin(e + t).toFixed(7)
                    };
                }, d14.default.Renderer2D.prototype.arc = function(r, n, e375, t244, o, i, a) {
                    var s = this.drawingContext, l = e375 / 2, u = t244 / 2, c = 0, d = [];
                    for(r += l, n += u; 0.00001 <= i - o;)c = Math.min(i - o, p9.HALF_PI), d.push(this._acuteArcToBezier(o, c)), o += c;
                    return this._doFill && (s.beginPath(), d.forEach(function(e, t) {
                        0 === t && s.moveTo(r + e.ax * l, n + e.ay * u), s.bezierCurveTo(r + e.bx * l, n + e.by * u, r + e.cx * l, n + e.cy * u, r + e.dx * l, n + e.dy * u);
                    }), a !== p9.PIE && null != a || s.lineTo(r, n), s.closePath(), s.fill()), this._doStroke && (s.beginPath(), d.forEach(function(e, t) {
                        0 === t && s.moveTo(r + e.ax * l, n + e.ay * u), s.bezierCurveTo(r + e.bx * l, n + e.by * u, r + e.cx * l, n + e.cy * u, r + e.dx * l, n + e.dy * u);
                    }), a === p9.PIE ? (s.lineTo(r, n), s.closePath()) : a === p9.CHORD && s.closePath(), s.stroke()), this;
                }, d14.default.Renderer2D.prototype.ellipse = function(e) {
                    var t = this.drawingContext, r = this._doFill, n = this._doStroke, o = parseFloat(e[0]), i = parseFloat(e[1]), a = parseFloat(e[2]), s = parseFloat(e[3]);
                    if (r && !n) {
                        if (this._getFill() === m) return this;
                    } else if (!r && n && this._getStroke() === m) return this;
                    var l = a / 2 * 0.5522847498, u = s / 2 * 0.5522847498, c = o + a, d = i + s, f = o + a / 2, h = i + s / 2;
                    t.beginPath(), t.moveTo(o, h), t.bezierCurveTo(o, h - u, f - l, i, f, i), t.bezierCurveTo(f + l, i, c, h - u, c, h), t.bezierCurveTo(c, h + u, f + l, d, f, d), t.bezierCurveTo(f - l, d, o, h + u, o, h), r && t.fill(), n && t.stroke();
                }, d14.default.Renderer2D.prototype.line = function(e, t, r, n) {
                    var o = this.drawingContext;
                    return this._doStroke && (this._getStroke() === m || (o.beginPath(), o.moveTo(e, t), o.lineTo(r, n), o.stroke())), this;
                }, d14.default.Renderer2D.prototype.point = function(e, t) {
                    var r = this.drawingContext;
                    if (!this._doStroke) return this;
                    if (this._getStroke() === m) return this;
                    var n = this._getStroke(), o = this._getFill();
                    this._setFill(n), r.beginPath(), r.arc(e, t, r.lineWidth / 2, 0, p9.TWO_PI, !1), r.fill(), this._setFill(o);
                }, d14.default.Renderer2D.prototype.quad = function(e, t, r, n, o, i, a, s) {
                    var l = this.drawingContext, u = this._doFill, c = this._doStroke;
                    if (u && !c) {
                        if (this._getFill() === m) return this;
                    } else if (!u && c && this._getStroke() === m) return this;
                    return l.beginPath(), l.moveTo(e, t), l.lineTo(r, n), l.lineTo(o, i), l.lineTo(a, s), l.closePath(), u && l.fill(), c && l.stroke(), this;
                }, d14.default.Renderer2D.prototype.rect = function(e) {
                    var t = e[0], r = e[1], n = e[2], o = e[3], i = e[4], a = e[5], s = e[6], l = e[7], u = this.drawingContext, c = this._doFill, d = this._doStroke;
                    if (c && !d) {
                        if (this._getFill() === m) return this;
                    } else if (!c && d && this._getStroke() === m) return this;
                    if (u.beginPath(), void 0 === i) u.rect(t, r, n, o);
                    else {
                        void 0 === a && (a = i), void 0 === s && (s = a), void 0 === l && (l = s);
                        var f = Math.abs(n), h = Math.abs(o), p = f / 2, y = h / 2;
                        f < 2 * i && (i = p), h < 2 * i && (i = y), f < 2 * a && (a = p), h < 2 * a && (a = y), f < 2 * s && (s = p), h < 2 * s && (s = y), f < 2 * l && (l = p), h < 2 * l && (l = y), u.beginPath(), u.moveTo(t + i, r), u.arcTo(t + n, r, t + n, r + o, a), u.arcTo(t + n, r + o, t, r + o, s), u.arcTo(t, r + o, t, r, l), u.arcTo(t, r, t + n, r, i), u.closePath();
                    }
                    return this._doFill && u.fill(), this._doStroke && u.stroke(), this;
                }, d14.default.Renderer2D.prototype.triangle = function(e) {
                    var t = this.drawingContext, r = this._doFill, n = this._doStroke, o = e[0], i = e[1], a = e[2], s = e[3], l = e[4], u = e[5];
                    if (r && !n) {
                        if (this._getFill() === m) return this;
                    } else if (!r && n && this._getStroke() === m) return this;
                    t.beginPath(), t.moveTo(o, i), t.lineTo(a, s), t.lineTo(l, u), t.closePath(), r && t.fill(), n && t.stroke();
                }, d14.default.Renderer2D.prototype.endShape = function(e, t, r, n, o, i, a) {
                    if (0 === t.length) return this;
                    if (!this._doStroke && !this._doFill) return this;
                    var s, l, u, c = e === p9.CLOSE;
                    c && !i && t.push(t[0]);
                    var d = t.length;
                    if (!r || a !== p9.POLYGON && null !== a) {
                        if (!n || a !== p9.POLYGON && null !== a) {
                            if (!o || a !== p9.POLYGON && null !== a) {
                                if (a === p9.POINTS) for(l = 0; l < d; l++)s = t[l], this._doStroke && this._pInst.stroke(s[6]), this._pInst.point(s[0], s[1]);
                                else if (a === p9.LINES) for(l = 0; l + 1 < d; l += 2)s = t[l], this._doStroke && this._pInst.stroke(t[l + 1][6]), this._pInst.line(s[0], s[1], t[l + 1][0], t[l + 1][1]);
                                else if (a === p9.TRIANGLES) for(l = 0; l + 2 < d; l += 3)s = t[l], this.drawingContext.beginPath(), this.drawingContext.moveTo(s[0], s[1]), this.drawingContext.lineTo(t[l + 1][0], t[l + 1][1]), this.drawingContext.lineTo(t[l + 2][0], t[l + 2][1]), this.drawingContext.closePath(), this._doFill && (this._pInst.fill(t[l + 2][5]), this.drawingContext.fill()), this._doStroke && (this._pInst.stroke(t[l + 2][6]), this.drawingContext.stroke());
                                else if (a === p9.TRIANGLE_STRIP) for(l = 0; l + 1 < d; l++)s = t[l], this.drawingContext.beginPath(), this.drawingContext.moveTo(t[l + 1][0], t[l + 1][1]), this.drawingContext.lineTo(s[0], s[1]), this._doStroke && this._pInst.stroke(t[l + 1][6]), this._doFill && this._pInst.fill(t[l + 1][5]), l + 2 < d && (this.drawingContext.lineTo(t[l + 2][0], t[l + 2][1]), this._doStroke && this._pInst.stroke(t[l + 2][6]), this._doFill && this._pInst.fill(t[l + 2][5])), this._doFillStrokeClose(c);
                                else if (a === p9.TRIANGLE_FAN) {
                                    if (2 < d) {
                                        for(this.drawingContext.beginPath(), l = 2; l < d; l++)s = t[l], this.drawingContext.moveTo(t[0][0], t[0][1]), this.drawingContext.lineTo(t[l - 1][0], t[l - 1][1]), this.drawingContext.lineTo(s[0], s[1]), this.drawingContext.lineTo(t[0][0], t[0][1]), l < d - 1 && (this._doFill && s[5] !== t[l + 1][5] || this._doStroke && s[6] !== t[l + 1][6]) && (this._doFill && (this._pInst.fill(s[5]), this.drawingContext.fill(), this._pInst.fill(t[l + 1][5])), this._doStroke && (this._pInst.stroke(s[6]), this.drawingContext.stroke(), this._pInst.stroke(t[l + 1][6])), this.drawingContext.closePath(), this.drawingContext.beginPath());
                                        this._doFillStrokeClose(c);
                                    }
                                } else if (a === p9.QUADS) for(l = 0; l + 3 < d; l += 4){
                                    for(s = t[l], this.drawingContext.beginPath(), this.drawingContext.moveTo(s[0], s[1]), u = 1; u < 4; u++)this.drawingContext.lineTo(t[l + u][0], t[l + u][1]);
                                    this.drawingContext.lineTo(s[0], s[1]), this._doFill && this._pInst.fill(t[l + 3][5]), this._doStroke && this._pInst.stroke(t[l + 3][6]), this._doFillStrokeClose(c);
                                }
                                else if (a === p9.QUAD_STRIP) {
                                    if (3 < d) for(l = 0; l + 1 < d; l += 2)s = t[l], this.drawingContext.beginPath(), l + 3 < d ? (this.drawingContext.moveTo(t[l + 2][0], t[l + 2][1]), this.drawingContext.lineTo(s[0], s[1]), this.drawingContext.lineTo(t[l + 1][0], t[l + 1][1]), this.drawingContext.lineTo(t[l + 3][0], t[l + 3][1]), this._doFill && this._pInst.fill(t[l + 3][5]), this._doStroke && this._pInst.stroke(t[l + 3][6])) : (this.drawingContext.moveTo(s[0], s[1]), this.drawingContext.lineTo(t[l + 1][0], t[l + 1][1])), this._doFillStrokeClose(c);
                                } else {
                                    for(this.drawingContext.beginPath(), this.drawingContext.moveTo(t[0][0], t[0][1]), l = 1; l < d; l++)(s = t[l]).isVert && (s.moveTo ? this.drawingContext.moveTo(s[0], s[1]) : this.drawingContext.lineTo(s[0], s[1]));
                                    this._doFillStrokeClose(c);
                                }
                            } else {
                                for(this.drawingContext.beginPath(), l = 0; l < d; l++)t[l].isVert ? t[l].moveTo ? this.drawingContext.moveTo(t[l][0], t[l][1]) : this.drawingContext.lineTo(t[l][0], t[l][1]) : this.drawingContext.quadraticCurveTo(t[l][0], t[l][1], t[l][2], t[l][3]);
                                this._doFillStrokeClose(c);
                            }
                        } else {
                            for(this.drawingContext.beginPath(), l = 0; l < d; l++)t[l].isVert ? t[l].moveTo ? this.drawingContext.moveTo(t[l][0], t[l][1]) : this.drawingContext.lineTo(t[l][0], t[l][1]) : this.drawingContext.bezierCurveTo(t[l][0], t[l][1], t[l][2], t[l][3], t[l][4], t[l][5]);
                            this._doFillStrokeClose(c);
                        }
                    } else if (3 < d) {
                        var f = [], h = 1 - this._curveTightness;
                        for(this.drawingContext.beginPath(), this.drawingContext.moveTo(t[1][0], t[1][1]), l = 1; l + 2 < d; l++)s = t[l], f[0] = [
                            s[0],
                            s[1]
                        ], f[1] = [
                            s[0] + (h * t[l + 1][0] - h * t[l - 1][0]) / 6,
                            s[1] + (h * t[l + 1][1] - h * t[l - 1][1]) / 6
                        ], f[2] = [
                            t[l + 1][0] + (h * t[l][0] - h * t[l + 2][0]) / 6,
                            t[l + 1][1] + (h * t[l][1] - h * t[l + 2][1]) / 6
                        ], f[3] = [
                            t[l + 1][0],
                            t[l + 1][1]
                        ], this.drawingContext.bezierCurveTo(f[1][0], f[1][1], f[2][0], f[2][1], f[3][0], f[3][1]);
                        c && this.drawingContext.lineTo(t[l + 1][0], t[l + 1][1]), this._doFillStrokeClose(c);
                    }
                    return i = o = n = r = !1, c && t.pop(), this;
                }, d14.default.Renderer2D.prototype.strokeCap = function(e) {
                    return e !== p9.ROUND && e !== p9.SQUARE && e !== p9.PROJECT || (this.drawingContext.lineCap = e), this;
                }, d14.default.Renderer2D.prototype.strokeJoin = function(e) {
                    return e !== p9.ROUND && e !== p9.BEVEL && e !== p9.MITER || (this.drawingContext.lineJoin = e), this;
                }, d14.default.Renderer2D.prototype.strokeWeight = function(e) {
                    return this.drawingContext.lineWidth = void 0 === e || 0 === e ? 0.0001 : e, this;
                }, d14.default.Renderer2D.prototype._getFill = function() {
                    return this._cachedFillStyle || (this._cachedFillStyle = this.drawingContext.fillStyle), this._cachedFillStyle;
                }, d14.default.Renderer2D.prototype._setFill = function(e) {
                    e !== this._cachedFillStyle && (this.drawingContext.fillStyle = e, this._cachedFillStyle = e);
                }, d14.default.Renderer2D.prototype._getStroke = function() {
                    return this._cachedStrokeStyle || (this._cachedStrokeStyle = this.drawingContext.strokeStyle), this._cachedStrokeStyle;
                }, d14.default.Renderer2D.prototype._setStroke = function(e) {
                    e !== this._cachedStrokeStyle && (this.drawingContext.strokeStyle = e, this._cachedStrokeStyle = e);
                }, d14.default.Renderer2D.prototype.bezier = function(e, t, r, n, o, i, a, s) {
                    return this._pInst.beginShape(), this._pInst.vertex(e, t), this._pInst.bezierVertex(r, n, o, i, a, s), this._pInst.endShape(), this;
                }, d14.default.Renderer2D.prototype.curve = function(e, t, r, n, o, i, a, s) {
                    return this._pInst.beginShape(), this._pInst.curveVertex(e, t), this._pInst.curveVertex(r, n), this._pInst.curveVertex(o, i), this._pInst.curveVertex(a, s), this._pInst.endShape(), this;
                }, d14.default.Renderer2D.prototype._doFillStrokeClose = function(e) {
                    e && this.drawingContext.closePath(), this._doFill && this.drawingContext.fill(), this._doStroke && this.drawingContext.stroke();
                }, d14.default.Renderer2D.prototype.applyMatrix = function(e, t, r, n, o, i) {
                    this.drawingContext.transform(e, t, r, n, o, i);
                }, d14.default.Renderer2D.prototype.resetMatrix = function() {
                    return this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), this;
                }, d14.default.Renderer2D.prototype.rotate = function(e) {
                    this.drawingContext.rotate(e);
                }, d14.default.Renderer2D.prototype.scale = function(e, t) {
                    return this.drawingContext.scale(e, t), this;
                }, d14.default.Renderer2D.prototype.translate = function(e, t) {
                    return e instanceof d14.default.Vector && (t = e.y, e = e.x), this.drawingContext.translate(e, t), this;
                }, d14.default.Renderer2D.prototype.text = function(e, t, r, n, o) {
                    var i;
                    void 0 !== n && this.drawingContext.textBaseline === p9.BASELINE && (i = !0, this.drawingContext.textBaseline = p9.TOP);
                    var a = d14.default.Renderer.prototype.text.apply(this, arguments);
                    return i && (this.drawingContext.textBaseline = p9.BASELINE), a;
                }, d14.default.Renderer2D.prototype._renderText = function(e, t, r, n, o) {
                    if (!(o <= n)) return e.push(), this._isOpenType() ? this._textFont._renderPath(t, r, n, {
                        renderer: this
                    }) : (this._doStroke && this._strokeSet && this.drawingContext.strokeText(t, r, n), this._doFill && (this._fillSet || this._setFill(p9._DEFAULT_TEXT_FILL), this.drawingContext.fillText(t, r, n))), e.pop(), e;
                }, d14.default.Renderer2D.prototype.textWidth = function(e) {
                    return this._isOpenType() ? this._textFont._textWidth(e, this._textSize) : this.drawingContext.measureText(e).width;
                }, d14.default.Renderer2D.prototype._applyTextProperties = function() {
                    var e, t = this._pInst;
                    return this._setProperty("_textAscent", null), this._setProperty("_textDescent", null), e = this._textFont, this._isOpenType() && (e = this._textFont.font.familyName, this._setProperty("_textStyle", this._textFont.font.styleName)), this.drawingContext.font = "".concat(this._textStyle || "normal", " ").concat(this._textSize || 12, "px ").concat(e || "sans-serif"), this.drawingContext.textAlign = this._textAlign, this._textBaseline === p9.CENTER ? this.drawingContext.textBaseline = p9._CTX_MIDDLE : this.drawingContext.textBaseline = this._textBaseline, t;
                }, d14.default.Renderer2D.prototype.push = function() {
                    return this.drawingContext.save(), d14.default.Renderer.prototype.push.apply(this);
                }, d14.default.Renderer2D.prototype.pop = function(e) {
                    this.drawingContext.restore(), this._cachedFillStyle = this.drawingContext.fillStyle, this._cachedStrokeStyle = this.drawingContext.strokeStyle, d14.default.Renderer.prototype.pop.call(this, e);
                };
                var o78 = d14.default.Renderer2D;
                r186.default = o78;
            },
            {
                "../image/filters": 281,
                "./constants": 250,
                "./main": 260,
                "./p5.Renderer": 263,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.fill": 150,
                "core-js/modules/es.array.for-each": 152,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.function.name": 163,
                "core-js/modules/es.number.to-fixed": 169,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.to-string": 179
            }
        ],
        265: [
            function(e376, t245, r187) {
                "use strict";
                e376("core-js/modules/es.symbol"), e376("core-js/modules/es.symbol.description"), e376("core-js/modules/es.symbol.iterator"), e376("core-js/modules/es.array.iterator"), e376("core-js/modules/es.object.assign"), e376("core-js/modules/es.object.to-string"), e376("core-js/modules/es.promise"), e376("core-js/modules/es.string.iterator"), e376("core-js/modules/web.dom-collections.iterator");
                var n115, f = (n115 = e376("./main")) && n115.__esModule ? n115 : {
                    default: n115
                };
                f.default.prototype._promisePreloads = [];
                var h = (f.default.prototype.registerPromisePreload = function(e) {
                    f.default.prototype._promisePreloads.push(e);
                }, false);
                f.default.prototype._setupPromisePreloads = function() {
                    var e = !0, t = !1, r = void 0;
                    try {
                        for(var n, o = this._promisePreloads[Symbol.iterator](); !(e = (n = o.next()).done); e = !0){
                            var i = n.value, a = this, s = i.method, l = i.addCallbacks, u = i.legacyPreloadSetup, c = i.target || this, d = c[s].bind(c);
                            if (c === f.default.prototype) {
                                if (h) continue;
                                a = null, d = c[s];
                            }
                            if (c[s] = this._wrapPromisePreload(a, d, l), u) c[u.method] = this._legacyPreloadGenerator(a, u, c[s]);
                        }
                    } catch (e377) {
                        t = !0, r = e377;
                    } finally{
                        try {
                            e || null == o.return || o.return();
                        } finally{
                            if (t) throw r;
                        }
                    }
                    h = !0;
                }, f.default.prototype._wrapPromisePreload = function(e378, l, u) {
                    var t246 = function() {
                        var e = this;
                        this._incrementPreload();
                        for(var t = null, r = null, n = arguments.length, o = new Array(n), i = 0; i < n; i++)o[i] = arguments[i];
                        if (u) for(var a = o.length - 1; 0 <= a && !r && "function" == typeof o[a]; a--)r = t, t = o.pop();
                        var s = Promise.resolve(l.apply(this, o));
                        return t && s.then(t), r && s.catch(r), s.then(function() {
                            return e._decrementPreload();
                        }), s;
                    };
                    return e378 && (t246 = t246.bind(e378)), t246;
                };
                function i49() {
                    return {
                    };
                }
                f.default.prototype._legacyPreloadGenerator = function(e379, t247, n) {
                    var o = t247.createBaseObject || i49, r188 = function() {
                        var t = this;
                        this._incrementPreload();
                        var r = o.apply(this, arguments);
                        return n.apply(this, arguments).then(function(e) {
                            Object.assign(r, e), t._decrementPreload();
                        }), r;
                    };
                    return e379 && (r188 = r188.bind(e379)), r188;
                };
            },
            {
                "./main": 260,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.assign": 170,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.promise": 175,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        266: [
            function(e380, t248, r189) {
                "use strict";
                e380("core-js/modules/es.symbol"), e380("core-js/modules/es.symbol.description"), e380("core-js/modules/es.symbol.iterator"), e380("core-js/modules/es.array.filter"), e380("core-js/modules/es.array.iterator"), e380("core-js/modules/es.object.to-string"), e380("core-js/modules/es.string.iterator"), e380("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r189, "__esModule", {
                    value: !0
                }), r189.default = void 0;
                var n116, l = (n116 = e380("./main")) && n116.__esModule ? n116 : {
                    default: n116
                }, u = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== s30(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = a36();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e380("./constants"));
                function a36() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return a36 = function() {
                        return e;
                    }, e;
                }
                function s30(e381) {
                    return (s30 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e381);
                }
                e380("./p5.Graphics"), e380("./p5.Renderer2D"), e380("../webgl/p5.RendererGL");
                var c = "defaultCanvas0";
                l.default.prototype.createCanvas = function(e382, t, r) {
                    l.default._validateParameters("createCanvas", arguments);
                    var n, o = r || u.P2D;
                    if (o === u.WEBGL) {
                        if (n = document.getElementById(c)) {
                            n.parentNode.removeChild(n);
                            var i = this._renderer;
                            this._elements = this._elements.filter(function(e) {
                                return e !== i;
                            });
                        }
                        (n = document.createElement("canvas")).id = c, n.classList.add("p5Canvas");
                    } else if (this._defaultGraphicsCreated) n = this.canvas;
                    else {
                        n = document.createElement("canvas");
                        for(var a = 0; document.getElementById("defaultCanvas".concat(a));)a++;
                        c = "defaultCanvas".concat(a), n.id = c, n.classList.add("p5Canvas");
                    }
                    if (this._setupDone || (n.dataset.hidden = !0, n.style.visibility = "hidden"), this._userNode) this._userNode.appendChild(n);
                    else {
                        if (0 === document.getElementsByTagName("main").length) {
                            var s = document.createElement("main");
                            document.body.appendChild(s);
                        }
                        document.getElementsByTagName("main")[0].appendChild(n);
                    }
                    return o === u.WEBGL ? (this._setProperty("_renderer", new l.default.RendererGL(n, this, !0)), this._elements.push(this._renderer)) : this._defaultGraphicsCreated || (this._setProperty("_renderer", new l.default.Renderer2D(n, this, !0)), this._defaultGraphicsCreated = !0, this._elements.push(this._renderer)), this._renderer.resize(e382, t), this._renderer._applyDefaults(), this._renderer;
                }, l.default.prototype.resizeCanvas = function(e, t, r) {
                    if (l.default._validateParameters("resizeCanvas", arguments), this._renderer) {
                        var n = {
                        };
                        for(var o in this.drawingContext){
                            var i = this.drawingContext[o];
                            "object" !== s30(i) && "function" != typeof i && (n[o] = i);
                        }
                        for(var a in this._renderer.resize(e, t), this.width = e, this.height = t, n)try {
                            this.drawingContext[a] = n[a];
                        } catch (e) {
                        }
                        r || this.redraw();
                    }
                    this._addAccsOutput() && this._updateAccsOutput();
                }, l.default.prototype.noCanvas = function() {
                    this.canvas && this.canvas.parentNode.removeChild(this.canvas);
                }, l.default.prototype.createGraphics = function(e, t, r) {
                    return l.default._validateParameters("createGraphics", arguments), new l.default.Graphics(e, t, r, this);
                }, l.default.prototype.blendMode = function(e) {
                    l.default._validateParameters("blendMode", arguments), e === u.NORMAL && (console.warn("NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead."), e = u.BLEND), this._renderer.blendMode(e);
                };
                var o79 = l.default;
                r189.default = o79;
            },
            {
                "../webgl/p5.RendererGL": 314,
                "./constants": 250,
                "./main": 260,
                "./p5.Graphics": 262,
                "./p5.Renderer2D": 264,
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        267: [
            function(e383, t249, r190) {
                "use strict";
                function a37(e384) {
                    return (a37 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e384);
                }
                e383("core-js/modules/es.array.slice"), Object.defineProperty(r190, "__esModule", {
                    value: !0
                }), r190.default = void 0;
                var c = n117(e383("../main")), s31 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a37(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = l22();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e383("../constants")), d = n117(e383("../helpers"));
                function l22() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return l22 = function() {
                        return e;
                    }, e;
                }
                function n117(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                e383("../friendly_errors/fes_core"), e383("../friendly_errors/file_errors"), e383("../friendly_errors/validate_params"), c.default.prototype._normalizeArcAngles = function(e, t, r, n, o) {
                    var i;
                    return e -= s31.TWO_PI * Math.floor(e / s31.TWO_PI), t -= s31.TWO_PI * Math.floor(t / s31.TWO_PI), i = Math.min(Math.abs(e - t), s31.TWO_PI - Math.abs(e - t)), o && (e = e <= s31.HALF_PI ? Math.atan(r / n * Math.tan(e)) : e > s31.HALF_PI && e <= 3 * s31.HALF_PI ? Math.atan(r / n * Math.tan(e)) + s31.PI : Math.atan(r / n * Math.tan(e)) + s31.TWO_PI, t = t <= s31.HALF_PI ? Math.atan(r / n * Math.tan(t)) : t > s31.HALF_PI && t <= 3 * s31.HALF_PI ? Math.atan(r / n * Math.tan(t)) + s31.PI : Math.atan(r / n * Math.tan(t)) + s31.TWO_PI), t < e && (t += s31.TWO_PI), {
                        start: e,
                        stop: t,
                        correspondToSamePoint: i < 0.00001
                    };
                }, c.default.prototype.arc = function(e, t, r, n, o, i, a, s) {
                    if (c.default._validateParameters("arc", arguments), !this._renderer._doStroke && !this._renderer._doFill) return this;
                    if (o === i) return this;
                    o = this._toRadians(o), i = this._toRadians(i), r = Math.abs(r), n = Math.abs(n);
                    var l = d.default.modeAdjust(e, t, r, n, this._renderer._ellipseMode), u = this._normalizeArcAngles(o, i, l.w, l.h, !0);
                    return u.correspondToSamePoint ? this._renderer.ellipse([
                        l.x,
                        l.y,
                        l.w,
                        l.h,
                        s
                    ]) : (this._renderer.arc(l.x, l.y, l.w, l.h, u.start, u.stop, a, s), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("arc", [
                        l.x,
                        l.y,
                        l.w,
                        l.h,
                        u.start,
                        u.stop,
                        a
                    ])), this;
                }, c.default.prototype.ellipse = function(e, t, r, n, o) {
                    return c.default._validateParameters("ellipse", arguments), this._renderEllipse.apply(this, arguments);
                }, c.default.prototype.circle = function() {
                    c.default._validateParameters("circle", arguments);
                    var e = Array.prototype.slice.call(arguments, 0, 2);
                    return e.push(arguments[2]), e.push(arguments[2]), this._renderEllipse.apply(this, e);
                }, c.default.prototype._renderEllipse = function(e, t, r, n, o) {
                    if (!this._renderer._doStroke && !this._renderer._doFill) return this;
                    r < 0 && (r = Math.abs(r)), void 0 === n ? n = r : n < 0 && (n = Math.abs(n));
                    var i = d.default.modeAdjust(e, t, r, n, this._renderer._ellipseMode);
                    return this._renderer.ellipse([
                        i.x,
                        i.y,
                        i.w,
                        i.h,
                        o
                    ]), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("ellipse", [
                        i.x,
                        i.y,
                        i.w,
                        i.h
                    ]), this;
                }, c.default.prototype.line = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    var n;
                    c.default._validateParameters("line", t), this._renderer._doStroke && (n = this._renderer).line.apply(n, t);
                    return (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("line", t), this;
                }, c.default.prototype.point = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    var n;
                    c.default._validateParameters("point", t), this._renderer._doStroke && (1 === t.length && t[0] instanceof c.default.Vector ? this._renderer.point.call(this._renderer, t[0].x, t[0].y, t[0].z) : ((n = this._renderer).point.apply(n, t), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("point", t)));
                    return this;
                }, c.default.prototype.quad = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    var n;
                    c.default._validateParameters("quad", t), (this._renderer._doStroke || this._renderer._doFill) && (this._renderer.isP3D && t.length <= 12 ? this._renderer.quad.call(this._renderer, t[0], t[1], 0, t[2], t[3], 0, t[4], t[5], 0, t[6], t[7], 0, t[8], t[9]) : ((n = this._renderer).quad.apply(n, t), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("quadrilateral", t)));
                    return this;
                }, c.default.prototype.rect = function() {
                    return c.default._validateParameters("rect", arguments), this._renderRect.apply(this, arguments);
                }, c.default.prototype.square = function(e, t, r, n, o, i, a) {
                    return c.default._validateParameters("square", arguments), this._renderRect.call(this, e, t, r, r, n, o, i, a);
                }, c.default.prototype._renderRect = function() {
                    if (this._renderer._doStroke || this._renderer._doFill) {
                        3 === arguments.length && (arguments[3] = arguments[2]);
                        for(var e = d.default.modeAdjust(arguments[0], arguments[1], arguments[2], arguments[3], this._renderer._rectMode), t = [
                            e.x,
                            e.y,
                            e.w,
                            e.h
                        ], r = 4; r < arguments.length; r++)t[r] = arguments[r];
                        this._renderer.rect(t), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("rectangle", [
                            e.x,
                            e.y,
                            e.w,
                            e.h
                        ]);
                    }
                    return this;
                }, c.default.prototype.triangle = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    return c.default._validateParameters("triangle", t), (this._renderer._doStroke || this._renderer._doFill) && this._renderer.triangle(t), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("triangle", t), this;
                };
                var o80 = c.default;
                r190.default = o80;
            },
            {
                "../constants": 250,
                "../friendly_errors/fes_core": 252,
                "../friendly_errors/file_errors": 253,
                "../friendly_errors/validate_params": 255,
                "../helpers": 256,
                "../main": 260,
                "core-js/modules/es.array.slice": 160
            }
        ],
        268: [
            function(e385, t250, r191) {
                "use strict";
                function a(e386) {
                    return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e386);
                }
                Object.defineProperty(r191, "__esModule", {
                    value: !0
                }), r191.default = void 0;
                var n118, o81 = (n118 = e385("../main")) && n118.__esModule ? n118 : {
                    default: n118
                }, i50 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e385("../constants"));
                function s() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s = function() {
                        return e;
                    }, e;
                }
                o81.default.prototype.ellipseMode = function(e) {
                    return o81.default._validateParameters("ellipseMode", arguments), e !== i50.CORNER && e !== i50.CORNERS && e !== i50.RADIUS && e !== i50.CENTER || (this._renderer._ellipseMode = e), this;
                }, o81.default.prototype.noSmooth = function() {
                    return this.setAttributes("antialias", !1), this._renderer.isP3D || "imageSmoothingEnabled" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = !1), this;
                }, o81.default.prototype.rectMode = function(e) {
                    return o81.default._validateParameters("rectMode", arguments), e !== i50.CORNER && e !== i50.CORNERS && e !== i50.RADIUS && e !== i50.CENTER || (this._renderer._rectMode = e), this;
                }, o81.default.prototype.smooth = function() {
                    return this.setAttributes("antialias", !0), this._renderer.isP3D || "imageSmoothingEnabled" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = !0), this;
                }, o81.default.prototype.strokeCap = function(e) {
                    return o81.default._validateParameters("strokeCap", arguments), e !== i50.ROUND && e !== i50.SQUARE && e !== i50.PROJECT || this._renderer.strokeCap(e), this;
                }, o81.default.prototype.strokeJoin = function(e) {
                    return o81.default._validateParameters("strokeJoin", arguments), e !== i50.ROUND && e !== i50.BEVEL && e !== i50.MITER || this._renderer.strokeJoin(e), this;
                }, o81.default.prototype.strokeWeight = function(e) {
                    return o81.default._validateParameters("strokeWeight", arguments), this._renderer.strokeWeight(e), this;
                };
                var l = o81.default;
                r191.default = l;
            },
            {
                "../constants": 250,
                "../main": 260
            }
        ],
        269: [
            function(e387, t251, r192) {
                "use strict";
                Object.defineProperty(r192, "__esModule", {
                    value: !0
                }), r192.default = void 0;
                var n119, s = (n119 = e387("../main")) && n119.__esModule ? n119 : {
                    default: n119
                };
                e387("../friendly_errors/fes_core"), e387("../friendly_errors/file_errors"), e387("../friendly_errors/validate_params"), s.default.prototype.bezier = function() {
                    for(var e, t = arguments.length, r = new Array(t), n = 0; n < t; n++)r[n] = arguments[n];
                    return s.default._validateParameters("bezier", r), (this._renderer._doStroke || this._renderer._doFill) && (e = this._renderer).bezier.apply(e, r), this;
                }, s.default.prototype.bezierDetail = function(e) {
                    return s.default._validateParameters("bezierDetail", arguments), this._bezierDetail = e, this;
                }, s.default.prototype.bezierPoint = function(e, t, r, n, o) {
                    s.default._validateParameters("bezierPoint", arguments);
                    var i = 1 - o;
                    return Math.pow(i, 3) * e + 3 * Math.pow(i, 2) * o * t + 3 * i * Math.pow(o, 2) * r + Math.pow(o, 3) * n;
                }, s.default.prototype.bezierTangent = function(e, t, r, n, o) {
                    s.default._validateParameters("bezierTangent", arguments);
                    var i = 1 - o;
                    return 3 * n * Math.pow(o, 2) - 3 * r * Math.pow(o, 2) + 6 * r * i * o - 6 * t * i * o + 3 * t * Math.pow(i, 2) - 3 * e * Math.pow(i, 2);
                }, s.default.prototype.curve = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    var n;
                    s.default._validateParameters("curve", t), this._renderer._doStroke && (n = this._renderer).curve.apply(n, t);
                    return this;
                }, s.default.prototype.curveDetail = function(e) {
                    return s.default._validateParameters("curveDetail", arguments), this._curveDetail = e < 3 ? 3 : e, this;
                }, s.default.prototype.curveTightness = function(e) {
                    return s.default._validateParameters("curveTightness", arguments), this._renderer._curveTightness = e, this;
                }, s.default.prototype.curvePoint = function(e, t, r, n, o) {
                    s.default._validateParameters("curvePoint", arguments);
                    var i = o * o * o, a = o * o;
                    return e * (-0.5 * i + a - 0.5 * o) + t * (1.5 * i - 2.5 * a + 1) + r * (-1.5 * i + 2 * a + 0.5 * o) + n * (0.5 * i - 0.5 * a);
                }, s.default.prototype.curveTangent = function(e, t, r, n, o) {
                    s.default._validateParameters("curveTangent", arguments);
                    var i = o * o;
                    return e * (-3 * i / 2 + 2 * o - 0.5) + t * (9 * i / 2 - 5 * o) + r * (-9 * i / 2 + 4 * o + 0.5) + n * (3 * i / 2 - o);
                };
                var o82 = s.default;
                r192.default = o82;
            },
            {
                "../friendly_errors/fes_core": 252,
                "../friendly_errors/file_errors": 253,
                "../friendly_errors/validate_params": 255,
                "../main": 260
            }
        ],
        270: [
            function(e388, t252, r193) {
                "use strict";
                function a38(e389) {
                    return (a38 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e389);
                }
                e388("core-js/modules/es.array.slice"), Object.defineProperty(r193, "__esModule", {
                    value: !0
                }), r193.default = void 0;
                var n120, s = (n120 = e388("../main")) && n120.__esModule ? n120 : {
                    default: n120
                }, l = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a38(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = u();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e388("../constants"));
                function u() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return u = function() {
                        return e;
                    }, e;
                }
                var o83 = null, c = [], d = [], f = !1, i51 = !1, h = !1, p = !1, y = !0;
                s.default.prototype.beginContour = function() {
                    return d = [], p = !0, this;
                }, s.default.prototype.beginShape = function(e) {
                    var t;
                    (s.default._validateParameters("beginShape", arguments), this._renderer.isP3D) ? (t = this._renderer).beginShape.apply(t, arguments) : (o83 = e === l.POINTS || e === l.LINES || e === l.TRIANGLES || e === l.TRIANGLE_FAN || e === l.TRIANGLE_STRIP || e === l.QUADS || e === l.QUAD_STRIP ? e : null, c = [], d = []);
                    return this;
                }, s.default.prototype.bezierVertex = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    var n;
                    if (s.default._validateParameters("bezierVertex", t), this._renderer.isP3D) (n = this._renderer).bezierVertex.apply(n, t);
                    else if (0 === c.length) s.default._friendlyError("vertex() must be used once before calling bezierVertex()", "bezierVertex");
                    else {
                        f = !0;
                        for(var o = [], i = 0; i < t.length; i++)o[i] = t[i];
                        o.isVert = !1, p ? d.push(o) : c.push(o);
                    }
                    return this;
                }, s.default.prototype.curveVertex = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    var n;
                    (s.default._validateParameters("curveVertex", t), this._renderer.isP3D) ? (n = this._renderer).curveVertex.apply(n, t) : (i51 = !0, this.vertex(t[0], t[1]));
                    return this;
                }, s.default.prototype.endContour = function() {
                    var e = d[0].slice();
                    e.isVert = d[0].isVert, e.moveTo = !1, d.push(e), y && (c.push(c[0]), y = !1);
                    for(var t = 0; t < d.length; t++)c.push(d[t]);
                    return this;
                }, s.default.prototype.endShape = function(e) {
                    if (s.default._validateParameters("endShape", arguments), this._renderer.isP3D) this._renderer.endShape(e, i51, f, h, p, o83);
                    else {
                        if (0 === c.length) return this;
                        if (!this._renderer._doStroke && !this._renderer._doFill) return this;
                        var t = e === l.CLOSE;
                        t && !p && c.push(c[0]), this._renderer.endShape(e, c, i51, f, h, p, o83), y = (p = h = f = i51 = !1, true), t && c.pop();
                    }
                    return this;
                }, s.default.prototype.quadraticVertex = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    if (s.default._validateParameters("quadraticVertex", t), this._renderer.isP3D) {
                        var n;
                        (n = this._renderer).quadraticVertex.apply(n, t);
                    } else {
                        if (this._contourInited) {
                            var o = {
                            };
                            return o.x = t[0], o.y = t[1], o.x3 = t[2], o.y3 = t[3], o.type = l.QUADRATIC, this._contourVertices.push(o), this;
                        }
                        if (0 < c.length) {
                            h = !0;
                            for(var i = [], a = 0; a < t.length; a++)i[a] = t[a];
                            i.isVert = !1, p ? d.push(i) : c.push(i);
                        } else s.default._friendlyError("vertex() must be used once before calling quadraticVertex()", "quadraticVertex");
                    }
                    return this;
                }, s.default.prototype.vertex = function(e, t, r, n, o) {
                    if (this._renderer.isP3D) {
                        var i;
                        (i = this._renderer).vertex.apply(i, arguments);
                    } else {
                        var a = [];
                        a.isVert = !0, a[0] = e, a[1] = t, a[2] = 0, a[3] = 0, a[4] = 0, a[5] = this._renderer._getFill(), a[6] = this._renderer._getStroke(), r && (a.moveTo = r), p ? (0 === d.length && (a.moveTo = !0), d.push(a)) : c.push(a);
                    }
                    return this;
                };
                var m = s.default;
                r193.default = m;
            },
            {
                "../constants": 250,
                "../main": 260,
                "core-js/modules/es.array.slice": 160
            }
        ],
        271: [
            function(e390, t253, r194) {
                "use strict";
                function n121(e391) {
                    return (n121 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e391);
                }
                e390("core-js/modules/es.symbol"), e390("core-js/modules/es.symbol.description"), e390("core-js/modules/es.symbol.iterator"), e390("core-js/modules/es.array.filter"), e390("core-js/modules/es.array.iterator"), e390("core-js/modules/es.array.slice"), e390("core-js/modules/es.object.assign"), e390("core-js/modules/es.object.keys"), e390("core-js/modules/es.object.to-string"), e390("core-js/modules/es.string.iterator"), e390("core-js/modules/es.typed-array.uint8-clamped-array"), e390("core-js/modules/es.typed-array.copy-within"), e390("core-js/modules/es.typed-array.every"), e390("core-js/modules/es.typed-array.fill"), e390("core-js/modules/es.typed-array.filter"), e390("core-js/modules/es.typed-array.find"), e390("core-js/modules/es.typed-array.find-index"), e390("core-js/modules/es.typed-array.for-each"), e390("core-js/modules/es.typed-array.includes"), e390("core-js/modules/es.typed-array.index-of"), e390("core-js/modules/es.typed-array.iterator"), e390("core-js/modules/es.typed-array.join"), e390("core-js/modules/es.typed-array.last-index-of"), e390("core-js/modules/es.typed-array.map"), e390("core-js/modules/es.typed-array.reduce"), e390("core-js/modules/es.typed-array.reduce-right"), e390("core-js/modules/es.typed-array.reverse"), e390("core-js/modules/es.typed-array.set"), e390("core-js/modules/es.typed-array.slice"), e390("core-js/modules/es.typed-array.some"), e390("core-js/modules/es.typed-array.sort"), e390("core-js/modules/es.typed-array.subarray"), e390("core-js/modules/es.typed-array.to-locale-string"), e390("core-js/modules/es.typed-array.to-string"), e390("core-js/modules/web.dom-collections.iterator"), window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(e, t) {
                    window.setTimeout(e, 1000 / 60);
                }, "undefined" == typeof Uint8ClampedArray || Uint8ClampedArray.prototype.slice || Object.defineProperty(Uint8ClampedArray.prototype, "slice", {
                    value: Array.prototype.slice,
                    writable: !0,
                    configurable: !0,
                    enumerable: !1
                }), (function() {
                    if (!Object.assign) {
                        var s = Object.keys, e392 = Object.defineProperty, l = "function" == typeof Symbol && "symbol" === n121(Symbol()), r195 = Object.prototype.propertyIsEnumerable, u = function(t) {
                            return function(e) {
                                return r195.call(t, e);
                            };
                        };
                        e392(Object, "assign", {
                            value: function(e, t) {
                                if (null == e) throw new TypeError("target must be an object");
                                var r, n, o, i, a = Object(e);
                                for(r = 1; r < arguments.length; ++r)for(n = Object(arguments[r]), i = s(n), l && Object.getOwnPropertySymbols && i.push.apply(i, Object.getOwnPropertySymbols(n).filter(u(n))), o = 0; o < i.length; ++o)a[i[o]] = n[i[o]];
                                return a;
                            },
                            configurable: !0,
                            enumerable: !1,
                            writable: !0
                        });
                    }
                })();
            },
            {
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.object.assign": 170,
                "core-js/modules/es.object.keys": 173,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/es.typed-array.uint8-clamped-array": 224,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        272: [
            function(e393, t254, r196) {
                "use strict";
                e393("core-js/modules/es.array.for-each"), e393("core-js/modules/es.object.assign"), e393("core-js/modules/web.dom-collections.for-each"), Object.defineProperty(r196, "__esModule", {
                    value: !0
                }), r196.default = void 0;
                var n122, o84 = (n122 = e393("./main")) && n122.__esModule ? n122 : {
                    default: n122
                };
                o84.default.prototype.noLoop = function() {
                    this._loop = !1;
                }, o84.default.prototype.loop = function() {
                    this._loop || (this._loop = !0, this._setupDone && this._draw());
                }, o84.default.prototype.isLooping = function() {
                    return this._loop;
                }, o84.default.prototype.push = function() {
                    this._styles.push({
                        props: {
                            _colorMode: this._colorMode
                        },
                        renderer: this._renderer.push()
                    });
                }, o84.default.prototype.pop = function() {
                    var e = this._styles.pop();
                    e ? (this._renderer.pop(e.renderer), Object.assign(this, e.props)) : console.warn("pop() was called without matching push()");
                }, o84.default.prototype.redraw = function(e394) {
                    if (!this._inUserDraw && this._setupDone) {
                        var t = parseInt(e394);
                        (isNaN(t) || t < 1) && (t = 1);
                        var r = this._isGlobal ? window : this;
                        if ("function" == typeof r.draw) {
                            void 0 === r.setup && r.scale(r._pixelDensity, r._pixelDensity);
                            for(var n = function(e) {
                                e.call(r);
                            }, o = 0; o < t; o++){
                                r.resetMatrix(), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._updateAccsOutput(), r._renderer.isP3D && r._renderer._update(), r._setProperty("frameCount", r.frameCount + 1), r._registeredMethods.pre.forEach(n), this._inUserDraw = !0;
                                try {
                                    r.draw();
                                } finally{
                                    this._inUserDraw = !1;
                                }
                                r._registeredMethods.post.forEach(n);
                            }
                        }
                    }
                };
                var i = o84.default;
                r196.default = i;
            },
            {
                "./main": 260,
                "core-js/modules/es.array.for-each": 152,
                "core-js/modules/es.object.assign": 170,
                "core-js/modules/web.dom-collections.for-each": 225
            }
        ],
        273: [
            function(e395, t255, r197) {
                "use strict";
                e395("core-js/modules/es.symbol"), e395("core-js/modules/es.symbol.description"), e395("core-js/modules/es.symbol.iterator"), e395("core-js/modules/es.array.from"), e395("core-js/modules/es.array.iterator"), e395("core-js/modules/es.object.get-prototype-of"), e395("core-js/modules/es.object.to-string"), e395("core-js/modules/es.regexp.to-string"), e395("core-js/modules/es.string.iterator"), e395("core-js/modules/es.typed-array.uint8-array"), e395("core-js/modules/es.typed-array.copy-within"), e395("core-js/modules/es.typed-array.every"), e395("core-js/modules/es.typed-array.fill"), e395("core-js/modules/es.typed-array.filter"), e395("core-js/modules/es.typed-array.find"), e395("core-js/modules/es.typed-array.find-index"), e395("core-js/modules/es.typed-array.for-each"), e395("core-js/modules/es.typed-array.includes"), e395("core-js/modules/es.typed-array.index-of"), e395("core-js/modules/es.typed-array.iterator"), e395("core-js/modules/es.typed-array.join"), e395("core-js/modules/es.typed-array.last-index-of"), e395("core-js/modules/es.typed-array.map"), e395("core-js/modules/es.typed-array.reduce"), e395("core-js/modules/es.typed-array.reduce-right"), e395("core-js/modules/es.typed-array.reverse"), e395("core-js/modules/es.typed-array.set"), e395("core-js/modules/es.typed-array.slice"), e395("core-js/modules/es.typed-array.some"), e395("core-js/modules/es.typed-array.sort"), e395("core-js/modules/es.typed-array.subarray"), e395("core-js/modules/es.typed-array.to-locale-string"), e395("core-js/modules/es.typed-array.to-string"), e395("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r197, "__esModule", {
                    value: !0
                }), r197.default = void 0;
                var n123, i = (n123 = e395("./main")) && n123.__esModule ? n123 : {
                    default: n123
                };
                function o85(e396) {
                    return (function(e) {
                        if (Array.isArray(e)) {
                            for(var t = 0, r = new Array(e.length); t < e.length; t++)r[t] = e[t];
                            return r;
                        }
                    })(e396) || (function(e) {
                        if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
                    })(e396) || (function() {
                        throw new TypeError("Invalid attempt to spread non-iterable instance");
                    })();
                }
                i.default.prototype.applyMatrix = function() {
                    var e, t, r = arguments[0] instanceof Object.getPrototypeOf(Uint8Array);
                    Array.isArray(arguments[0]) || r ? (e = this._renderer).applyMatrix.apply(e, o85(arguments[0])) : (t = this._renderer).applyMatrix.apply(t, arguments);
                    return this;
                }, i.default.prototype.resetMatrix = function() {
                    return this._renderer.resetMatrix(), this;
                }, i.default.prototype.rotate = function(e, t) {
                    return i.default._validateParameters("rotate", arguments), this._renderer.rotate(this._toRadians(e), t), this;
                }, i.default.prototype.rotateX = function(e) {
                    return this._assert3d("rotateX"), i.default._validateParameters("rotateX", arguments), this._renderer.rotateX(this._toRadians(e)), this;
                }, i.default.prototype.rotateY = function(e) {
                    return this._assert3d("rotateY"), i.default._validateParameters("rotateY", arguments), this._renderer.rotateY(this._toRadians(e)), this;
                }, i.default.prototype.rotateZ = function(e) {
                    return this._assert3d("rotateZ"), i.default._validateParameters("rotateZ", arguments), this._renderer.rotateZ(this._toRadians(e)), this;
                }, i.default.prototype.scale = function(e, t, r) {
                    if (i.default._validateParameters("scale", arguments), e instanceof i.default.Vector) {
                        var n = e;
                        e = n.x, t = n.y, r = n.z;
                    } else if (e instanceof Array) {
                        var o = e;
                        e = o[0], t = o[1], r = o[2] || 1;
                    }
                    return isNaN(t) ? t = r = e : isNaN(r) && (r = 1), this._renderer.scale.call(this._renderer, e, t, r), this;
                }, i.default.prototype.shearX = function(e) {
                    i.default._validateParameters("shearX", arguments);
                    var t = this._toRadians(e);
                    return this._renderer.applyMatrix(1, 0, Math.tan(t), 1, 0, 0), this;
                }, i.default.prototype.shearY = function(e) {
                    i.default._validateParameters("shearY", arguments);
                    var t = this._toRadians(e);
                    return this._renderer.applyMatrix(1, Math.tan(t), 0, 1, 0, 0), this;
                }, i.default.prototype.translate = function(e, t, r) {
                    return i.default._validateParameters("translate", arguments), this._renderer.isP3D ? this._renderer.translate(e, t, r) : this._renderer.translate(e, t), this;
                };
                var a = i.default;
                r197.default = a;
            },
            {
                "./main": 260,
                "core-js/modules/es.array.from": 153,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.get-prototype-of": 172,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/es.typed-array.uint8-array": 223,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        274: [
            function(e397, t256, r198) {
                "use strict";
                e397("core-js/modules/es.symbol"), e397("core-js/modules/es.symbol.description"), e397("core-js/modules/es.symbol.iterator"), e397("core-js/modules/es.array.from"), e397("core-js/modules/es.array.iterator"), e397("core-js/modules/es.object.to-string"), e397("core-js/modules/es.regexp.to-string"), e397("core-js/modules/es.string.ends-with"), e397("core-js/modules/es.string.iterator"), e397("core-js/modules/web.dom-collections.iterator");
                var n124, o = (n124 = e397("../core/main")) && n124.__esModule ? n124 : {
                    default: n124
                };
                function i(e398) {
                    return (function(e) {
                        if (Array.isArray(e)) {
                            for(var t = 0, r = new Array(e.length); t < e.length; t++)r[t] = e[t];
                            return r;
                        }
                    })(e398) || (function(e) {
                        if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
                    })(e398) || (function() {
                        throw new TypeError("Invalid attempt to spread non-iterable instance");
                    })();
                }
                function a(e399) {
                    return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e399);
                }
                o.default.prototype.storeItem = function(e, t) {
                    "string" != typeof e && console.log("The argument that you passed to storeItem() - ".concat(e, " is not a string.")), e.endsWith("p5TypeID") && console.log("The argument that you passed to storeItem() - ".concat(e, " must not end with 'p5TypeID'.")), void 0 === t && console.log("You cannot store undefined variables using storeItem().");
                    var r = a(t);
                    switch(r){
                        case "number":
                        case "boolean":
                            t = t.toString();
                            break;
                        case "object":
                            if (t instanceof o.default.Color) r = "p5.Color";
                            else if (t instanceof o.default.Vector) r = "p5.Vector", t = [
                                t.x,
                                t.y,
                                t.z
                            ];
                            t = JSON.stringify(t);
                    }
                    localStorage.setItem(e, t);
                    var n = "".concat(e, "p5TypeID");
                    localStorage.setItem(n, r);
                }, o.default.prototype.getItem = function(e) {
                    var t = localStorage.getItem(e), r = localStorage.getItem("".concat(e, "p5TypeID"));
                    if (void 0 === r) console.log("Unable to determine type of item stored under ".concat(e, "in local storage. Did you save the item with something other than setItem()?"));
                    else if (null !== t) switch(r){
                        case "number":
                            t = parseFloat(t);
                            break;
                        case "boolean":
                            t = "true" === t;
                            break;
                        case "object":
                            t = JSON.parse(t);
                            break;
                        case "p5.Color":
                            t = JSON.parse(t), t = this.color.apply(this, i(t.levels));
                            break;
                        case "p5.Vector":
                            t = JSON.parse(t), t = this.createVector.apply(this, i(t));
                    }
                    return t;
                }, o.default.prototype.clearStorage = function() {
                    localStorage.clear();
                }, o.default.prototype.removeItem = function(e) {
                    "string" != typeof e && console.log("The argument that you passed to removeItem() - ".concat(e, " is not a string.")), localStorage.removeItem(e), localStorage.removeItem("".concat(e, "p5TypeID"));
                };
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.from": 153,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.ends-with": 181,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        275: [
            function(e400, t257, r199) {
                "use strict";
                e400("core-js/modules/es.array.concat"), e400("core-js/modules/es.object.keys"), e400("core-js/modules/es.string.sub"), Object.defineProperty(r199, "__esModule", {
                    value: !0
                }), r199.default = void 0;
                var n125, o = (n125 = e400("../core/main")) && n125.__esModule ? n125 : {
                    default: n125
                };
                o.default.prototype.createStringDict = function(e, t) {
                    return o.default._validateParameters("createStringDict", arguments), new o.default.StringDict(e, t);
                }, o.default.prototype.createNumberDict = function(e, t) {
                    return o.default._validateParameters("createNumberDict", arguments), new o.default.NumberDict(e, t);
                }, o.default.TypedDict = function(e, t) {
                    return e instanceof Object ? this.data = e : (this.data = {
                    }, this.data[e] = t), this;
                }, o.default.TypedDict.prototype.size = function() {
                    return Object.keys(this.data).length;
                }, o.default.TypedDict.prototype.hasKey = function(e) {
                    return this.data.hasOwnProperty(e);
                }, o.default.TypedDict.prototype.get = function(e) {
                    if (this.data.hasOwnProperty(e)) return this.data[e];
                    console.log("".concat(e, " does not exist in this Dictionary"));
                }, o.default.TypedDict.prototype.set = function(e, t) {
                    this._validate(t) ? this.data[e] = t : console.log("Those values dont work for this dictionary type.");
                }, o.default.TypedDict.prototype._addObj = function(e) {
                    for(var t in e)this.set(t, e[t]);
                }, o.default.TypedDict.prototype.create = function(e, t) {
                    e instanceof Object && void 0 === t ? this._addObj(e) : void 0 !== e ? this.set(e, t) : console.log("In order to create a new Dictionary entry you must pass an object or a key, value pair");
                }, o.default.TypedDict.prototype.clear = function() {
                    this.data = {
                    };
                }, o.default.TypedDict.prototype.remove = function(e) {
                    if (!this.data.hasOwnProperty(e)) throw new Error("".concat(e, " does not exist in this Dictionary"));
                    delete this.data[e];
                }, o.default.TypedDict.prototype.print = function() {
                    for(var e in this.data)console.log("key:".concat(e, " value:").concat(this.data[e]));
                }, o.default.TypedDict.prototype.saveTable = function(e) {
                    var t = "";
                    for(var r in this.data)t += "".concat(r, ",").concat(this.data[r], "\n");
                    var n = new Blob([
                        t
                    ], {
                        type: "text/csv"
                    });
                    o.default.prototype.downloadFile(n, e || "mycsv", "csv");
                }, o.default.TypedDict.prototype.saveJSON = function(e, t) {
                    o.default.prototype.saveJSON(this.data, e, t);
                }, o.default.TypedDict.prototype._validate = function(e) {
                    return !0;
                }, o.default.StringDict = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    o.default.TypedDict.apply(this, t);
                }, o.default.StringDict.prototype = Object.create(o.default.TypedDict.prototype), o.default.StringDict.prototype._validate = function(e) {
                    return "string" == typeof e;
                }, o.default.NumberDict = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    o.default.TypedDict.apply(this, t);
                }, o.default.NumberDict.prototype = Object.create(o.default.TypedDict.prototype), o.default.NumberDict.prototype._validate = function(e) {
                    return "number" == typeof e;
                }, o.default.NumberDict.prototype.add = function(e, t) {
                    this.data.hasOwnProperty(e) ? this.data[e] += t : console.log("The key - ".concat(e, " does not exist in this dictionary."));
                }, o.default.NumberDict.prototype.sub = function(e, t) {
                    this.add(e, -t);
                }, o.default.NumberDict.prototype.mult = function(e, t) {
                    this.data.hasOwnProperty(e) ? this.data[e] *= t : console.log("The key - ".concat(e, " does not exist in this dictionary."));
                }, o.default.NumberDict.prototype.div = function(e, t) {
                    this.data.hasOwnProperty(e) ? this.data[e] /= t : console.log("The key - ".concat(e, " does not exist in this dictionary."));
                }, o.default.NumberDict.prototype._valueTest = function(e) {
                    if (0 === Object.keys(this.data).length) throw new Error("Unable to search for a minimum or maximum value on an empty NumberDict");
                    if (1 === Object.keys(this.data).length) return this.data[Object.keys(this.data)[0]];
                    var t = this.data[Object.keys(this.data)[0]];
                    for(var r in this.data)this.data[r] * e < t * e && (t = this.data[r]);
                    return t;
                }, o.default.NumberDict.prototype.minValue = function() {
                    return this._valueTest(1);
                }, o.default.NumberDict.prototype.maxValue = function() {
                    return this._valueTest(-1);
                }, o.default.NumberDict.prototype._keyTest = function(e) {
                    if (0 === Object.keys(this.data).length) throw new Error("Unable to use minValue on an empty NumberDict");
                    if (1 === Object.keys(this.data).length) return Object.keys(this.data)[0];
                    for(var t = Object.keys(this.data)[0], r = 1; r < Object.keys(this.data).length; r++)Object.keys(this.data)[r] * e < t * e && (t = Object.keys(this.data)[r]);
                    return t;
                }, o.default.NumberDict.prototype.minKey = function() {
                    return this._keyTest(1);
                }, o.default.NumberDict.prototype.maxKey = function() {
                    return this._keyTest(-1);
                };
                var i = o.default.TypedDict;
                r199.default = i;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.object.keys": 173,
                "core-js/modules/es.string.sub": 189
            }
        ],
        276: [
            function(e401, t258, r200) {
                "use strict";
                e401("core-js/modules/es.symbol"), e401("core-js/modules/es.symbol.description"), e401("core-js/modules/es.symbol.iterator"), e401("core-js/modules/es.array.every"), e401("core-js/modules/es.array.filter"), e401("core-js/modules/es.array.for-each"), e401("core-js/modules/es.array.from"), e401("core-js/modules/es.array.index-of"), e401("core-js/modules/es.array.iterator"), e401("core-js/modules/es.array.map"), e401("core-js/modules/es.array.slice"), e401("core-js/modules/es.array.splice"), e401("core-js/modules/es.function.name"), e401("core-js/modules/es.object.to-string"), e401("core-js/modules/es.promise"), e401("core-js/modules/es.regexp.exec"), e401("core-js/modules/es.regexp.to-string"), e401("core-js/modules/es.string.iterator"), e401("core-js/modules/es.string.replace"), e401("core-js/modules/es.string.split"), e401("core-js/modules/es.string.trim"), e401("core-js/modules/web.dom-collections.for-each"), e401("core-js/modules/web.dom-collections.iterator"), e401("core-js/modules/web.url"), Object.defineProperty(r200, "__esModule", {
                    value: !0
                }), r200.default = void 0;
                var n126, f13 = (n126 = e401("../core/main")) && n126.__esModule ? n126 : {
                    default: n126
                };
                function h10(e402) {
                    return (h10 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e402);
                }
                function y(e, t, r) {
                    (t._userNode ? t._userNode : document.body).appendChild(e);
                    var n = r ? new f13.default.MediaElement(e, t) : new f13.default.Element(e, t);
                    return t._elements.push(n), n;
                }
                function o86(e404, t, r, n) {
                    var o = document.createElement(t);
                    "string" == typeof (r = r || "") && (r = [
                        r
                    ]);
                    var i = !0, a = !1, s = void 0;
                    try {
                        for(var l, u = r[Symbol.iterator](); !(i = (l = u.next()).done); i = !0){
                            var c = l.value, d = document.createElement("source");
                            d.setAttribute("src", c), o.appendChild(d);
                        }
                    } catch (e403) {
                        a = !0, s = e403;
                    } finally{
                        try {
                            i || null == u.return || u.return();
                        } finally{
                            if (a) throw s;
                        }
                    }
                    if ("function" == typeof n) o.addEventListener("canplaythrough", function e() {
                        n(), o.removeEventListener("canplaythrough", e);
                    });
                    var f = y(o, e404, !0);
                    return f.loadedmetadata = !1, o.addEventListener("loadedmetadata", function() {
                        f.width = o.videoWidth, f.height = o.videoHeight, 0 === f.elt.width && (f.elt.width = o.videoWidth), 0 === f.elt.height && (f.elt.height = o.videoHeight), f.presetPlaybackRate && (f.elt.playbackRate = f.presetPlaybackRate, delete f.presetPlaybackRate), f.loadedmetadata = !0;
                    }), f;
                }
                f13.default.prototype.select = function(e, t) {
                    f13.default._validateParameters("select", arguments);
                    var r = this._getContainer(t).querySelector(e);
                    return r ? this._wrapElement(r) : null;
                }, f13.default.prototype.selectAll = function(e, t) {
                    f13.default._validateParameters("selectAll", arguments);
                    var r = [], n = this._getContainer(t).querySelectorAll(e);
                    if (n) for(var o = 0; o < n.length; o++){
                        var i = this._wrapElement(n[o]);
                        r.push(i);
                    }
                    return r;
                }, f13.default.prototype._getContainer = function(e) {
                    var t = document;
                    return "string" == typeof e ? t = document.querySelector(e) || document : e instanceof f13.default.Element ? t = e.elt : e instanceof HTMLElement && (t = e), t;
                }, f13.default.prototype._wrapElement = function(e405) {
                    var t = Array.prototype.slice.call(e405.children);
                    if ("INPUT" !== e405.tagName || "checkbox" !== e405.type) return "VIDEO" === e405.tagName || "AUDIO" === e405.tagName ? new f13.default.MediaElement(e405, this) : "SELECT" === e405.tagName ? this.createSelect(new f13.default.Element(e405, this)) : 0 < t.length && t.every(function(e) {
                        return "INPUT" === e.tagName || "LABEL" === e.tagName;
                    }) ? this.createRadio(new f13.default.Element(e405, this)) : new f13.default.Element(e405, this);
                    var r = new f13.default.Element(e405, this);
                    return r.checked = function() {
                        return 0 === arguments.length ? this.elt.checked : (this.elt.checked = !!arguments[0], this);
                    }, r;
                }, f13.default.prototype.removeElements = function(e406) {
                    f13.default._validateParameters("removeElements", arguments);
                    this._elements.filter(function(e) {
                        return !(e.elt instanceof HTMLCanvasElement);
                    }).map(function(e) {
                        return e.remove();
                    });
                }, f13.default.Element.prototype.changed = function(e) {
                    return f13.default.Element._adjustListener("change", e, this), this;
                }, f13.default.Element.prototype.input = function(e) {
                    return f13.default.Element._adjustListener("input", e, this), this;
                }, f13.default.prototype.createDiv = function() {
                    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t = document.createElement("div");
                    return t.innerHTML = e, y(t, this);
                }, f13.default.prototype.createP = function() {
                    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t = document.createElement("p");
                    return t.innerHTML = e, y(t, this);
                }, f13.default.prototype.createSpan = function() {
                    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t = document.createElement("span");
                    return t.innerHTML = e, y(t, this);
                }, f13.default.prototype.createImg = function() {
                    f13.default._validateParameters("createImg", arguments);
                    var t, r = document.createElement("img"), n = arguments;
                    return 1 < n.length && "string" == typeof n[1] && (r.alt = n[1]), 2 < n.length && "string" == typeof n[2] && (r.crossOrigin = n[2]), r.src = n[0], t = y(r, this), r.addEventListener("load", function() {
                        t.width = r.offsetWidth || r.width, t.height = r.offsetHeight || r.height;
                        var e = n[n.length - 1];
                        "function" == typeof e && e(t);
                    }), t;
                }, f13.default.prototype.createA = function(e, t, r) {
                    f13.default._validateParameters("createA", arguments);
                    var n = document.createElement("a");
                    return n.href = e, n.innerHTML = t, r && (n.target = r), y(n, this);
                }, f13.default.prototype.createSlider = function(e, t, r, n) {
                    f13.default._validateParameters("createSlider", arguments);
                    var o = document.createElement("input");
                    return o.type = "range", o.min = e, o.max = t, 0 === n ? o.step = 0.000000000000000001 : n && (o.step = n), "number" == typeof r && (o.value = r), y(o, this);
                }, f13.default.prototype.createButton = function(e, t) {
                    f13.default._validateParameters("createButton", arguments);
                    var r = document.createElement("button");
                    return r.innerHTML = e, t && (r.value = t), y(r, this);
                }, f13.default.prototype.createCheckbox = function() {
                    f13.default._validateParameters("createCheckbox", arguments);
                    var e407 = document.createElement("div"), t = document.createElement("input");
                    t.type = "checkbox", e407.appendChild(t);
                    var r = y(e407, this);
                    if (r.checked = function() {
                        var e = r.elt.getElementsByTagName("input")[0];
                        if (e) {
                            if (0 === arguments.length) return e.checked;
                            e.checked = !!arguments[0];
                        }
                        return r;
                    }, this.value = function(e) {
                        return r.value = e, this;
                    }, arguments[0]) {
                        var n = Math.random().toString(36).slice(2), o = document.createElement("label");
                        t.setAttribute("id", n), o.htmlFor = n, r.value(arguments[0]), o.appendChild(document.createTextNode(arguments[0])), e407.appendChild(o);
                    }
                    return arguments[1] && (t.checked = !0), r;
                }, f13.default.prototype.createSelect = function() {
                    var e408;
                    f13.default._validateParameters("createSelect", arguments);
                    var t259 = arguments[0];
                    if (t259 instanceof f13.default.Element && t259.elt instanceof HTMLSelectElement) e408 = t259, this.elt = t259.elt;
                    else if (t259 instanceof HTMLSelectElement) e408 = y(t259, this), this.elt = t259;
                    else {
                        var r = document.createElement("select");
                        t259 && "boolean" == typeof t259 && r.setAttribute("multiple", "true"), e408 = y(r, this), this.elt = r;
                    }
                    return e408.option = function(e, t) {
                        var r;
                        if (void 0 !== e) {
                            for(var n = 0; n < this.elt.length; n += 1)if (this.elt[n].innerHTML === e) {
                                r = n;
                                break;
                            }
                            if (void 0 !== r) !1 === t ? this.elt.remove(r) : this.elt[r].value = t;
                            else {
                                var o = document.createElement("option");
                                o.innerHTML = e, o.value = void 0 === t ? e : t, this.elt.appendChild(o), this._pInst._elements.push(o);
                            }
                        }
                    }, e408.selected = function(e) {
                        if (void 0 !== e) {
                            for(var t = 0; t < this.elt.length; t += 1)this.elt[t].value.toString() === e.toString() && (this.elt.selectedIndex = t);
                            return this;
                        }
                        if (this.elt.getAttribute("multiple")) {
                            var r = [], n = !0, o = !1, i = void 0;
                            try {
                                for(var a, s = this.elt.selectedOptions[Symbol.iterator](); !(n = (a = s.next()).done); n = !0){
                                    var l = a.value;
                                    r.push(l.value);
                                }
                            } catch (e) {
                                o = !0, i = e;
                            } finally{
                                try {
                                    n || null == s.return || s.return();
                                } finally{
                                    if (o) throw i;
                                }
                            }
                            return r;
                        }
                        return this.elt.value;
                    }, e408.disable = function(e) {
                        if ("string" == typeof e) for(var t = 0; t < this.elt.length; t++)this.elt[t].value.toString() === e && (this.elt[t].disabled = !0, this.elt[t].selected = !1);
                        else this.elt.disabled = !0;
                        return this;
                    }, e408;
                }, f13.default.prototype.createRadio = function() {
                    var e409, t260, r201 = arguments[0];
                    r201 instanceof HTMLDivElement || r201 instanceof HTMLSpanElement ? (e409 = r201, "string" == typeof arguments[1] && (t260 = arguments[1])) : ("string" == typeof r201 && (t260 = r201), e409 = document.createElement("div"));
                    var p = y(this.elt = e409, this);
                    p._name = t260 || "radioOption";
                    function n127(e) {
                        return e instanceof HTMLInputElement && "radio" === e.type;
                    }
                    function c13(e) {
                        return e.nextElementSibling instanceof HTMLLabelElement;
                    }
                    return p._getOptionsArray = function() {
                        return Array.from(this.elt.children).filter(n127);
                    }, p.option = function(e, t) {
                        var r, n, o = !0, i = !1, a = void 0;
                        try {
                            for(var s, l = p._getOptionsArray()[Symbol.iterator](); !(o = (s = l.next()).done); o = !0){
                                var u = s.value;
                                if (u.value === e) {
                                    r = u;
                                    break;
                                }
                            }
                        } catch (e410) {
                            i = !0, a = e410;
                        } finally{
                            try {
                                o || null == l.return || l.return();
                            } finally{
                                if (i) throw a;
                            }
                        }
                        return void 0 === r && ((r = document.createElement("input")).setAttribute("type", "radio"), r.setAttribute("value", e), this.elt.appendChild(r)), c13(r) ? n = r.nextElementSibling : (n = document.createElement("label"), r.insertAdjacentElement("afterend", n)), n.innerHTML = void 0 === t ? e : t, r.setAttribute("name", p._name), r;
                    }, p.remove = function(e) {
                        var t = !0, r = !1, n = void 0;
                        try {
                            for(var o, i = p._getOptionsArray()[Symbol.iterator](); !(t = (o = i.next()).done); t = !0){
                                var a = o.value;
                                if (a.value === e) return c13(a) && a.nextElementSibling.remove(), void a.remove();
                            }
                        } catch (e411) {
                            r = !0, n = e411;
                        } finally{
                            try {
                                t || null == i.return || i.return();
                            } finally{
                                if (r) throw n;
                            }
                        }
                    }, p.value = function() {
                        var e = "", t = !0, r = !1, n = void 0;
                        try {
                            for(var o, i = p._getOptionsArray()[Symbol.iterator](); !(t = (o = i.next()).done); t = !0){
                                var a = o.value;
                                if (a.checked) {
                                    e = a.value;
                                    break;
                                }
                            }
                        } catch (e412) {
                            r = !0, n = e412;
                        } finally{
                            try {
                                t || null == i.return || i.return();
                            } finally{
                                if (r) throw n;
                            }
                        }
                        return e;
                    }, p.selected = function(e) {
                        var t = null;
                        if (void 0 === e) {
                            var r = !0, n = !1, o = void 0;
                            try {
                                for(var i, a = p._getOptionsArray()[Symbol.iterator](); !(r = (i = a.next()).done); r = !0){
                                    var s = i.value;
                                    if (s.checked) {
                                        t = s;
                                        break;
                                    }
                                }
                            } catch (e) {
                                n = !0, o = e;
                            } finally{
                                try {
                                    r || null == a.return || a.return();
                                } finally{
                                    if (n) throw o;
                                }
                            }
                        } else {
                            var l = !0, u = !1, c = void 0;
                            try {
                                for(var d, f = p._getOptionsArray()[Symbol.iterator](); !(l = (d = f.next()).done); l = !0){
                                    var h = d.value;
                                    h.value === e && (h.setAttribute("checked", !0), t = h);
                                }
                            } catch (e) {
                                u = !0, c = e;
                            } finally{
                                try {
                                    l || null == f.return || f.return();
                                } finally{
                                    if (u) throw c;
                                }
                            }
                        }
                        return t;
                    }, p.disable = function() {
                        var e = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0], t = !0, r = !1, n = void 0;
                        try {
                            for(var o, i = p._getOptionsArray()[Symbol.iterator](); !(t = (o = i.next()).done); t = !0)o.value.setAttribute("disabled", e);
                        } catch (e413) {
                            r = !0, n = e413;
                        } finally{
                            try {
                                t || null == i.return || i.return();
                            } finally{
                                if (r) throw n;
                            }
                        }
                    }, p;
                }, f13.default.prototype.createColorPicker = function(e) {
                    f13.default._validateParameters("createColorPicker", arguments);
                    var t, r = document.createElement("input");
                    return r.type = "color", e ? e instanceof f13.default.Color ? r.value = e.toString("#rrggbb") : (f13.default.prototype._colorMode = "rgb", f13.default.prototype._colorMaxes = {
                        rgb: [
                            255,
                            255,
                            255,
                            255
                        ],
                        hsb: [
                            360,
                            100,
                            100,
                            1
                        ],
                        hsl: [
                            360,
                            100,
                            100,
                            1
                        ]
                    }, r.value = f13.default.prototype.color(e).toString("#rrggbb")) : r.value = "#000000", (t = y(r, this)).color = function() {
                        return e && (e.mode && (f13.default.prototype._colorMode = e.mode), e.maxes && (f13.default.prototype._colorMaxes = e.maxes)), f13.default.prototype.color(this.elt.value);
                    }, t;
                }, f13.default.prototype.createInput = function() {
                    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "text";
                    f13.default._validateParameters("createInput", arguments);
                    var r = document.createElement("input");
                    return r.setAttribute("value", e), r.setAttribute("type", t), y(r, this);
                }, f13.default.prototype.createFileInput = function(s) {
                    var e414 = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
                    f13.default._validateParameters("createFileInput", arguments);
                    if (window.File && window.FileReader && window.FileList && window.Blob) {
                        var t261 = document.createElement("input");
                        return t261.setAttribute("type", "file"), e414 && t261.setAttribute("multiple", !0), t261.addEventListener("change", function(e) {
                            var t = !0, r = !1, n = void 0;
                            try {
                                for(var o, i = e.target.files[Symbol.iterator](); !(t = (o = i.next()).done); t = !0){
                                    var a = o.value;
                                    f13.default.File._load(a, s);
                                }
                            } catch (e415) {
                                r = !0, n = e415;
                            } finally{
                                try {
                                    t || null == i.return || i.return();
                                } finally{
                                    if (r) throw n;
                                }
                            }
                        }, !1), y(t261, this);
                    }
                    console.log("The File APIs are not fully supported in this browser. Cannot create element.");
                }, f13.default.prototype.createVideo = function(e, t) {
                    return f13.default._validateParameters("createVideo", arguments), o86(this, "video", e, t);
                }, f13.default.prototype.createAudio = function(e, t) {
                    return f13.default._validateParameters("createAudio", arguments), o86(this, "audio", e, t);
                }, f13.default.prototype.VIDEO = "video", f13.default.prototype.AUDIO = "audio", void 0 === navigator.mediaDevices && (navigator.mediaDevices = {
                }), void 0 === navigator.mediaDevices.getUserMedia && (navigator.mediaDevices.getUserMedia = function(r) {
                    var n = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                    return n ? new Promise(function(e, t) {
                        n.call(navigator, r, e, t);
                    }) : Promise.reject(new Error("getUserMedia is not implemented in this browser"));
                }), f13.default.prototype.createCapture = function() {
                    if (f13.default._validateParameters("createCapture", arguments), !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) throw new DOMException("getUserMedia not supported in this browser");
                    var e, t262, r = !0, n = !0, o = !0, i = !1, a = void 0;
                    try {
                        for(var s, l = arguments[Symbol.iterator](); !(o = (s = l.next()).done); o = !0){
                            var u = s.value;
                            u === f13.default.prototype.VIDEO ? n = !1 : u === f13.default.prototype.AUDIO ? r = !1 : "object" === h10(u) ? e = u : "function" == typeof u && (t262 = u);
                        }
                    } catch (e416) {
                        i = !0, a = e416;
                    } finally{
                        try {
                            o || null == l.return || l.return();
                        } finally{
                            if (i) throw a;
                        }
                    }
                    e = e || {
                        video: r,
                        audio: n
                    };
                    var c = document.createElement("video");
                    c.setAttribute("playsinline", ""), navigator.mediaDevices.getUserMedia(e).then(function(t) {
                        try {
                            "srcObject" in c ? c.srcObject = t : c.src = window.URL.createObjectURL(t);
                        } catch (e) {
                            c.src = t;
                        }
                    }, console.log);
                    var d = y(c, this, !0);
                    return d.loadedmetadata = !1, c.addEventListener("loadedmetadata", function() {
                        c.play(), c.width ? (d.width = c.width, d.height = c.height) : (d.width = d.elt.width = c.videoWidth, d.height = d.elt.height = c.videoHeight), d.loadedmetadata = !0, t262 && t262(c.srcObject);
                    }), d;
                }, f13.default.prototype.createElement = function(e, t) {
                    f13.default._validateParameters("createElement", arguments);
                    var r = document.createElement(e);
                    return void 0 !== t && (r.innerHTML = t), y(r, this);
                }, f13.default.Element.prototype.addClass = function(e) {
                    return this.elt.className ? this.hasClass(e) || (this.elt.className = this.elt.className + " " + e) : this.elt.className = e, this;
                }, f13.default.Element.prototype.removeClass = function(e) {
                    return this.elt.classList.remove(e), this;
                }, f13.default.Element.prototype.hasClass = function(e) {
                    return this.elt.classList.contains(e);
                }, f13.default.Element.prototype.toggleClass = function(e) {
                    return this.elt.classList.contains(e) ? this.elt.classList.remove(e) : this.elt.classList.add(e), this;
                }, f13.default.Element.prototype.child = function(e) {
                    return void 0 === e ? this.elt.childNodes : ("string" == typeof e ? ("#" === e[0] && (e = e.substring(1)), e = document.getElementById(e)) : e instanceof f13.default.Element && (e = e.elt), e instanceof HTMLElement && this.elt.appendChild(e), this);
                }, f13.default.Element.prototype.center = function(e) {
                    var t = this.elt.style.display, r = "none" === this.elt.style.display, n = "none" === this.parent().style.display, o = {
                        x: this.elt.offsetLeft,
                        y: this.elt.offsetTop
                    };
                    r && this.show(), n && this.parent().show(), this.elt.style.display = "block", this.position(0, 0);
                    var i = Math.abs(this.parent().offsetWidth - this.elt.offsetWidth), a = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);
                    return "both" === e || void 0 === e ? this.position(i / 2 + this.parent().offsetLeft, a / 2 + this.parent().offsetTop) : "horizontal" === e ? this.position(i / 2 + this.parent().offsetLeft, o.y) : "vertical" === e && this.position(o.x, a / 2 + this.parent().offsetTop), this.style("display", t), r && this.hide(), n && this.parent().hide(), this;
                }, f13.default.Element.prototype.html = function() {
                    return 0 === arguments.length ? this.elt.innerHTML : (arguments[1] ? this.elt.insertAdjacentHTML("beforeend", arguments[0]) : this.elt.innerHTML = arguments[0], this);
                }, f13.default.Element.prototype.position = function() {
                    if (0 === arguments.length) return {
                        x: this.elt.offsetLeft,
                        y: this.elt.offsetTop
                    };
                    var e = "absolute";
                    return "static" !== arguments[2] && "fixed" !== arguments[2] && "relative" !== arguments[2] && "sticky" !== arguments[2] && "initial" !== arguments[2] && "inherit" !== arguments[2] || (e = arguments[2]), this.elt.style.position = e, this.elt.style.left = arguments[0] + "px", this.elt.style.top = arguments[1] + "px", this.x = arguments[0], this.y = arguments[1], this;
                }, f13.default.Element.prototype._translate = function() {
                    this.elt.style.position = "absolute";
                    var e = "";
                    return this.elt.style.transform && (e = (e = this.elt.style.transform.replace(/translate3d\(.*\)/g, "")).replace(/translate[X-Z]?\(.*\)/g, "")), 2 === arguments.length ? this.elt.style.transform = "translate(" + arguments[0] + "px, " + arguments[1] + "px)" : 2 < arguments.length && (this.elt.style.transform = "translate3d(" + arguments[0] + "px," + arguments[1] + "px," + arguments[2] + "px)", this.elt.parentElement.style.perspective = 3 === arguments.length ? "1000px" : arguments[3] + "px"), this.elt.style.transform += e, this;
                }, f13.default.Element.prototype._rotate = function() {
                    var e = "";
                    return this.elt.style.transform && (e = (e = this.elt.style.transform.replace(/rotate3d\(.*\)/g, "")).replace(/rotate[X-Z]?\(.*\)/g, "")), 1 === arguments.length ? this.elt.style.transform = "rotate(" + arguments[0] + "deg)" : 2 === arguments.length ? this.elt.style.transform = "rotate(" + arguments[0] + "deg, " + arguments[1] + "deg)" : 3 === arguments.length && (this.elt.style.transform = "rotateX(" + arguments[0] + "deg)", this.elt.style.transform += "rotateY(" + arguments[1] + "deg)", this.elt.style.transform += "rotateZ(" + arguments[2] + "deg)"), this.elt.style.transform += e, this;
                }, f13.default.Element.prototype.style = function(e, t) {
                    if (t instanceof f13.default.Color && (t = "rgba(" + t.levels[0] + "," + t.levels[1] + "," + t.levels[2] + "," + t.levels[3] / 255 + ")"), void 0 === t) {
                        if (-1 === e.indexOf(":")) return window.getComputedStyle(this.elt).getPropertyValue(e);
                        for(var r = e.split(";"), n = 0; n < r.length; n++){
                            var o = r[n].split(":");
                            o[0] && o[1] && (this.elt.style[o[0].trim()] = o[1].trim());
                        }
                    } else if (this.elt.style[e] = t, "width" === e || "height" === e || "left" === e || "top" === e) {
                        var i = window.getComputedStyle(this.elt).getPropertyValue(e).replace(/\D+/g, "");
                        this[e] = parseInt(i, 10);
                    }
                    return this;
                }, f13.default.Element.prototype.attribute = function(e, t) {
                    if (null == this.elt.firstChild || "checkbox" !== this.elt.firstChild.type && "radio" !== this.elt.firstChild.type) return void 0 === t ? this.elt.getAttribute(e) : (this.elt.setAttribute(e, t), this);
                    if (void 0 === t) return this.elt.firstChild.getAttribute(e);
                    for(var r = 0; r < this.elt.childNodes.length; r++)this.elt.childNodes[r].setAttribute(e, t);
                }, f13.default.Element.prototype.removeAttribute = function(e) {
                    if (null != this.elt.firstChild && ("checkbox" === this.elt.firstChild.type || "radio" === this.elt.firstChild.type)) for(var t = 0; t < this.elt.childNodes.length; t++)this.elt.childNodes[t].removeAttribute(e);
                    return this.elt.removeAttribute(e), this;
                }, f13.default.Element.prototype.value = function() {
                    return 0 < arguments.length ? (this.elt.value = arguments[0], this) : "range" === this.elt.type ? parseFloat(this.elt.value) : this.elt.value;
                }, f13.default.Element.prototype.show = function() {
                    return this.elt.style.display = "block", this;
                }, f13.default.Element.prototype.hide = function() {
                    return this.elt.style.display = "none", this;
                }, f13.default.Element.prototype.size = function(e, t) {
                    if (0 === arguments.length) return {
                        width: this.elt.offsetWidth,
                        height: this.elt.offsetHeight
                    };
                    var r = e, n = t, o = f13.default.prototype.AUTO;
                    if (r !== o || n !== o) {
                        if (r === o ? r = t * this.width / this.height : n === o && (n = e * this.height / this.width), this.elt instanceof HTMLCanvasElement) {
                            var i, a = {
                            }, s = this.elt.getContext("2d");
                            for(i in s)a[i] = s[i];
                            for(i in this.elt.setAttribute("width", r * this._pInst._pixelDensity), this.elt.setAttribute("height", n * this._pInst._pixelDensity), this.elt.style.width = r + "px", this.elt.style.height = n + "px", this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), a)this.elt.getContext("2d")[i] = a[i];
                        } else this.elt.style.width = r + "px", this.elt.style.height = n + "px", this.elt.width = r, this.elt.height = n;
                        this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight, this._pInst && this._pInst._curElement && this._pInst._curElement.elt === this.elt && (this._pInst._setProperty("width", this.elt.offsetWidth), this._pInst._setProperty("height", this.elt.offsetHeight));
                    }
                    return this;
                }, f13.default.Element.prototype.remove = function() {
                    if (this instanceof f13.default.MediaElement) {
                        this.stop();
                        var e417 = this.elt.srcObject;
                        if (null !== e417) e417.getTracks().forEach(function(e) {
                            e.stop();
                        });
                    }
                    var t = this._pInst._elements.indexOf(this);
                    for(var r in -1 !== t && this._pInst._elements.splice(t, 1), this._events)this.elt.removeEventListener(r, this._events[r]);
                    this.elt && this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);
                }, f13.default.Element.prototype.drop = function(o, i) {
                    if (window.File && window.FileReader && window.FileList && window.Blob) {
                        if (!this._dragDisabled) {
                            this._dragDisabled = !0;
                            var e418 = function(e) {
                                e.preventDefault();
                            };
                            this.elt.addEventListener("dragover", e418), this.elt.addEventListener("dragleave", e418);
                        }
                        f13.default.Element._attachListener("drop", function(e) {
                            e.preventDefault(), "function" == typeof i && i.call(this, e);
                            for(var t = e.dataTransfer.files, r = 0; r < t.length; r++){
                                var n = t[r];
                                f13.default.File._load(n, o);
                            }
                        }, this);
                    } else console.log("The File APIs are not fully supported in this browser.");
                    return this;
                }, f13.default.MediaElement = function(n, e419) {
                    f13.default.Element.call(this, n, e419);
                    var o = this;
                    this.elt.crossOrigin = "anonymous", this._prevTime = 0, this._cueIDCounter = 0, this._cues = [], (this._pixelsState = this)._pixelDensity = 1, this._modified = !1, Object.defineProperty(o, "src", {
                        get: function() {
                            var e = o.elt.children[0].src, t = o.elt.src === window.location.href ? "" : o.elt.src;
                            return e === window.location.href ? t : e;
                        },
                        set: function(e) {
                            for(var t = 0; t < o.elt.children.length; t++)o.elt.removeChild(o.elt.children[t]);
                            var r = document.createElement("source");
                            r.src = e, n.appendChild(r), o.elt.src = e, o.modified = !0;
                        }
                    }), o._onended = function() {
                    }, o.elt.onended = function() {
                        o._onended(o);
                    };
                }, f13.default.MediaElement.prototype = Object.create(f13.default.Element.prototype), f13.default.MediaElement.prototype.play = function() {
                    var e420, t = this;
                    return this.elt.currentTime === this.elt.duration && (this.elt.currentTime = 0), (e420 = (1 < this.elt.readyState || this.elt.load(), this.elt.play())) && e420.catch && e420.catch(function(e) {
                        "NotAllowedError" === e.name ? f13.default._friendlyAutoplayError(t.src) : console.error("Media play method encountered an unexpected error", e);
                    }), this;
                }, f13.default.MediaElement.prototype.stop = function() {
                    return this.elt.pause(), this.elt.currentTime = 0, this;
                }, f13.default.MediaElement.prototype.pause = function() {
                    return this.elt.pause(), this;
                }, f13.default.MediaElement.prototype.loop = function() {
                    return this.elt.setAttribute("loop", !0), this.play(), this;
                }, f13.default.MediaElement.prototype.noLoop = function() {
                    return this.elt.removeAttribute("loop"), this;
                }, f13.default.MediaElement.prototype._setupAutoplayFailDetection = function() {
                    var e = this, t = setTimeout(function() {
                        return f13.default._friendlyAutoplayError(e.src);
                    }, 500);
                    this.elt.addEventListener("play", function() {
                        return clearTimeout(t);
                    }, {
                        passive: !0,
                        once: !0
                    });
                }, f13.default.MediaElement.prototype.autoplay = function(e) {
                    var t = this, r = this.elt.getAttribute("autoplay");
                    if (this.elt.setAttribute("autoplay", e), e && !r) {
                        var n = function() {
                            return t._setupAutoplayFailDetection();
                        };
                        4 === this.elt.readyState ? n() : this.elt.addEventListener("canplay", n, {
                            passive: !0,
                            once: !0
                        });
                    }
                    return this;
                }, f13.default.MediaElement.prototype.volume = function(e) {
                    if (void 0 === e) return this.elt.volume;
                    this.elt.volume = e;
                }, f13.default.MediaElement.prototype.speed = function(e) {
                    if (void 0 === e) return this.presetPlaybackRate || this.elt.playbackRate;
                    this.loadedmetadata ? this.elt.playbackRate = e : this.presetPlaybackRate = e;
                }, f13.default.MediaElement.prototype.time = function(e) {
                    return void 0 === e ? this.elt.currentTime : (this.elt.currentTime = e, this);
                }, f13.default.MediaElement.prototype.duration = function() {
                    return this.elt.duration;
                }, f13.default.MediaElement.prototype.pixels = [], f13.default.MediaElement.prototype._ensureCanvas = function() {
                    this.canvas || (this.canvas = document.createElement("canvas"), this.drawingContext = this.canvas.getContext("2d"), this.setModified(!0)), this.loadedmetadata && (this.canvas.width !== this.elt.width && (this.canvas.width = this.elt.width, this.canvas.height = this.elt.height, this.width = this.canvas.width, this.height = this.canvas.height), this.drawingContext.drawImage(this.elt, 0, 0, this.canvas.width, this.canvas.height), this.setModified(!0));
                }, f13.default.MediaElement.prototype.loadPixels = function() {
                    return this._ensureCanvas(), f13.default.Renderer2D.prototype.loadPixels.apply(this, arguments);
                }, f13.default.MediaElement.prototype.updatePixels = function(e, t, r, n) {
                    return this.loadedmetadata && (this._ensureCanvas(), f13.default.Renderer2D.prototype.updatePixels.call(this, e, t, r, n)), this.setModified(!0), this;
                }, f13.default.MediaElement.prototype.get = function() {
                    return this._ensureCanvas(), f13.default.Renderer2D.prototype.get.apply(this, arguments);
                }, f13.default.MediaElement.prototype._getPixel = function() {
                    return this.loadPixels(), f13.default.Renderer2D.prototype._getPixel.apply(this, arguments);
                }, f13.default.MediaElement.prototype.set = function(e, t, r) {
                    this.loadedmetadata && (this._ensureCanvas(), f13.default.Renderer2D.prototype.set.call(this, e, t, r), this.setModified(!0));
                }, f13.default.MediaElement.prototype.copy = function() {
                    this._ensureCanvas(), f13.default.prototype.copy.apply(this, arguments);
                }, f13.default.MediaElement.prototype.mask = function() {
                    this.loadPixels(), this.setModified(!0), f13.default.Image.prototype.mask.apply(this, arguments);
                }, f13.default.MediaElement.prototype.isModified = function() {
                    return this._modified;
                }, f13.default.MediaElement.prototype.setModified = function(e) {
                    this._modified = e;
                }, f13.default.MediaElement.prototype.onended = function(e) {
                    return this._onended = e, this;
                }, f13.default.MediaElement.prototype.connect = function(e) {
                    var t, r;
                    if ("function" == typeof f13.default.prototype.getAudioContext) t = f13.default.prototype.getAudioContext(), r = f13.default.soundOut.input;
                    else try {
                        r = (t = e.context).destination;
                    } catch (e421) {
                        throw "connect() is meant to be used with Web Audio API or p5.sound.js";
                    }
                    this.audioSourceNode || (this.audioSourceNode = t.createMediaElementSource(this.elt), this.audioSourceNode.connect(r)), e ? e.input ? this.audioSourceNode.connect(e.input) : this.audioSourceNode.connect(e) : this.audioSourceNode.connect(r);
                }, f13.default.MediaElement.prototype.disconnect = function() {
                    if (!this.audioSourceNode) throw "nothing to disconnect";
                    this.audioSourceNode.disconnect();
                }, f13.default.MediaElement.prototype.showControls = function() {
                    this.elt.style["text-align"] = "inherit", this.elt.controls = !0;
                }, f13.default.MediaElement.prototype.hideControls = function() {
                    this.elt.controls = !1;
                };
                function i52(e, t, r, n) {
                    this.callback = e, this.time = t, this.id = r, this.val = n;
                }
                f13.default.MediaElement.prototype.addCue = function(e, t, r) {
                    var n = this._cueIDCounter++, o = new i52(t, e, n, r);
                    return this._cues.push(o), this.elt.ontimeupdate || (this.elt.ontimeupdate = this._onTimeUpdate.bind(this)), n;
                }, f13.default.MediaElement.prototype.removeCue = function(e) {
                    for(var t = 0; t < this._cues.length; t++)this._cues[t].id === e && (console.log(e), this._cues.splice(t, 1));
                    0 === this._cues.length && (this.elt.ontimeupdate = null);
                }, f13.default.MediaElement.prototype.clearCues = function() {
                    this._cues = [], this.elt.ontimeupdate = null;
                }, f13.default.MediaElement.prototype._onTimeUpdate = function() {
                    for(var e = this.time(), t = 0; t < this._cues.length; t++){
                        var r = this._cues[t].time, n = this._cues[t].val;
                        this._prevTime < r && r <= e && this._cues[t].callback(n);
                    }
                    this._prevTime = e;
                }, f13.default.File = function(e, t) {
                    this.file = e, this._pInst = t;
                    var r = e.type.split("/");
                    this.type = r[0], this.subtype = r[1], this.name = e.name, this.size = e.size, this.data = void 0;
                }, f13.default.File._createLoader = function(n, o) {
                    var e422 = new FileReader;
                    return e422.onload = function(e) {
                        var t = new f13.default.File(n);
                        if ("application/json" === t.file.type) t.data = JSON.parse(e.target.result);
                        else if ("text/xml" === t.file.type) {
                            var r = (new DOMParser).parseFromString(e.target.result, "text/xml");
                            t.data = new f13.default.XML(r.documentElement);
                        } else t.data = e.target.result;
                        o(t);
                    }, e422;
                }, f13.default.File._load = function(e, t) {
                    if (/^text\//.test(e.type) || "application/json" === e.type) f13.default.File._createLoader(e, t).readAsText(e);
                    else if (/^(video|audio)\//.test(e.type)) {
                        var r = new f13.default.File(e);
                        r.data = URL.createObjectURL(e), t(r);
                    } else f13.default.File._createLoader(e, t).readAsDataURL(e);
                };
                var a39 = f13.default;
                r200.default = a39;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.every": 149,
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.for-each": 152,
                "core-js/modules/es.array.from": 153,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.array.splice": 162,
                "core-js/modules/es.function.name": 163,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.promise": 175,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.replace": 186,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.string.trim": 190,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.for-each": 225,
                "core-js/modules/web.dom-collections.iterator": 226,
                "core-js/modules/web.url": 228
            }
        ],
        277: [
            function(e423, t263, r202) {
                "use strict";
                function a40(e424) {
                    return (a40 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e424);
                }
                Object.defineProperty(r202, "__esModule", {
                    value: !0
                }), r202.default = void 0;
                var n128, o87 = (n128 = e423("../core/main")) && n128.__esModule ? n128 : {
                    default: n128
                }, i53 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a40(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s32();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e423("../core/constants"));
                function s32() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s32 = function() {
                        return e;
                    }, e;
                }
                o87.default.prototype.deviceOrientation = 1 < window.innerWidth / window.innerHeight ? "landscape" : "portrait", o87.default.prototype.accelerationX = 0, o87.default.prototype.accelerationY = 0, o87.default.prototype.accelerationZ = 0, o87.default.prototype.pAccelerationX = 0, o87.default.prototype.pAccelerationY = 0, o87.default.prototype.pAccelerationZ = 0, o87.default.prototype._updatePAccelerations = function() {
                    this._setProperty("pAccelerationX", this.accelerationX), this._setProperty("pAccelerationY", this.accelerationY), this._setProperty("pAccelerationZ", this.accelerationZ);
                }, o87.default.prototype.rotationX = 0, o87.default.prototype.rotationY = 0, o87.default.prototype.rotationZ = 0, o87.default.prototype.pRotationX = 0, o87.default.prototype.pRotationY = 0;
                var u = o87.default.prototype.pRotationZ = 0, c = 0, d = 0, f = "clockwise", h = "clockwise", p = "clockwise";
                o87.default.prototype.pRotateDirectionX = void 0, o87.default.prototype.pRotateDirectionY = void 0, o87.default.prototype.pRotateDirectionZ = void 0, o87.default.prototype._updatePRotations = function() {
                    this._setProperty("pRotationX", this.rotationX), this._setProperty("pRotationY", this.rotationY), this._setProperty("pRotationZ", this.rotationZ);
                }, o87.default.prototype.turnAxis = void 0;
                var y = 0.5, m = 30;
                o87.default.prototype.setMoveThreshold = function(e) {
                    o87.default._validateParameters("setMoveThreshold", arguments), y = e;
                }, o87.default.prototype.setShakeThreshold = function(e) {
                    o87.default._validateParameters("setShakeThreshold", arguments), m = e;
                }, o87.default.prototype._ondeviceorientation = function(e) {
                    this._updatePRotations(), this._angleMode === i53.radians && (e.beta = e.beta * (_PI / 180), e.gamma = e.gamma * (_PI / 180), e.alpha = e.alpha * (_PI / 180)), this._setProperty("rotationX", e.beta), this._setProperty("rotationY", e.gamma), this._setProperty("rotationZ", e.alpha), this._handleMotion();
                }, o87.default.prototype._ondevicemotion = function(e) {
                    this._updatePAccelerations(), this._setProperty("accelerationX", 2 * e.acceleration.x), this._setProperty("accelerationY", 2 * e.acceleration.y), this._setProperty("accelerationZ", 2 * e.acceleration.z), this._handleMotion();
                }, o87.default.prototype._handleMotion = function() {
                    90 === window.orientation || -90 === window.orientation ? this._setProperty("deviceOrientation", "landscape") : 0 === window.orientation ? this._setProperty("deviceOrientation", "portrait") : void 0 === window.orientation && this._setProperty("deviceOrientation", "undefined");
                    var e, t, r = this._isGlobal ? window : this;
                    if ("function" == typeof r.deviceMoved && (Math.abs(this.accelerationX - this.pAccelerationX) > y || Math.abs(this.accelerationY - this.pAccelerationY) > y || Math.abs(this.accelerationZ - this.pAccelerationZ) > y) && r.deviceMoved(), "function" == typeof r.deviceTurned) {
                        var n = this.rotationX + 180, o = this.pRotationX + 180, i = u + 180;
                        0 < n - o && n - o < 270 || n - o < -270 ? f = "clockwise" : (n - o < 0 || 270 < n - o) && (f = "counter-clockwise"), f !== this.pRotateDirectionX && (i = n), 90 < Math.abs(n - i) && Math.abs(n - i) < 270 && (i = n, this._setProperty("turnAxis", "X"), r.deviceTurned()), this.pRotateDirectionX = f, u = i - 180;
                        var a = this.rotationY + 180, s = this.pRotationY + 180, l = c + 180;
                        0 < a - s && a - s < 270 || a - s < -270 ? h = "clockwise" : (a - s < 0 || 270 < a - this.pRotationY) && (h = "counter-clockwise"), h !== this.pRotateDirectionY && (l = a), 90 < Math.abs(a - l) && Math.abs(a - l) < 270 && (l = a, this._setProperty("turnAxis", "Y"), r.deviceTurned()), this.pRotateDirectionY = h, c = l - 180, 0 < this.rotationZ - this.pRotationZ && this.rotationZ - this.pRotationZ < 270 || this.rotationZ - this.pRotationZ < -270 ? p = "clockwise" : (this.rotationZ - this.pRotationZ < 0 || 270 < this.rotationZ - this.pRotationZ) && (p = "counter-clockwise"), p !== this.pRotateDirectionZ && (d = this.rotationZ), 90 < Math.abs(this.rotationZ - d) && Math.abs(this.rotationZ - d) < 270 && (d = this.rotationZ, this._setProperty("turnAxis", "Z"), r.deviceTurned()), this.pRotateDirectionZ = p, this._setProperty("turnAxis", void 0);
                    }
                    "function" == typeof r.deviceShaken && (null !== this.pAccelerationX && (e = Math.abs(this.accelerationX - this.pAccelerationX), t = Math.abs(this.accelerationY - this.pAccelerationY)), m < e + t && r.deviceShaken());
                };
                var l23 = o87.default;
                r202.default = l23;
            },
            {
                "../core/constants": 250,
                "../core/main": 260
            }
        ],
        278: [
            function(e425, t264, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                }), r.default = void 0;
                var n, o = (n = e425("../core/main")) && n.__esModule ? n : {
                    default: n
                };
                o.default.prototype.isKeyPressed = !1, o.default.prototype.keyIsPressed = !1, o.default.prototype.key = "", o.default.prototype.keyCode = 0, o.default.prototype._onkeydown = function(e) {
                    if (!this._downKeys[e.which]) {
                        this._setProperty("isKeyPressed", !0), this._setProperty("keyIsPressed", !0), this._setProperty("keyCode", e.which), this._downKeys[e.which] = !0, this._setProperty("key", e.key || String.fromCharCode(e.which) || e.which);
                        var t = this._isGlobal ? window : this;
                        if ("function" == typeof t.keyPressed && !e.charCode) !1 === t.keyPressed(e) && e.preventDefault();
                    }
                }, o.default.prototype._onkeyup = function(e) {
                    this._downKeys[e.which] = !1, this._areDownKeys() || (this._setProperty("isKeyPressed", !1), this._setProperty("keyIsPressed", !1)), this._setProperty("_lastKeyCodeTyped", null), this._setProperty("key", e.key || String.fromCharCode(e.which) || e.which), this._setProperty("keyCode", e.which);
                    var t = this._isGlobal ? window : this;
                    "function" == typeof t.keyReleased && !1 === t.keyReleased(e) && e.preventDefault();
                }, o.default.prototype._onkeypress = function(e) {
                    if (e.which !== this._lastKeyCodeTyped) {
                        this._setProperty("_lastKeyCodeTyped", e.which), this._setProperty("key", e.key || String.fromCharCode(e.which) || e.which);
                        var t = this._isGlobal ? window : this;
                        if ("function" == typeof t.keyTyped) !1 === t.keyTyped(e) && e.preventDefault();
                    }
                }, o.default.prototype._onblur = function(e) {
                    this._downKeys = {
                    };
                }, o.default.prototype.keyIsDown = function(e) {
                    return o.default._validateParameters("keyIsDown", arguments), this._downKeys[e] || !1;
                }, o.default.prototype._areDownKeys = function() {
                    for(var e in this._downKeys)if (this._downKeys.hasOwnProperty(e) && !0 === this._downKeys[e]) return !0;
                    return !1;
                };
                var i = o.default;
                r.default = i;
            },
            {
                "../core/main": 260
            }
        ],
        279: [
            function(e426, t265, r203) {
                "use strict";
                function a41(e427) {
                    return (a41 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e427);
                }
                e426("core-js/modules/es.array.includes"), e426("core-js/modules/es.string.includes"), Object.defineProperty(r203, "__esModule", {
                    value: !0
                }), r203.default = void 0;
                var n129, o88 = (n129 = e426("../core/main")) && n129.__esModule ? n129 : {
                    default: n129
                }, i54 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a41(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e426("../core/constants"));
                function s() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s = function() {
                        return e;
                    }, e;
                }
                o88.default.prototype.movedX = 0, o88.default.prototype.movedY = 0, o88.default.prototype._hasMouseInteracted = !1, o88.default.prototype.mouseX = 0, o88.default.prototype.mouseY = 0, o88.default.prototype.pmouseX = 0, o88.default.prototype.pmouseY = 0, o88.default.prototype.winMouseX = 0, o88.default.prototype.winMouseY = 0, o88.default.prototype.pwinMouseX = 0, o88.default.prototype.pwinMouseY = 0, o88.default.prototype.mouseButton = 0, o88.default.prototype.mouseIsPressed = !1, o88.default.prototype._updateNextMouseCoords = function(e428) {
                    if (null !== this._curElement && (!e428.touches || 0 < e428.touches.length)) {
                        var t266 = function(e, t, r, n) {
                            n && !n.clientX && (n.touches ? n = n.touches[0] : n.changedTouches && (n = n.changedTouches[0]));
                            var o = e.getBoundingClientRect(), i = e.scrollWidth / t || 1, a = e.scrollHeight / r || 1;
                            return {
                                x: (n.clientX - o.left) / i,
                                y: (n.clientY - o.top) / a,
                                winX: n.clientX,
                                winY: n.clientY,
                                id: n.identifier
                            };
                        }(this._curElement.elt, this.width, this.height, e428);
                        this._setProperty("movedX", e428.movementX), this._setProperty("movedY", e428.movementY), this._setProperty("mouseX", t266.x), this._setProperty("mouseY", t266.y), this._setProperty("winMouseX", t266.winX), this._setProperty("winMouseY", t266.winY);
                    }
                    this._hasMouseInteracted || (this._updateMouseCoords(), this._setProperty("_hasMouseInteracted", !0));
                }, o88.default.prototype._updateMouseCoords = function() {
                    this._setProperty("pmouseX", this.mouseX), this._setProperty("pmouseY", this.mouseY), this._setProperty("pwinMouseX", this.winMouseX), this._setProperty("pwinMouseY", this.winMouseY), this._setProperty("_pmouseWheelDeltaY", this._mouseWheelDeltaY);
                }, o88.default.prototype._setMouseButton = function(e) {
                    1 === e.button ? this._setProperty("mouseButton", i54.CENTER) : 2 === e.button ? this._setProperty("mouseButton", i54.RIGHT) : this._setProperty("mouseButton", i54.LEFT);
                }, o88.default.prototype._onmousemove = function(e) {
                    var t = this._isGlobal ? window : this;
                    this._updateNextMouseCoords(e), this.mouseIsPressed ? "function" == typeof t.mouseDragged ? !1 === t.mouseDragged(e) && e.preventDefault() : "function" == typeof t.touchMoved && !1 === t.touchMoved(e) && e.preventDefault() : "function" == typeof t.mouseMoved && !1 === t.mouseMoved(e) && e.preventDefault();
                }, o88.default.prototype._onmousedown = function(e) {
                    var t = this._isGlobal ? window : this;
                    this._setProperty("mouseIsPressed", !0), this._setMouseButton(e), this._updateNextMouseCoords(e), "function" == typeof t.mousePressed ? !1 === t.mousePressed(e) && e.preventDefault() : navigator.userAgent.toLowerCase().includes("safari") && "function" == typeof t.touchStarted && !1 === t.touchStarted(e) && e.preventDefault();
                }, o88.default.prototype._onmouseup = function(e) {
                    var t = this._isGlobal ? window : this;
                    this._setProperty("mouseIsPressed", !1), "function" == typeof t.mouseReleased ? !1 === t.mouseReleased(e) && e.preventDefault() : "function" == typeof t.touchEnded && !1 === t.touchEnded(e) && e.preventDefault();
                }, o88.default.prototype._ondragend = o88.default.prototype._onmouseup, o88.default.prototype._ondragover = o88.default.prototype._onmousemove, o88.default.prototype._onclick = function(e) {
                    var t = this._isGlobal ? window : this;
                    "function" == typeof t.mouseClicked && !1 === t.mouseClicked(e) && e.preventDefault();
                }, o88.default.prototype._ondblclick = function(e) {
                    var t = this._isGlobal ? window : this;
                    "function" == typeof t.doubleClicked && !1 === t.doubleClicked(e) && e.preventDefault();
                }, o88.default.prototype._mouseWheelDeltaY = 0, o88.default.prototype._pmouseWheelDeltaY = 0, o88.default.prototype._onwheel = function(e) {
                    var t = this._isGlobal ? window : this;
                    this._setProperty("_mouseWheelDeltaY", e.deltaY), "function" == typeof t.mouseWheel && (e.delta = e.deltaY, !1 === t.mouseWheel(e) && e.preventDefault());
                }, o88.default.prototype.requestPointerLock = function() {
                    var e = this._curElement.elt;
                    return e.requestPointerLock = e.requestPointerLock || e.mozRequestPointerLock, e.requestPointerLock ? (e.requestPointerLock(), !0) : (console.log("requestPointerLock is not implemented in this browser"), !1);
                }, o88.default.prototype.exitPointerLock = function() {
                    document.exitPointerLock();
                };
                var l = o88.default;
                r203.default = l;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.string.includes": 182
            }
        ],
        280: [
            function(e429, t267, r204) {
                "use strict";
                e429("core-js/modules/es.array.includes"), e429("core-js/modules/es.string.includes"), Object.defineProperty(r204, "__esModule", {
                    value: !0
                }), r204.default = void 0;
                var n130, o89 = (n130 = e429("../core/main")) && n130.__esModule ? n130 : {
                    default: n130
                };
                function i(e, t, r, n, o) {
                    var i = 4 < arguments.length && void 0 !== o ? o : 0, a = e.getBoundingClientRect(), s = e.scrollWidth / t || 1, l = e.scrollHeight / r || 1, u = n.touches[i] || n.changedTouches[i];
                    return {
                        x: (u.clientX - a.left) / s,
                        y: (u.clientY - a.top) / l,
                        winX: u.clientX,
                        winY: u.clientY,
                        id: u.identifier
                    };
                }
                o89.default.prototype.touches = [], o89.default.prototype._updateTouchCoords = function(e) {
                    if (null !== this._curElement) {
                        for(var t = [], r = 0; r < e.touches.length; r++)t[r] = i(this._curElement.elt, this.width, this.height, e, r);
                        this._setProperty("touches", t);
                    }
                }, o89.default.prototype._ontouchstart = function(e) {
                    var t = this._isGlobal ? window : this;
                    this._setProperty("mouseIsPressed", !0), this._updateTouchCoords(e), this._updateNextMouseCoords(e), this._updateMouseCoords(), "function" == typeof t.touchStarted ? !1 === t.touchStarted(e) && e.preventDefault() : navigator.userAgent.toLowerCase().includes("safari") && "function" == typeof t.mousePressed && !1 === t.mousePressed(e) && e.preventDefault();
                }, o89.default.prototype._ontouchmove = function(e) {
                    var t = this._isGlobal ? window : this;
                    this._updateTouchCoords(e), this._updateNextMouseCoords(e), "function" == typeof t.touchMoved ? !1 === t.touchMoved(e) && e.preventDefault() : "function" == typeof t.mouseDragged && !1 === t.mouseDragged(e) && e.preventDefault();
                }, o89.default.prototype._ontouchend = function(e) {
                    this._setProperty("mouseIsPressed", !1), this._updateTouchCoords(e), this._updateNextMouseCoords(e);
                    var t = this._isGlobal ? window : this;
                    "function" == typeof t.touchEnded ? !1 === t.touchEnded(e) && e.preventDefault() : "function" == typeof t.mouseReleased && !1 === t.mouseReleased(e) && e.preventDefault();
                };
                var a42 = o89.default;
                r204.default = a42;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.string.includes": 182
            }
        ],
        281: [
            function(e430, t268, r205) {
                "use strict";
                e430("core-js/modules/es.array.iterator"), e430("core-js/modules/es.object.to-string"), e430("core-js/modules/es.typed-array.int32-array"), e430("core-js/modules/es.typed-array.uint8-array"), e430("core-js/modules/es.typed-array.copy-within"), e430("core-js/modules/es.typed-array.every"), e430("core-js/modules/es.typed-array.fill"), e430("core-js/modules/es.typed-array.filter"), e430("core-js/modules/es.typed-array.find"), e430("core-js/modules/es.typed-array.find-index"), e430("core-js/modules/es.typed-array.for-each"), e430("core-js/modules/es.typed-array.includes"), e430("core-js/modules/es.typed-array.index-of"), e430("core-js/modules/es.typed-array.iterator"), e430("core-js/modules/es.typed-array.join"), e430("core-js/modules/es.typed-array.last-index-of"), e430("core-js/modules/es.typed-array.map"), e430("core-js/modules/es.typed-array.reduce"), e430("core-js/modules/es.typed-array.reduce-right"), e430("core-js/modules/es.typed-array.reverse"), e430("core-js/modules/es.typed-array.set"), e430("core-js/modules/es.typed-array.slice"), e430("core-js/modules/es.typed-array.some"), e430("core-js/modules/es.typed-array.sort"), e430("core-js/modules/es.typed-array.subarray"), e430("core-js/modules/es.typed-array.to-locale-string"), e430("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r205, "__esModule", {
                    value: !0
                }), r205.default = void 0;
                var O, C, L, P, k = {
                };
                function n131(e431, t269) {
                    for(var r206, n132, o91, i55, a43, s33, l24, u17, c14, d, f = k._toPixels(e431), h = e431.width, p = e431.height, y = h * p, m = new Int32Array(y), g = 0; g < y; g++)m[g] = k._getARGB(f, g);
                    var v, b, _, x, w = new Int32Array(y), S = new Int32Array(y), j = new Int32Array(y), M = new Int32Array(y), E = 0;
                    for(!function(e) {
                        var t = 3.5 * e | 0;
                        if (O !== (t = t < 1 ? 1 : t < 248 ? t : 248)) {
                            C = 1 + (O = t) << 1, L = new Int32Array(C), P = new Array(C);
                            for(var r = 0; r < C; r++)P[r] = new Int32Array(256);
                            for(var n, o, i, a, s = 1, l = t - 1; s < t; s++){
                                L[t + s] = L[l] = o = l * l, i = P[t + s], a = P[l--];
                                for(var u = 0; u < 256; u++)i[u] = a[u] = o * u;
                            }
                            n = L[t] = t * t, i = P[t];
                            for(var c = 0; c < 256; c++)i[c] = n * c;
                        }
                    }(t269), b = 0; b < p; b++){
                        for(v = 0; v < h; v++){
                            if (i55 = o91 = n132 = a43 = r206 = 0, (s33 = v - O) < 0) d = -s33, s33 = 0;
                            else {
                                if (h <= s33) break;
                                d = 0;
                            }
                            for(_ = d; _ < C && !(h <= s33); _++){
                                var T = m[s33 + E];
                                a43 += (x = P[_])[(-16777216 & T) >>> 24], n132 += x[(16711680 & T) >> 16], o91 += x[(65280 & T) >> 8], i55 += x[255 & T], r206 += L[_], s33++;
                            }
                            w[l24 = E + v] = a43 / r206, S[l24] = n132 / r206, j[l24] = o91 / r206, M[l24] = i55 / r206;
                        }
                        E += h;
                    }
                    for(c14 = (u17 = -O) * h, b = E = 0; b < p; b++){
                        for(v = 0; v < h; v++){
                            if (i55 = o91 = n132 = a43 = r206 = 0, u17 < 0) d = l24 = -u17, s33 = v;
                            else {
                                if (p <= u17) break;
                                d = 0, l24 = u17, s33 = v + c14;
                            }
                            for(_ = d; _ < C && !(p <= l24); _++)a43 += (x = P[_])[w[s33]], n132 += x[S[s33]], o91 += x[j[s33]], i55 += x[M[s33]], r206 += L[_], l24++, s33 += h;
                            m[v + E] = a43 / r206 << 24 | n132 / r206 << 16 | o91 / r206 << 8 | i55 / r206;
                        }
                        E += h, c14 += h, u17++;
                    }
                    k._setPixels(f, m);
                }
                k._toPixels = function(e) {
                    if (e instanceof ImageData) return e.data;
                    if (e.getContext("2d")) return e.getContext("2d").getImageData(0, 0, e.width, e.height).data;
                    if (e.getContext("webgl")) {
                        var t = e.getContext("webgl"), r = t.drawingBufferWidth * t.drawingBufferHeight * 4, n = new Uint8Array(r);
                        return t.readPixels(0, 0, e.width, e.height, t.RGBA, t.UNSIGNED_BYTE, n), n;
                    }
                }, k._getARGB = function(e, t) {
                    var r = 4 * t;
                    return e[3 + r] << 24 & 4278190080 | e[r] << 16 & 16711680 | e[1 + r] << 8 & 65280 | 255 & e[2 + r];
                }, k._setPixels = function(e, t) {
                    for(var r = 0, n = 0, o = e.length; n < o; n++)e[(r = 4 * n) + 0] = (16711680 & t[n]) >>> 16, e[r + 1] = (65280 & t[n]) >>> 8, e[r + 2] = 255 & t[n], e[r + 3] = (4278190080 & t[n]) >>> 24;
                }, k._toImageData = function(e) {
                    return e instanceof ImageData ? e : e.getContext("2d").getImageData(0, 0, e.width, e.height);
                }, k._createImageData = function(e, t) {
                    return k._tmpCanvas = document.createElement("canvas"), k._tmpCtx = k._tmpCanvas.getContext("2d"), this._tmpCtx.createImageData(e, t);
                }, k.apply = function(e, t, r) {
                    var n = e.getContext("2d"), o = n.getImageData(0, 0, e.width, e.height), i = t(o, r);
                    i instanceof ImageData ? n.putImageData(i, 0, 0, 0, 0, e.width, e.height) : n.putImageData(o, 0, 0, 0, 0, e.width, e.height);
                }, k.threshold = function(e, t) {
                    var r = k._toPixels(e);
                    void 0 === t && (t = 0.5);
                    for(var n = Math.floor(255 * t), o = 0; o < r.length; o += 4){
                        var i = void 0;
                        i = n <= 0.2126 * r[o] + 0.7152 * r[o + 1] + 0.0722 * r[o + 2] ? 255 : 0, r[o] = r[o + 1] = r[o + 2] = i;
                    }
                }, k.gray = function(e) {
                    for(var t = k._toPixels(e), r = 0; r < t.length; r += 4){
                        var n = 0.2126 * t[r] + 0.7152 * t[r + 1] + 0.0722 * t[r + 2];
                        t[r] = t[r + 1] = t[r + 2] = n;
                    }
                }, k.opaque = function(e) {
                    for(var t = k._toPixels(e), r = 0; r < t.length; r += 4)t[r + 3] = 255;
                    return t;
                }, k.invert = function(e) {
                    for(var t = k._toPixels(e), r = 0; r < t.length; r += 4)t[r] = 255 - t[r], t[r + 1] = 255 - t[r + 1], t[r + 2] = 255 - t[r + 2];
                }, k.posterize = function(e, t) {
                    var r = k._toPixels(e);
                    if (t < 2 || 255 < t) throw new Error("Level must be greater than 2 and less than 255 for posterize");
                    for(var n = t - 1, o = 0; o < r.length; o += 4){
                        var i = r[o], a = r[o + 1], s = r[o + 2];
                        r[o] = 255 * (i * t >> 8) / n, r[o + 1] = 255 * (a * t >> 8) / n, r[o + 2] = 255 * (s * t >> 8) / n;
                    }
                }, k.dilate = function(e) {
                    for(var t, r, n, o, i, a, s, l, u, c, d, f, h, p, y, m, g, v = k._toPixels(e), b = 0, _ = v.length ? v.length / 4 : 0, x = new Int32Array(_); b < _;)for(r = (t = b) + e.width; b < r;)n = o = k._getARGB(v, b), (s = b - 1) < t && (s = b), r <= (a = b + 1) && (a = b), (l = b - e.width) < 0 && (l = 0), _ <= (u = b + e.width) && (u = b), f = k._getARGB(v, l), d = k._getARGB(v, s), h = k._getARGB(v, u), (i = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) < (y = 77 * (d >> 16 & 255) + 151 * (d >> 8 & 255) + 28 * (255 & d)) && (o = d, i = y), i < (p = 77 * ((c = k._getARGB(v, a)) >> 16 & 255) + 151 * (c >> 8 & 255) + 28 * (255 & c)) && (o = c, i = p), i < (m = 77 * (f >> 16 & 255) + 151 * (f >> 8 & 255) + 28 * (255 & f)) && (o = f, i = m), i < (g = 77 * (h >> 16 & 255) + 151 * (h >> 8 & 255) + 28 * (255 & h)) && (o = h, i = g), x[b++] = o;
                    k._setPixels(v, x);
                }, k.erode = function(e) {
                    for(var t, r, n, o, i, a, s, l, u, c, d, f, h, p, y, m, g, v = k._toPixels(e), b = 0, _ = v.length ? v.length / 4 : 0, x = new Int32Array(_); b < _;)for(r = (t = b) + e.width; b < r;)n = o = k._getARGB(v, b), (s = b - 1) < t && (s = b), r <= (a = b + 1) && (a = b), (l = b - e.width) < 0 && (l = 0), _ <= (u = b + e.width) && (u = b), f = k._getARGB(v, l), d = k._getARGB(v, s), h = k._getARGB(v, u), (y = 77 * (d >> 16 & 255) + 151 * (d >> 8 & 255) + 28 * (255 & d)) < (i = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) && (o = d, i = y), (p = 77 * ((c = k._getARGB(v, a)) >> 16 & 255) + 151 * (c >> 8 & 255) + 28 * (255 & c)) < i && (o = c, i = p), (m = 77 * (f >> 16 & 255) + 151 * (f >> 8 & 255) + 28 * (255 & f)) < i && (o = f, i = m), (g = 77 * (h >> 16 & 255) + 151 * (h >> 8 & 255) + 28 * (255 & h)) < i && (o = h, i = g), x[b++] = o;
                    k._setPixels(v, x);
                }, k.blur = function(e, t) {
                    n131(e, t);
                };
                var o90 = k;
                r205.default = o90;
            },
            {
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.int32-array": 206,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/es.typed-array.uint8-array": 223
            }
        ],
        282: [
            function(e432, t270, r207) {
                "use strict";
                e432("core-js/modules/es.symbol"), e432("core-js/modules/es.symbol.description"), e432("core-js/modules/es.symbol.iterator"), e432("core-js/modules/es.array.concat"), e432("core-js/modules/es.array.filter"), e432("core-js/modules/es.array.from"), e432("core-js/modules/es.array.iterator"), e432("core-js/modules/es.array.map"), e432("core-js/modules/es.array.slice"), e432("core-js/modules/es.object.keys"), e432("core-js/modules/es.object.to-string"), e432("core-js/modules/es.regexp.exec"), e432("core-js/modules/es.regexp.to-string"), e432("core-js/modules/es.set"), e432("core-js/modules/es.string.iterator"), e432("core-js/modules/es.string.replace"), e432("core-js/modules/es.string.split"), e432("core-js/modules/es.typed-array.uint8-array"), e432("core-js/modules/es.typed-array.uint32-array"), e432("core-js/modules/es.typed-array.copy-within"), e432("core-js/modules/es.typed-array.every"), e432("core-js/modules/es.typed-array.fill"), e432("core-js/modules/es.typed-array.filter"), e432("core-js/modules/es.typed-array.find"), e432("core-js/modules/es.typed-array.find-index"), e432("core-js/modules/es.typed-array.for-each"), e432("core-js/modules/es.typed-array.includes"), e432("core-js/modules/es.typed-array.index-of"), e432("core-js/modules/es.typed-array.iterator"), e432("core-js/modules/es.typed-array.join"), e432("core-js/modules/es.typed-array.last-index-of"), e432("core-js/modules/es.typed-array.map"), e432("core-js/modules/es.typed-array.reduce"), e432("core-js/modules/es.typed-array.reduce-right"), e432("core-js/modules/es.typed-array.reverse"), e432("core-js/modules/es.typed-array.set"), e432("core-js/modules/es.typed-array.slice"), e432("core-js/modules/es.typed-array.some"), e432("core-js/modules/es.typed-array.sort"), e432("core-js/modules/es.typed-array.subarray"), e432("core-js/modules/es.typed-array.to-locale-string"), e432("core-js/modules/es.typed-array.to-string"), e432("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r207, "__esModule", {
                    value: !0
                }), r207.default = void 0;
                var k = n133(e432("../core/main")), A = n133(e432("omggif"));
                function n133(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                function R(e433) {
                    return (function(e) {
                        if (Array.isArray(e)) {
                            for(var t = 0, r = new Array(e.length); t < e.length; t++)r[t] = e[t];
                            return r;
                        }
                    })(e433) || (function(e) {
                        if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
                    })(e433) || (function() {
                        throw new TypeError("Invalid attempt to spread non-iterable instance");
                    })();
                }
                k.default.prototype.createImage = function(e, t) {
                    return k.default._validateParameters("createImage", arguments), new k.default.Image(e, t);
                }, k.default.prototype.saveCanvas = function() {
                    k.default._validateParameters("saveCanvas", arguments);
                    var e434, t, r, n, o = [].slice.call(arguments);
                    switch(arguments[0] instanceof HTMLCanvasElement ? (e434 = arguments[0], o.shift()) : arguments[0] instanceof k.default.Element ? (e434 = arguments[0].elt, o.shift()) : e434 = this._curElement && this._curElement.elt, 1 <= o.length && (t = o[0]), 2 <= o.length && (r = o[1]), r = r || k.default.prototype._checkFileExtension(t, r)[1] || "png"){
                        default:
                            n = "image/png";
                            break;
                        case "jpeg":
                        case "jpg":
                            n = "image/jpeg";
                    }
                    e434.toBlob(function(e) {
                        k.default.prototype.downloadFile(e, t, r);
                    }, n);
                }, k.default.prototype.saveGif = function(p, e435) {
                    var y = p.gifProperties, t271 = y.loopLimit;
                    1 === t271 ? t271 = null : null === t271 && (t271 = 0);
                    for(var r208 = new Uint8Array(p.width * p.height * y.numFrames), m = [], n134 = {
                    }, o93 = 0; o93 < y.numFrames; o93++){
                        for(var i = new Set, a = y.frames[o93].image.data, s = a.length, l = new Uint32Array(p.width * p.height), u = 0, c = 0; u < s; u += 4, c++){
                            var d = a[u + 0] << 16 | a[u + 1] << 8 | a[u + 2] << 0;
                            i.add(d), l[c] = d;
                        }
                        var f = R(i).sort().toString();
                        void 0 === n134[f] ? n134[f] = {
                            freq: 1,
                            frames: [
                                o93
                            ]
                        } : (n134[f].freq += 1, n134[f].frames.push(o93)), m.push(l);
                    }
                    var g = [], h11 = Object.keys(n134).sort(function(e, t) {
                        return n134[t].freq - n134[e].freq;
                    }), v = h11[0].split(",").map(function(e) {
                        return parseInt(e);
                    });
                    g = g.concat(n134[v].frames);
                    for(var b = new Set(v), _ = 1; _ < h11.length; _++){
                        var x = h11[_].split(",").map(function(e) {
                            return parseInt(e);
                        }).filter(function(e) {
                            return !b.has(e);
                        });
                        if (v.length + x.length <= 256) {
                            for(var w = 0; w < x.length; w++)v.push(x[w]), b.add(x[w]);
                            g = g.concat(n134[h11[_]].frames);
                        }
                    }
                    g = new Set(g);
                    for(var S = {
                    }, j = 0; j < v.length; j++)S[v[j]] || (S[v[j]] = j);
                    for(var M = 1; M < v.length;)M <<= 1;
                    v.length = M;
                    for(var E = {
                        loop: t271,
                        palette: new Uint32Array(v)
                    }, T = new A.default.GifWriter(r208, p.width, p.height, E), O = {
                    }, C = function(e436) {
                        for(var t = !g.has(e436), r = t ? [] : v, n = new Uint8Array(p.width * p.height), o = {
                        }, i = new Set, a = 0; a < m[e436].length; a++){
                            var s = m[e436][a];
                            t ? (void 0 === o[s] && (o[s] = r.length, r.push(s)), n[a] = o[s]) : n[a] = S[s], 0 < e436 && m[e436 - 1][a] !== s && i.add(s);
                        }
                        var l = {
                        }, u = r.filter(function(e) {
                            return !i.has(e);
                        });
                        if (0 < u.length) {
                            var c = u[0], d = t ? o[c] : S[c];
                            if (0 < e436) {
                                for(var f = 0; f < m[e436].length; f++)m[e436 - 1][f] === m[e436][f] && (n[f] = d);
                                l.transparent = d, O.frameOpts.disposal = 1;
                            }
                        }
                        if (l.delay = y.frames[e436].delay / 10, t) {
                            for(var h = 1; h < r.length;)h <<= 1;
                            r.length = h, l.palette = new Uint32Array(r);
                        }
                        0 < e436 && T.addFrame(0, 0, p.width, p.height, O.pixelPaletteIndex, O.frameOpts), O = {
                            pixelPaletteIndex: n,
                            frameOpts: l
                        };
                    }, L = 0; L < y.numFrames; L++)C(L);
                    O.frameOpts.disposal = 1, T.addFrame(0, 0, p.width, p.height, O.pixelPaletteIndex, O.frameOpts);
                    var P = new Blob([
                        r208.slice(0, T.end())
                    ], {
                        type: "image/gif"
                    });
                    k.default.prototype.downloadFile(P, e435, "gif");
                }, k.default.prototype.saveFrames = function(e437, t272, r209, n135, a) {
                    k.default._validateParameters("saveFrames", arguments);
                    var o94 = r209 || 3;
                    o94 = k.default.prototype.constrain(o94, 0, 15), o94 *= 1000;
                    var i56 = n135 || 15;
                    i56 = k.default.prototype.constrain(i56, 0, 22);
                    var s = 0, l = k.default.prototype._makeFrame, u = this._curElement.elt, c = [], d = setInterval(function() {
                        c.push(l(e437 + s, t272, u)), s++;
                    }, 1000 / i56);
                    setTimeout(function() {
                        if (clearInterval(d), a) a(c);
                        else {
                            var e = !0, t = !1, r = void 0;
                            try {
                                for(var n, o = c[Symbol.iterator](); !(e = (n = o.next()).done); e = !0){
                                    var i = n.value;
                                    k.default.prototype.downloadFile(i.imageData, i.filename, i.ext);
                                }
                            } catch (e438) {
                                t = !0, r = e438;
                            } finally{
                                try {
                                    e || null == o.return || o.return();
                                } finally{
                                    if (t) throw r;
                                }
                            }
                        }
                        c = [];
                    }, o94 + 0.01);
                }, k.default.prototype._makeFrame = function(e, t, r) {
                    var n, o;
                    if (n = this ? this._curElement.elt : r, t) switch(t.toLowerCase()){
                        case "png":
                            o = "image/png";
                            break;
                        case "jpeg":
                        case "jpg":
                            o = "image/jpeg";
                            break;
                        default:
                            o = "image/png";
                    }
                    else t = "png", o = "image/png";
                    var i = n.toDataURL(o);
                    i = i.replace(o, "image/octet-stream");
                    var a = {
                    };
                    return a.imageData = i, a.filename = e, a.ext = t, a;
                };
                var o92 = k.default;
                r207.default = o92;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.from": 153,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.object.keys": 173,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.set": 180,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.replace": 186,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/es.typed-array.uint32-array": 222,
                "core-js/modules/es.typed-array.uint8-array": 223,
                "core-js/modules/web.dom-collections.iterator": 226,
                omggif: 235
            }
        ],
        283: [
            function(e439, t273, r210) {
                "use strict";
                function a44(e440) {
                    return (a44 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e440);
                }
                e439("core-js/modules/es.array.includes"), e439("core-js/modules/es.array.index-of"), e439("core-js/modules/es.array.iterator"), e439("core-js/modules/es.object.to-string"), e439("core-js/modules/es.promise"), e439("core-js/modules/es.string.includes"), e439("core-js/modules/es.typed-array.uint8-array"), e439("core-js/modules/es.typed-array.uint8-clamped-array"), e439("core-js/modules/es.typed-array.copy-within"), e439("core-js/modules/es.typed-array.every"), e439("core-js/modules/es.typed-array.fill"), e439("core-js/modules/es.typed-array.filter"), e439("core-js/modules/es.typed-array.find"), e439("core-js/modules/es.typed-array.find-index"), e439("core-js/modules/es.typed-array.for-each"), e439("core-js/modules/es.typed-array.includes"), e439("core-js/modules/es.typed-array.index-of"), e439("core-js/modules/es.typed-array.iterator"), e439("core-js/modules/es.typed-array.join"), e439("core-js/modules/es.typed-array.last-index-of"), e439("core-js/modules/es.typed-array.map"), e439("core-js/modules/es.typed-array.reduce"), e439("core-js/modules/es.typed-array.reduce-right"), e439("core-js/modules/es.typed-array.reverse"), e439("core-js/modules/es.typed-array.set"), e439("core-js/modules/es.typed-array.slice"), e439("core-js/modules/es.typed-array.some"), e439("core-js/modules/es.typed-array.sort"), e439("core-js/modules/es.typed-array.subarray"), e439("core-js/modules/es.typed-array.to-locale-string"), e439("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r210, "__esModule", {
                    value: !0
                }), r210.default = void 0;
                var x = o95(e439("../core/main")), d15 = o95(e439("./filters")), w = o95(e439("../core/helpers")), n136 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a44(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s34();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e439("../core/constants")), y7 = o95(e439("omggif"));
                function s34() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s34 = function() {
                        return e;
                    }, e;
                }
                function o95(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                function S(e, t) {
                    return 0 < e && e < t ? e : t;
                }
                e439("../core/friendly_errors/validate_params"), e439("../core/friendly_errors/file_errors"), e439("../core/friendly_errors/fes_core"), x.default.prototype.loadImage = function(n137, o96, i58) {
                    x.default._validateParameters("loadImage", arguments);
                    var a45 = new x.default.Image(1, 1, this), s35 = this, e441 = new Request(n137, {
                        method: "GET",
                        mode: "cors"
                    });
                    return fetch(n137, e441).then(function(e442) {
                        var t274 = e442.headers.get("content-type");
                        if (null === t274 && console.warn("The image you loaded does not have a Content-Type header. If you are using the online editor consider reuploading the asset."), t274 && t274.includes("image/gif")) e442.arrayBuffer().then(function(e443) {
                            e443 && (function(e444, r, t275, n, o) {
                                var i = new y7.default.GifReader(e444);
                                r.width = r.canvas.width = i.width, r.height = r.canvas.height = i.height;
                                var a = [], s = i.numFrames(), l = new Uint8ClampedArray(r.width * r.height * 4);
                                if (1 < s) {
                                    for(var u = function(e, t) {
                                        try {
                                            t.decodeAndBlitFrameRGBA(e, l);
                                        } catch (e445) {
                                            x.default._friendlyFileLoadError(8, r.src), "function" == typeof n ? n(e445) : console.error(e445);
                                        }
                                    }, c = 0; c < s; c++){
                                        var d = i.frameInfo(c);
                                        1 === i.frameInfo(c).disposal && 0 < c ? r.drawingContext.putImageData(a[c - 1].image, 0, 0) : (r.drawingContext.clearRect(0, 0, r.width, r.height), l = new Uint8ClampedArray(r.width * r.height * 4)), u(c, i);
                                        var f = new ImageData(l, r.width, r.height);
                                        r.drawingContext.putImageData(f, 0, 0);
                                        var h = d.delay;
                                        0 === h && (h = 10), a.push({
                                            image: r.drawingContext.getImageData(0, 0, r.width, r.height),
                                            delay: 10 * h
                                        });
                                    }
                                    var p = i.loopCount();
                                    null === p ? p = 1 : 0 === p && (p = null), r.drawingContext.putImageData(a[0].image, 0, 0), r.gifProperties = {
                                        displayIndex: 0,
                                        loopLimit: p,
                                        loopCount: 0,
                                        frames: a,
                                        numFrames: s,
                                        playing: !0,
                                        timeDisplayed: 0,
                                        lastChangeTime: 0
                                    };
                                }
                                "function" == typeof t275 && t275(r);
                                o();
                            })(new Uint8Array(e443), a45, o96, i58, (function(e) {
                                s35._decrementPreload();
                            }).bind(s35));
                        }, function(e) {
                            "function" == typeof i58 ? i58(e) : console.error(e);
                        });
                        else {
                            var r211 = new Image;
                            r211.onload = function() {
                                a45.width = a45.canvas.width = r211.width, a45.height = a45.canvas.height = r211.height, a45.drawingContext.drawImage(r211, 0, 0), a45.modified = !0, "function" == typeof o96 && o96(a45), s35._decrementPreload();
                            }, r211.onerror = function(e) {
                                x.default._friendlyFileLoadError(0, r211.src), "function" == typeof i58 ? i58(e) : console.error(e);
                            }, 0 !== n137.indexOf("data:image/") && (r211.crossOrigin = "Anonymous"), r211.src = n137;
                        }
                        a45.modified = !0;
                    }).catch(function(e) {
                        x.default._friendlyFileLoadError(0, n137), "function" == typeof i58 ? i58(e) : console.error(e);
                    }), a45;
                }, x.default.prototype.image = function(e, t, r, n, o, i, a, s, l) {
                    x.default._validateParameters("image", arguments);
                    var u = e.width, c = e.height;
                    e.elt && e.elt.videoWidth && !e.canvas && (u = e.elt.videoWidth, c = e.elt.videoHeight);
                    var d = t, f = r, h = n || u, p = o || c, y = i || 0, m = a || 0, g = s || u, v = l || c;
                    g = S(g, u), v = S(v, c);
                    var b = 1;
                    e.elt && !e.canvas && e.elt.style.width && (b = e.elt.videoWidth && !n ? e.elt.videoWidth : e.elt.width, b /= parseInt(e.elt.style.width, 10)), y *= b, m *= b, v *= b, g *= b;
                    var _ = w.default.modeAdjust(d, f, h, p, this._renderer._imageMode);
                    this._renderer.image(e, y, m, g, v, _.x, _.y, _.w, _.h);
                }, x.default.prototype.tint = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    x.default._validateParameters("tint", t);
                    var n = this.color.apply(this, t);
                    this._renderer._tint = n.levels;
                }, x.default.prototype.noTint = function() {
                    this._renderer._tint = null;
                }, x.default.prototype._getTintedImageCanvas = function(e) {
                    if (!e.canvas) return e;
                    var t = d15.default._toPixels(e.canvas), r = document.createElement("canvas");
                    r.width = e.canvas.width, r.height = e.canvas.height;
                    for(var n = r.getContext("2d"), o = n.createImageData(e.canvas.width, e.canvas.height), i = o.data, a = 0; a < t.length; a += 4){
                        var s = t[a], l = t[a + 1], u = t[a + 2], c = t[a + 3];
                        i[a] = s * this._renderer._tint[0] / 255, i[a + 1] = l * this._renderer._tint[1] / 255, i[a + 2] = u * this._renderer._tint[2] / 255, i[a + 3] = c * this._renderer._tint[3] / 255;
                    }
                    return n.putImageData(o, 0, 0), r;
                }, x.default.prototype.imageMode = function(e) {
                    x.default._validateParameters("imageMode", arguments), e !== n136.CORNER && e !== n136.CORNERS && e !== n136.CENTER || (this._renderer._imageMode = e);
                };
                var i57 = x.default;
                r210.default = i57;
            },
            {
                "../core/constants": 250,
                "../core/friendly_errors/fes_core": 252,
                "../core/friendly_errors/file_errors": 253,
                "../core/friendly_errors/validate_params": 255,
                "../core/helpers": 256,
                "../core/main": 260,
                "./filters": 281,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.promise": 175,
                "core-js/modules/es.string.includes": 182,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/es.typed-array.uint8-array": 223,
                "core-js/modules/es.typed-array.uint8-clamped-array": 224,
                omggif: 235
            }
        ],
        284: [
            function(e446, t276, r212) {
                "use strict";
                e446("core-js/modules/es.symbol"), e446("core-js/modules/es.symbol.description"), e446("core-js/modules/es.symbol.iterator"), e446("core-js/modules/es.array.filter"), e446("core-js/modules/es.array.iterator"), e446("core-js/modules/es.object.to-string"), e446("core-js/modules/es.string.iterator"), e446("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r212, "__esModule", {
                    value: !0
                }), r212.default = void 0;
                var o97 = i59(e446("../core/main")), n138 = i59(e446("./filters"));
                function i59(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                o97.default.Image = function(e, t) {
                    this.width = e, this.height = t, this.canvas = document.createElement("canvas"), this.canvas.width = this.width, this.canvas.height = this.height, this.drawingContext = this.canvas.getContext("2d"), (this._pixelsState = this)._pixelDensity = 1, this.gifProperties = null, this._modified = !1, this.pixels = [];
                }, o97.default.Image.prototype._animateGif = function(e) {
                    var t = this.gifProperties, r = e._lastFrameTime + e.deltaTime;
                    if (0 === t.lastChangeTime && (t.lastChangeTime = r), t.playing) {
                        t.timeDisplayed = r - t.lastChangeTime;
                        var n = t.frames[t.displayIndex].delay;
                        if (t.timeDisplayed >= n) {
                            var o = Math.floor(t.timeDisplayed / n);
                            if (t.timeDisplayed = 0, t.lastChangeTime = r, t.displayIndex += o, t.loopCount = Math.floor(t.displayIndex / t.numFrames), null !== t.loopLimit && t.loopCount >= t.loopLimit) t.playing = !1;
                            else {
                                var i = t.displayIndex % t.numFrames;
                                this.drawingContext.putImageData(t.frames[i].image, 0, 0), t.displayIndex = i, this.setModified(!0);
                            }
                        }
                    }
                }, o97.default.Image.prototype._setProperty = function(e, t) {
                    this[e] = t, this.setModified(!0);
                }, o97.default.Image.prototype.loadPixels = function() {
                    o97.default.Renderer2D.prototype.loadPixels.call(this), this.setModified(!0);
                }, o97.default.Image.prototype.updatePixels = function(e, t, r, n) {
                    o97.default.Renderer2D.prototype.updatePixels.call(this, e, t, r, n), this.setModified(!0);
                }, o97.default.Image.prototype.get = function(e, t, r, n) {
                    return o97.default._validateParameters("p5.Image.get", arguments), o97.default.Renderer2D.prototype.get.apply(this, arguments);
                }, o97.default.Image.prototype._getPixel = o97.default.Renderer2D.prototype._getPixel, o97.default.Image.prototype.set = function(e, t, r) {
                    o97.default.Renderer2D.prototype.set.call(this, e, t, r), this.setModified(!0);
                }, o97.default.Image.prototype.resize = function(e447, t277) {
                    0 === e447 && 0 === t277 ? (e447 = this.canvas.width, t277 = this.canvas.height) : 0 === e447 ? e447 = this.canvas.width * t277 / this.canvas.height : 0 === t277 && (t277 = this.canvas.height * e447 / this.canvas.width), e447 = Math.floor(e447), t277 = Math.floor(t277);
                    var r = document.createElement("canvas");
                    if (r.width = e447, r.height = t277, this.gifProperties) for(var n139 = this.gifProperties, o98 = function(e, t) {
                        for(var r = 0, n = 0; n < t.height; n++)for(var o = 0; o < t.width; o++){
                            var i = Math.floor(o * e.width / t.width), a = 4 * (Math.floor(n * e.height / t.height) * e.width + i);
                            t.data[r++] = e.data[a++], t.data[r++] = e.data[a++], t.data[r++] = e.data[a++], t.data[r++] = e.data[a++];
                        }
                    }, i60 = 0; i60 < n139.numFrames; i60++){
                        var a = this.drawingContext.createImageData(e447, t277);
                        o98(n139.frames[i60].image, a), n139.frames[i60].image = a;
                    }
                    r.getContext("2d").drawImage(this.canvas, 0, 0, this.canvas.width, this.canvas.height, 0, 0, r.width, r.height), this.canvas.width = this.width = e447, this.canvas.height = this.height = t277, this.drawingContext.drawImage(r, 0, 0, e447, t277, 0, 0, e447, t277), 0 < this.pixels.length && this.loadPixels(), this.setModified(!0);
                }, o97.default.Image.prototype.copy = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    o97.default.prototype.copy.apply(this, t);
                }, o97.default.Image.prototype.mask = function(e) {
                    void 0 === e && (e = this);
                    var t = this.drawingContext.globalCompositeOperation, r = 1;
                    e instanceof o97.default.Renderer && (r = e._pInst._pixelDensity);
                    var n = [
                        e,
                        0,
                        0,
                        r * e.width,
                        r * e.height,
                        0,
                        0,
                        this.width,
                        this.height
                    ];
                    this.drawingContext.globalCompositeOperation = "destination-in", o97.default.Image.prototype.copy.apply(this, n), this.drawingContext.globalCompositeOperation = t, this.setModified(!0);
                }, o97.default.Image.prototype.filter = function(e, t) {
                    n138.default.apply(this.canvas, n138.default[e], t), this.setModified(!0);
                }, o97.default.Image.prototype.blend = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    o97.default._validateParameters("p5.Image.blend", arguments), o97.default.prototype.blend.apply(this, t), this.setModified(!0);
                }, o97.default.Image.prototype.setModified = function(e) {
                    this._modified = e;
                }, o97.default.Image.prototype.isModified = function() {
                    return this._modified;
                }, o97.default.Image.prototype.save = function(e, t) {
                    this.gifProperties ? o97.default.prototype.saveGif(this, e) : o97.default.prototype.saveCanvas(this.canvas, e, t);
                }, o97.default.Image.prototype.reset = function() {
                    if (this.gifProperties) {
                        var e = this.gifProperties;
                        e.playing = !0, e.timeSinceStart = 0, e.timeDisplayed = 0, e.lastChangeTime = 0, e.loopCount = 0, e.displayIndex = 0, this.drawingContext.putImageData(e.frames[0].image, 0, 0);
                    }
                }, o97.default.Image.prototype.getCurrentFrame = function() {
                    if (this.gifProperties) {
                        var e = this.gifProperties;
                        return e.displayIndex % e.numFrames;
                    }
                }, o97.default.Image.prototype.setFrame = function(e) {
                    if (this.gifProperties) {
                        var t = this.gifProperties;
                        e < t.numFrames && 0 <= e ? (t.timeDisplayed = 0, t.lastChangeTime = 0, t.displayIndex = e, this.drawingContext.putImageData(t.frames[e].image, 0, 0)) : console.log("Cannot set GIF to a frame number that is higher than total number of frames or below zero.");
                    }
                }, o97.default.Image.prototype.numFrames = function() {
                    if (this.gifProperties) return this.gifProperties.numFrames;
                }, o97.default.Image.prototype.play = function() {
                    this.gifProperties && (this.gifProperties.playing = !0);
                }, o97.default.Image.prototype.pause = function() {
                    this.gifProperties && (this.gifProperties.playing = !1);
                }, o97.default.Image.prototype.delay = function(e, t) {
                    if (this.gifProperties) {
                        var r = this.gifProperties;
                        if (t < r.numFrames && 0 <= t) r.frames[t].delay = e;
                        else {
                            var n = !0, o = !1, i = void 0;
                            try {
                                for(var a, s = r.frames[Symbol.iterator](); !(n = (a = s.next()).done); n = !0)a.value.delay = e;
                            } catch (e) {
                                o = !0, i = e;
                            } finally{
                                try {
                                    n || null == s.return || s.return();
                                } finally{
                                    if (o) throw i;
                                }
                            }
                        }
                    }
                };
                var a46 = o97.default.Image;
                r212.default = a46;
            },
            {
                "../core/main": 260,
                "./filters": 281,
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        285: [
            function(e448, t278, r213) {
                "use strict";
                e448("core-js/modules/es.array.filter"), Object.defineProperty(r213, "__esModule", {
                    value: !0
                }), r213.default = void 0;
                var h = o99(e448("../core/main")), n140 = o99(e448("./filters"));
                function o99(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                e448("../color/p5.Color"), h.default.prototype.pixels = [], h.default.prototype.blend = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    var n;
                    (h.default._validateParameters("blend", t), this._renderer) ? (n = this._renderer).blend.apply(n, t) : h.default.Renderer2D.prototype.blend.apply(this, t);
                }, h.default.prototype.copy = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    var n, o, i, a, s, l, u, c, d;
                    if (h.default._validateParameters("copy", t), 9 === t.length) n = t[0], o = t[1], i = t[2], a = t[3], s = t[4], l = t[5], u = t[6], c = t[7], d = t[8];
                    else {
                        if (8 !== t.length) throw new Error("Signature not supported");
                        n = this, o = t[0], i = t[1], a = t[2], s = t[3], l = t[4], u = t[5], c = t[6], d = t[7];
                    }
                    h.default.prototype._copyHelper(this, n, o, i, a, s, l, u, c, d);
                }, h.default.prototype._copyHelper = function(e, t, r, n, o, i, a, s, l, u) {
                    t.loadPixels();
                    var c = t.canvas.width / t.width, d = 0, f = 0;
                    t._renderer && t._renderer.isP3D && (d = t.width / 2, f = t.height / 2), e._renderer && e._renderer.isP3D ? h.default.RendererGL.prototype.image.call(e._renderer, t, r + d, n + f, o, i, a, s, l, u) : e.drawingContext.drawImage(t.canvas, c * (r + d), c * (n + f), c * o, c * i, a, s, l, u);
                }, h.default.prototype.filter = function(e, t) {
                    h.default._validateParameters("filter", arguments), void 0 !== this.canvas ? n140.default.apply(this.canvas, n140.default[e], t) : n140.default.apply(this.elt, n140.default[e], t);
                }, h.default.prototype.get = function(e, t, r, n) {
                    var o;
                    return h.default._validateParameters("get", arguments), (o = this._renderer).get.apply(o, arguments);
                }, h.default.prototype.loadPixels = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    h.default._validateParameters("loadPixels", t), this._renderer.loadPixels();
                }, h.default.prototype.set = function(e, t, r) {
                    this._renderer.set(e, t, r);
                }, h.default.prototype.updatePixels = function(e, t, r, n) {
                    h.default._validateParameters("updatePixels", arguments), 0 !== this.pixels.length && this._renderer.updatePixels(e, t, r, n);
                };
                var i61 = h.default;
                r213.default = i61;
            },
            {
                "../color/p5.Color": 248,
                "../core/main": 260,
                "./filters": 281,
                "core-js/modules/es.array.filter": 151
            }
        ],
        286: [
            function(e449, t279, r214) {
                "use strict";
                e449("core-js/modules/es.symbol"), e449("core-js/modules/es.symbol.description"), e449("core-js/modules/es.symbol.iterator"), e449("core-js/modules/es.array.concat"), e449("core-js/modules/es.array.includes"), e449("core-js/modules/es.array.index-of"), e449("core-js/modules/es.array.iterator"), e449("core-js/modules/es.array.last-index-of"), e449("core-js/modules/es.array.slice"), e449("core-js/modules/es.array.splice"), e449("core-js/modules/es.function.name"), e449("core-js/modules/es.object.to-string"), e449("core-js/modules/es.promise"), e449("core-js/modules/es.regexp.exec"), e449("core-js/modules/es.regexp.to-string"), e449("core-js/modules/es.string.includes"), e449("core-js/modules/es.string.iterator"), e449("core-js/modules/es.string.replace"), e449("core-js/modules/es.string.split"), e449("core-js/modules/es.typed-array.uint8-array"), e449("core-js/modules/es.typed-array.copy-within"), e449("core-js/modules/es.typed-array.every"), e449("core-js/modules/es.typed-array.fill"), e449("core-js/modules/es.typed-array.filter"), e449("core-js/modules/es.typed-array.find"), e449("core-js/modules/es.typed-array.find-index"), e449("core-js/modules/es.typed-array.for-each"), e449("core-js/modules/es.typed-array.includes"), e449("core-js/modules/es.typed-array.index-of"), e449("core-js/modules/es.typed-array.iterator"), e449("core-js/modules/es.typed-array.join"), e449("core-js/modules/es.typed-array.last-index-of"), e449("core-js/modules/es.typed-array.map"), e449("core-js/modules/es.typed-array.reduce"), e449("core-js/modules/es.typed-array.reduce-right"), e449("core-js/modules/es.typed-array.reverse"), e449("core-js/modules/es.typed-array.set"), e449("core-js/modules/es.typed-array.slice"), e449("core-js/modules/es.typed-array.some"), e449("core-js/modules/es.typed-array.sort"), e449("core-js/modules/es.typed-array.subarray"), e449("core-js/modules/es.typed-array.to-locale-string"), e449("core-js/modules/es.typed-array.to-string"), e449("core-js/modules/web.dom-collections.iterator"), e449("core-js/modules/web.url"), Object.defineProperty(r214, "__esModule", {
                    value: !0
                }), r214.default = void 0;
                var g = n141(e449("../core/main"));
                e449("whatwg-fetch"), e449("es6-promise/auto");
                var m4 = n141(e449("fetch-jsonp")), s36 = n141(e449("file-saver"));
                function n141(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                function v(e450) {
                    return (v = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e450);
                }
                function b(e, t) {
                    var r = {
                    };
                    if (void 0 === (t = t || [])) for(var n = 0; n < e.length; n++)t[n.toString()] = n;
                    for(var o = 0; o < t.length; o++){
                        var i = t[o], a = e[o];
                        r[i] = a;
                    }
                    return r;
                }
                function y8(e) {
                    return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
                }
                function l25(e, t) {
                    t && !0 !== t && "true" !== t || (t = "");
                    var r = "";
                    return (e = e || "untitled", e.includes(".")) && (r = e.split(".").pop()), t && r !== t && (r = t, e = "".concat(e, ".").concat(r)), [
                        e,
                        r
                    ];
                }
                e449("../core/friendly_errors/validate_params"), e449("../core/friendly_errors/file_errors"), e449("../core/friendly_errors/fes_core"), g.default.prototype.loadJSON = function() {
                    for(var e451 = arguments.length, t = new Array(e451), r = 0; r < e451; r++)t[r] = arguments[r];
                    g.default._validateParameters("loadJSON", t);
                    for(var n, o, i, a = t[0], s = {
                    }, l = "json", u = 1; u < t.length; u++){
                        var c = t[u];
                        "string" == typeof c ? "jsonp" !== c && "json" !== c || (l = c) : "function" == typeof c ? n ? o = c : n = c : "object" === v(c) && (c.hasOwnProperty("jsonpCallback") || c.hasOwnProperty("jsonpCallbackFunction")) && (l = "jsonp", i = c);
                    }
                    var d = this;
                    return this.httpDo(a, "GET", i, l, function(e) {
                        for(var t in e)s[t] = e[t];
                        void 0 !== n && n(e), d._decrementPreload();
                    }, function(e) {
                        if (g.default._friendlyFileLoadError(5, a), !o) throw e;
                        o(e);
                    }), s;
                }, g.default.prototype.loadStrings = function() {
                    for(var e452 = arguments.length, t280 = new Array(e452), r215 = 0; r215 < e452; r215++)t280[r215] = arguments[r215];
                    g.default._validateParameters("loadStrings", t280);
                    for(var o, n142, i = [], a = 1; a < t280.length; a++){
                        var s = t280[a];
                        "function" == typeof s && (void 0 === o ? o = s : void 0 === n142 && (n142 = s));
                    }
                    var l = this;
                    return g.default.prototype.httpDo.call(this, t280[0], "GET", "text", function(e) {
                        for(var t = e.replace(/\r\n/g, "\r").replace(/\n/g, "\r").split(/\r/), r = 0, n = t.length; r < n; r += 32768)Array.prototype.push.apply(i, t.slice(r, Math.min(r + 32768, n)));
                        void 0 !== o && o(i), l._decrementPreload();
                    }, function(e) {
                        if (g.default._friendlyFileLoadError(3, e), !n142) throw e;
                        n142(e);
                    }), i;
                }, g.default.prototype.loadTable = function(t281) {
                    var f, r216, h, e453 = [], p = !1, n143 = t281.substring(t281.lastIndexOf(".") + 1, t281.length);
                    "csv" === n143 ? h = "," : "ssv" === n143 ? h = ";" : "tsv" === n143 && (h = "\t");
                    for(var o101 = 1; o101 < arguments.length; o101++)"function" == typeof arguments[o101] ? void 0 === f ? f = arguments[o101] : void 0 === r216 && (r216 = arguments[o101]) : "string" == typeof arguments[o101] && (e453.push(arguments[o101]), "header" === arguments[o101] && (p = !0), "csv" === arguments[o101] ? h = "," : "ssv" === arguments[o101] ? h = ";" : "tsv" === arguments[o101] && (h = "\t"));
                    var y = new g.default.Table, m = this;
                    return this.httpDo(t281, "GET", "table", function(e) {
                        for(var t, r, n = {
                        }, o = [], i = 0, a = null, s = function() {
                            n.currentState = 0, n.token = "";
                        }, l = function() {
                            a.push(n.token), s();
                        }, u = function() {
                            n.currentState = 4, o.push(a), a = null;
                        };;){
                            if (null == (t = e[i++])) {
                                if (n.escaped) throw new Error("Unclosed quote in file.");
                                if (a) {
                                    l(), u();
                                    break;
                                }
                            }
                            if (null === a && (n.escaped = !1, a = [], s()), 0 === n.currentState) {
                                if ('"' === t) {
                                    n.escaped = !0, n.currentState = 1;
                                    continue;
                                }
                                n.currentState = 1;
                            }
                            if (1 === n.currentState && n.escaped) {
                                if ('"' === t) '"' === e[i] ? (n.token += '"', i++) : (n.escaped = !1, n.currentState = 2);
                                else {
                                    if ("\r" === t) continue;
                                    n.token += t;
                                }
                            } else "\r" === t ? ("\n" === e[i] && i++, l(), u()) : "\n" === t ? (l(), u()) : t === h ? l() : 1 === n.currentState && (n.token += t);
                        }
                        if (p) y.columns = o.shift();
                        else for(var c = 0; c < o[0].length; c++)y.columns[c] = "null";
                        for(var d = 0; d < o.length; d++)(1 !== o[d].length || "undefined" !== o[d][0] && "" !== o[d][0]) && ((r = new g.default.TableRow).arr = o[d], r.obj = b(o[d], y.columns), y.addRow(r));
                        "function" == typeof f && f(y), m._decrementPreload();
                    }, function(e) {
                        g.default._friendlyFileLoadError(2, t281), r216 ? r216(e) : console.error(e);
                    }), y;
                }, g.default.prototype.loadXML = function() {
                    for(var e454 = arguments.length, t = new Array(e454), r = 0; r < e454; r++)t[r] = arguments[r];
                    for(var n, o, i = new g.default.XML, a = 1; a < t.length; a++){
                        var s = t[a];
                        "function" == typeof s && (void 0 === n ? n = s : void 0 === o && (o = s));
                    }
                    var l = this;
                    return this.httpDo(t[0], "GET", "xml", function(e) {
                        for(var t in e)i[t] = e[t];
                        void 0 !== n && n(i), l._decrementPreload();
                    }, function(e) {
                        if (g.default._friendlyFileLoadError(1, e), !o) throw e;
                        o(e);
                    }), i;
                }, g.default.prototype.loadBytes = function(t, r, n) {
                    var o = {
                    }, i = this;
                    return this.httpDo(t, "GET", "arrayBuffer", function(e) {
                        o.bytes = new Uint8Array(e), "function" == typeof r && r(o), i._decrementPreload();
                    }, function(e) {
                        if (g.default._friendlyFileLoadError(6, t), !n) throw e;
                        n(e);
                    }), o;
                }, g.default.prototype.httpGet = function() {
                    g.default._validateParameters("httpGet", arguments);
                    var e = Array.prototype.slice.call(arguments);
                    return e.splice(1, 0, "GET"), g.default.prototype.httpDo.apply(this, e);
                }, g.default.prototype.httpPost = function() {
                    g.default._validateParameters("httpPost", arguments);
                    var e = Array.prototype.slice.call(arguments);
                    return e.splice(1, 0, "POST"), g.default.prototype.httpDo.apply(this, e);
                }, g.default.prototype.httpDo = function() {
                    for(var n, e455, t282, r217, o, i = {
                    }, a = 0, s = "text/plain", l = arguments.length - 1; 0 < l && "function" == typeof (l < 0 || arguments.length <= l ? void 0 : arguments[l]); l--)a++;
                    var u = arguments.length <= 0 ? void 0 : arguments[0];
                    if (2 == arguments.length - a && "string" == typeof u && "object" === v(arguments.length <= 1 ? void 0 : arguments[1])) r217 = new Request(u, arguments.length <= 1 ? void 0 : arguments[1]), e455 = arguments.length <= 2 ? void 0 : arguments[2], t282 = arguments.length <= 3 ? void 0 : arguments[3];
                    else {
                        for(var c, d = "GET", f = 1; f < arguments.length; f++){
                            var h = f < 0 || arguments.length <= f ? void 0 : arguments[f];
                            if ("string" == typeof h) "GET" === h || "POST" === h || "PUT" === h || "DELETE" === h ? d = h : "json" === h || "jsonp" === h || "binary" === h || "arrayBuffer" === h || "xml" === h || "text" === h || "table" === h ? n = h : c = h;
                            else if ("number" == typeof h) c = h.toString();
                            else if ("object" === v(h)) {
                                if (h.hasOwnProperty("jsonpCallback") || h.hasOwnProperty("jsonpCallbackFunction")) for(var p in h)i[p] = h[p];
                                else s = h instanceof g.default.XML ? (c = h.serialize(), "application/xml") : (c = JSON.stringify(h), "application/json");
                            } else "function" == typeof h && (e455 ? t282 = h : e455 = h);
                        }
                        var y = "GET" === d ? new Headers : new Headers({
                            "Content-Type": s
                        });
                        r217 = new Request(u, {
                            method: d,
                            mode: "cors",
                            body: c,
                            headers: y
                        });
                    }
                    return (o = (o = "jsonp" === (n = n || (u.includes("json") ? "json" : u.includes("xml") ? "xml" : "text")) ? (0, m4.default)(u, i) : fetch(r217)).then(function(e456) {
                        if (!e456.ok) {
                            var t = new Error(e456.body);
                            throw t.status = e456.status, t.ok = !1, t;
                        }
                        var r = 0;
                        switch("jsonp" !== n && (r = e456.headers.get("content-length")), r && 64000000 < r && g.default._friendlyFileLoadError(7, u), n){
                            case "json":
                            case "jsonp":
                                return e456.json();
                            case "binary":
                                return e456.blob();
                            case "arrayBuffer":
                                return e456.arrayBuffer();
                            case "xml":
                                return e456.text().then(function(e) {
                                    var t = (new DOMParser).parseFromString(e, "text/xml");
                                    return new g.default.XML(t.documentElement);
                                });
                            default:
                                return e456.text();
                        }
                    })).then(e455 || function() {
                    }), o.catch(t282 || console.error), o;
                }, window.URL = window.URL || window.webkitURL, g.default.prototype._pWriters = [], g.default.prototype.createWriter = function(e, t) {
                    var r;
                    for(var n in g.default.prototype._pWriters)if (g.default.prototype._pWriters[n].name === e) return r = new g.default.PrintWriter(e + this.millis(), t), g.default.prototype._pWriters.push(r), r;
                    return r = new g.default.PrintWriter(e, t), g.default.prototype._pWriters.push(r), r;
                }, g.default.PrintWriter = function(r, n) {
                    var o = this;
                    this.name = r, this.content = "", this.write = function(e) {
                        this.content += e;
                    }, this.print = function(e) {
                        this.content += "".concat(e, "\n");
                    }, this.clear = function() {
                        this.content = "";
                    }, this.close = function() {
                        var e = [];
                        for(var t in e.push(this.content), g.default.prototype.writeFile(e, r, n), g.default.prototype._pWriters)g.default.prototype._pWriters[t].name === this.name && g.default.prototype._pWriters.splice(t, 1);
                        o.clear(), o = {
                        };
                    };
                }, g.default.prototype.save = function(e, t, r) {
                    var n = arguments, o = this._curElement ? this._curElement.elt : this.elt;
                    if (0 !== n.length) {
                        if (n[0] instanceof g.default.Renderer || n[0] instanceof g.default.Graphics) g.default.prototype.saveCanvas(n[0].elt, n[1], n[2]);
                        else if (1 === n.length && "string" == typeof n[0]) g.default.prototype.saveCanvas(o, n[0]);
                        else switch(l25(n[1], n[2])[1]){
                            case "json":
                                return void g.default.prototype.saveJSON(n[0], n[1], n[2]);
                            case "txt":
                                return void g.default.prototype.saveStrings(n[0], n[1], n[2]);
                            default:
                                n[0] instanceof Array ? g.default.prototype.saveStrings(n[0], n[1], n[2]) : n[0] instanceof g.default.Table ? g.default.prototype.saveTable(n[0], n[1], n[2]) : n[0] instanceof g.default.Image ? g.default.prototype.saveCanvas(n[0].canvas, n[1]) : n[0] instanceof g.default.SoundFile && g.default.prototype.saveSound(n[0], n[1], n[2], n[3]);
                        }
                    } else g.default.prototype.saveCanvas(o);
                }, g.default.prototype.saveJSON = function(e, t, r) {
                    var n;
                    g.default._validateParameters("saveJSON", arguments), n = r ? JSON.stringify(e) : JSON.stringify(e, void 0, 2), this.saveStrings(n.split("\n"), t, "json");
                }, g.default.prototype.saveJSONObject = g.default.prototype.saveJSON, g.default.prototype.saveJSONArray = g.default.prototype.saveJSON, g.default.prototype.saveStrings = function(e, t, r, n) {
                    g.default._validateParameters("saveStrings", arguments);
                    for(var o = r || "txt", i = this.createWriter(t, o), a = 0; a < e.length; a++)n ? i.write(e[a] + "\r\n") : i.write(e[a] + "\n");
                    i.close(), i.clear();
                }, g.default.prototype.saveTable = function(e, t, r) {
                    var n;
                    g.default._validateParameters("saveTable", arguments), n = void 0 === r ? t.substring(t.lastIndexOf(".") + 1, t.length) : r;
                    var o = this.createWriter(t, n), i = e.columns, a = ",";
                    if ("tsv" === n && (a = "\t"), "html" !== n) {
                        if ("0" !== i[0]) {
                            for(var s = 0; s < i.length; s++)s < i.length - 1 ? o.write(i[s] + a) : o.write(i[s]);
                            o.write("\n");
                        }
                        for(var l = 0; l < e.rows.length; l++){
                            var u = void 0;
                            for(u = 0; u < e.rows[l].arr.length; u++)u < e.rows[l].arr.length - 1 ? "csv" === n && String(e.rows[l].arr[u]).includes(",") ? o.write('"' + e.rows[l].arr[u] + '"' + a) : o.write(e.rows[l].arr[u] + a) : "csv" === n && String(e.rows[l].arr[u]).includes(",") ? o.write('"' + e.rows[l].arr[u] + '"') : o.write(e.rows[l].arr[u]);
                            o.write("\n");
                        }
                    } else {
                        o.print("<html>"), o.print("<head>");
                        if (o.print('  <meta http-equiv="content-type" content="text/html;charset=utf-8" />'), o.print("</head>"), o.print("<body>"), o.print("  <table>"), "0" !== i[0]) {
                            o.print("    <tr>");
                            for(var c = 0; c < i.length; c++){
                                var d = y8(i[c]);
                                o.print("      <td>".concat(d)), o.print("      </td>");
                            }
                            o.print("    </tr>");
                        }
                        for(var f = 0; f < e.rows.length; f++){
                            o.print("    <tr>");
                            for(var h = 0; h < e.columns.length; h++){
                                var p = y8(e.rows[f].getString(h));
                                o.print("      <td>".concat(p)), o.print("      </td>");
                            }
                            o.print("    </tr>");
                        }
                        o.print("  </table>"), o.print("</body>"), o.print("</html>");
                    }
                    o.close(), o.clear();
                }, g.default.prototype.writeFile = function(e, t, r) {
                    var n = "application/octet-stream";
                    g.default.prototype._isSafari() && (n = "text/plain");
                    var o = new Blob(e, {
                        type: n
                    });
                    g.default.prototype.downloadFile(o, t, r);
                }, g.default.prototype.downloadFile = function(e457, t283, r) {
                    var n = l25(t283, r), o = n[0];
                    if (e457 instanceof Blob) s36.default.saveAs(e457, o);
                    else {
                        var i = document.createElement("a");
                        if (i.href = e457, i.download = o, i.onclick = function(e) {
                            var t;
                            t = e, document.body.removeChild(t.target), e.stopPropagation();
                        }, i.style.display = "none", document.body.appendChild(i), g.default.prototype._isSafari()) {
                            var a = "Hello, Safari user! To download this file...\n";
                            a += "1. Go to File --\x3e Save As.\n", a += '2. Choose "Page Source" as the Format.\n', a += '3. Name it with this extension: ."'.concat(n[1], '"'), alert(a);
                        }
                        i.click();
                    }
                }, g.default.prototype._checkFileExtension = l25, g.default.prototype._isSafari = function() {
                    return 0 < Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor");
                };
                var o100 = g.default;
                r214.default = o100;
            },
            {
                "../core/friendly_errors/fes_core": 252,
                "../core/friendly_errors/file_errors": 253,
                "../core/friendly_errors/validate_params": 255,
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.last-index-of": 158,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.array.splice": 162,
                "core-js/modules/es.function.name": 163,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.promise": 175,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.includes": 182,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.replace": 186,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/es.typed-array.uint8-array": 223,
                "core-js/modules/web.dom-collections.iterator": 226,
                "core-js/modules/web.url": 228,
                "es6-promise/auto": 229,
                "fetch-jsonp": 231,
                "file-saver": 232,
                "whatwg-fetch": 239
            }
        ],
        287: [
            function(e458, t284, r218) {
                "use strict";
                e458("core-js/modules/es.array.concat"), e458("core-js/modules/es.array.index-of"), e458("core-js/modules/es.array.join"), e458("core-js/modules/es.array.splice"), e458("core-js/modules/es.regexp.constructor"), e458("core-js/modules/es.regexp.exec"), e458("core-js/modules/es.regexp.to-string"), e458("core-js/modules/es.string.match"), e458("core-js/modules/es.string.replace"), e458("core-js/modules/es.string.trim"), Object.defineProperty(r218, "__esModule", {
                    value: !0
                }), r218.default = void 0;
                var n144, o102 = (n144 = e458("../core/main")) && n144.__esModule ? n144 : {
                    default: n144
                };
                o102.default.Table = function(e) {
                    this.columns = [], this.rows = [];
                }, o102.default.Table.prototype.addRow = function(e) {
                    var t = e || new o102.default.TableRow;
                    if (void 0 === t.arr || void 0 === t.obj) throw new Error("invalid TableRow: ".concat(t));
                    return (t.table = this).rows.push(t), t;
                }, o102.default.Table.prototype.removeRow = function(e) {
                    this.rows[e].table = null;
                    var t = this.rows.splice(e + 1, this.rows.length);
                    this.rows.pop(), this.rows = this.rows.concat(t);
                }, o102.default.Table.prototype.getRow = function(e) {
                    return this.rows[e];
                }, o102.default.Table.prototype.getRows = function() {
                    return this.rows;
                }, o102.default.Table.prototype.findRow = function(e, t) {
                    if ("string" == typeof t) {
                        for(var r = 0; r < this.rows.length; r++)if (this.rows[r].obj[t] === e) return this.rows[r];
                    } else for(var n = 0; n < this.rows.length; n++)if (this.rows[n].arr[t] === e) return this.rows[n];
                    return null;
                }, o102.default.Table.prototype.findRows = function(e, t) {
                    var r = [];
                    if ("string" == typeof t) for(var n = 0; n < this.rows.length; n++)this.rows[n].obj[t] === e && r.push(this.rows[n]);
                    else for(var o = 0; o < this.rows.length; o++)this.rows[o].arr[t] === e && r.push(this.rows[o]);
                    return r;
                }, o102.default.Table.prototype.matchRow = function(e, t) {
                    if ("number" == typeof t) {
                        for(var r = 0; r < this.rows.length; r++)if (this.rows[r].arr[t].match(e)) return this.rows[r];
                    } else for(var n = 0; n < this.rows.length; n++)if (this.rows[n].obj[t].match(e)) return this.rows[n];
                    return null;
                }, o102.default.Table.prototype.matchRows = function(e, t) {
                    var r = [];
                    if ("number" == typeof t) for(var n = 0; n < this.rows.length; n++)this.rows[n].arr[t].match(e) && r.push(this.rows[n]);
                    else for(var o = 0; o < this.rows.length; o++)this.rows[o].obj[t].match(e) && r.push(this.rows[o]);
                    return r;
                }, o102.default.Table.prototype.getColumn = function(e) {
                    var t = [];
                    if ("string" == typeof e) for(var r = 0; r < this.rows.length; r++)t.push(this.rows[r].obj[e]);
                    else for(var n = 0; n < this.rows.length; n++)t.push(this.rows[n].arr[e]);
                    return t;
                }, o102.default.Table.prototype.clearRows = function() {
                    delete this.rows, this.rows = [];
                }, o102.default.Table.prototype.addColumn = function(e) {
                    var t = e || null;
                    this.columns.push(t);
                }, o102.default.Table.prototype.getColumnCount = function() {
                    return this.columns.length;
                }, o102.default.Table.prototype.getRowCount = function() {
                    return this.rows.length;
                }, o102.default.Table.prototype.removeTokens = function(e, t) {
                    for(var r = [], n = 0; n < e.length; n++)r.push(e.charAt(n).replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"));
                    var o = new RegExp(r.join("|"), "g");
                    if (void 0 === t) for(var i = 0; i < this.columns.length; i++)for(var a = 0; a < this.rows.length; a++){
                        var s = this.rows[a].arr[i];
                        s = s.replace(o, ""), this.rows[a].arr[i] = s, this.rows[a].obj[this.columns[i]] = s;
                    }
                    else if ("string" == typeof t) for(var l = 0; l < this.rows.length; l++){
                        var u = this.rows[l].obj[t];
                        u = u.replace(o, ""), this.rows[l].obj[t] = u;
                        var c = this.columns.indexOf(t);
                        this.rows[l].arr[c] = u;
                    }
                    else for(var d = 0; d < this.rows.length; d++){
                        var f = this.rows[d].arr[t];
                        f = f.replace(o, ""), this.rows[d].arr[t] = f, this.rows[d].obj[this.columns[t]] = f;
                    }
                }, o102.default.Table.prototype.trim = function(e) {
                    var t = new RegExp(" ", "g");
                    if (void 0 === e) for(var r = 0; r < this.columns.length; r++)for(var n = 0; n < this.rows.length; n++){
                        var o = this.rows[n].arr[r];
                        o = o.replace(t, ""), this.rows[n].arr[r] = o, this.rows[n].obj[this.columns[r]] = o;
                    }
                    else if ("string" == typeof e) for(var i = 0; i < this.rows.length; i++){
                        var a = this.rows[i].obj[e];
                        a = a.replace(t, ""), this.rows[i].obj[e] = a;
                        var s = this.columns.indexOf(e);
                        this.rows[i].arr[s] = a;
                    }
                    else for(var l = 0; l < this.rows.length; l++){
                        var u = this.rows[l].arr[e];
                        u = u.replace(t, ""), this.rows[l].arr[e] = u, this.rows[l].obj[this.columns[e]] = u;
                    }
                }, o102.default.Table.prototype.removeColumn = function(e) {
                    var t, r;
                    "string" == typeof e ? (t = e, r = this.columns.indexOf(e)) : (r = e, t = this.columns[e]);
                    var n = this.columns.splice(r + 1, this.columns.length);
                    this.columns.pop(), this.columns = this.columns.concat(n);
                    for(var o = 0; o < this.rows.length; o++){
                        var i = this.rows[o].arr, a = i.splice(r + 1, i.length);
                        i.pop(), this.rows[o].arr = i.concat(a), delete this.rows[o].obj[t];
                    }
                }, o102.default.Table.prototype.set = function(e, t, r) {
                    this.rows[e].set(t, r);
                }, o102.default.Table.prototype.setNum = function(e, t, r) {
                    this.rows[e].setNum(t, r);
                }, o102.default.Table.prototype.setString = function(e, t, r) {
                    this.rows[e].setString(t, r);
                }, o102.default.Table.prototype.get = function(e, t) {
                    return this.rows[e].get(t);
                }, o102.default.Table.prototype.getNum = function(e, t) {
                    return this.rows[e].getNum(t);
                }, o102.default.Table.prototype.getString = function(e, t) {
                    return this.rows[e].getString(t);
                }, o102.default.Table.prototype.getObject = function(e) {
                    for(var t, r = {
                    }, n = 0; n < this.rows.length; n++)if (t = this.rows[n].obj, "string" == typeof e) {
                        if (!(0 <= this.columns.indexOf(e))) throw new Error('This table has no column named "'.concat(e, '"'));
                        r[t[e]] = t;
                    } else r[n] = this.rows[n].obj;
                    return r;
                }, o102.default.Table.prototype.getArray = function() {
                    for(var e = [], t = 0; t < this.rows.length; t++)e.push(this.rows[t].arr);
                    return e;
                };
                var i62 = o102.default;
                r218.default = i62;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.join": 157,
                "core-js/modules/es.array.splice": 162,
                "core-js/modules/es.regexp.constructor": 177,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.match": 184,
                "core-js/modules/es.string.replace": 186,
                "core-js/modules/es.string.trim": 190
            }
        ],
        288: [
            function(e459, t285, r219) {
                "use strict";
                e459("core-js/modules/es.array.index-of"), e459("core-js/modules/es.object.to-string"), e459("core-js/modules/es.regexp.exec"), e459("core-js/modules/es.regexp.to-string"), e459("core-js/modules/es.string.split"), Object.defineProperty(r219, "__esModule", {
                    value: !0
                }), r219.default = void 0;
                var n145, o103 = (n145 = e459("../core/main")) && n145.__esModule ? n145 : {
                    default: n145
                };
                o103.default.TableRow = function(e, t) {
                    var r = [], n = {
                    };
                    e && (t = t || ",", r = e.split(t));
                    for(var o = 0; o < r.length; o++){
                        var i = o, a = r[o];
                        n[i] = a;
                    }
                    this.arr = r, this.obj = n, this.table = null;
                }, o103.default.TableRow.prototype.set = function(e, t) {
                    if ("string" == typeof e) {
                        var r = this.table.columns.indexOf(e);
                        if (!(0 <= r)) throw new Error('This table has no column named "'.concat(e, '"'));
                        this.obj[e] = t, this.arr[r] = t;
                    } else {
                        if (!(e < this.table.columns.length)) throw new Error("Column #".concat(e, " is out of the range of this table"));
                        this.arr[e] = t;
                        var n = this.table.columns[e];
                        this.obj[n] = t;
                    }
                }, o103.default.TableRow.prototype.setNum = function(e, t) {
                    var r = parseFloat(t);
                    this.set(e, r);
                }, o103.default.TableRow.prototype.setString = function(e, t) {
                    var r = t.toString();
                    this.set(e, r);
                }, o103.default.TableRow.prototype.get = function(e) {
                    return "string" == typeof e ? this.obj[e] : this.arr[e];
                }, o103.default.TableRow.prototype.getNum = function(e) {
                    var t;
                    if ("NaN" === (t = "string" == typeof e ? parseFloat(this.obj[e]) : parseFloat(this.arr[e])).toString()) throw "Error: ".concat(this.obj[e], " is NaN (Not a Number)");
                    return t;
                }, o103.default.TableRow.prototype.getString = function(e) {
                    return "string" == typeof e ? this.obj[e].toString() : this.arr[e].toString();
                };
                var i = o103.default;
                r219.default = i;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.split": 188
            }
        ],
        289: [
            function(e460, t286, r220) {
                "use strict";
                e460("core-js/modules/es.symbol"), e460("core-js/modules/es.symbol.description"), e460("core-js/modules/es.symbol.iterator"), e460("core-js/modules/es.array.iterator"), e460("core-js/modules/es.number.constructor"), e460("core-js/modules/es.object.to-string"), e460("core-js/modules/es.regexp.exec"), e460("core-js/modules/es.string.iterator"), e460("core-js/modules/es.string.replace"), e460("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r220, "__esModule", {
                    value: !0
                }), r220.default = void 0;
                var n146, s37 = (n146 = e460("../core/main")) && n146.__esModule ? n146 : {
                    default: n146
                };
                function o104(e) {
                    for(var t = [], r = 0; r < e.length; r++)t.push(new s37.default.XML(e[r]));
                    return t;
                }
                s37.default.XML = function(e) {
                    if (e) this.DOM = e;
                    else {
                        var t = document.implementation.createDocument(null, "doc");
                        this.DOM = t.createElement("root");
                    }
                }, s37.default.XML.prototype.getParent = function() {
                    return new s37.default.XML(this.DOM.parentElement);
                }, s37.default.XML.prototype.getName = function() {
                    return this.DOM.tagName;
                }, s37.default.XML.prototype.setName = function(e) {
                    var t = this.DOM.innerHTML, r = this.DOM.attributes, n = document.implementation.createDocument(null, "default").createElement(e);
                    n.innerHTML = t;
                    for(var o = 0; o < r.length; o++)n.setAttribute(r[o].nodeName, r.nodeValue);
                    this.DOM = n;
                }, s37.default.XML.prototype.hasChildren = function() {
                    return 0 < this.DOM.children.length;
                }, s37.default.XML.prototype.listChildren = function() {
                    for(var e = [], t = 0; t < this.DOM.childNodes.length; t++)e.push(this.DOM.childNodes[t].nodeName);
                    return e;
                }, s37.default.XML.prototype.getChildren = function(e) {
                    return o104(e ? this.DOM.getElementsByTagName(e) : this.DOM.children);
                }, s37.default.XML.prototype.getChild = function(e) {
                    if ("string" != typeof e) return new s37.default.XML(this.DOM.children[e]);
                    var t = !0, r = !1, n = void 0;
                    try {
                        for(var o, i = this.DOM.children[Symbol.iterator](); !(t = (o = i.next()).done); t = !0){
                            var a = o.value;
                            if (a.tagName === e) return new s37.default.XML(a);
                        }
                    } catch (e461) {
                        r = !0, n = e461;
                    } finally{
                        try {
                            t || null == i.return || i.return();
                        } finally{
                            if (r) throw n;
                        }
                    }
                }, s37.default.XML.prototype.addChild = function(e) {
                    e instanceof s37.default.XML && this.DOM.appendChild(e.DOM);
                }, s37.default.XML.prototype.removeChild = function(e) {
                    var t = -1;
                    if ("string" == typeof e) {
                        for(var r = 0; r < this.DOM.children.length; r++)if (this.DOM.children[r].tagName === e) {
                            t = r;
                            break;
                        }
                    } else t = e;
                    -1 !== t && this.DOM.removeChild(this.DOM.children[t]);
                }, s37.default.XML.prototype.getAttributeCount = function() {
                    return this.DOM.attributes.length;
                }, s37.default.XML.prototype.listAttributes = function() {
                    var e = [], t = !0, r = !1, n = void 0;
                    try {
                        for(var o, i = this.DOM.attributes[Symbol.iterator](); !(t = (o = i.next()).done); t = !0){
                            var a = o.value;
                            e.push(a.nodeName);
                        }
                    } catch (e462) {
                        r = !0, n = e462;
                    } finally{
                        try {
                            t || null == i.return || i.return();
                        } finally{
                            if (r) throw n;
                        }
                    }
                    return e;
                }, s37.default.XML.prototype.hasAttribute = function(e) {
                    var t = {
                    }, r = !0, n = !1, o = void 0;
                    try {
                        for(var i, a = this.DOM.attributes[Symbol.iterator](); !(r = (i = a.next()).done); r = !0){
                            var s = i.value;
                            t[s.nodeName] = s.nodeValue;
                        }
                    } catch (e463) {
                        n = !0, o = e463;
                    } finally{
                        try {
                            r || null == a.return || a.return();
                        } finally{
                            if (n) throw o;
                        }
                    }
                    return !!t[e];
                }, s37.default.XML.prototype.getNum = function(e, t) {
                    var r = {
                    }, n = !0, o = !1, i = void 0;
                    try {
                        for(var a, s = this.DOM.attributes[Symbol.iterator](); !(n = (a = s.next()).done); n = !0){
                            var l = a.value;
                            r[l.nodeName] = l.nodeValue;
                        }
                    } catch (e464) {
                        o = !0, i = e464;
                    } finally{
                        try {
                            n || null == s.return || s.return();
                        } finally{
                            if (o) throw i;
                        }
                    }
                    return Number(r[e]) || t || 0;
                }, s37.default.XML.prototype.getString = function(e, t) {
                    var r = {
                    }, n = !0, o = !1, i = void 0;
                    try {
                        for(var a, s = this.DOM.attributes[Symbol.iterator](); !(n = (a = s.next()).done); n = !0){
                            var l = a.value;
                            r[l.nodeName] = l.nodeValue;
                        }
                    } catch (e465) {
                        o = !0, i = e465;
                    } finally{
                        try {
                            n || null == s.return || s.return();
                        } finally{
                            if (o) throw i;
                        }
                    }
                    return r[e] ? String(r[e]) : t || null;
                }, s37.default.XML.prototype.setAttribute = function(e, t) {
                    this.DOM.setAttribute(e, t);
                }, s37.default.XML.prototype.getContent = function(e) {
                    return this.DOM.textContent.replace(/\s\s+/g, ",") || e || null;
                }, s37.default.XML.prototype.setContent = function(e) {
                    this.DOM.children.length || (this.DOM.textContent = e);
                }, s37.default.XML.prototype.serialize = function() {
                    return (new XMLSerializer).serializeToString(this.DOM);
                };
                var i63 = s37.default;
                r220.default = i63;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.number.constructor": 167,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.replace": 186,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        290: [
            function(e466, t287, r221) {
                "use strict";
                e466("core-js/modules/es.array.includes"), e466("core-js/modules/es.array.index-of"), e466("core-js/modules/es.array.map"), e466("core-js/modules/es.array.slice"), e466("core-js/modules/es.math.hypot"), e466("core-js/modules/es.number.constructor"), e466("core-js/modules/es.string.includes"), Object.defineProperty(r221, "__esModule", {
                    value: !0
                }), r221.default = void 0;
                var n147, s38 = (n147 = e466("../core/main")) && n147.__esModule ? n147 : {
                    default: n147
                };
                function o105() {
                    if ("function" == typeof Math.hypot) return Math.hypot.apply(null, arguments);
                    for(var e = arguments.length, t = [], r = 0, n = 0; n < e; n++){
                        var o = arguments[n];
                        if ((o = +o) === 1 / 0 || o === -1 / 0) return 1 / 0;
                        r < (o = Math.abs(o)) && (r = o), t[n] = o;
                    }
                    0 === r && (r = 1);
                    for(var i = 0, a = 0, s = 0; s < e; s++){
                        var l = t[s] / r, u = l * l - a, c = i + u;
                        a = c - i - u, i = c;
                    }
                    return Math.sqrt(i) * r;
                }
                s38.default.prototype.abs = Math.abs, s38.default.prototype.ceil = Math.ceil, s38.default.prototype.constrain = function(e, t, r) {
                    return s38.default._validateParameters("constrain", arguments), Math.max(Math.min(e, r), t);
                }, s38.default.prototype.dist = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    return s38.default._validateParameters("dist", t), 4 === t.length ? o105(t[2] - t[0], t[3] - t[1]) : 6 === t.length ? o105(t[3] - t[0], t[4] - t[1], t[5] - t[2]) : void 0;
                }, s38.default.prototype.exp = Math.exp, s38.default.prototype.floor = Math.floor, s38.default.prototype.lerp = function(e, t, r) {
                    return s38.default._validateParameters("lerp", arguments), r * (t - e) + e;
                }, s38.default.prototype.log = Math.log, s38.default.prototype.mag = function(e, t) {
                    return s38.default._validateParameters("mag", arguments), o105(e, t);
                }, s38.default.prototype.map = function(e, t, r, n, o, i) {
                    s38.default._validateParameters("map", arguments);
                    var a = (e - t) / (r - t) * (o - n) + n;
                    return i ? n < o ? this.constrain(a, n, o) : this.constrain(a, o, n) : a;
                }, s38.default.prototype.max = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    return t[0] instanceof Array ? Math.max.apply(null, t[0]) : Math.max.apply(null, t);
                }, s38.default.prototype.min = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    return t[0] instanceof Array ? Math.min.apply(null, t[0]) : Math.min.apply(null, t);
                }, s38.default.prototype.norm = function(e, t, r) {
                    return s38.default._validateParameters("norm", arguments), this.map(e, t, r, 0, 1);
                }, s38.default.prototype.pow = Math.pow, s38.default.prototype.round = function(e, t) {
                    return t ? Number(Math.round(e + "e" + t) + "e-" + t) : Math.round(e);
                }, s38.default.prototype.sq = function(e) {
                    return e * e;
                }, s38.default.prototype.sqrt = Math.sqrt, s38.default.prototype.fract = function(e) {
                    s38.default._validateParameters("fract", arguments);
                    var t = 0, r = Number(e);
                    if (isNaN(r) || Math.abs(r) === 1 / 0) return r;
                    if (r < 0 && (r = -r, t = 1), !String(r).includes(".") || String(r).includes("e")) return r < 1 ? Math.abs(t - r) : 0;
                    var n = String(r);
                    return n = Number("0" + n.slice(n.indexOf("."))), Math.abs(t - n);
                };
                var i64 = s38.default;
                r221.default = i64;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.math.hypot": 165,
                "core-js/modules/es.number.constructor": 167,
                "core-js/modules/es.string.includes": 182
            }
        ],
        291: [
            function(e467, t288, r222) {
                "use strict";
                Object.defineProperty(r222, "__esModule", {
                    value: !0
                }), r222.default = void 0;
                var n, o = (n = e467("../core/main")) && n.__esModule ? n : {
                    default: n
                };
                o.default.prototype.createVector = function(e, t, r) {
                    return this instanceof o.default ? new o.default.Vector(this, arguments) : new o.default.Vector(e, t, r);
                };
                var i = o.default;
                r222.default = i;
            },
            {
                "../core/main": 260
            }
        ],
        292: [
            function(e468, t289, r223) {
                "use strict";
                Object.defineProperty(r223, "__esModule", {
                    value: !0
                }), r223.default = void 0;
                var n148, o106 = (n148 = e468("../core/main")) && n148.__esModule ? n148 : {
                    default: n148
                };
                function b(e) {
                    return 0.5 * (1 - Math.cos(e * Math.PI));
                }
                var _, x = 4095, w = 4, S = 0.5;
                o106.default.prototype.noise = function(e) {
                    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;
                    if (null == _) {
                        _ = new Array(4096);
                        for(var n = 0; n < 4096; n++)_[n] = Math.random();
                    }
                    e < 0 && (e = -e), t < 0 && (t = -t), r < 0 && (r = -r);
                    for(var o, i, a, s, l, u = Math.floor(e), c = Math.floor(t), d = Math.floor(r), f = e - u, h = t - c, p = r - d, y = 0, m = 0.5, g = 0; g < w; g++){
                        var v = u + (c << 4) + (d << 8);
                        o = b(f), i = b(h), a = _[v & x], a += o * (_[v + 1 & x] - a), s = _[v + 16 & x], a += i * ((s += o * (_[v + 16 + 1 & x] - s)) - a), s = _[(v += 256) & x], s += o * (_[v + 1 & x] - s), l = _[v + 16 & x], s += i * ((l += o * (_[v + 16 + 1 & x] - l)) - s), y += (a += b(p) * (s - a)) * m, m *= S, u <<= 1, c <<= 1, d <<= 1, 1 <= (f *= 2) && (u++, f--), 1 <= (h *= 2) && (c++, h--), 1 <= (p *= 2) && (d++, p--);
                    }
                    return y;
                }, o106.default.prototype.noiseDetail = function(e, t) {
                    0 < e && (w = e), 0 < t && (S = t);
                }, o106.default.prototype.noiseSeed = function(e469) {
                    var t, r, n, o = (n = 4294967296, {
                        setSeed: function(e) {
                            r = t = (null == e ? Math.random() * n : e) >>> 0;
                        },
                        getSeed: function() {
                            return t;
                        },
                        rand: function() {
                            return (r = (1664525 * r + 1013904223) % n) / n;
                        }
                    });
                    o.setSeed(e469), _ = new Array(4096);
                    for(var i = 0; i < 4096; i++)_[i] = o.rand();
                };
                var i65 = o106.default;
                r223.default = i65;
            },
            {
                "../core/main": 260
            }
        ],
        293: [
            function(e470, t290, r224) {
                "use strict";
                function a47(e471) {
                    return (a47 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e471);
                }
                e470("core-js/modules/es.array.concat"), e470("core-js/modules/es.array.every"), e470("core-js/modules/es.array.slice"), e470("core-js/modules/es.array.some"), e470("core-js/modules/es.math.sign"), e470("core-js/modules/es.number.constructor"), e470("core-js/modules/es.number.is-finite"), e470("core-js/modules/es.object.to-string"), e470("core-js/modules/es.regexp.to-string"), e470("core-js/modules/es.string.sub"), Object.defineProperty(r224, "__esModule", {
                    value: !0
                }), r224.default = void 0;
                var n149, l = (n149 = e470("../core/main")) && n149.__esModule ? n149 : {
                    default: n149
                }, i66 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a47(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s39();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e470("../core/constants"));
                function s39() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s39 = function() {
                        return e;
                    }, e;
                }
                l.default.Vector = function(e, t, r) {
                    var n, o, i;
                    i = e instanceof l.default ? (this.p5 = e, n = t[0] || 0, o = t[1] || 0, t[2] || 0) : (n = e || 0, o = t || 0, r || 0), this.x = n, this.y = o, this.z = i;
                }, l.default.Vector.prototype.toString = function() {
                    return "p5.Vector Object : [".concat(this.x, ", ").concat(this.y, ", ").concat(this.z, "]");
                }, l.default.Vector.prototype.set = function(e, t, r) {
                    return e instanceof l.default.Vector ? (this.x = e.x || 0, this.y = e.y || 0, this.z = e.z || 0) : e instanceof Array ? (this.x = e[0] || 0, this.y = e[1] || 0, this.z = e[2] || 0) : (this.x = e || 0, this.y = t || 0, this.z = r || 0), this;
                }, l.default.Vector.prototype.copy = function() {
                    return this.p5 ? new l.default.Vector(this.p5, [
                        this.x,
                        this.y,
                        this.z
                    ]) : new l.default.Vector(this.x, this.y, this.z);
                }, l.default.Vector.prototype.add = function(e, t, r) {
                    return e instanceof l.default.Vector ? (this.x += e.x || 0, this.y += e.y || 0, this.z += e.z || 0) : e instanceof Array ? (this.x += e[0] || 0, this.y += e[1] || 0, this.z += e[2] || 0) : (this.x += e || 0, this.y += t || 0, this.z += r || 0), this;
                };
                function u(e, t) {
                    return 0 !== e && (this.x = this.x % e), 0 !== t && (this.y = this.y % t), this;
                }
                function c(e, t, r) {
                    return 0 !== e && (this.x = this.x % e), 0 !== t && (this.y = this.y % t), 0 !== r && (this.z = this.z % r), this;
                }
                l.default.Vector.prototype.rem = function(e472, t, r) {
                    if (e472 instanceof l.default.Vector) {
                        if (Number.isFinite(e472.x) && Number.isFinite(e472.y) && Number.isFinite(e472.z)) {
                            var n = parseFloat(e472.x), o = parseFloat(e472.y), i = parseFloat(e472.z);
                            c.call(this, n, o, i);
                        }
                    } else if (e472 instanceof Array) e472.every(function(e) {
                        return Number.isFinite(e);
                    }) && (2 === e472.length && u.call(this, e472[0], e472[1]), 3 === e472.length && c.call(this, e472[0], e472[1], e472[2]));
                    else if (1 === arguments.length) {
                        if (Number.isFinite(e472) && 0 !== e472) return this.x = this.x % e472, this.y = this.y % e472, this.z = this.z % e472, this;
                    } else if (2 === arguments.length) {
                        var a = Array.prototype.slice.call(arguments);
                        a.every(function(e) {
                            return Number.isFinite(e);
                        }) && 2 === a.length && u.call(this, a[0], a[1]);
                    } else if (3 === arguments.length) {
                        var s = Array.prototype.slice.call(arguments);
                        s.every(function(e) {
                            return Number.isFinite(e);
                        }) && 3 === s.length && c.call(this, s[0], s[1], s[2]);
                    }
                }, l.default.Vector.prototype.sub = function(e, t, r) {
                    return e instanceof l.default.Vector ? (this.x -= e.x || 0, this.y -= e.y || 0, this.z -= e.z || 0) : e instanceof Array ? (this.x -= e[0] || 0, this.y -= e[1] || 0, this.z -= e[2] || 0) : (this.x -= e || 0, this.y -= t || 0, this.z -= r || 0), this;
                }, l.default.Vector.prototype.mult = function(e473, t, r) {
                    if (e473 instanceof l.default.Vector) return Number.isFinite(e473.x) && Number.isFinite(e473.y) && Number.isFinite(e473.z) && "number" == typeof e473.x && "number" == typeof e473.y && "number" == typeof e473.z ? (this.x *= e473.x, this.y *= e473.y, this.z *= e473.z) : console.warn("p5.Vector.prototype.mult:", "x contains components that are either undefined or not finite numbers"), this;
                    if (e473 instanceof Array) return e473.every(function(e) {
                        return Number.isFinite(e);
                    }) && e473.every(function(e) {
                        return "number" == typeof e;
                    }) ? 1 === e473.length ? (this.x *= e473[0], this.y *= e473[0], this.z *= e473[0]) : 2 === e473.length ? (this.x *= e473[0], this.y *= e473[1]) : 3 === e473.length && (this.x *= e473[0], this.y *= e473[1], this.z *= e473[2]) : console.warn("p5.Vector.prototype.mult:", "x contains elements that are either undefined or not finite numbers"), this;
                    var n = Array.prototype.slice.call(arguments);
                    return n.every(function(e) {
                        return Number.isFinite(e);
                    }) && n.every(function(e) {
                        return "number" == typeof e;
                    }) ? (1 === arguments.length && (this.x *= e473, this.y *= e473, this.z *= e473), 2 === arguments.length && (this.x *= e473, this.y *= t), 3 === arguments.length && (this.x *= e473, this.y *= t, this.z *= r)) : console.warn("p5.Vector.prototype.mult:", "x, y, or z arguments are either undefined or not a finite number"), this;
                }, l.default.Vector.prototype.div = function(e474, t, r) {
                    if (e474 instanceof l.default.Vector) {
                        if (Number.isFinite(e474.x) && Number.isFinite(e474.y) && Number.isFinite(e474.z) && "number" == typeof e474.x && "number" == typeof e474.y && "number" == typeof e474.z) {
                            if (0 === e474.x || 0 === e474.y || 0 === e474.z) return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
                            this.x /= e474.x, this.y /= e474.y, this.z /= e474.z;
                        } else console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");
                        return this;
                    }
                    if (e474 instanceof Array) {
                        if (e474.every(function(e) {
                            return Number.isFinite(e);
                        }) && e474.every(function(e) {
                            return "number" == typeof e;
                        })) {
                            if (e474.some(function(e) {
                                return 0 === e;
                            })) return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
                            1 === e474.length ? (this.x /= e474[0], this.y /= e474[0], this.z /= e474[0]) : 2 === e474.length ? (this.x /= e474[0], this.y /= e474[1]) : 3 === e474.length && (this.x /= e474[0], this.y /= e474[1], this.z /= e474[2]);
                        } else console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");
                        return this;
                    }
                    var n = Array.prototype.slice.call(arguments);
                    if (n.every(function(e) {
                        return Number.isFinite(e);
                    }) && n.every(function(e) {
                        return "number" == typeof e;
                    })) {
                        if (n.some(function(e) {
                            return 0 === e;
                        })) return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
                        1 === arguments.length && (this.x /= e474, this.y /= e474, this.z /= e474), 2 === arguments.length && (this.x /= e474, this.y /= t), 3 === arguments.length && (this.x /= e474, this.y /= t, this.z /= r);
                    } else console.warn("p5.Vector.prototype.div:", "x, y, or z arguments are either undefined or not a finite number");
                    return this;
                }, l.default.Vector.prototype.mag = function() {
                    return Math.sqrt(this.magSq());
                }, l.default.Vector.prototype.magSq = function() {
                    var e = this.x, t = this.y, r = this.z;
                    return e * e + t * t + r * r;
                }, l.default.Vector.prototype.dot = function(e, t, r) {
                    return e instanceof l.default.Vector ? this.dot(e.x, e.y, e.z) : this.x * (e || 0) + this.y * (t || 0) + this.z * (r || 0);
                }, l.default.Vector.prototype.cross = function(e) {
                    var t = this.y * e.z - this.z * e.y, r = this.z * e.x - this.x * e.z, n = this.x * e.y - this.y * e.x;
                    return this.p5 ? new l.default.Vector(this.p5, [
                        t,
                        r,
                        n
                    ]) : new l.default.Vector(t, r, n);
                }, l.default.Vector.prototype.dist = function(e) {
                    return e.copy().sub(this).mag();
                }, l.default.Vector.prototype.normalize = function() {
                    var e = this.mag();
                    return 0 !== e && this.mult(1 / e), this;
                }, l.default.Vector.prototype.limit = function(e) {
                    var t = this.magSq();
                    return e * e < t && this.div(Math.sqrt(t)).mult(e), this;
                }, l.default.Vector.prototype.setMag = function(e) {
                    return this.normalize().mult(e);
                }, l.default.Vector.prototype.heading = function() {
                    var e = Math.atan2(this.y, this.x);
                    return this.p5 ? this.p5._fromRadians(e) : e;
                }, l.default.Vector.prototype.setHeading = function(e) {
                    var t = this.mag();
                    return this.x = t * Math.cos(e), this.y = t * Math.sin(e), this;
                }, l.default.Vector.prototype.rotate = function(e) {
                    var t = this.heading() + e;
                    this.p5 && (t = this.p5._toRadians(t));
                    var r = this.mag();
                    return this.x = Math.cos(t) * r, this.y = Math.sin(t) * r, this;
                }, l.default.Vector.prototype.angleBetween = function(e) {
                    var t, r = this.dot(e) / (this.mag() * e.mag());
                    return t = Math.acos(Math.min(1, Math.max(-1, r))), t *= Math.sign(this.cross(e).z || 1), this.p5 && (t = this.p5._fromRadians(t)), t;
                }, l.default.Vector.prototype.lerp = function(e, t, r, n) {
                    return e instanceof l.default.Vector ? this.lerp(e.x, e.y, e.z, t) : (this.x += (e - this.x) * n || 0, this.y += (t - this.y) * n || 0, this.z += (r - this.z) * n || 0, this);
                }, l.default.Vector.prototype.reflect = function(e) {
                    return e.normalize(), this.sub(e.mult(2 * this.dot(e)));
                }, l.default.Vector.prototype.array = function() {
                    return [
                        this.x || 0,
                        this.y || 0,
                        this.z || 0
                    ];
                }, l.default.Vector.prototype.equals = function(e, t, r) {
                    var n, o, i;
                    return i = e instanceof l.default.Vector ? (n = e.x || 0, o = e.y || 0, e.z || 0) : e instanceof Array ? (n = e[0] || 0, o = e[1] || 0, e[2] || 0) : (n = e || 0, o = t || 0, r || 0), this.x === n && this.y === o && this.z === i;
                }, l.default.Vector.fromAngle = function(e, t) {
                    return void 0 === t && (t = 1), new l.default.Vector(t * Math.cos(e), t * Math.sin(e), 0);
                }, l.default.Vector.fromAngles = function(e, t, r) {
                    void 0 === r && (r = 1);
                    var n = Math.cos(t), o = Math.sin(t), i = Math.cos(e), a = Math.sin(e);
                    return new l.default.Vector(r * a * o, -r * i, r * a * n);
                }, l.default.Vector.random2D = function() {
                    return this.fromAngle(Math.random() * i66.TWO_PI);
                }, l.default.Vector.random3D = function() {
                    var e = Math.random() * i66.TWO_PI, t = 2 * Math.random() - 1, r = Math.sqrt(1 - t * t), n = r * Math.cos(e), o = r * Math.sin(e);
                    return new l.default.Vector(n, o, t);
                }, l.default.Vector.add = function(e, t, r) {
                    return r ? r.set(e) : (r = e.copy(), 3 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.add")), r.add(t), r;
                }, l.default.Vector.rem = function(e, t) {
                    if (e instanceof l.default.Vector && t instanceof l.default.Vector) {
                        var r = e.copy();
                        return r.rem(t), r;
                    }
                }, l.default.Vector.sub = function(e, t, r) {
                    return r ? r.set(e) : (r = e.copy(), 3 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.sub")), r.sub(t), r;
                }, l.default.Vector.mult = function(e, t, r) {
                    return r ? r.set(e) : (r = e.copy(), 3 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.mult")), r.mult(t), r;
                }, l.default.Vector.rotate = function(e, t, r) {
                    return 2 === arguments.length ? r = e.copy() : (r instanceof l.default.Vector || l.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.rotate"), r.set(e)), r.rotate(t), r;
                }, l.default.Vector.div = function(e, t, r) {
                    return r ? r.set(e) : (r = e.copy(), 3 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.div")), r.div(t), r;
                }, l.default.Vector.dot = function(e, t) {
                    return e.dot(t);
                }, l.default.Vector.cross = function(e, t) {
                    return e.cross(t);
                }, l.default.Vector.dist = function(e, t) {
                    return e.dist(t);
                }, l.default.Vector.lerp = function(e, t, r, n) {
                    return n ? n.set(e) : (n = e.copy(), 4 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.lerp")), n.lerp(t, r), n;
                }, l.default.Vector.mag = function(e) {
                    var t = e.x, r = e.y, n = e.z, o = t * t + r * r + n * n;
                    return Math.sqrt(o);
                }, l.default.Vector.normalize = function(e, t) {
                    return arguments.length < 2 ? t = e.copy() : (t instanceof l.default.Vector || l.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.normalize"), t.set(e)), t.normalize();
                };
                var o107 = l.default.Vector;
                r224.default = o107;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.every": 149,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.array.some": 161,
                "core-js/modules/es.math.sign": 166,
                "core-js/modules/es.number.constructor": 167,
                "core-js/modules/es.number.is-finite": 168,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.sub": 189
            }
        ],
        294: [
            function(e475, t291, r225) {
                "use strict";
                Object.defineProperty(r225, "__esModule", {
                    value: !0
                }), r225.default = void 0;
                var n150, o108 = (n150 = e475("../core/main")) && n150.__esModule ? n150 : {
                    default: n150
                };
                var i67 = "_lcg_random_state", a = 4294967296, s = 0;
                o108.default.prototype._lcg = function(e) {
                    return this[e] = (1664525 * this[e] + 1013904223) % a, this[e] / a;
                }, o108.default.prototype._lcgSetSeed = function(e, t) {
                    this[e] = (null == t ? Math.random() * a : t) >>> 0;
                }, o108.default.prototype.randomSeed = function(e) {
                    this._lcgSetSeed(i67, e), this._gaussian_previous = !1;
                }, o108.default.prototype.random = function(e, t) {
                    var r;
                    if (o108.default._validateParameters("random", arguments), r = null != this[i67] ? this._lcg(i67) : Math.random(), void 0 === e) return r;
                    if (void 0 === t) return e instanceof Array ? e[Math.floor(r * e.length)] : r * e;
                    if (t < e) {
                        var n = e;
                        e = t, t = n;
                    }
                    return r * (t - e) + e;
                }, o108.default.prototype.randomGaussian = function(e) {
                    var t, r, n, o, i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1;
                    if (this._gaussian_previous) t = s, this._gaussian_previous = !1;
                    else {
                        for(; 1 <= (o = (r = this.random(2) - 1) * r + (n = this.random(2) - 1) * n););
                        t = r * (o = Math.sqrt(-2 * Math.log(o) / o)), s = n * o, this._gaussian_previous = !0;
                    }
                    return t * i + (e || 0);
                };
                var l = o108.default;
                r225.default = l;
            },
            {
                "../core/main": 260
            }
        ],
        295: [
            function(e476, t292, r226) {
                "use strict";
                function a(e477) {
                    return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e477);
                }
                Object.defineProperty(r226, "__esModule", {
                    value: !0
                }), r226.default = void 0;
                var n151, o109 = (n151 = e476("../core/main")) && n151.__esModule ? n151 : {
                    default: n151
                }, i68 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e476("../core/constants"));
                function s() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s = function() {
                        return e;
                    }, e;
                }
                o109.default.prototype._angleMode = i68.RADIANS, o109.default.prototype.acos = function(e) {
                    return this._fromRadians(Math.acos(e));
                }, o109.default.prototype.asin = function(e) {
                    return this._fromRadians(Math.asin(e));
                }, o109.default.prototype.atan = function(e) {
                    return this._fromRadians(Math.atan(e));
                }, o109.default.prototype.atan2 = function(e, t) {
                    return this._fromRadians(Math.atan2(e, t));
                }, o109.default.prototype.cos = function(e) {
                    return Math.cos(this._toRadians(e));
                }, o109.default.prototype.sin = function(e) {
                    return Math.sin(this._toRadians(e));
                }, o109.default.prototype.tan = function(e) {
                    return Math.tan(this._toRadians(e));
                }, o109.default.prototype.degrees = function(e) {
                    return e * i68.RAD_TO_DEG;
                }, o109.default.prototype.radians = function(e) {
                    return e * i68.DEG_TO_RAD;
                }, o109.default.prototype.angleMode = function(e) {
                    e !== i68.DEGREES && e !== i68.RADIANS || (this._angleMode = e);
                }, o109.default.prototype._toRadians = function(e) {
                    return this._angleMode === i68.DEGREES ? e * i68.DEG_TO_RAD : e;
                }, o109.default.prototype._toDegrees = function(e) {
                    return this._angleMode === i68.RADIANS ? e * i68.RAD_TO_DEG : e;
                }, o109.default.prototype._fromRadians = function(e) {
                    return this._angleMode === i68.DEGREES ? e * i68.RAD_TO_DEG : e;
                };
                var l = o109.default;
                r226.default = l;
            },
            {
                "../core/constants": 250,
                "../core/main": 260
            }
        ],
        296: [
            function(e478, t293, r227) {
                "use strict";
                Object.defineProperty(r227, "__esModule", {
                    value: !0
                }), r227.default = void 0;
                var n152, o = (n152 = e478("../core/main")) && n152.__esModule ? n152 : {
                    default: n152
                };
                o.default.prototype.textAlign = function(e, t) {
                    var r;
                    return o.default._validateParameters("textAlign", arguments), (r = this._renderer).textAlign.apply(r, arguments);
                }, o.default.prototype.textLeading = function(e) {
                    var t;
                    return o.default._validateParameters("textLeading", arguments), (t = this._renderer).textLeading.apply(t, arguments);
                }, o.default.prototype.textSize = function(e) {
                    var t;
                    return o.default._validateParameters("textSize", arguments), (t = this._renderer).textSize.apply(t, arguments);
                }, o.default.prototype.textStyle = function(e) {
                    var t;
                    return o.default._validateParameters("textStyle", arguments), (t = this._renderer).textStyle.apply(t, arguments);
                }, o.default.prototype.textWidth = function() {
                    for(var e, t = arguments.length, r = new Array(t), n = 0; n < t; n++)r[n] = arguments[n];
                    return r[0] += "", o.default._validateParameters("textWidth", r), 0 === r[0].length ? 0 : (e = this._renderer).textWidth.apply(e, r);
                }, o.default.prototype.textAscent = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    return o.default._validateParameters("textAscent", t), this._renderer.textAscent();
                }, o.default.prototype.textDescent = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    return o.default._validateParameters("textDescent", t), this._renderer.textDescent();
                }, o.default.prototype._updateTextMetrics = function() {
                    return this._renderer._updateTextMetrics();
                };
                var i = o.default;
                r227.default = i;
            },
            {
                "../core/main": 260
            }
        ],
        297: [
            function(e479, t294, r228) {
                "use strict";
                function a48(e480) {
                    return (a48 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e480);
                }
                e479("core-js/modules/es.array.concat"), e479("core-js/modules/es.array.includes"), e479("core-js/modules/es.array.last-index-of"), e479("core-js/modules/es.regexp.exec"), e479("core-js/modules/es.string.split"), Object.defineProperty(r228, "__esModule", {
                    value: !0
                }), r228.default = void 0;
                var n153, f = (n153 = e479("../core/main")) && n153.__esModule ? n153 : {
                    default: n153
                }, o110 = l26(e479("../core/constants")), i69 = l26(e479("opentype.js"));
                function s40() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s40 = function() {
                        return e;
                    }, e;
                }
                function l26(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a48(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s40();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    return r.default = e, t && t.set(e, r), r;
                }
                e479("../core/friendly_errors/validate_params"), e479("../core/friendly_errors/file_errors"), e479("../core/friendly_errors/fes_core"), f.default.prototype.loadFont = function(s, l, u) {
                    f.default._validateParameters("loadFont", arguments);
                    var c = new f.default.Font(this), d = this;
                    return i69.load(s, function(e, t) {
                        if (e) return f.default._friendlyFileLoadError(4, s), void 0 !== u ? u(e) : void console.error(e, s);
                        c.font = t, void 0 !== l && l(c), d._decrementPreload();
                        var r, n, o = s.split("\\").pop().split("/").pop(), i = o.lastIndexOf("."), a = i < 1 ? null : o.substr(i + 1);
                        [
                            "ttf",
                            "otf",
                            "woff",
                            "woff2"
                        ].includes(a) && (r = o.substr(0, i), (n = document.createElement("style")).appendChild(document.createTextNode("\n@font-face {\nfont-family: ".concat(r, ";\nsrc: url(").concat(s, ");\n}\n"))), document.head.appendChild(n));
                    }), c;
                }, f.default.prototype.text = function(e, t, r, n, o) {
                    var i;
                    return f.default._validateParameters("text", arguments), this._renderer._doFill || this._renderer._doStroke ? (i = this._renderer).text.apply(i, arguments) : this;
                }, f.default.prototype.textFont = function(e, t) {
                    if (f.default._validateParameters("textFont", arguments), arguments.length) {
                        if (!e) throw new Error("null font passed to textFont");
                        return this._renderer._setProperty("_textFont", e), t && (this._renderer._setProperty("_textSize", t), this._renderer._setProperty("_textLeading", t * o110._DEFAULT_LEADMULT)), this._renderer._applyTextProperties();
                    }
                    return this._renderer._textFont;
                };
                var u18 = f.default;
                r228.default = u18;
            },
            {
                "../core/constants": 250,
                "../core/friendly_errors/fes_core": 252,
                "../core/friendly_errors/file_errors": 253,
                "../core/friendly_errors/validate_params": 255,
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.array.last-index-of": 158,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.string.split": 188,
                "opentype.js": 236
            }
        ],
        298: [
            function(e481, t295, r229) {
                "use strict";
                e481("core-js/modules/es.symbol"), e481("core-js/modules/es.symbol.description"), e481("core-js/modules/es.symbol.iterator"), e481("core-js/modules/es.array.concat"), e481("core-js/modules/es.array.fill"), e481("core-js/modules/es.array.iterator"), e481("core-js/modules/es.array.join"), e481("core-js/modules/es.array.slice"), e481("core-js/modules/es.array.splice"), e481("core-js/modules/es.function.name"), e481("core-js/modules/es.number.to-fixed"), e481("core-js/modules/es.object.to-string"), e481("core-js/modules/es.regexp.exec"), e481("core-js/modules/es.string.iterator"), e481("core-js/modules/es.string.split"), e481("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r229, "__esModule", {
                    value: !0
                }), r229.default = void 0;
                var n154, o111 = (n154 = e481("../core/main")) && n154.__esModule ? n154 : {
                    default: n154
                }, x2 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== h12(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = a49();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e481("../core/constants"));
                function a49() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return a49 = function() {
                        return e;
                    }, e;
                }
                function h12(e482) {
                    return (h12 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e482);
                }
                function p10(e483, t296) {
                    for(var r230 = function(e, t) {
                        if ("object" !== h12(e)) e = t;
                        else for(var r in t)void 0 === e[r] && (e[r] = t[r]);
                        return e;
                    }(t296, {
                        sampleFactor: 0.1,
                        simplifyThreshold: 0
                    }), n155 = l27(e483, 0, 1), o = n155 / (n155 * r230.sampleFactor), i = [], a = 0; a < n155; a += o)i.push(l27(e483, a));
                    return r230.simplifyThreshold && (function(e) {
                        for(var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, r = 0, n = e.length - 1; 3 < e.length && 0 <= n; --n)f14(s41(e, n - 1), s41(e, n), s41(e, n + 1), t) && (e.splice(n % e.length, 1), r++);
                    })(i, r230.simplifyThreshold), i;
                }
                function y9(e) {
                    for(var t, r = [], n = 0; n < e.length; n++)"M" === e[n].type && (t && r.push(t), t = []), t.push(i70(e[n]));
                    return r.push(t), r;
                }
                function i70(e) {
                    var t = [
                        e.type
                    ];
                    return "M" === e.type || "L" === e.type ? t.push(e.x, e.y) : "C" === e.type ? t.push(e.x1, e.y1, e.x2, e.y2, e.x, e.y) : "Q" === e.type && t.push(e.x1, e.y1, e.x, e.y), t;
                }
                function s41(e, t) {
                    var r = e.length;
                    return e[t < 0 ? t % r + r : t % r];
                }
                function f14(e, t, r, n) {
                    if (!n) return 0 == (o = e, a = r, ((i = t)[0] - o[0]) * (a[1] - o[1]) - (a[0] - o[0]) * (i[1] - o[1]));
                    var o, i, a;
                    void 0 === f14.tmpPoint1 && (f14.tmpPoint1 = [], f14.tmpPoint2 = []);
                    var s = f14.tmpPoint1, l = f14.tmpPoint2;
                    s.x = t.x - e.x, s.y = t.y - e.y, l.x = r.x - t.x, l.y = r.y - t.y;
                    var u = s.x * l.x + s.y * l.y, c = Math.sqrt(s.x * s.x + s.y * s.y), d = Math.sqrt(l.x * l.x + l.y * l.y);
                    return Math.acos(u / (c * d)) < n;
                }
                function d16(e, t, r, n, o, i, a, s, l) {
                    var u = 1 - l, c = Math.pow(u, 3), d = Math.pow(u, 2), f = l * l, h = f * l, p = c * e + 3 * d * l * r + 3 * u * l * l * o + h * a, y = c * t + 3 * d * l * n + 3 * u * l * l * i + h * s, m = e + 2 * l * (r - e) + f * (o - 2 * r + e), g = t + 2 * l * (n - t) + f * (i - 2 * n + t), v = r + 2 * l * (o - r) + f * (a - 2 * o + r), b = n + 2 * l * (i - n) + f * (s - 2 * i + n), _ = u * e + l * r, x = u * t + l * n, w = u * o + l * a, S = u * i + l * s, j = 90 - 180 * Math.atan2(m - v, g - b) / Math.PI;
                    return (v < m || g < b) && (j += 180), {
                        x: p,
                        y: y,
                        m: {
                            x: m,
                            y: g
                        },
                        n: {
                            x: v,
                            y: b
                        },
                        start: {
                            x: _,
                            y: x
                        },
                        end: {
                            x: w,
                            y: S
                        },
                        alpha: j
                    };
                }
                function m5(e484, t297, r231, n156, o112, i71, a50, s42, l28) {
                    return null == l28 ? g5(e484, t297, r231, n156, o112, i71, a50, s42) : d16(e484, t297, r231, n156, o112, i71, a50, s42, function(e, t, r, n, o, i, a, s, l) {
                        if (l < 0 || g5(e, t, r, n, o, i, a, s) < l) return;
                        var u, c = 0.5, d = 1 - c;
                        u = g5(e, t, r, n, o, i, a, s, d);
                        for(; 0.01 < Math.abs(u - l);)u = g5(e, t, r, n, o, i, a, s, d += (u < l ? 1 : -1) * (c /= 2));
                        return d;
                    }(e484, t297, r231, n156, o112, i71, a50, s42, l28));
                }
                function l27(e485, t298, r232) {
                    for(var n157, o113, i72, a51, s43, l29 = 0, u20 = 0, c15 = (e485 = function(e486, t299) {
                        function r233(e487, t300, r234) {
                            var n159, o115;
                            if (!e487) return [
                                "C",
                                t300.x,
                                t300.y,
                                t300.x,
                                t300.y,
                                t300.x,
                                t300.y
                            ];
                            switch((e487[0] in {
                                T: 1,
                                Q: 1
                            }) || (t300.qx = t300.qy = null), e487[0]){
                                case "M":
                                    t300.X = e487[1], t300.Y = e487[2];
                                    break;
                                case "A":
                                    e487 = [
                                        "C"
                                    ].concat((function e488(t301, r235, n160, o116, i, a, s, l, u, c) {
                                        var d = Math.PI;
                                        var f = 120 * d / 180;
                                        var h;
                                        var p;
                                        var y;
                                        var m;
                                        var g = d / 180 * (+i || 0);
                                        var v = [];
                                        var b;
                                        var _ = function(e, t, r) {
                                            var n = e * Math.cos(r) - t * Math.sin(r), o = e * Math.sin(r) + t * Math.cos(r);
                                            return {
                                                x: n,
                                                y: o
                                            };
                                        };
                                        if (c) h = c[0], p = c[1], y = c[2], m = c[3];
                                        else {
                                            b = _(t301, r235, -g), t301 = b.x, r235 = b.y, b = _(l, u, -g), l = b.x, u = b.y;
                                            var x = (t301 - l) / 2, w = (r235 - u) / 2, S = x * x / (n160 * n160) + w * w / (o116 * o116);
                                            1 < S && (S = Math.sqrt(S), n160 *= S, o116 *= S);
                                            var j = n160 * n160, M = o116 * o116, E = (a === s ? -1 : 1) * Math.sqrt(Math.abs((j * M - j * w * w - M * x * x) / (j * w * w + M * x * x)));
                                            y = E * n160 * w / o116 + (t301 + l) / 2, m = E * -o116 * x / n160 + (r235 + u) / 2, h = Math.asin(((r235 - m) / o116).toFixed(9)), p = Math.asin(((u - m) / o116).toFixed(9)), (h = t301 < y ? d - h : h) < 0 && (h = 2 * d + h), (p = l < y ? d - p : p) < 0 && (p = 2 * d + p), s && p < h && (h -= 2 * d), !s && h < p && (p -= 2 * d);
                                        }
                                        var T = p - h;
                                        if (Math.abs(T) > f) {
                                            var O = p, C = l, L = u;
                                            p = h + f * (s && h < p ? 1 : -1), l = y + n160 * Math.cos(p), u = m + o116 * Math.sin(p), v = e488(l, u, n160, o116, i, 0, s, C, L, [
                                                p,
                                                O,
                                                y,
                                                m
                                            ]);
                                        }
                                        T = p - h;
                                        var P = Math.cos(h), k = Math.sin(h), A = Math.cos(p), R = Math.sin(p), D = Math.tan(T / 4), I = 4 / 3 * n160 * D, U = 4 / 3 * o116 * D, N = [
                                            t301,
                                            r235
                                        ], F = [
                                            t301 + I * k,
                                            r235 - U * P
                                        ], B = [
                                            l + I * R,
                                            u - U * A
                                        ], G = [
                                            l,
                                            u
                                        ];
                                        F[0] = 2 * N[0] - F[0];
                                        F[1] = 2 * N[1] - F[1];
                                        if (c) return [
                                            F,
                                            B,
                                            G
                                        ].concat(v);
                                        v = [
                                            F,
                                            B,
                                            G
                                        ].concat(v).join().split(",");
                                        for(var V = [], z = 0, H = v.length; z < H; z++)V[z] = z % 2 ? _(v[z - 1], v[z], g).y : _(v[z], v[z + 1], g).x;
                                        return V;
                                    }).apply(0, [
                                        t300.x,
                                        t300.y
                                    ].concat(e487.slice(1))));
                                    break;
                                case "S":
                                    o115 = "C" === r234 || "S" === r234 ? (n159 = 2 * t300.x - t300.bx, 2 * t300.y - t300.by) : (n159 = t300.x, t300.y), e487 = [
                                        "C",
                                        n159,
                                        o115
                                    ].concat(e487.slice(1));
                                    break;
                                case "T":
                                    "Q" === r234 || "T" === r234 ? (t300.qx = 2 * t300.x - t300.qx, t300.qy = 2 * t300.y - t300.qy) : (t300.qx = t300.x, t300.qy = t300.y), e487 = [
                                        "C"
                                    ].concat(S2(t300.x, t300.y, t300.qx, t300.qy, e487[1], e487[2]));
                                    break;
                                case "Q":
                                    t300.qx = e487[1], t300.qy = e487[2], e487 = [
                                        "C"
                                    ].concat(S2(t300.x, t300.y, e487[1], e487[2], e487[3], e487[4]));
                                    break;
                                case "L":
                                    e487 = [
                                        "C"
                                    ].concat(w2(t300.x, t300.y, e487[1], e487[2]));
                                    break;
                                case "H":
                                    e487 = [
                                        "C"
                                    ].concat(w2(t300.x, t300.y, e487[1], t300.y));
                                    break;
                                case "V":
                                    e487 = [
                                        "C"
                                    ].concat(w2(t300.x, t300.y, t300.x, e487[1]));
                                    break;
                                case "Z":
                                    e487 = [
                                        "C"
                                    ].concat(w2(t300.x, t300.y, t300.X, t300.Y));
                            }
                            return e487;
                        }
                        function n158(e, t) {
                            if (7 < e[t].length) {
                                e[t].shift();
                                for(var r = e[t]; r.length;)c16[t] = "A", s44 && (d17[t] = "A"), e.splice(t++, 0, [
                                    "C"
                                ].concat(r.splice(0, 6)));
                                e.splice(t, 1), i73 = Math.max(a52.length, s44 && s44.length || 0);
                            }
                        }
                        function o114(e, t, r, n, o) {
                            e && t && "M" === e[o][0] && "M" !== t[o][0] && (t.splice(o, 0, [
                                "M",
                                n.x,
                                n.y
                            ]), r.bx = 0, r.by = 0, r.x = e[o][1], r.y = e[o][2], i73 = Math.max(a52.length, s44 && s44.length || 0));
                        }
                        var i73, a52 = b4(e486), s44 = t299 && b4(t299), l30 = {
                            x: 0,
                            y: 0,
                            bx: 0,
                            by: 0,
                            X: 0,
                            Y: 0,
                            qx: null,
                            qy: null
                        }, u21 = {
                            x: 0,
                            y: 0,
                            bx: 0,
                            by: 0,
                            X: 0,
                            Y: 0,
                            qx: null,
                            qy: null
                        }, c16 = [], d17 = [], f15 = "", h13 = "";
                        i73 = Math.max(a52.length, s44 && s44.length || 0);
                        for(var p11 = 0; p11 < i73; p11++){
                            a52[p11] && (f15 = a52[p11][0]), "C" !== f15 && (c16[p11] = f15, p11 && (h13 = c16[p11 - 1])), a52[p11] = r233(a52[p11], l30, h13), "A" !== c16[p11] && "C" === f15 && (c16[p11] = "C"), n158(a52, p11), s44 && (s44[p11] && (f15 = s44[p11][0]), "C" !== f15 && (d17[p11] = f15, p11 && (h13 = d17[p11 - 1])), s44[p11] = r233(s44[p11], u21, h13), "A" !== d17[p11] && "C" === f15 && (d17[p11] = "C"), n158(s44, p11)), o114(a52, s44, l30, u21, p11), o114(s44, a52, u21, l30, p11);
                            var y10 = a52[p11], m6 = s44 && s44[p11], g6 = y10.length, v6 = s44 && m6.length;
                            l30.x = y10[g6 - 2], l30.y = y10[g6 - 1], l30.bx = parseFloat(y10[g6 - 4]) || l30.x, l30.by = parseFloat(y10[g6 - 3]) || l30.y, u21.bx = s44 && (parseFloat(m6[v6 - 4]) || u21.x), u21.by = s44 && (parseFloat(m6[v6 - 3]) || u21.y), u21.x = s44 && m6[v6 - 2], u21.y = s44 && m6[v6 - 1];
                        }
                        return s44 ? [
                            a52,
                            s44
                        ] : a52;
                    }(e485)).length; u20 < c15; u20++){
                        if ("M" === (i72 = e485[u20])[0]) n157 = +i72[1], o113 = +i72[2];
                        else {
                            if (t298 < l29 + (a51 = m5(n157, o113, i72[1], i72[2], i72[3], i72[4], i72[5], i72[6])) && !r232) return {
                                x: (s43 = m5(n157, o113, i72[1], i72[2], i72[3], i72[4], i72[5], i72[6], t298 - l29)).x,
                                y: s43.y,
                                alpha: s43.alpha
                            };
                            l29 += a51, n157 = +i72[5], o113 = +i72[6];
                        }
                        i72.shift();
                    }
                    return (s43 = r232 ? l29 : d16(n157, o113, i72[0], i72[1], i72[2], i72[3], i72[4], i72[5], 1)).alpha && (s43 = {
                        x: s43.x,
                        y: s43.y,
                        alpha: s43.alpha
                    }), s43;
                }
                function b4(e) {
                    var t, r = [], n = 0, o = 0, i = 0, a = 0, s = 0;
                    if (!e) return r;
                    "M" === e[0][0] && (i = n = +e[0][1], a = o = +e[0][2], s++, r[0] = [
                        "M",
                        n,
                        o
                    ]);
                    for(var l, u, c = 3 === e.length && "M" === e[0][0] && "R" === e[1][0].toUpperCase() && "Z" === e[2][0].toUpperCase(), d = s, f = e.length; d < f; d++){
                        if (r.push(l = []), (u = e[d])[0] !== String.prototype.toUpperCase.call(u[0])) switch(l[0] = String.prototype.toUpperCase.call(u[0]), l[0]){
                            case "A":
                                l[1] = u[1], l[2] = u[2], l[3] = u[3], l[4] = u[4], l[5] = u[5], l[6] = +(u[6] + n), l[7] = +(u[7] + o);
                                break;
                            case "V":
                                l[1] = +u[1] + o;
                                break;
                            case "H":
                                l[1] = +u[1] + n;
                                break;
                            case "R":
                                for(var h = 2, p = (t = [
                                    n,
                                    o
                                ].concat(u.slice(1))).length; h < p; h++)t[h] = +t[h] + n, t[++h] = +t[h] + o;
                                r.pop(), r = r.concat(_4(t, c));
                                break;
                            case "M":
                                i = +u[1] + n, a = +u[2] + o;
                                break;
                            default:
                                for(var y = 1, m = u.length; y < m; y++)l[y] = +u[y] + (y % 2 ? n : o);
                        }
                        else if ("R" === u[0]) t = [
                            n,
                            o
                        ].concat(u.slice(1)), r.pop(), r = r.concat(_4(t, c)), l = [
                            "R"
                        ].concat(u.slice(-2));
                        else for(var g = 0, v = u.length; g < v; g++)l[g] = u[g];
                        switch(l[0]){
                            case "Z":
                                n = i, o = a;
                                break;
                            case "H":
                                n = l[1];
                                break;
                            case "V":
                                o = l[1];
                                break;
                            case "M":
                                i = l[l.length - 2], a = l[l.length - 1];
                                break;
                            default:
                                n = l[l.length - 2], o = l[l.length - 1];
                        }
                    }
                    return r;
                }
                function _4(e, t) {
                    for(var r = [], n = 0, o = e.length; n < o - 2 * !t; n += 2){
                        var i = [
                            {
                                x: +e[n - 2],
                                y: +e[n - 1]
                            },
                            {
                                x: +e[n],
                                y: +e[n + 1]
                            },
                            {
                                x: +e[n + 2],
                                y: +e[n + 3]
                            },
                            {
                                x: +e[n + 4],
                                y: +e[n + 5]
                            }
                        ];
                        t ? n ? o - 4 === n ? i[3] = {
                            x: +e[0],
                            y: +e[1]
                        } : o - 2 === n && (i[2] = {
                            x: +e[0],
                            y: +e[1]
                        }, i[3] = {
                            x: +e[2],
                            y: +e[3]
                        }) : i[0] = {
                            x: +e[o - 2],
                            y: +e[o - 1]
                        } : o - 4 === n ? i[3] = i[2] : n || (i[0] = {
                            x: +e[n],
                            y: +e[n + 1]
                        }), r.push([
                            "C",
                            (-i[0].x + 6 * i[1].x + i[2].x) / 6,
                            (-i[0].y + 6 * i[1].y + i[2].y) / 6,
                            (i[1].x + 6 * i[2].x - i[3].x) / 6,
                            (i[1].y + 6 * i[2].y - i[3].y) / 6,
                            i[2].x,
                            i[2].y
                        ]);
                    }
                    return r;
                }
                function w2(e, t, r, n) {
                    return [
                        e,
                        t,
                        r,
                        n,
                        r,
                        n
                    ];
                }
                function S2(e, t, r, n, o, i) {
                    return [
                        1 / 3 * e + 2 / 3 * r,
                        1 / 3 * t + 2 / 3 * n,
                        1 / 3 * o + 2 / 3 * r,
                        1 / 3 * i + 2 / 3 * n,
                        o,
                        i
                    ];
                }
                function g5(e, t, r, n, o, i, a, s, l) {
                    null == l && (l = 1);
                    for(var u = (l = 1 < l ? 1 : l < 0 ? 0 : l) / 2, c = [
                        -0.1252,
                        0.1252,
                        -0.3678,
                        0.3678,
                        -0.5873,
                        0.5873,
                        -0.7699,
                        0.7699,
                        -0.9041,
                        0.9041,
                        -0.9816,
                        0.9816
                    ], d = 0, f = [
                        0.2491,
                        0.2491,
                        0.2335,
                        0.2335,
                        0.2032,
                        0.2032,
                        0.1601,
                        0.1601,
                        0.1069,
                        0.1069,
                        0.0472,
                        0.0472
                    ], h = 0; h < 12; h++){
                        var p = u * c[h] + u, y = v5(p, e, r, o, a), m = v5(p, t, n, i, s), g = y * y + m * m;
                        d += f[h] * Math.sqrt(g);
                    }
                    return u * d;
                }
                function v5(e, t, r, n, o) {
                    return e * (e * (-3 * t + 9 * r - 9 * n + 3 * o) + 6 * t - 12 * r + 6 * n) - 3 * t + 3 * r;
                }
                o111.default.Font = function(e) {
                    this.parent = e, this.cache = {
                    }, this.font = void 0;
                }, o111.default.Font.prototype.textBounds = function(e489) {
                    var t302, r236 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0, o117 = 3 < arguments.length ? arguments[3] : void 0, i = 4 < arguments.length ? arguments[4] : void 0, a = i && i.renderer && i.renderer._pInst || this.parent, s = a._renderer.drawingContext;
                    s.textAlign || x2.LEFT, s.textBaseline || x2.BASELINE;
                    if (o117 = o117 || a._renderer._textSize, !t302) {
                        var l, u, c = [], d = [], f = [];
                        f[0] = [];
                        var h = [], p = this._scale(o117), y = a._renderer.textLeading(), m = 0;
                        this.font.forEachGlyph(e489, r236, n, o117, i, function(e, t, r, n) {
                            var o = e.getMetrics();
                            0 === e.index || 10 === e.index ? f[m += 1] = [] : (f[m].push(t + o.xMin * p), f[m].push(t + o.xMax * p), h.push(r + m * y + -o.yMin * p), h.push(r + m * y + -o.yMax * p));
                        }), 0 < f[m].length && (c[m] = Math.min.apply(null, f[m]), d[m] = Math.max.apply(null, f[m]));
                        for(var g = 0, v = 0; v <= m; v++){
                            c[v] = Math.min.apply(null, f[v]), d[v] = Math.max.apply(null, f[v]);
                            var b = d[v] - c[v];
                            g < b && (g = b);
                        }
                        var _ = Math.min.apply(null, c);
                        t302 = {
                            x: _,
                            y: l = Math.min.apply(null, h),
                            h: Math.max.apply(null, h) - l,
                            w: g,
                            advance: _ - r236
                        }, u = this._handleAlignment(a._renderer, e489, t302.x, t302.y, t302.w + t302.advance), t302.x = u.x, t302.y = u.y;
                    }
                    return t302;
                }, o111.default.Font.prototype.textToPoints = function(e, t, r, n, o) {
                    var i, a = 0, s = [], l = this._getGlyphs(e);
                    n = n || this.parent._renderer._textSize;
                    for(var u = 0; u < l.length; u++){
                        if (!(l[i = u].name && "space" === l[i].name || e.length === l.length && " " === e[i] || l[i].index && 3 === l[i].index)) for(var c = y9(l[u].getPath(t, r, n).commands), d = 0; d < c.length; d++)for(var f = p10(c[d], o), h = 0; h < f.length; h++)f[h].x += a, s.push(f[h]);
                        a += l[u].advanceWidth * this._scale(n);
                    }
                    return s;
                }, o111.default.Font.prototype._getGlyphs = function(e) {
                    return this.font.stringToGlyphs(e);
                }, o111.default.Font.prototype._getPath = function(e, t, r, n) {
                    var o = (n && n.renderer && n.renderer._pInst || this.parent)._renderer, i = this._handleAlignment(o, e, t, r);
                    return this.font.getPath(e, i.x, i.y, o._textSize, n);
                }, o111.default.Font.prototype._getPathData = function(e, t, r, n) {
                    var o = 3;
                    return "string" == typeof e && 2 < arguments.length ? e = this._getPath(e, t, r, n) : "object" === h12(t) && (n = t), n && "number" == typeof n.decimals && (o = n.decimals), e.toPathData(o);
                }, o111.default.Font.prototype._getSVG = function(e, t, r, n) {
                    var o = 3;
                    return "string" == typeof e && 2 < arguments.length ? e = this._getPath(e, t, r, n) : "object" === h12(t) && (n = t), n && ("number" == typeof n.decimals && (o = n.decimals), "number" == typeof n.strokeWidth && (e.strokeWidth = n.strokeWidth), void 0 !== n.fill && (e.fill = n.fill), void 0 !== n.stroke && (e.stroke = n.stroke)), e.toSVG(o);
                }, o111.default.Font.prototype._renderPath = function(e, t, r, n) {
                    var o, i = n && n.renderer || this.parent._renderer, a = i.drawingContext;
                    o = "object" === h12(e) && e.commands ? e.commands : this._getPath(e, t, r, n).commands, a.beginPath();
                    var s = !0, l = !1, u = void 0;
                    try {
                        for(var c, d = o[Symbol.iterator](); !(s = (c = d.next()).done); s = !0){
                            var f = c.value;
                            "M" === f.type ? a.moveTo(f.x, f.y) : "L" === f.type ? a.lineTo(f.x, f.y) : "C" === f.type ? a.bezierCurveTo(f.x1, f.y1, f.x2, f.y2, f.x, f.y) : "Q" === f.type ? a.quadraticCurveTo(f.x1, f.y1, f.x, f.y) : "Z" === f.type && a.closePath();
                        }
                    } catch (e490) {
                        l = !0, u = e490;
                    } finally{
                        try {
                            s || null == d.return || d.return();
                        } finally{
                            if (l) throw u;
                        }
                    }
                    return i._doStroke && i._strokeSet && a.stroke(), i._doFill && (i._fillSet || i._setFill(x2._DEFAULT_TEXT_FILL), a.fill()), this;
                }, o111.default.Font.prototype._textWidth = function(e, t) {
                    return this.font.getAdvanceWidth(e, t);
                }, o111.default.Font.prototype._textAscent = function(e) {
                    return this.font.ascender * this._scale(e);
                }, o111.default.Font.prototype._textDescent = function(e) {
                    return -this.font.descender * this._scale(e);
                }, o111.default.Font.prototype._scale = function(e) {
                    return 1 / this.font.unitsPerEm * (e || this.parent._renderer._textSize);
                }, o111.default.Font.prototype._handleAlignment = function(e, t, r, n, o) {
                    var i = e._textSize;
                    switch(void 0 === o && (o = this._textWidth(t, i)), e._textAlign){
                        case x2.CENTER:
                            r -= o / 2;
                            break;
                        case x2.RIGHT:
                            r -= o;
                    }
                    switch(e._textBaseline){
                        case x2.TOP:
                            n += this._textAscent(i);
                            break;
                        case x2.CENTER:
                            n += this._textAscent(i) / 2;
                            break;
                        case x2.BOTTOM:
                            n -= this._textDescent(i);
                    }
                    return {
                        x: r,
                        y: n
                    };
                };
                var u19 = o111.default;
                r229.default = u19;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.fill": 150,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.join": 157,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.array.splice": 162,
                "core-js/modules/es.function.name": 163,
                "core-js/modules/es.number.to-fixed": 169,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        299: [
            function(e491, t303, r237) {
                "use strict";
                e491("core-js/modules/es.array.concat"), e491("core-js/modules/es.array.slice"), e491("core-js/modules/es.array.splice"), e491("core-js/modules/es.array-buffer.constructor"), e491("core-js/modules/es.object.to-string"), Object.defineProperty(r237, "__esModule", {
                    value: !0
                }), r237.default = void 0;
                var n161, o118 = (n161 = e491("../core/main")) && n161.__esModule ? n161 : {
                    default: n161
                };
                o118.default.prototype.append = function(e, t) {
                    return e.push(t), e;
                }, o118.default.prototype.arrayCopy = function(e, t, r, n, o) {
                    var i, a;
                    e = void 0 !== o ? (a = Math.min(o, e.length), i = n, e.slice(t, a + t)) : (a = void 0 !== r ? (a = r, Math.min(a, e.length)) : e.length, i = 0, r = t, e.slice(0, a)), Array.prototype.splice.apply(r, [
                        i,
                        a
                    ].concat(e));
                }, o118.default.prototype.concat = function(e, t) {
                    return e.concat(t);
                }, o118.default.prototype.reverse = function(e) {
                    return e.reverse();
                }, o118.default.prototype.shorten = function(e) {
                    return e.pop(), e;
                }, o118.default.prototype.shuffle = function(e, t) {
                    for(var r, n, o = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(e), i = (e = t || o ? e : e.slice()).length; 1 < i;)r = this.random(0, 1) * i | 0, n = e[--i], e[i] = e[r], e[r] = n;
                    return e;
                }, o118.default.prototype.sort = function(e492, t304) {
                    var r = t304 ? e492.slice(0, Math.min(t304, e492.length)) : e492, n = t304 ? e492.slice(Math.min(t304, e492.length)) : [];
                    return (r = "string" == typeof r[0] ? r.sort() : r.sort(function(e, t) {
                        return e - t;
                    })).concat(n);
                }, o118.default.prototype.splice = function(e, t, r) {
                    return Array.prototype.splice.apply(e, [
                        r,
                        0
                    ].concat(t)), e;
                }, o118.default.prototype.subset = function(e, t, r) {
                    return void 0 !== r ? e.slice(t, t + r) : e.slice(t, e.length);
                };
                var i74 = o118.default;
                r237.default = i74;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array-buffer.constructor": 147,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.array.splice": 162,
                "core-js/modules/es.object.to-string": 174
            }
        ],
        300: [
            function(e493, t305, r238) {
                "use strict";
                e493("core-js/modules/es.array.map"), e493("core-js/modules/es.number.constructor"), e493("core-js/modules/es.object.to-string"), e493("core-js/modules/es.regexp.to-string"), e493("core-js/modules/es.string.repeat"), Object.defineProperty(r238, "__esModule", {
                    value: !0
                }), r238.default = void 0;
                var n, o = (n = e493("../core/main")) && n.__esModule ? n : {
                    default: n
                };
                o.default.prototype.float = function(e) {
                    return e instanceof Array ? e.map(parseFloat) : parseFloat(e);
                }, o.default.prototype.int = function(e494) {
                    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 10;
                    return e494 === 1 / 0 || "Infinity" === e494 ? 1 / 0 : e494 === -1 / 0 || "-Infinity" === e494 ? -1 / 0 : "string" == typeof e494 ? parseInt(e494, t) : "number" == typeof e494 ? 0 | e494 : "boolean" == typeof e494 ? e494 ? 1 : 0 : e494 instanceof Array ? e494.map(function(e) {
                        return o.default.prototype.int(e, t);
                    }) : void 0;
                }, o.default.prototype.str = function(e) {
                    return e instanceof Array ? e.map(o.default.prototype.str) : String(e);
                }, o.default.prototype.boolean = function(e) {
                    return "number" == typeof e ? 0 !== e : "string" == typeof e ? "true" === e.toLowerCase() : "boolean" == typeof e ? e : e instanceof Array ? e.map(o.default.prototype.boolean) : void 0;
                }, o.default.prototype.byte = function(e) {
                    var t = o.default.prototype.int(e, 10);
                    return "number" == typeof t ? (t + 128) % 256 - 128 : t instanceof Array ? t.map(o.default.prototype.byte) : void 0;
                }, o.default.prototype.char = function(e) {
                    return "number" != typeof e || isNaN(e) ? e instanceof Array ? e.map(o.default.prototype.char) : "string" == typeof e ? o.default.prototype.char(parseInt(e, 10)) : void 0 : String.fromCharCode(e);
                }, o.default.prototype.unchar = function(e) {
                    return "string" == typeof e && 1 === e.length ? e.charCodeAt(0) : e instanceof Array ? e.map(o.default.prototype.unchar) : void 0;
                }, o.default.prototype.hex = function(e495, t) {
                    if (t = null == t ? t = 8 : t, e495 instanceof Array) return e495.map(function(e) {
                        return o.default.prototype.hex(e, t);
                    });
                    if (e495 === 1 / 0 || e495 === -1 / 0) return (e495 === 1 / 0 ? "F" : "0").repeat(t);
                    if ("number" == typeof e495) {
                        e495 < 0 && (e495 = 4294967295 + e495 + 1);
                        for(var r = Number(e495).toString(16).toUpperCase(); r.length < t;)r = "0".concat(r);
                        return r.length >= t && (r = r.substring(r.length - t, r.length)), r;
                    }
                }, o.default.prototype.unhex = function(e) {
                    return e instanceof Array ? e.map(o.default.prototype.unhex) : parseInt("0x".concat(e), 16);
                };
                var i = o.default;
                r238.default = i;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.number.constructor": 167,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.repeat": 185
            }
        ],
        301: [
            function(e496, t306, r239) {
                "use strict";
                e496("core-js/modules/es.array.filter"), e496("core-js/modules/es.array.index-of"), e496("core-js/modules/es.array.join"), e496("core-js/modules/es.array.map"), e496("core-js/modules/es.array.slice"), e496("core-js/modules/es.object.to-string"), e496("core-js/modules/es.regexp.constructor"), e496("core-js/modules/es.regexp.exec"), e496("core-js/modules/es.regexp.to-string"), e496("core-js/modules/es.string.match"), e496("core-js/modules/es.string.replace"), e496("core-js/modules/es.string.split"), e496("core-js/modules/es.string.trim"), Object.defineProperty(r239, "__esModule", {
                    value: !0
                }), r239.default = void 0;
                var n162, a53 = (n162 = e496("../core/main")) && n162.__esModule ? n162 : {
                    default: n162
                };
                function o119(e, t, r) {
                    var n = e < 0, o = n ? e.toString().substring(1) : e.toString(), i = o.indexOf("."), a = -1 !== i ? o.substring(0, i) : o, s = -1 !== i ? o.substring(i + 1) : "", l = n ? "-" : "";
                    if (void 0 !== r) {
                        var u = "";
                        (-1 !== i || 0 < r - s.length) && (u = "."), s.length > r && (s = s.substring(0, r));
                        for(var c = 0; c < t - a.length; c++)l += "0";
                        l += a, l += u, l += s;
                        for(var d = 0; d < r - s.length; d++)l += "0";
                        return l;
                    }
                    for(var f = 0; f < Math.max(t - a.length, 0); f++)l += "0";
                    return l += o;
                }
                function i75(e, t) {
                    var r = (e = e.toString()).indexOf("."), n = -1 !== r ? e.substring(r) : "", o = -1 !== r ? e.substring(0, r) : e;
                    if (o = o.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","), 0 === t) n = "";
                    else if (void 0 !== t) {
                        if (t > n.length) for(var i = t - (n += -1 === r ? "." : "").length + 1, a = 0; a < i; a++)n += "0";
                        else n = n.substring(0, t + 1);
                    }
                    return o + n;
                }
                function s45(e) {
                    return 0 < parseFloat(e) ? "+".concat(e.toString()) : e.toString();
                }
                function l31(e) {
                    return 0 <= parseFloat(e) ? " ".concat(e.toString()) : e.toString();
                }
                e496("../core/friendly_errors/validate_params"), e496("../core/friendly_errors/file_errors"), e496("../core/friendly_errors/fes_core"), a53.default.prototype.join = function(e, t) {
                    return a53.default._validateParameters("join", arguments), e.join(t);
                }, a53.default.prototype.match = function(e, t) {
                    return a53.default._validateParameters("match", arguments), e.match(t);
                }, a53.default.prototype.matchAll = function(e, t) {
                    a53.default._validateParameters("matchAll", arguments);
                    for(var r = new RegExp(t, "g"), n = r.exec(e), o = []; null !== n;)o.push(n), n = r.exec(e);
                    return o;
                }, a53.default.prototype.nf = function(e497, t, r) {
                    return a53.default._validateParameters("nf", arguments), e497 instanceof Array ? e497.map(function(e) {
                        return o119(e, t, r);
                    }) : "[object Arguments]" === Object.prototype.toString.call(e497) ? 3 === e497.length ? this.nf(e497[0], e497[1], e497[2]) : 2 === e497.length ? this.nf(e497[0], e497[1]) : this.nf(e497[0]) : o119(e497, t, r);
                }, a53.default.prototype.nfc = function(e498, t) {
                    return a53.default._validateParameters("nfc", arguments), e498 instanceof Array ? e498.map(function(e) {
                        return i75(e, t);
                    }) : i75(e498, t);
                }, a53.default.prototype.nfp = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    a53.default._validateParameters("nfp", t);
                    var n = a53.default.prototype.nf.apply(this, t);
                    return n instanceof Array ? n.map(s45) : s45(n);
                }, a53.default.prototype.nfs = function() {
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    a53.default._validateParameters("nfs", t);
                    var n = a53.default.prototype.nf.apply(this, t);
                    return n instanceof Array ? n.map(l31) : l31(n);
                }, a53.default.prototype.split = function(e, t) {
                    return a53.default._validateParameters("split", arguments), e.split(t);
                }, a53.default.prototype.splitTokens = function(e499, t) {
                    var r;
                    if (a53.default._validateParameters("splitTokens", arguments), void 0 !== t) {
                        var n = t, o = /\]/g.exec(n), i = /\[/g.exec(n);
                        r = i && o ? (n = n.slice(0, o.index) + n.slice(o.index + 1), i = /\[/g.exec(n), n = n.slice(0, i.index) + n.slice(i.index + 1), new RegExp("[\\[".concat(n, "\\]]"), "g")) : o ? (n = n.slice(0, o.index) + n.slice(o.index + 1), new RegExp("[".concat(n, "\\]]"), "g")) : i ? (n = n.slice(0, i.index) + n.slice(i.index + 1), new RegExp("[".concat(n, "\\[]"), "g")) : new RegExp("[".concat(n, "]"), "g");
                    } else r = /\s/g;
                    return e499.split(r).filter(function(e) {
                        return e;
                    });
                }, a53.default.prototype.trim = function(e) {
                    return a53.default._validateParameters("trim", arguments), e instanceof Array ? e.map(this.trim) : e.trim();
                };
                var u22 = a53.default;
                r239.default = u22;
            },
            {
                "../core/friendly_errors/fes_core": 252,
                "../core/friendly_errors/file_errors": 253,
                "../core/friendly_errors/validate_params": 255,
                "../core/main": 260,
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.join": 157,
                "core-js/modules/es.array.map": 159,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.constructor": 177,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.match": 184,
                "core-js/modules/es.string.replace": 186,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.string.trim": 190
            }
        ],
        302: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                }), r.default = void 0;
                var n, o = (n = e("../core/main")) && n.__esModule ? n : {
                    default: n
                };
                o.default.prototype.day = function() {
                    return (new Date).getDate();
                }, o.default.prototype.hour = function() {
                    return (new Date).getHours();
                }, o.default.prototype.minute = function() {
                    return (new Date).getMinutes();
                }, o.default.prototype.millis = function() {
                    return -1 === this._millisStart ? 0 : window.performance.now() - this._millisStart;
                }, o.default.prototype.month = function() {
                    return (new Date).getMonth() + 1;
                }, o.default.prototype.second = function() {
                    return (new Date).getSeconds();
                }, o.default.prototype.year = function() {
                    return (new Date).getFullYear();
                };
                var i = o.default;
                r.default = i;
            },
            {
                "../core/main": 260
            }
        ],
        303: [
            function(e500, t307, r240) {
                "use strict";
                function a54(e501) {
                    return (a54 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e501);
                }
                e500("core-js/modules/es.array.concat"), e500("core-js/modules/es.number.to-fixed"), Object.defineProperty(r240, "__esModule", {
                    value: !0
                }), r240.default = void 0;
                var n163, E = (n163 = e500("../core/main")) && n163.__esModule ? n163 : {
                    default: n163
                };
                e500("./p5.Geometry");
                var h14 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a54(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s46();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e500("../core/constants"));
                function s46() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s46 = function() {
                        return e;
                    }, e;
                }
                E.default.prototype.plane = function(e502, t308, r241, n164) {
                    this._assert3d("plane"), E.default._validateParameters("plane", arguments), void 0 === e502 && (e502 = 50), void 0 === t308 && (t308 = e502), void 0 === r241 && (r241 = 1), void 0 === n164 && (n164 = 1);
                    var o121 = "plane|".concat(r241, "|").concat(n164);
                    if (!this._renderer.geometryInHash(o121)) {
                        var i = new E.default.Geometry(r241, n164, function() {
                            for(var e, t, r, n = 0; n <= this.detailY; n++){
                                t = n / this.detailY;
                                for(var o = 0; o <= this.detailX; o++)e = o / this.detailX, r = new E.default.Vector(e - 0.5, t - 0.5, 0), this.vertices.push(r), this.uvs.push(e, t);
                            }
                        });
                        i.computeFaces().computeNormals(), r241 <= 1 && n164 <= 1 ? i._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on plane objects with more than 1 detailX or 1 detailY"), this._renderer.createBuffers(o121, i);
                    }
                    return this._renderer.drawBuffersScaled(o121, e502, t308, 1), this;
                }, E.default.prototype.box = function(e503, t309, r242, n165, o122) {
                    this._assert3d("box"), E.default._validateParameters("box", arguments), void 0 === e503 && (e503 = 50), void 0 === t309 && (t309 = e503), void 0 === r242 && (r242 = t309);
                    var i76 = this._renderer.attributes && this._renderer.attributes.perPixelLighting;
                    void 0 === n165 && (n165 = i76 ? 1 : 4), void 0 === o122 && (o122 = i76 ? 1 : 4);
                    var a55 = "box|".concat(n165, "|").concat(o122);
                    if (!this._renderer.geometryInHash(a55)) {
                        var s = new E.default.Geometry(n165, o122, function() {
                            var e = [
                                [
                                    0,
                                    4,
                                    2,
                                    6
                                ],
                                [
                                    1,
                                    3,
                                    5,
                                    7
                                ],
                                [
                                    0,
                                    1,
                                    4,
                                    5
                                ],
                                [
                                    2,
                                    6,
                                    3,
                                    7
                                ],
                                [
                                    0,
                                    2,
                                    1,
                                    3
                                ],
                                [
                                    4,
                                    5,
                                    6,
                                    7
                                ]
                            ];
                            this.strokeIndices = [
                                [
                                    0,
                                    1
                                ],
                                [
                                    1,
                                    3
                                ],
                                [
                                    3,
                                    2
                                ],
                                [
                                    6,
                                    7
                                ],
                                [
                                    8,
                                    9
                                ],
                                [
                                    9,
                                    11
                                ],
                                [
                                    14,
                                    15
                                ],
                                [
                                    16,
                                    17
                                ],
                                [
                                    17,
                                    19
                                ],
                                [
                                    18,
                                    19
                                ],
                                [
                                    20,
                                    21
                                ],
                                [
                                    22,
                                    23
                                ]
                            ];
                            for(var t = 0; t < e.length; t++){
                                for(var r = e[t], n = 4 * t, o = 0; o < 4; o++){
                                    var i = r[o], a = new E.default.Vector((2 * (1 & i) - 1) / 2, ((2 & i) - 1) / 2, ((4 & i) / 2 - 1) / 2);
                                    this.vertices.push(a), this.uvs.push(1 & o, (2 & o) / 2);
                                }
                                this.faces.push([
                                    n,
                                    1 + n,
                                    2 + n
                                ]), this.faces.push([
                                    2 + n,
                                    1 + n,
                                    3 + n
                                ]);
                            }
                        });
                        s.computeNormals(), n165 <= 4 && o122 <= 4 ? s._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on box objects with more than 4 detailX or 4 detailY"), this._renderer.createBuffers(a55, s);
                    }
                    return this._renderer.drawBuffersScaled(a55, e503, t309, r242), this;
                }, E.default.prototype.sphere = function(e, t, r) {
                    return this._assert3d("sphere"), E.default._validateParameters("sphere", arguments), void 0 === e && (e = 50), void 0 === t && (t = 24), void 0 === r && (r = 16), this.ellipsoid(e, e, e, t, r), this;
                };
                function l32(e, t, r, n, o, i, a) {
                    e = e <= 0 ? 1 : e, t = t < 0 ? 0 : t, r = r <= 0 ? e : r, n = n < 3 ? 3 : n;
                    var s, l, u, c = (i = void 0 === i || i) ? -2 : 0, d = (o = o < 1 ? 1 : o) + ((a = void 0 === a ? 0 !== t : a) ? 2 : 0), f = Math.atan2(e - t, r), h = Math.sin(f), p = Math.cos(f);
                    for(s = c; s <= d; ++s){
                        var y = s / o, m = r * y, g = void 0;
                        for(g = s < 0 ? (y = m = 0, e) : o < s ? (m = r, y = 1, t) : e + (t - e) * y, -2 !== s && s !== o + 2 || (g = 0), m -= r / 2, l = 0; l < n; ++l){
                            var v = l / (n - 1), b = 2 * Math.PI * v, _ = Math.sin(b), x = Math.cos(b);
                            this.vertices.push(new E.default.Vector(_ * g, m, x * g));
                            var w = void 0;
                            w = s < 0 ? new E.default.Vector(0, -1, 0) : o < s && t ? new E.default.Vector(0, 1, 0) : new E.default.Vector(_ * p, h, x * p), this.vertexNormals.push(w), this.uvs.push(v, y);
                        }
                    }
                    var S = 0;
                    if (i) {
                        for(u = 0; u < n; ++u){
                            var j = (u + 1) % n;
                            this.faces.push([
                                S + u,
                                S + n + j,
                                S + n + u
                            ]);
                        }
                        S += 2 * n;
                    }
                    for(s = 0; s < o; ++s){
                        for(l = 0; l < n; ++l){
                            var M = (l + 1) % n;
                            this.faces.push([
                                S + l,
                                S + M,
                                S + n + M
                            ]), this.faces.push([
                                S + l,
                                S + n + M,
                                S + n + l
                            ]);
                        }
                        S += n;
                    }
                    if (a) for(S += n, l = 0; l < n; ++l)this.faces.push([
                        S + l,
                        S + (l + 1) % n,
                        S + n
                    ]);
                }
                E.default.prototype.cylinder = function(e, t, r, n, o, i) {
                    this._assert3d("cylinder"), E.default._validateParameters("cylinder", arguments), void 0 === e && (e = 50), void 0 === t && (t = e), void 0 === r && (r = 24), void 0 === n && (n = 1), void 0 === i && (i = !0), void 0 === o && (o = !0);
                    var a = "cylinder|".concat(r, "|").concat(n, "|").concat(o, "|").concat(i);
                    if (!this._renderer.geometryInHash(a)) {
                        var s = new E.default.Geometry(r, n);
                        l32.call(s, 1, 1, 1, r, n, o, i), r <= 24 && n <= 16 ? s._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on cylinder objects with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(a, s);
                    }
                    return this._renderer.drawBuffersScaled(a, e, t, e), this;
                }, E.default.prototype.cone = function(e, t, r, n, o) {
                    this._assert3d("cone"), E.default._validateParameters("cone", arguments), void 0 === e && (e = 50), void 0 === t && (t = e), void 0 === r && (r = 24), void 0 === n && (n = 1), void 0 === o && (o = !0);
                    var i = "cone|".concat(r, "|").concat(n, "|").concat(o);
                    if (!this._renderer.geometryInHash(i)) {
                        var a = new E.default.Geometry(r, n);
                        l32.call(a, 1, 0, 1, r, n, o, !1), r <= 24 && n <= 16 ? a._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on cone objects with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(i, a);
                    }
                    return this._renderer.drawBuffersScaled(i, e, t, e), this;
                }, E.default.prototype.ellipsoid = function(e504, t310, r243, n166, o123) {
                    this._assert3d("ellipsoid"), E.default._validateParameters("ellipsoid", arguments), void 0 === e504 && (e504 = 50), void 0 === t310 && (t310 = e504), void 0 === r243 && (r243 = e504), void 0 === n166 && (n166 = 24), void 0 === o123 && (o123 = 16);
                    var i77 = "ellipsoid|".concat(n166, "|").concat(o123);
                    if (!this._renderer.geometryInHash(i77)) {
                        var a56 = new E.default.Geometry(n166, o123, function() {
                            for(var e = 0; e <= this.detailY; e++)for(var t = e / this.detailY, r = Math.PI * t - Math.PI / 2, n = Math.cos(r), o = Math.sin(r), i = 0; i <= this.detailX; i++){
                                var a = i / this.detailX, s = 2 * Math.PI * a, l = Math.cos(s), u = Math.sin(s), c = new E.default.Vector(n * u, o, n * l);
                                this.vertices.push(c), this.vertexNormals.push(c), this.uvs.push(a, t);
                            }
                        });
                        a56.computeFaces(), n166 <= 24 && o123 <= 24 ? a56._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on ellipsoids with more than 24 detailX or 24 detailY"), this._renderer.createBuffers(i77, a56);
                    }
                    return this._renderer.drawBuffersScaled(i77, e504, t310, r243), this;
                }, E.default.prototype.torus = function(e505, t311, r244, n167) {
                    if (this._assert3d("torus"), E.default._validateParameters("torus", arguments), void 0 === e505) e505 = 50;
                    else if (!e505) return;
                    if (void 0 === t311) t311 = 10;
                    else if (!t311) return;
                    void 0 === r244 && (r244 = 24), void 0 === n167 && (n167 = 16);
                    var h = (t311 / e505).toPrecision(4), o124 = "torus|".concat(h, "|").concat(r244, "|").concat(n167);
                    if (!this._renderer.geometryInHash(o124)) {
                        var i78 = new E.default.Geometry(r244, n167, function() {
                            for(var e = 0; e <= this.detailY; e++)for(var t = e / this.detailY, r = 2 * Math.PI * t, n = Math.cos(r), o = Math.sin(r), i = 1 + h * n, a = 0; a <= this.detailX; a++){
                                var s = a / this.detailX, l = 2 * Math.PI * s, u = Math.cos(l), c = Math.sin(l), d = new E.default.Vector(i * u, i * c, h * o), f = new E.default.Vector(n * u, n * c, o);
                                this.vertices.push(d), this.vertexNormals.push(f), this.uvs.push(s, t);
                            }
                        });
                        i78.computeFaces(), r244 <= 24 && n167 <= 16 ? i78._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw strokes on torus object with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(o124, i78);
                    }
                    return this._renderer.drawBuffersScaled(o124, e505, e505, e505), this;
                }, E.default.RendererGL.prototype.point = function(e, t, r) {
                    void 0 === r && (r = 0);
                    var n = [];
                    return n.push(new E.default.Vector(e, t, r)), this._drawPoints(n, this.immediateMode.buffers.point), this;
                }, E.default.RendererGL.prototype.triangle = function(e506) {
                    var t = e506[0], r = e506[1], n = e506[2], o = e506[3], i = e506[4], a = e506[5];
                    if (!this.geometryInHash("tri")) {
                        var s = new E.default.Geometry(1, 1, function() {
                            var e = [];
                            e.push(new E.default.Vector(0, 0, 0)), e.push(new E.default.Vector(0, 1, 0)), e.push(new E.default.Vector(1, 0, 0)), this.strokeIndices = [
                                [
                                    0,
                                    1
                                ],
                                [
                                    1,
                                    2
                                ],
                                [
                                    2,
                                    0
                                ]
                            ], this.vertices = e, this.faces = [
                                [
                                    0,
                                    1,
                                    2
                                ]
                            ], this.uvs = [
                                0,
                                0,
                                0,
                                1,
                                1,
                                1
                            ];
                        });
                        s._makeTriangleEdges()._edgesToVertices(), s.computeNormals(), this.createBuffers("tri", s);
                    }
                    var l = this.uMVMatrix.copy();
                    try {
                        var u = new E.default.Matrix([
                            n - t,
                            o - r,
                            0,
                            0,
                            i - t,
                            a - r,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            t,
                            r,
                            0,
                            1
                        ]).mult(this.uMVMatrix);
                        this.uMVMatrix = u, this.drawBuffers("tri");
                    } finally{
                        this.uMVMatrix = l;
                    }
                    return this;
                }, E.default.RendererGL.prototype.ellipse = function(e) {
                    this.arc(e[0], e[1], e[2], e[3], 0, h14.TWO_PI, h14.OPEN, e[4]);
                }, E.default.RendererGL.prototype.arc = function(e507) {
                    var t312, r245, n168 = e507, o = arguments[1], i = arguments[2], a = arguments[3], s = arguments[4], l = arguments[5], u = arguments[6], c = arguments[7] || 25;
                    if (r245 = Math.abs(l - s) >= h14.TWO_PI ? "".concat(t312 = "ellipse", "|").concat(c, "|") : "".concat(t312 = "arc", "|").concat(s, "|").concat(l, "|").concat(u, "|").concat(c, "|"), !this.geometryInHash(r245)) {
                        var d = new E.default.Geometry(c, 1, function() {
                            if (this.strokeIndices = [], s.toFixed(10) !== l.toFixed(10)) {
                                u !== h14.PIE && void 0 !== u || (this.vertices.push(new E.default.Vector(0.5, 0.5, 0)), this.uvs.push([
                                    0.5,
                                    0.5
                                ]));
                                for(var e = 0; e <= c; e++){
                                    var t = (l - s) * (e / c) + s, r = 0.5 + Math.cos(t) / 2, n = 0.5 + Math.sin(t) / 2;
                                    this.vertices.push(new E.default.Vector(r, n, 0)), this.uvs.push([
                                        r,
                                        n
                                    ]), e < c - 1 && (this.faces.push([
                                        0,
                                        e + 1,
                                        e + 2
                                    ]), this.strokeIndices.push([
                                        e + 1,
                                        e + 2
                                    ]));
                                }
                                switch(u){
                                    case h14.PIE:
                                        this.faces.push([
                                            0,
                                            this.vertices.length - 2,
                                            this.vertices.length - 1
                                        ]), this.strokeIndices.push([
                                            0,
                                            1
                                        ]), this.strokeIndices.push([
                                            this.vertices.length - 2,
                                            this.vertices.length - 1
                                        ]), this.strokeIndices.push([
                                            0,
                                            this.vertices.length - 1
                                        ]);
                                        break;
                                    case h14.CHORD:
                                        this.strokeIndices.push([
                                            0,
                                            1
                                        ]), this.strokeIndices.push([
                                            0,
                                            this.vertices.length - 1
                                        ]);
                                        break;
                                    case h14.OPEN:
                                        this.strokeIndices.push([
                                            0,
                                            1
                                        ]);
                                        break;
                                    default:
                                        this.faces.push([
                                            0,
                                            this.vertices.length - 2,
                                            this.vertices.length - 1
                                        ]), this.strokeIndices.push([
                                            this.vertices.length - 2,
                                            this.vertices.length - 1
                                        ]);
                                }
                            }
                        });
                        d.computeNormals(), c <= 50 ? d._makeTriangleEdges()._edgesToVertices(d) : this._doStroke && console.log("Cannot apply a stroke to an ".concat(t312, " with more than 50 detail")), this.createBuffers(r245, d);
                    }
                    var f = this.uMVMatrix.copy();
                    try {
                        this.uMVMatrix.translate([
                            n168,
                            o,
                            0
                        ]), this.uMVMatrix.scale(i, a, 1), this.drawBuffers(r245);
                    } finally{
                        this.uMVMatrix = f;
                    }
                    return this;
                }, E.default.RendererGL.prototype.rect = function(e508) {
                    var t313 = this._pInst._glAttributes.perPixelLighting, r246 = e508[0], n169 = e508[1], o125 = e508[2], i = e508[3], a = e508[4] || (t313 ? 1 : 24), s = e508[5] || (t313 ? 1 : 16), l = "rect|".concat(a, "|").concat(s);
                    if (!this.geometryInHash(l)) {
                        var u = new E.default.Geometry(a, s, function() {
                            for(var e = 0; e <= this.detailY; e++)for(var t = e / this.detailY, r = 0; r <= this.detailX; r++){
                                var n = r / this.detailX, o = new E.default.Vector(n, t, 0);
                                this.vertices.push(o), this.uvs.push(n, t);
                            }
                            0 < a && 0 < s && (this.strokeIndices = [
                                [
                                    0,
                                    a
                                ],
                                [
                                    a,
                                    (a + 1) * (s + 1) - 1
                                ],
                                [
                                    (a + 1) * (s + 1) - 1,
                                    (a + 1) * s
                                ],
                                [
                                    (a + 1) * s,
                                    0
                                ]
                            ]);
                        });
                        u.computeFaces().computeNormals()._makeTriangleEdges()._edgesToVertices(), this.createBuffers(l, u);
                    }
                    var c = this.uMVMatrix.copy();
                    try {
                        this.uMVMatrix.translate([
                            r246,
                            n169,
                            0
                        ]), this.uMVMatrix.scale(o125, i, 1), this.drawBuffers(l);
                    } finally{
                        this.uMVMatrix = c;
                    }
                    return this;
                }, E.default.RendererGL.prototype.quad = function(u, c, d, f, h, p, y, m, g, v, b, _, e509, t314) {
                    void 0 === e509 && (e509 = 2), void 0 === t314 && (t314 = 2);
                    var r247 = "quad|".concat(u, "|").concat(c, "|").concat(d, "|").concat(f, "|").concat(h, "|").concat(p, "|").concat(y, "|").concat(m, "|").concat(g, "|").concat(v, "|").concat(b, "|").concat(_, "|").concat(e509, "|").concat(t314);
                    if (!this.geometryInHash(r247)) {
                        var n170 = new E.default.Geometry(e509, t314, function() {
                            for(var e = 1 / (this.detailX - 1), t = 1 / (this.detailY - 1), r = 0; r < this.detailY; r++)for(var n = 0; n < this.detailX; n++){
                                var o = n * e, i = r * t, a = (1 - o) * ((1 - i) * u + i * v) + o * ((1 - i) * f + i * y), s = (1 - o) * ((1 - i) * c + i * b) + o * ((1 - i) * h + i * m), l = (1 - o) * ((1 - i) * d + i * _) + o * ((1 - i) * p + i * g);
                                this.vertices.push(new E.default.Vector(a, s, l)), this.uvs.push([
                                    o,
                                    i
                                ]);
                            }
                        });
                        n170.faces = [];
                        for(var o126 = 0; o126 < t314 - 1; o126++)for(var i79 = 0; i79 < e509 - 1; i79++){
                            var a57 = i79 + o126 * e509, s47 = i79 + 1 + o126 * e509, l33 = i79 + 1 + (o126 + 1) * e509, x = i79 + (o126 + 1) * e509;
                            n170.faces.push([
                                a57,
                                s47,
                                l33
                            ]), n170.faces.push([
                                a57,
                                l33,
                                x
                            ]);
                        }
                        n170.computeNormals()._makeTriangleEdges()._edgesToVertices(), this.createBuffers(r247, n170);
                    }
                    return this.drawBuffers(r247), this;
                }, E.default.RendererGL.prototype.bezier = function(e, t, r, n, o, i, a, s, l, u, c, d) {
                    8 === arguments.length && (c = s, u = a, s = i, a = o, o = n, n = r, r = i = l = d = 0);
                    var f = this._pInst._bezierDetail || 20;
                    this.beginShape();
                    for(var h = 0; h <= f; h++){
                        var p = Math.pow(1 - h / f, 3), y = h / f * 3 * Math.pow(1 - h / f, 2), m = 3 * Math.pow(h / f, 2) * (1 - h / f), g = Math.pow(h / f, 3);
                        this.vertex(e * p + n * y + a * m + u * g, t * p + o * y + s * m + c * g, r * p + i * y + l * m + d * g);
                    }
                    return this.endShape(), this;
                }, E.default.RendererGL.prototype.curve = function(e, t, r, n, o, i, a, s, l, u, c, d) {
                    8 === arguments.length && (u = a, c = s, a = o, s = n, o = n = r, r = i = l = d = 0);
                    var f = this._pInst._curveDetail;
                    this.beginShape();
                    for(var h = 0; h <= f; h++){
                        var p = 0.5 * Math.pow(h / f, 3), y = 0.5 * Math.pow(h / f, 2), m = h / f * 0.5, g = p * (3 * n - e - 3 * a + u) + y * (2 * e - 5 * n + 4 * a - u) + m * (-e + a) + 2 * n * 0.5, v = p * (3 * o - t - 3 * s + c) + y * (2 * t - 5 * o + 4 * s - c) + m * (-t + s) + 2 * o * 0.5, b = p * (3 * i - r - 3 * l + d) + y * (2 * r - 5 * i + 4 * l - d) + m * (-r + l) + 2 * i * 0.5;
                        this.vertex(g, v, b);
                    }
                    return this.endShape(), this;
                }, E.default.RendererGL.prototype.line = function() {
                    return 6 === arguments.length ? (this.beginShape(h14.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 2 ? void 0 : arguments[2]), this.vertex(arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 5 ? void 0 : arguments[5]), this.endShape()) : 4 === arguments.length && (this.beginShape(h14.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], 0), this.vertex(arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 3 ? void 0 : arguments[3], 0), this.endShape()), this;
                }, E.default.RendererGL.prototype.bezierVertex = function() {
                    if (0 === this.immediateMode._bezierVertex.length) throw Error("vertex() must be used once before calling bezierVertex()");
                    var e, t, r, n, o, i = [], a = [], s = [], l = arguments.length;
                    if ((e = 0) === this._lookUpTableBezier.length || this._lutBezierDetail !== this._pInst._curveDetail) {
                        this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;
                        for(var u = 1 / this._lutBezierDetail, c = 0, d = 1, f = 0; c < 1;){
                            if (e = parseFloat(c.toFixed(6)), this._lookUpTableBezier[f] = this._bezierCoefficients(e), d.toFixed(6) === u.toFixed(6)) {
                                e = parseFloat(d.toFixed(6)) + parseFloat(c.toFixed(6)), ++f, this._lookUpTableBezier[f] = this._bezierCoefficients(e);
                                break;
                            }
                            c += u, d -= u, ++f;
                        }
                    }
                    var h = this._lookUpTableBezier.length;
                    if (6 === l) {
                        for(this.isBezier = !0, i = [
                            this.immediateMode._bezierVertex[0],
                            arguments.length <= 0 ? void 0 : arguments[0],
                            arguments.length <= 2 ? void 0 : arguments[2],
                            arguments.length <= 4 ? void 0 : arguments[4]
                        ], a = [
                            this.immediateMode._bezierVertex[1],
                            arguments.length <= 1 ? void 0 : arguments[1],
                            arguments.length <= 3 ? void 0 : arguments[3],
                            arguments.length <= 5 ? void 0 : arguments[5]
                        ], o = 0; o < h; o++)t = i[0] * this._lookUpTableBezier[o][0] + i[1] * this._lookUpTableBezier[o][1] + i[2] * this._lookUpTableBezier[o][2] + i[3] * this._lookUpTableBezier[o][3], r = a[0] * this._lookUpTableBezier[o][0] + a[1] * this._lookUpTableBezier[o][1] + a[2] * this._lookUpTableBezier[o][2] + a[3] * this._lookUpTableBezier[o][3], this.vertex(t, r);
                        this.immediateMode._bezierVertex[0] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._bezierVertex[1] = arguments.length <= 5 ? void 0 : arguments[5];
                    } else if (9 === l) {
                        for(this.isBezier = !0, i = [
                            this.immediateMode._bezierVertex[0],
                            arguments.length <= 0 ? void 0 : arguments[0],
                            arguments.length <= 3 ? void 0 : arguments[3],
                            arguments.length <= 6 ? void 0 : arguments[6]
                        ], a = [
                            this.immediateMode._bezierVertex[1],
                            arguments.length <= 1 ? void 0 : arguments[1],
                            arguments.length <= 4 ? void 0 : arguments[4],
                            arguments.length <= 7 ? void 0 : arguments[7]
                        ], s = [
                            this.immediateMode._bezierVertex[2],
                            arguments.length <= 2 ? void 0 : arguments[2],
                            arguments.length <= 5 ? void 0 : arguments[5],
                            arguments.length <= 8 ? void 0 : arguments[8]
                        ], o = 0; o < h; o++)t = i[0] * this._lookUpTableBezier[o][0] + i[1] * this._lookUpTableBezier[o][1] + i[2] * this._lookUpTableBezier[o][2] + i[3] * this._lookUpTableBezier[o][3], r = a[0] * this._lookUpTableBezier[o][0] + a[1] * this._lookUpTableBezier[o][1] + a[2] * this._lookUpTableBezier[o][2] + a[3] * this._lookUpTableBezier[o][3], n = s[0] * this._lookUpTableBezier[o][0] + s[1] * this._lookUpTableBezier[o][1] + s[2] * this._lookUpTableBezier[o][2] + s[3] * this._lookUpTableBezier[o][3], this.vertex(t, r, n);
                        this.immediateMode._bezierVertex[0] = arguments.length <= 6 ? void 0 : arguments[6], this.immediateMode._bezierVertex[1] = arguments.length <= 7 ? void 0 : arguments[7], this.immediateMode._bezierVertex[2] = arguments.length <= 8 ? void 0 : arguments[8];
                    }
                }, E.default.RendererGL.prototype.quadraticVertex = function() {
                    if (0 === this.immediateMode._quadraticVertex.length) throw Error("vertex() must be used once before calling quadraticVertex()");
                    var e, t, r, n, o, i = [], a = [], s = [], l = arguments.length;
                    if ((e = 0) === this._lookUpTableQuadratic.length || this._lutQuadraticDetail !== this._pInst._curveDetail) {
                        this._lookUpTableQuadratic = [], this._lutQuadraticDetail = this._pInst._curveDetail;
                        for(var u = 1 / this._lutQuadraticDetail, c = 0, d = 1, f = 0; c < 1;){
                            if (e = parseFloat(c.toFixed(6)), this._lookUpTableQuadratic[f] = this._quadraticCoefficients(e), d.toFixed(6) === u.toFixed(6)) {
                                e = parseFloat(d.toFixed(6)) + parseFloat(c.toFixed(6)), ++f, this._lookUpTableQuadratic[f] = this._quadraticCoefficients(e);
                                break;
                            }
                            c += u, d -= u, ++f;
                        }
                    }
                    var h = this._lookUpTableQuadratic.length;
                    if (4 === l) {
                        for(this.isQuadratic = !0, i = [
                            this.immediateMode._quadraticVertex[0],
                            arguments.length <= 0 ? void 0 : arguments[0],
                            arguments.length <= 2 ? void 0 : arguments[2]
                        ], a = [
                            this.immediateMode._quadraticVertex[1],
                            arguments.length <= 1 ? void 0 : arguments[1],
                            arguments.length <= 3 ? void 0 : arguments[3]
                        ], o = 0; o < h; o++)t = i[0] * this._lookUpTableQuadratic[o][0] + i[1] * this._lookUpTableQuadratic[o][1] + i[2] * this._lookUpTableQuadratic[o][2], r = a[0] * this._lookUpTableQuadratic[o][0] + a[1] * this._lookUpTableQuadratic[o][1] + a[2] * this._lookUpTableQuadratic[o][2], this.vertex(t, r);
                        this.immediateMode._quadraticVertex[0] = arguments.length <= 2 ? void 0 : arguments[2], this.immediateMode._quadraticVertex[1] = arguments.length <= 3 ? void 0 : arguments[3];
                    } else if (6 === l) {
                        for(this.isQuadratic = !0, i = [
                            this.immediateMode._quadraticVertex[0],
                            arguments.length <= 0 ? void 0 : arguments[0],
                            arguments.length <= 3 ? void 0 : arguments[3]
                        ], a = [
                            this.immediateMode._quadraticVertex[1],
                            arguments.length <= 1 ? void 0 : arguments[1],
                            arguments.length <= 4 ? void 0 : arguments[4]
                        ], s = [
                            this.immediateMode._quadraticVertex[2],
                            arguments.length <= 2 ? void 0 : arguments[2],
                            arguments.length <= 5 ? void 0 : arguments[5]
                        ], o = 0; o < h; o++)t = i[0] * this._lookUpTableQuadratic[o][0] + i[1] * this._lookUpTableQuadratic[o][1] + i[2] * this._lookUpTableQuadratic[o][2], r = a[0] * this._lookUpTableQuadratic[o][0] + a[1] * this._lookUpTableQuadratic[o][1] + a[2] * this._lookUpTableQuadratic[o][2], n = s[0] * this._lookUpTableQuadratic[o][0] + s[1] * this._lookUpTableQuadratic[o][1] + s[2] * this._lookUpTableQuadratic[o][2], this.vertex(t, r, n);
                        this.immediateMode._quadraticVertex[0] = arguments.length <= 3 ? void 0 : arguments[3], this.immediateMode._quadraticVertex[1] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._quadraticVertex[2] = arguments.length <= 5 ? void 0 : arguments[5];
                    }
                }, E.default.RendererGL.prototype.curveVertex = function() {
                    var e, t, r, n, o, i = [], a = [], s = [], l = arguments.length;
                    if ((e = 0) === this._lookUpTableBezier.length || this._lutBezierDetail !== this._pInst._curveDetail) {
                        this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;
                        for(var u = 1 / this._lutBezierDetail, c = 0, d = 1, f = 0; c < 1;){
                            if (e = parseFloat(c.toFixed(6)), this._lookUpTableBezier[f] = this._bezierCoefficients(e), d.toFixed(6) === u.toFixed(6)) {
                                e = parseFloat(d.toFixed(6)) + parseFloat(c.toFixed(6)), ++f, this._lookUpTableBezier[f] = this._bezierCoefficients(e);
                                break;
                            }
                            c += u, d -= u, ++f;
                        }
                    }
                    var h = this._lookUpTableBezier.length;
                    if (2 === l) {
                        if (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), 8 === this.immediateMode._curveVertex.length) {
                            for(this.isCurve = !0, i = this._bezierToCatmull([
                                this.immediateMode._curveVertex[0],
                                this.immediateMode._curveVertex[2],
                                this.immediateMode._curveVertex[4],
                                this.immediateMode._curveVertex[6]
                            ]), a = this._bezierToCatmull([
                                this.immediateMode._curveVertex[1],
                                this.immediateMode._curveVertex[3],
                                this.immediateMode._curveVertex[5],
                                this.immediateMode._curveVertex[7]
                            ]), o = 0; o < h; o++)t = i[0] * this._lookUpTableBezier[o][0] + i[1] * this._lookUpTableBezier[o][1] + i[2] * this._lookUpTableBezier[o][2] + i[3] * this._lookUpTableBezier[o][3], r = a[0] * this._lookUpTableBezier[o][0] + a[1] * this._lookUpTableBezier[o][1] + a[2] * this._lookUpTableBezier[o][2] + a[3] * this._lookUpTableBezier[o][3], this.vertex(t, r);
                            for(o = 0; o < l; o++)this.immediateMode._curveVertex.shift();
                        }
                    } else if (3 === l && (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), this.immediateMode._curveVertex.push(arguments.length <= 2 ? void 0 : arguments[2]), 12 === this.immediateMode._curveVertex.length)) {
                        for(this.isCurve = !0, i = this._bezierToCatmull([
                            this.immediateMode._curveVertex[0],
                            this.immediateMode._curveVertex[3],
                            this.immediateMode._curveVertex[6],
                            this.immediateMode._curveVertex[9]
                        ]), a = this._bezierToCatmull([
                            this.immediateMode._curveVertex[1],
                            this.immediateMode._curveVertex[4],
                            this.immediateMode._curveVertex[7],
                            this.immediateMode._curveVertex[10]
                        ]), s = this._bezierToCatmull([
                            this.immediateMode._curveVertex[2],
                            this.immediateMode._curveVertex[5],
                            this.immediateMode._curveVertex[8],
                            this.immediateMode._curveVertex[11]
                        ]), o = 0; o < h; o++)t = i[0] * this._lookUpTableBezier[o][0] + i[1] * this._lookUpTableBezier[o][1] + i[2] * this._lookUpTableBezier[o][2] + i[3] * this._lookUpTableBezier[o][3], r = a[0] * this._lookUpTableBezier[o][0] + a[1] * this._lookUpTableBezier[o][1] + a[2] * this._lookUpTableBezier[o][2] + a[3] * this._lookUpTableBezier[o][3], n = s[0] * this._lookUpTableBezier[o][0] + s[1] * this._lookUpTableBezier[o][1] + s[2] * this._lookUpTableBezier[o][2] + s[3] * this._lookUpTableBezier[o][3], this.vertex(t, r, n);
                        for(o = 0; o < l; o++)this.immediateMode._curveVertex.shift();
                    }
                }, E.default.RendererGL.prototype.image = function(e, t, r, n, o, i, a, s, l) {
                    this._isErasing && this.blendMode(this._cachedBlendMode), this._pInst.push(), this._pInst.noLights(), this._pInst.texture(e), this._pInst.textureMode(h14.NORMAL);
                    var u = 0;
                    t <= e.width && (u = t / e.width);
                    var c = 1;
                    t + n <= e.width && (c = (t + n) / e.width);
                    var d = 0;
                    r <= e.height && (d = r / e.height);
                    var f = 1;
                    r + o <= e.height && (f = (r + o) / e.height), this.beginShape(), this.vertex(i, a, 0, u, d), this.vertex(i + s, a, 0, c, d), this.vertex(i + s, a + l, 0, c, f), this.vertex(i, a + l, 0, u, f), this.endShape(h14.CLOSE), this._pInst.pop(), this._isErasing && this.blendMode(h14.REMOVE);
                };
                var o120 = E.default;
                r240.default = o120;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "./p5.Geometry": 309,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.number.to-fixed": 169
            }
        ],
        304: [
            function(e510, t315, r248) {
                "use strict";
                function a58(e511) {
                    return (a58 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e511);
                }
                e510("core-js/modules/es.array.splice"), e510("core-js/modules/es.object.to-string"), e510("core-js/modules/es.regexp.to-string"), Object.defineProperty(r248, "__esModule", {
                    value: !0
                }), r248.default = void 0;
                var n171, f = (n171 = e510("../core/main")) && n171.__esModule ? n171 : {
                    default: n171
                }, o127 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a58(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s48();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e510("../core/constants"));
                function s48() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s48 = function() {
                        return e;
                    }, e;
                }
                f.default.prototype.orbitControl = function(e, t, r) {
                    if (this._assert3d("orbitControl"), f.default._validateParameters("orbitControl", arguments), this.mouseX < this.width && 0 < this.mouseX && this.mouseY < this.height && 0 < this.mouseY) {
                        var n = this._renderer._curCamera;
                        void 0 === e && (e = 1), void 0 === t && (t = e), void 0 === r && (r = 0.5), !0 !== this.contextMenuDisabled && (this.canvas.oncontextmenu = function() {
                            return !1;
                        }, this._setProperty("contextMenuDisabled", !0)), !0 !== this.wheelDefaultDisabled && (this.canvas.onwheel = function() {
                            return !1;
                        }, this._setProperty("wheelDefaultDisabled", !0));
                        var o = this.height < this.width ? this.height : this.width;
                        if (this._mouseWheelDeltaY !== this._pmouseWheelDeltaY && (0 < this._mouseWheelDeltaY ? this._renderer._curCamera._orbit(0, 0, r * o) : this._renderer._curCamera._orbit(0, 0, -r * o)), this.mouseIsPressed) {
                            if (this.mouseButton === this.LEFT) {
                                var i = -e * (this.mouseX - this.pmouseX) / o, a = t * (this.mouseY - this.pmouseY) / o;
                                this._renderer._curCamera._orbit(i, a, 0);
                            } else if (this.mouseButton === this.RIGHT) {
                                var s = n._getLocalAxes(), l = Math.sqrt(s.x[0] * s.x[0] + s.x[2] * s.x[2]);
                                0 !== l && (s.x[0] /= l, s.x[2] /= l);
                                var u = Math.sqrt(s.y[0] * s.y[0] + s.y[2] * s.y[2]);
                                0 !== u && (s.y[0] /= u, s.y[2] /= u);
                                var c = -1 * e * (this.mouseX - this.pmouseX), d = -1 * t * (this.mouseY - this.pmouseY);
                                n.setPosition(n.eyeX + c * s.x[0] + d * s.z[0], n.eyeY, n.eyeZ + c * s.x[2] + d * s.z[2]);
                            }
                        }
                        return this;
                    }
                }, f.default.prototype.debugMode = function() {
                    this._assert3d("debugMode");
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    f.default._validateParameters("debugMode", t);
                    for(var n = this._registeredMethods.post.length - 1; 0 <= n; n--)this._registeredMethods.post[n].toString() !== this._grid().toString() && this._registeredMethods.post[n].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(n, 1);
                    t[0] === o127.GRID ? this.registerMethod("post", this._grid.call(this, t[1], t[2], t[3], t[4], t[5])) : t[0] === o127.AXES ? this.registerMethod("post", this._axesIcon.call(this, t[1], t[2], t[3], t[4])) : (this.registerMethod("post", this._grid.call(this, t[0], t[1], t[2], t[3], t[4])), this.registerMethod("post", this._axesIcon.call(this, t[5], t[6], t[7], t[8])));
                }, f.default.prototype.noDebugMode = function() {
                    this._assert3d("noDebugMode");
                    for(var e = this._registeredMethods.post.length - 1; 0 <= e; e--)this._registeredMethods.post[e].toString() !== this._grid().toString() && this._registeredMethods.post[e].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(e, 1);
                }, f.default.prototype._grid = function(e512, r, n, o, i) {
                    void 0 === e512 && (e512 = this.width / 2), void 0 === r && (r = Math.round(e512 / 30) < 4 ? 4 : Math.round(e512 / 30)), void 0 === n && (n = 0), void 0 === o && (o = 0), void 0 === i && (i = 0);
                    var a = e512 / r, s = e512 / 2;
                    return function() {
                        this.push(), this.stroke(255 * this._renderer.curStrokeColor[0], 255 * this._renderer.curStrokeColor[1], 255 * this._renderer.curStrokeColor[2]), this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0], this._renderer._curCamera.cameraMatrix.mat4[1], this._renderer._curCamera.cameraMatrix.mat4[2], this._renderer._curCamera.cameraMatrix.mat4[3], this._renderer._curCamera.cameraMatrix.mat4[4], this._renderer._curCamera.cameraMatrix.mat4[5], this._renderer._curCamera.cameraMatrix.mat4[6], this._renderer._curCamera.cameraMatrix.mat4[7], this._renderer._curCamera.cameraMatrix.mat4[8], this._renderer._curCamera.cameraMatrix.mat4[9], this._renderer._curCamera.cameraMatrix.mat4[10], this._renderer._curCamera.cameraMatrix.mat4[11], this._renderer._curCamera.cameraMatrix.mat4[12], this._renderer._curCamera.cameraMatrix.mat4[13], this._renderer._curCamera.cameraMatrix.mat4[14], this._renderer._curCamera.cameraMatrix.mat4[15]);
                        for(var e = 0; e <= r; e++)this.beginShape(this.LINES), this.vertex(-s + n, o, e * a - s + i), this.vertex(+s + n, o, e * a - s + i), this.endShape();
                        for(var t = 0; t <= r; t++)this.beginShape(this.LINES), this.vertex(t * a - s + n, o, -s + i), this.vertex(t * a - s + n, o, +s + i), this.endShape();
                        this.pop();
                    };
                }, f.default.prototype._axesIcon = function(e, t, r, n) {
                    return void 0 === e && (e = 40 < this.width / 20 ? this.width / 20 : 40), void 0 === t && (t = -this.width / 4), void 0 === r && (r = t), void 0 === n && (n = t), function() {
                        this.push(), this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0], this._renderer._curCamera.cameraMatrix.mat4[1], this._renderer._curCamera.cameraMatrix.mat4[2], this._renderer._curCamera.cameraMatrix.mat4[3], this._renderer._curCamera.cameraMatrix.mat4[4], this._renderer._curCamera.cameraMatrix.mat4[5], this._renderer._curCamera.cameraMatrix.mat4[6], this._renderer._curCamera.cameraMatrix.mat4[7], this._renderer._curCamera.cameraMatrix.mat4[8], this._renderer._curCamera.cameraMatrix.mat4[9], this._renderer._curCamera.cameraMatrix.mat4[10], this._renderer._curCamera.cameraMatrix.mat4[11], this._renderer._curCamera.cameraMatrix.mat4[12], this._renderer._curCamera.cameraMatrix.mat4[13], this._renderer._curCamera.cameraMatrix.mat4[14], this._renderer._curCamera.cameraMatrix.mat4[15]), this.strokeWeight(2), this.stroke(255, 0, 0), this.beginShape(this.LINES), this.vertex(t, r, n), this.vertex(t + e, r, n), this.endShape(), this.stroke(0, 255, 0), this.beginShape(this.LINES), this.vertex(t, r, n), this.vertex(t, r + e, n), this.endShape(), this.stroke(0, 0, 255), this.beginShape(this.LINES), this.vertex(t, r, n), this.vertex(t, r, n + e), this.endShape(), this.pop();
                    };
                };
                var i80 = f.default;
                r248.default = i80;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "core-js/modules/es.array.splice": 162,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.to-string": 179
            }
        ],
        305: [
            function(e513, t316, r249) {
                "use strict";
                function a59(e514) {
                    return (a59 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e514);
                }
                Object.defineProperty(r249, "__esModule", {
                    value: !0
                }), r249.default = void 0;
                var n172, y = (n172 = e513("../core/main")) && n172.__esModule ? n172 : {
                    default: n172
                }, o128 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a59(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s49();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e513("../core/constants"));
                function s49() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s49 = function() {
                        return e;
                    }, e;
                }
                y.default.prototype.ambientLight = function(e, t, r, n) {
                    this._assert3d("ambientLight"), y.default._validateParameters("ambientLight", arguments);
                    var o = this.color.apply(this, arguments);
                    return this._renderer.ambientLightColors.push(o._array[0], o._array[1], o._array[2]), this._renderer._enableLighting = !0, this;
                }, y.default.prototype.specularColor = function(e, t, r) {
                    this._assert3d("specularColor"), y.default._validateParameters("specularColor", arguments);
                    var n = this.color.apply(this, arguments);
                    return this._renderer.specularColors = [
                        n._array[0],
                        n._array[1],
                        n._array[2]
                    ], this;
                }, y.default.prototype.directionalLight = function(e, t, r, n, o, i) {
                    var a, s, l, u;
                    this._assert3d("directionalLight"), y.default._validateParameters("directionalLight", arguments), a = e instanceof y.default.Color ? e : this.color(e, t, r);
                    var c = arguments[arguments.length - 1];
                    u = "number" == typeof c ? (s = arguments[arguments.length - 3], l = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (s = c.x, l = c.y, c.z);
                    var d = Math.sqrt(s * s + l * l + u * u);
                    return this._renderer.directionalLightDirections.push(s / d, l / d, u / d), this._renderer.directionalLightDiffuseColors.push(a._array[0], a._array[1], a._array[2]), Array.prototype.push.apply(this._renderer.directionalLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = !0, this;
                }, y.default.prototype.pointLight = function(e, t, r, n, o, i) {
                    var a, s, l, u;
                    this._assert3d("pointLight"), y.default._validateParameters("pointLight", arguments), a = e instanceof y.default.Color ? e : this.color(e, t, r);
                    var c = arguments[arguments.length - 1];
                    return u = "number" == typeof c ? (s = arguments[arguments.length - 3], l = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (s = c.x, l = c.y, c.z), this._renderer.pointLightPositions.push(s, l, u), this._renderer.pointLightDiffuseColors.push(a._array[0], a._array[1], a._array[2]), Array.prototype.push.apply(this._renderer.pointLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = !0, this;
                }, y.default.prototype.lights = function() {
                    if (this._assert3d("lights"), this._colorMode === o128.RGB) this.ambientLight(128, 128, 128), this.directionalLight(128, 128, 128, 0, 0, -1);
                    else {
                        var e = this._colorMaxes[this._colorMode][2];
                        this.ambientLight(0, 0, e), this.directionalLight(0, 0, e, 0, 0, -1);
                    }
                    return this;
                }, y.default.prototype.lightFalloff = function(e, t, r) {
                    return this._assert3d("lightFalloff"), y.default._validateParameters("lightFalloff", arguments), e < 0 && (e = 0, console.warn("Value of constant argument in lightFalloff() should be never be negative. Set to 0.")), t < 0 && (t = 0, console.warn("Value of linear argument in lightFalloff() should be never be negative. Set to 0.")), r < 0 && (r = 0, console.warn("Value of quadratic argument in lightFalloff() should be never be negative. Set to 0.")), 0 === e && 0 === t && 0 === r && (e = 1, console.warn("Either one of the three arguments in lightFalloff() should be greater than zero. Set constant argument to 1.")), this._renderer.constantAttenuation = e, this._renderer.linearAttenuation = t, this._renderer.quadraticAttenuation = r, this;
                }, y.default.prototype.spotLight = function(e, t, r, n, o, i, a, s, l, u, c) {
                    var d, f, h;
                    this._assert3d("spotLight"), y.default._validateParameters("spotLight", arguments);
                    var p = arguments.length;
                    switch(p){
                        case 11:
                        case 10:
                            d = this.color(e, t, r), f = new y.default.Vector(n, o, i), h = new y.default.Vector(a, s, l);
                            break;
                        case 9:
                            e instanceof y.default.Color ? (d = e, f = new y.default.Vector(t, r, n), h = new y.default.Vector(o, i, a), u = s, c = l) : n instanceof y.default.Vector ? (d = this.color(e, t, r), f = n, h = new y.default.Vector(o, i, a), u = s, c = l) : a instanceof y.default.Vector ? (d = this.color(e, t, r), f = new y.default.Vector(n, o, i), h = a, u = s, c = l) : (d = this.color(e, t, r), f = new y.default.Vector(n, o, i), h = new y.default.Vector(a, s, l));
                            break;
                        case 8:
                            u = (h = e instanceof y.default.Color ? (d = e, f = new y.default.Vector(t, r, n), new y.default.Vector(o, i, a)) : n instanceof y.default.Vector ? (d = this.color(e, t, r), f = n, new y.default.Vector(o, i, a)) : (d = this.color(e, t, r), f = new y.default.Vector(n, o, i), a), s);
                            break;
                        case 7:
                            e instanceof y.default.Color && t instanceof y.default.Vector ? (d = e, f = t, h = new y.default.Vector(r, n, o), u = i, c = a) : e instanceof y.default.Color && o instanceof y.default.Vector ? (d = e, f = new y.default.Vector(t, r, n), h = o, u = i, c = a) : n instanceof y.default.Vector && o instanceof y.default.Vector ? (d = this.color(e, t, r), f = n, h = o, u = i, c = a) : h = e instanceof y.default.Color ? (d = e, f = new y.default.Vector(t, r, n), new y.default.Vector(o, i, a)) : n instanceof y.default.Vector ? (d = this.color(e, t, r), f = n, new y.default.Vector(o, i, a)) : (d = this.color(e, t, r), f = new y.default.Vector(n, o, i), a);
                            break;
                        case 6:
                            n instanceof y.default.Vector && o instanceof y.default.Vector ? (d = this.color(e, t, r), f = n, h = o, u = i) : e instanceof y.default.Color && o instanceof y.default.Vector ? (d = e, f = new y.default.Vector(t, r, n), h = o, u = i) : e instanceof y.default.Color && t instanceof y.default.Vector && (d = e, f = t, h = new y.default.Vector(r, n, o), u = i);
                            break;
                        case 5:
                            e instanceof y.default.Color && t instanceof y.default.Vector && r instanceof y.default.Vector ? (d = e, f = t, h = r, u = n, c = o) : n instanceof y.default.Vector && o instanceof y.default.Vector ? (d = this.color(e, t, r), f = n, h = o) : e instanceof y.default.Color && o instanceof y.default.Vector ? (d = e, f = new y.default.Vector(t, r, n), h = o) : e instanceof y.default.Color && t instanceof y.default.Vector && (d = e, f = t, h = new y.default.Vector(r, n, o));
                            break;
                        case 4:
                            d = e, f = t, h = r, u = n;
                            break;
                        case 3:
                            d = e, f = t, h = r;
                            break;
                        default:
                            return console.warn("Sorry, input for spotlight() is not in prescribed format. Too ".concat(p < 3 ? "few" : "many", " arguments were provided")), this;
                    }
                    return this._renderer.spotLightDiffuseColors.push(d._array[0], d._array[1], d._array[2]), Array.prototype.push.apply(this._renderer.spotLightSpecularColors, this._renderer.specularColors), this._renderer.spotLightPositions.push(f.x, f.y, f.z), h.normalize(), this._renderer.spotLightDirections.push(h.x, h.y, h.z), void 0 === u && (u = Math.PI / 3), void 0 !== c && c < 1 ? (c = 1, console.warn("Value of concentration needs to be greater than 1. Setting it to 1")) : void 0 === c && (c = 100), u = this._renderer._pInst._toRadians(u), this._renderer.spotLightAngle.push(Math.cos(u)), this._renderer.spotLightConc.push(c), this._renderer._enableLighting = !0, this;
                }, y.default.prototype.noLights = function() {
                    return this._assert3d("noLights"), y.default._validateParameters("noLights", arguments), this._renderer._enableLighting = !1, this._renderer.ambientLightColors.length = 0, this._renderer.specularColors = [
                        1,
                        1,
                        1
                    ], this._renderer.directionalLightDirections.length = 0, this._renderer.directionalLightDiffuseColors.length = 0, this._renderer.directionalLightSpecularColors.length = 0, this._renderer.pointLightPositions.length = 0, this._renderer.pointLightDiffuseColors.length = 0, this._renderer.pointLightSpecularColors.length = 0, this._renderer.spotLightPositions.length = 0, this._renderer.spotLightDirections.length = 0, this._renderer.spotLightDiffuseColors.length = 0, this._renderer.spotLightSpecularColors.length = 0, this._renderer.spotLightAngle.length = 0, this._renderer.spotLightConc.length = 0, this._renderer.constantAttenuation = 1, this._renderer.linearAttenuation = 0, this._renderer.quadraticAttenuation = 0, this._renderer._useShininess = 1, this;
                };
                var i81 = y.default;
                r249.default = i81;
            },
            {
                "../core/constants": 250,
                "../core/main": 260
            }
        ],
        306: [
            function(e515, t317, r250) {
                "use strict";
                e515("core-js/modules/es.array.concat"), e515("core-js/modules/es.array.index-of"), e515("core-js/modules/es.array.slice"), e515("core-js/modules/es.array.splice"), e515("core-js/modules/es.object.to-string"), e515("core-js/modules/es.regexp.exec"), e515("core-js/modules/es.string.match"), e515("core-js/modules/es.string.split"), e515("core-js/modules/es.string.trim"), Object.defineProperty(r250, "__esModule", {
                    value: !0
                }), r250.default = void 0;
                var n173, S = (n173 = e515("../core/main")) && n173.__esModule ? n173 : {
                    default: n173
                };
                function s50(e, t, r) {
                    for(var n = 0, o = e.length; n < o; n++)if (e[n] !== t.getUint8(r + n, !1)) return !1;
                    return !0;
                }
                e515("./p5.Geometry"), S.default.prototype.loadModel = function(e516) {
                    var t318, r251, n174;
                    S.default._validateParameters("loadModel", arguments);
                    var o130 = e516.slice(-4);
                    "boolean" == typeof arguments[1] ? (t318 = arguments[1], r251 = arguments[2], n174 = arguments[3], void 0 !== arguments[4] && (o130 = arguments[4])) : (t318 = !1, r251 = arguments[1], n174 = arguments[2], void 0 !== arguments[3] && (o130 = arguments[3]));
                    var i82 = new S.default.Geometry;
                    i82.gid = "".concat(e516, "|").concat(t318);
                    var a60 = this;
                    return o130.match(/\.stl$/i) ? this.httpDo(e516, "GET", "arrayBuffer", function(e517) {
                        !function(e518, t319) {
                            if ((function(e) {
                                for(var t = new DataView(e), r = [
                                    115,
                                    111,
                                    108,
                                    105,
                                    100
                                ], n = 0; n < 5; n++)if (s50(r, t, n)) return !1;
                                return !0;
                            })(t319)) !function(e, t) {
                                for(var r, n, o, i, a, s, l, u = new DataView(t), c = u.getUint32(80, !0), d = !1, f = 0; f < 70; f++)1129270351 === u.getUint32(f, !1) && 82 === u.getUint8(f + 4) && 61 === u.getUint8(f + 5) && (d = !0, i = [], a = u.getUint8(f + 6) / 255, s = u.getUint8(f + 7) / 255, l = u.getUint8(f + 8) / 255);
                                for(var h = 0; h < c; h++){
                                    var p = 84 + 50 * h, y = u.getFloat32(p, !0), m = u.getFloat32(4 + p, !0), g = u.getFloat32(8 + p, !0);
                                    if (d) {
                                        var v = u.getUint16(48 + p, !0);
                                        o = 0 == (32768 & v) ? (r = (31 & v) / 31, n = (v >> 5 & 31) / 31, (v >> 10 & 31) / 31) : (r = a, n = s, l);
                                    }
                                    for(var b = new S.default.Vector(y, m, g), _ = 1; _ <= 3; _++){
                                        var x = p + 12 * _, w = new S.default.Vector(u.getFloat32(x, !0), u.getFloat32(4 + x, !0), u.getFloat32(8 + x, !0));
                                        e.vertices.push(w), e.vertexNormals.push(b), d && i.push(r, n, o);
                                    }
                                    e.faces.push([
                                        3 * h,
                                        3 * h + 1,
                                        3 * h + 2
                                    ]), e.uvs.push([
                                        0,
                                        0
                                    ], [
                                        0,
                                        0
                                    ], [
                                        0,
                                        0
                                    ]);
                                }
                            }(e518, t319);
                            else {
                                var r252 = new DataView(t319);
                                if (!("TextDecoder" in window)) return console.warn("Sorry, ASCII STL loading only works in browsers that support TextDecoder (https://caniuse.com/#feat=textencoder)");
                                var n175 = new TextDecoder("utf-8").decode(r252).split("\n");
                                !function(e, t) {
                                    for(var r, n, o = "", i = [], a = 0; a < t.length; ++a){
                                        for(var s = t[a].trim(), l = s.split(" "), u = 0; u < l.length; ++u)"" === l[u] && l.splice(u, 1);
                                        if (0 !== l.length) switch(o){
                                            case "":
                                                if ("solid" !== l[0]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "solid"'));
                                                o = "solid";
                                                break;
                                            case "solid":
                                                if ("facet" !== l[0] || "normal" !== l[1]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "facet normal"'));
                                                r = new S.default.Vector(parseFloat(l[2]), parseFloat(l[3]), parseFloat(l[4])), e.vertexNormals.push(r, r, r), o = "facet normal";
                                                break;
                                            case "facet normal":
                                                if ("outer" !== l[0] || "loop" !== l[1]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "outer loop"'));
                                                o = "vertex";
                                                break;
                                            case "vertex":
                                                if ("vertex" === l[0]) n = new S.default.Vector(parseFloat(l[1]), parseFloat(l[2]), parseFloat(l[3])), e.vertices.push(n), e.uvs.push([
                                                    0,
                                                    0
                                                ]), i.push(e.vertices.indexOf(n));
                                                else {
                                                    if ("endloop" !== l[0]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "vertex" or "endloop"'));
                                                    e.faces.push(i), i = [], o = "endloop";
                                                }
                                                break;
                                            case "endloop":
                                                if ("endfacet" !== l[0]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "endfacet"'));
                                                o = "endfacet";
                                                break;
                                            case "endfacet":
                                                if ("endsolid" !== l[0]) {
                                                    if ("facet" !== l[0] || "normal" !== l[1]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "endsolid" or "facet normal"'));
                                                    r = new S.default.Vector(parseFloat(l[2]), parseFloat(l[3]), parseFloat(l[4])), e.vertexNormals.push(r, r, r), o = "facet normal";
                                                }
                                                break;
                                            default:
                                                console.error('Invalid state "'.concat(o, '"'));
                                        }
                                    }
                                }(e518, n175);
                            }
                        }(i82, e517), t318 && i82.normalize(), a60._decrementPreload(), "function" == typeof r251 && r251(i82);
                    }, n174) : o130.match(/\.obj$/i) ? this.loadStrings(e516, function(e519) {
                        !function(e, t) {
                            for(var r = {
                                v: [],
                                vt: [],
                                vn: []
                            }, n = {
                            }, o = 0; o < t.length; ++o){
                                var i = t[o].trim().split(/\b\s+/);
                                if (0 < i.length) {
                                    if ("v" === i[0] || "vn" === i[0]) {
                                        var a = new S.default.Vector(parseFloat(i[1]), parseFloat(i[2]), parseFloat(i[3]));
                                        r[i[0]].push(a);
                                    } else if ("vt" === i[0]) {
                                        var s = [
                                            parseFloat(i[1]),
                                            1 - parseFloat(i[2])
                                        ];
                                        r[i[0]].push(s);
                                    } else if ("f" === i[0]) for(var l = 3; l < i.length; ++l){
                                        for(var u = [], c = [
                                            1,
                                            l - 1,
                                            l
                                        ], d = 0; d < c.length; ++d){
                                            var f = i[c[d]], h = 0;
                                            if (void 0 !== n[f]) h = n[f];
                                            else {
                                                for(var p = f.split("/"), y = 0; y < p.length; y++)p[y] = parseInt(p[y]) - 1;
                                                h = n[f] = e.vertices.length, e.vertices.push(r.v[p[0]].copy()), r.vt[p[1]] ? e.uvs.push(r.vt[p[1]].slice()) : e.uvs.push([
                                                    0,
                                                    0
                                                ]), r.vn[p[2]] && e.vertexNormals.push(r.vn[p[2]].copy());
                                            }
                                            u.push(h);
                                        }
                                        u[0] !== u[1] && u[0] !== u[2] && u[1] !== u[2] && e.faces.push(u);
                                    }
                                }
                            }
                            0 === e.vertexNormals.length && e.computeNormals();
                        }(i82, e519), t318 && i82.normalize(), a60._decrementPreload(), "function" == typeof r251 && r251(i82);
                    }, n174) : (S.default._friendlyFileLoadError(3, e516), n174 ? n174() : console.error("Sorry, the file type is invalid. Only OBJ and STL files are supported.")), i82;
                }, S.default.prototype.model = function(e) {
                    this._assert3d("model"), S.default._validateParameters("model", arguments), 0 < e.vertices.length && (this._renderer.geometryInHash(e.gid) || (e._makeTriangleEdges()._edgesToVertices(), this._renderer.createBuffers(e.gid, e)), this._renderer.drawBuffers(e.gid));
                };
                var o129 = S.default;
                r250.default = o129;
            },
            {
                "../core/main": 260,
                "./p5.Geometry": 309,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.array.splice": 162,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.string.match": 184,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.string.trim": 190
            }
        ],
        307: [
            function(e520, t320, r253) {
                "use strict";
                function a61(e521) {
                    return (a61 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e521);
                }
                e520("core-js/modules/es.array.join"), Object.defineProperty(r253, "__esModule", {
                    value: !0
                }), r253.default = void 0;
                var n176, u = (n176 = e520("../core/main")) && n176.__esModule ? n176 : {
                    default: n176
                }, o131 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a61(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s51();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e520("../core/constants"));
                function s51() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s51 = function() {
                        return e;
                    }, e;
                }
                e520("./p5.Texture"), u.default.prototype.loadShader = function(e522, t, r, n) {
                    u.default._validateParameters("loadShader", arguments), n = n || console.error;
                    function o() {
                        a._decrementPreload(), r && r(i);
                    }
                    var i = new u.default.Shader, a = this, s = !1, l = !1;
                    return this.loadStrings(e522, function(e) {
                        i._vertSrc = e.join("\n"), l = !0, s && o();
                    }, n), this.loadStrings(t, function(e) {
                        i._fragSrc = e.join("\n"), s = !0, l && o();
                    }, n), i;
                }, u.default.prototype.createShader = function(e, t) {
                    return this._assert3d("createShader"), u.default._validateParameters("createShader", arguments), new u.default.Shader(this._renderer, e, t);
                }, u.default.prototype.shader = function(e) {
                    return this._assert3d("shader"), u.default._validateParameters("shader", arguments), void 0 === e._renderer && (e._renderer = this._renderer), e.isStrokeShader() ? this._renderer.userStrokeShader = e : (this._renderer.userFillShader = e, this._renderer._useNormalMaterial = !1), e.init(), this;
                }, u.default.prototype.resetShader = function() {
                    return this._renderer.userFillShader = this._renderer.userStrokeShader = null, this;
                }, u.default.prototype.normalMaterial = function() {
                    this._assert3d("normalMaterial");
                    for(var e = arguments.length, t = new Array(e), r = 0; r < e; r++)t[r] = arguments[r];
                    return u.default._validateParameters("normalMaterial", t), this._renderer.drawMode = o131.FILL, this._renderer._useSpecularMaterial = !1, this._renderer._useEmissiveMaterial = !1, this._renderer._useNormalMaterial = !0, this._renderer.curFillColor = [
                        1,
                        1,
                        1,
                        1
                    ], this._renderer._setProperty("_doFill", !0), this.noStroke(), this;
                }, u.default.prototype.texture = function(e) {
                    return this._assert3d("texture"), u.default._validateParameters("texture", arguments), e.gifProperties && e._animateGif(this), this._renderer.drawMode = o131.TEXTURE, this._renderer._useSpecularMaterial = !1, this._renderer._useEmissiveMaterial = !1, this._renderer._useNormalMaterial = !1, this._renderer._tex = e, this._renderer._setProperty("_doFill", !0), this;
                }, u.default.prototype.textureMode = function(e) {
                    e !== o131.IMAGE && e !== o131.NORMAL ? console.warn("You tried to set ".concat(e, " textureMode only supports IMAGE & NORMAL ")) : this._renderer.textureMode = e;
                }, u.default.prototype.textureWrap = function(e) {
                    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : e;
                    this._renderer.textureWrapX = e, this._renderer.textureWrapY = t;
                    for(var r = this._renderer.textures, n = 0; n < r.length; n++)r[n].setWrapMode(e, t);
                }, u.default.prototype.ambientMaterial = function(e, t, r) {
                    this._assert3d("ambientMaterial"), u.default._validateParameters("ambientMaterial", arguments);
                    var n = u.default.prototype.color.apply(this, arguments);
                    return this._renderer.curFillColor = n._array, this._renderer._useSpecularMaterial = !1, this._renderer._useEmissiveMaterial = !1, this._renderer._useNormalMaterial = !1, this._renderer._enableLighting = !0, this._renderer._tex = null, this;
                }, u.default.prototype.emissiveMaterial = function(e, t, r, n) {
                    this._assert3d("emissiveMaterial"), u.default._validateParameters("emissiveMaterial", arguments);
                    var o = u.default.prototype.color.apply(this, arguments);
                    return this._renderer.curFillColor = o._array, this._renderer._useSpecularMaterial = !1, this._renderer._useEmissiveMaterial = !0, this._renderer._useNormalMaterial = !1, this._renderer._enableLighting = !0, this._renderer._tex = null, this;
                }, u.default.prototype.specularMaterial = function(e, t, r, n) {
                    this._assert3d("specularMaterial"), u.default._validateParameters("specularMaterial", arguments);
                    var o = u.default.prototype.color.apply(this, arguments);
                    return this._renderer.curFillColor = o._array, this._renderer._useSpecularMaterial = !0, this._renderer._useEmissiveMaterial = !1, this._renderer._useNormalMaterial = !1, this._renderer._enableLighting = !0, this._renderer._tex = null, this;
                }, u.default.prototype.shininess = function(e) {
                    return this._assert3d("shininess"), u.default._validateParameters("shininess", arguments), e < 1 && (e = 1), this._renderer._useShininess = e, this;
                }, u.default.RendererGL.prototype._applyColorBlend = function(e) {
                    var t = this.GL, r = this.drawMode === o131.TEXTURE || e[e.length - 1] < 1 || this._isErasing;
                    return r !== this._isBlending && (r || this.curBlendMode !== o131.BLEND && this.curBlendMode !== o131.ADD ? t.enable(t.BLEND) : t.disable(t.BLEND), t.depthMask(!0), this._isBlending = r), this._applyBlendMode(), e;
                }, u.default.RendererGL.prototype._applyBlendMode = function() {
                    if (this._cachedBlendMode !== this.curBlendMode) {
                        var e = this.GL;
                        switch(this.curBlendMode){
                            case o131.BLEND:
                            case o131.ADD:
                                e.blendEquation(e.FUNC_ADD), e.blendFunc(e.SRC_ALPHA, e.ONE_MINUS_SRC_ALPHA);
                                break;
                            case o131.REMOVE:
                                e.blendEquation(e.FUNC_REVERSE_SUBTRACT), e.blendFunc(e.SRC_ALPHA, e.DST_ALPHA);
                                break;
                            case o131.MULTIPLY:
                                e.blendEquationSeparate(e.FUNC_ADD, e.FUNC_ADD), e.blendFuncSeparate(e.ZERO, e.SRC_COLOR, e.ONE, e.ONE);
                                break;
                            case o131.SCREEN:
                                e.blendEquationSeparate(e.FUNC_ADD, e.FUNC_ADD), e.blendFuncSeparate(e.ONE_MINUS_DST_COLOR, e.ONE, e.ONE, e.ONE);
                                break;
                            case o131.EXCLUSION:
                                e.blendEquationSeparate(e.FUNC_ADD, e.FUNC_ADD), e.blendFuncSeparate(e.ONE_MINUS_DST_COLOR, e.ONE_MINUS_SRC_COLOR, e.ONE, e.ONE);
                                break;
                            case o131.REPLACE:
                                e.blendEquation(e.FUNC_ADD), e.blendFunc(e.ONE, e.ZERO);
                                break;
                            case o131.SUBTRACT:
                                e.blendEquationSeparate(e.FUNC_REVERSE_SUBTRACT, e.FUNC_ADD), e.blendFuncSeparate(e.SRC_ALPHA, e.ONE, e.ONE, e.ONE);
                                break;
                            case o131.DARKEST:
                                this.blendExt ? (e.blendEquationSeparate(this.blendExt.MIN_EXT, e.FUNC_ADD), e.blendFuncSeparate(e.ONE, e.ONE, e.ONE, e.ONE)) : console.warn("blendMode(DARKEST) does not work in your browser in WEBGL mode.");
                                break;
                            case o131.LIGHTEST:
                                this.blendExt ? (e.blendEquationSeparate(this.blendExt.MAX_EXT, e.FUNC_ADD), e.blendFuncSeparate(e.ONE, e.ONE, e.ONE, e.ONE)) : console.warn("blendMode(LIGHTEST) does not work in your browser in WEBGL mode.");
                                break;
                            default:
                                console.error("Oops! Somehow RendererGL set curBlendMode to an unsupported mode.");
                        }
                        this._isErasing || (this._cachedBlendMode = this.curBlendMode);
                    }
                };
                var i83 = u.default;
                r253.default = i83;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "./p5.Texture": 316,
                "core-js/modules/es.array.join": 157
            }
        ],
        308: [
            function(e523, t321, r254) {
                "use strict";
                Object.defineProperty(r254, "__esModule", {
                    value: !0
                }), r254.default = void 0;
                var n177, y = (n177 = e523("../core/main")) && n177.__esModule ? n177 : {
                    default: n177
                };
                y.default.prototype.camera = function() {
                    var e;
                    this._assert3d("camera");
                    for(var t = arguments.length, r = new Array(t), n = 0; n < t; n++)r[n] = arguments[n];
                    return y.default._validateParameters("camera", r), (e = this._renderer._curCamera).camera.apply(e, r), this;
                }, y.default.prototype.perspective = function() {
                    var e;
                    this._assert3d("perspective");
                    for(var t = arguments.length, r = new Array(t), n = 0; n < t; n++)r[n] = arguments[n];
                    return y.default._validateParameters("perspective", r), (e = this._renderer._curCamera).perspective.apply(e, r), this;
                }, y.default.prototype.ortho = function() {
                    var e;
                    this._assert3d("ortho");
                    for(var t = arguments.length, r = new Array(t), n = 0; n < t; n++)r[n] = arguments[n];
                    return y.default._validateParameters("ortho", r), (e = this._renderer._curCamera).ortho.apply(e, r), this;
                }, y.default.prototype.frustum = function() {
                    var e;
                    this._assert3d("frustum");
                    for(var t = arguments.length, r = new Array(t), n = 0; n < t; n++)r[n] = arguments[n];
                    return y.default._validateParameters("frustum", r), (e = this._renderer._curCamera).frustum.apply(e, r), this;
                }, y.default.prototype.createCamera = function() {
                    this._assert3d("createCamera");
                    var e = new y.default.Camera(this._renderer);
                    return e._computeCameraDefaultSettings(), e._setDefaultCamera(), this._renderer._curCamera = e;
                }, y.default.Camera = function(e) {
                    this._renderer = e, this.cameraType = "default", this.cameraMatrix = new y.default.Matrix, this.projMatrix = new y.default.Matrix;
                }, y.default.Camera.prototype.perspective = function(e, t, r, n) {
                    this.cameraType = 0 < arguments.length ? "custom" : "default", void 0 === e ? (e = this.defaultCameraFOV, this.cameraFOV = e) : this.cameraFOV = this._renderer._pInst._toRadians(e), void 0 === t && (t = this.defaultAspectRatio), void 0 === r && (r = this.defaultCameraNear), void 0 === n && (n = this.defaultCameraFar), r <= 0.0001 && (r = 0.01, console.log("Avoid perspective near plane values close to or below 0. Setting value to 0.01.")), n < r && console.log("Perspective far plane value is less than near plane value. Nothing will be shown."), this.aspectRatio = t, this.cameraNear = r, this.cameraFar = n, this.projMatrix = y.default.Matrix.identity();
                    var o = 1 / Math.tan(this.cameraFOV / 2), i = 1 / (this.cameraNear - this.cameraFar);
                    this.projMatrix.set(o / t, 0, 0, 0, 0, -o, 0, 0, 0, 0, (n + r) * i, -1, 0, 0, 2 * n * r * i, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]);
                }, y.default.Camera.prototype.ortho = function(e, t, r, n, o, i) {
                    void 0 === e && (e = -this._renderer.width / 2), void 0 === t && (t = this._renderer.width / 2), void 0 === r && (r = -this._renderer.height / 2), void 0 === n && (n = this._renderer.height / 2), void 0 === o && (o = 0), void 0 === i && (i = Math.max(this._renderer.width, this._renderer.height));
                    var a = t - e, s = n - r, l = i - o, u = 2 / a, c = 2 / s, d = -2 / l, f = -(t + e) / a, h = -(n + r) / s, p = -(i + o) / l;
                    this.projMatrix = y.default.Matrix.identity(), this.projMatrix.set(u, 0, 0, 0, 0, -c, 0, 0, 0, 0, d, 0, f, h, p, 1), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]), this.cameraType = "custom";
                }, y.default.Camera.prototype.frustum = function(e, t, r, n, o, i) {
                    void 0 === e && (e = -this._renderer.width / 2), void 0 === t && (t = this._renderer.width / 2), void 0 === r && (r = -this._renderer.height / 2), void 0 === n && (n = this._renderer.height / 2), void 0 === o && (o = 0), void 0 === i && (i = Math.max(this._renderer.width, this._renderer.height));
                    var a = t - e, s = n - r, l = i - o, u = 2 * o / a, c = 2 * o / s, d = -2 * i * o / l, f = (t + e) / a, h = (n + r) / s, p = -(i + o) / l;
                    this.projMatrix = y.default.Matrix.identity(), this.projMatrix.set(u, 0, 0, 0, 0, c, 0, 0, f, h, p, -1, 0, 0, d, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]), this.cameraType = "custom";
                }, y.default.Camera.prototype._rotateView = function(e, t, r, n) {
                    var o = this.centerX, i = this.centerY, a = this.centerZ;
                    o -= this.eyeX, i -= this.eyeY, a -= this.eyeZ;
                    var s = y.default.Matrix.identity(this._renderer._pInst);
                    s.rotate(this._renderer._pInst._toRadians(e), t, r, n);
                    var l = [
                        o * s.mat4[0] + i * s.mat4[4] + a * s.mat4[8],
                        o * s.mat4[1] + i * s.mat4[5] + a * s.mat4[9],
                        o * s.mat4[2] + i * s.mat4[6] + a * s.mat4[10]
                    ];
                    l[0] += this.eyeX, l[1] += this.eyeY, l[2] += this.eyeZ, this.camera(this.eyeX, this.eyeY, this.eyeZ, l[0], l[1], l[2], this.upX, this.upY, this.upZ);
                }, y.default.Camera.prototype.pan = function(e) {
                    var t = this._getLocalAxes();
                    this._rotateView(e, t.y[0], t.y[1], t.y[2]);
                }, y.default.Camera.prototype.tilt = function(e) {
                    var t = this._getLocalAxes();
                    this._rotateView(e, t.x[0], t.x[1], t.x[2]);
                }, y.default.Camera.prototype.lookAt = function(e, t, r) {
                    this.camera(this.eyeX, this.eyeY, this.eyeZ, e, t, r, this.upX, this.upY, this.upZ);
                }, y.default.Camera.prototype.camera = function(e, t, r, n, o, i, a, s, l) {
                    void 0 === e && (e = this.defaultEyeX, t = this.defaultEyeY, r = this.defaultEyeZ, n = e, o = t, s = 1, l = a = i = 0), this.eyeX = e, this.eyeY = t, this.eyeZ = r, void 0 !== n && (this.centerX = n, this.centerY = o, this.centerZ = i), void 0 !== a && (this.upX = a, this.upY = s, this.upZ = l);
                    var u = this._getLocalAxes();
                    this.cameraMatrix.set(u.x[0], u.y[0], u.z[0], 0, u.x[1], u.y[1], u.z[1], 0, u.x[2], u.y[2], u.z[2], 0, 0, 0, 0, 1);
                    var c = -e, d = -t, f = -r;
                    return this.cameraMatrix.translate([
                        c,
                        d,
                        f
                    ]), this._isActive() && this._renderer.uMVMatrix.set(this.cameraMatrix.mat4[0], this.cameraMatrix.mat4[1], this.cameraMatrix.mat4[2], this.cameraMatrix.mat4[3], this.cameraMatrix.mat4[4], this.cameraMatrix.mat4[5], this.cameraMatrix.mat4[6], this.cameraMatrix.mat4[7], this.cameraMatrix.mat4[8], this.cameraMatrix.mat4[9], this.cameraMatrix.mat4[10], this.cameraMatrix.mat4[11], this.cameraMatrix.mat4[12], this.cameraMatrix.mat4[13], this.cameraMatrix.mat4[14], this.cameraMatrix.mat4[15]), this;
                }, y.default.Camera.prototype.move = function(e, t, r) {
                    var n = this._getLocalAxes(), o = [
                        n.x[0] * e,
                        n.x[1] * e,
                        n.x[2] * e
                    ], i = [
                        n.y[0] * t,
                        n.y[1] * t,
                        n.y[2] * t
                    ], a = [
                        n.z[0] * r,
                        n.z[1] * r,
                        n.z[2] * r
                    ];
                    this.camera(this.eyeX + o[0] + i[0] + a[0], this.eyeY + o[1] + i[1] + a[1], this.eyeZ + o[2] + i[2] + a[2], this.centerX + o[0] + i[0] + a[0], this.centerY + o[1] + i[1] + a[1], this.centerZ + o[2] + i[2] + a[2], 0, 1, 0);
                }, y.default.Camera.prototype.setPosition = function(e, t, r) {
                    var n = e - this.eyeX, o = t - this.eyeY, i = r - this.eyeZ;
                    this.camera(e, t, r, this.centerX + n, this.centerY + o, this.centerZ + i, 0, 1, 0);
                }, y.default.Camera.prototype._computeCameraDefaultSettings = function() {
                    this.defaultCameraFOV = 60 / 180 * Math.PI, this.defaultAspectRatio = this._renderer.width / this._renderer.height, this.defaultEyeX = 0, this.defaultEyeY = 0, this.defaultEyeZ = this._renderer.height / 2 / Math.tan(this.defaultCameraFOV / 2), this.defaultCenterX = 0, this.defaultCenterY = 0, this.defaultCenterZ = 0, this.defaultCameraNear = 0.1 * this.defaultEyeZ, this.defaultCameraFar = 10 * this.defaultEyeZ;
                }, y.default.Camera.prototype._setDefaultCamera = function() {
                    this.cameraFOV = this.defaultCameraFOV, this.aspectRatio = this.defaultAspectRatio, this.eyeX = this.defaultEyeX, this.eyeY = this.defaultEyeY, this.eyeZ = this.defaultEyeZ, this.centerX = this.defaultCenterX, this.centerY = this.defaultCenterY, this.centerZ = this.defaultCenterZ, this.upX = 0, this.upY = 1, this.upZ = 0, this.cameraNear = this.defaultCameraNear, this.cameraFar = this.defaultCameraFar, this.perspective(), this.camera(), this.cameraType = "default";
                }, y.default.Camera.prototype._resize = function() {
                    "default" === this.cameraType ? (this._computeCameraDefaultSettings(), this._setDefaultCamera()) : this.perspective(this.cameraFOV, this._renderer.width / this._renderer.height);
                }, y.default.Camera.prototype.copy = function() {
                    var e = new y.default.Camera(this._renderer);
                    return e.cameraFOV = this.cameraFOV, e.aspectRatio = this.aspectRatio, e.eyeX = this.eyeX, e.eyeY = this.eyeY, e.eyeZ = this.eyeZ, e.centerX = this.centerX, e.centerY = this.centerY, e.centerZ = this.centerZ, e.cameraNear = this.cameraNear, e.cameraFar = this.cameraFar, e.cameraType = this.cameraType, e.cameraMatrix = this.cameraMatrix.copy(), e.projMatrix = this.projMatrix.copy(), e;
                }, y.default.Camera.prototype._getLocalAxes = function() {
                    var e = this.eyeX - this.centerX, t = this.eyeY - this.centerY, r = this.eyeZ - this.centerZ, n = Math.sqrt(e * e + t * t + r * r);
                    0 !== n && (e /= n, t /= n, r /= n);
                    var o = this.upX, i = this.upY, a = this.upZ, s = i * r - a * t, l = -o * r + a * e, u = o * t - i * e;
                    o = t * u - r * l, i = -e * u + r * s, a = e * l - t * s;
                    var c = Math.sqrt(s * s + l * l + u * u);
                    0 !== c && (s /= c, l /= c, u /= c);
                    var d = Math.sqrt(o * o + i * i + a * a);
                    return 0 !== d && (o /= d, i /= d, a /= d), {
                        x: [
                            s,
                            l,
                            u
                        ],
                        y: [
                            o,
                            i,
                            a
                        ],
                        z: [
                            e,
                            t,
                            r
                        ]
                    };
                }, y.default.Camera.prototype._orbit = function(e, t, r) {
                    var n = this.eyeX - this.centerX, o = this.eyeY - this.centerY, i = this.eyeZ - this.centerZ, a = Math.sqrt(n * n + o * o + i * i), s = Math.atan2(n, i), l = Math.acos(Math.max(-1, Math.min(1, o / a)));
                    s += e, (a += r) < 0 && (a = 0.1), (l += t) > Math.PI ? l = Math.PI : l <= 0 && (l = 0.001);
                    var u = Math.sin(l) * a * Math.sin(s), c = Math.cos(l) * a, d = Math.sin(l) * a * Math.cos(s);
                    this.camera(u + this.centerX, c + this.centerY, d + this.centerZ, this.centerX, this.centerY, this.centerZ, 0, 1, 0);
                }, y.default.Camera.prototype._isActive = function() {
                    return this === this._renderer._curCamera;
                }, y.default.prototype.setCamera = function(e) {
                    this._renderer._curCamera = e, this._renderer.uPMatrix.set(e.projMatrix.mat4[0], e.projMatrix.mat4[1], e.projMatrix.mat4[2], e.projMatrix.mat4[3], e.projMatrix.mat4[4], e.projMatrix.mat4[5], e.projMatrix.mat4[6], e.projMatrix.mat4[7], e.projMatrix.mat4[8], e.projMatrix.mat4[9], e.projMatrix.mat4[10], e.projMatrix.mat4[11], e.projMatrix.mat4[12], e.projMatrix.mat4[13], e.projMatrix.mat4[14], e.projMatrix.mat4[15]);
                };
                var o132 = y.default.Camera;
                r254.default = o132;
            },
            {
                "../core/main": 260
            }
        ],
        309: [
            function(e524, t322, r255) {
                "use strict";
                e524("core-js/modules/es.string.sub"), Object.defineProperty(r255, "__esModule", {
                    value: !0
                }), r255.default = void 0;
                var n178, c = (n178 = e524("../core/main")) && n178.__esModule ? n178 : {
                    default: n178
                };
                c.default.Geometry = function(e, t, r) {
                    return this.vertices = [], this.lineVertices = [], this.lineNormals = [], this.vertexNormals = [], this.faces = [], this.uvs = [], this.edges = [], this.vertexColors = [], this.detailX = void 0 !== e ? e : 1, this.detailY = void 0 !== t ? t : 1, this.dirtyFlags = {
                    }, r instanceof Function && r.call(this), this;
                }, c.default.Geometry.prototype.reset = function() {
                    this.lineVertices.length = 0, this.lineNormals.length = 0, this.vertices.length = 0, this.edges.length = 0, this.vertexColors.length = 0, this.vertexNormals.length = 0, this.uvs.length = 0, this.dirtyFlags = {
                    };
                }, c.default.Geometry.prototype.computeFaces = function() {
                    this.faces.length = 0;
                    for(var e, t, r, n, o = this.detailX + 1, i = 0; i < this.detailY; i++)for(var a = 0; a < this.detailX; a++)t = (e = i * o + a) + 1, r = (i + 1) * o + a + 1, n = (i + 1) * o + a, this.faces.push([
                        e,
                        t,
                        n
                    ]), this.faces.push([
                        n,
                        t,
                        r
                    ]);
                    return this;
                }, c.default.Geometry.prototype._getFaceNormal = function(e) {
                    var t = this.faces[e], r = this.vertices[t[0]], n = this.vertices[t[1]], o = this.vertices[t[2]], i = c.default.Vector.sub(n, r), a = c.default.Vector.sub(o, r), s = c.default.Vector.cross(i, a), l = c.default.Vector.mag(s), u = l / (c.default.Vector.mag(i) * c.default.Vector.mag(a));
                    return 0 === u || isNaN(u) ? (console.warn("p5.Geometry.prototype._getFaceNormal:", "face has colinear sides or a repeated vertex"), s) : (1 < u && (u = 1), s.mult(Math.asin(u) / l));
                }, c.default.Geometry.prototype.computeNormals = function() {
                    var e, t = this.vertexNormals, r = this.vertices, n = this.faces;
                    for(e = t.length = 0; e < r.length; ++e)t.push(new c.default.Vector);
                    for(var o = 0; o < n.length; ++o)for(var i = n[o], a = this._getFaceNormal(o), s = 0; s < 3; ++s)t[i[s]].add(a);
                    for(e = 0; e < r.length; ++e)t[e].normalize();
                    return this;
                }, c.default.Geometry.prototype.averageNormals = function() {
                    for(var e = 0; e <= this.detailY; e++){
                        var t = this.detailX + 1, r = c.default.Vector.add(this.vertexNormals[e * t], this.vertexNormals[e * t + this.detailX]);
                        r = c.default.Vector.div(r, 2), this.vertexNormals[e * t] = r, this.vertexNormals[e * t + this.detailX] = r;
                    }
                    return this;
                }, c.default.Geometry.prototype.averagePoleNormals = function() {
                    for(var e = new c.default.Vector(0, 0, 0), t = 0; t < this.detailX; t++)e.add(this.vertexNormals[t]);
                    e = c.default.Vector.div(e, this.detailX);
                    for(var r = 0; r < this.detailX; r++)this.vertexNormals[r] = e;
                    e = new c.default.Vector(0, 0, 0);
                    for(var n = this.vertices.length - 1; n > this.vertices.length - 1 - this.detailX; n--)e.add(this.vertexNormals[n]);
                    e = c.default.Vector.div(e, this.detailX);
                    for(var o = this.vertices.length - 1; o > this.vertices.length - 1 - this.detailX; o--)this.vertexNormals[o] = e;
                    return this;
                }, c.default.Geometry.prototype._makeTriangleEdges = function() {
                    if (this.edges.length = 0, Array.isArray(this.strokeIndices)) for(var e = 0, t = this.strokeIndices.length; e < t; e++)this.edges.push(this.strokeIndices[e]);
                    else for(var r = 0; r < this.faces.length; r++)this.edges.push([
                        this.faces[r][0],
                        this.faces[r][1]
                    ]), this.edges.push([
                        this.faces[r][1],
                        this.faces[r][2]
                    ]), this.edges.push([
                        this.faces[r][2],
                        this.faces[r][0]
                    ]);
                    return this;
                }, c.default.Geometry.prototype._edgesToVertices = function() {
                    this.lineVertices.length = 0;
                    for(var e = this.lineNormals.length = 0; e < this.edges.length; e++){
                        var t = this.vertices[this.edges[e][0]], r = this.vertices[this.edges[e][1]], n = r.copy().sub(t).normalize(), o = t.array(), i = t.array(), a = r.array(), s = r.array(), l = n.array(), u = n.array();
                        l.push(1), u.push(-1), this.lineNormals.push(l, u, l, l, u, u), this.lineVertices.push(o, i, a, a, i, s);
                    }
                    return this;
                }, c.default.Geometry.prototype.normalize = function() {
                    if (0 < this.vertices.length) {
                        for(var e = this.vertices[0].copy(), t = this.vertices[0].copy(), r = 0; r < this.vertices.length; r++)e.x = Math.max(e.x, this.vertices[r].x), t.x = Math.min(t.x, this.vertices[r].x), e.y = Math.max(e.y, this.vertices[r].y), t.y = Math.min(t.y, this.vertices[r].y), e.z = Math.max(e.z, this.vertices[r].z), t.z = Math.min(t.z, this.vertices[r].z);
                        for(var n = c.default.Vector.lerp(e, t, 0.5), o = c.default.Vector.sub(e, t), i = 200 / Math.max(Math.max(o.x, o.y), o.z), a = 0; a < this.vertices.length; a++)this.vertices[a].sub(n), this.vertices[a].mult(i);
                    }
                    return this;
                };
                var o133 = c.default.Geometry;
                r255.default = o133;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.string.sub": 189
            }
        ],
        310: [
            function(e525, t323, r256) {
                "use strict";
                e525("core-js/modules/es.array.iterator"), e525("core-js/modules/es.object.to-string"), e525("core-js/modules/es.typed-array.float32-array"), e525("core-js/modules/es.typed-array.copy-within"), e525("core-js/modules/es.typed-array.every"), e525("core-js/modules/es.typed-array.fill"), e525("core-js/modules/es.typed-array.filter"), e525("core-js/modules/es.typed-array.find"), e525("core-js/modules/es.typed-array.find-index"), e525("core-js/modules/es.typed-array.for-each"), e525("core-js/modules/es.typed-array.includes"), e525("core-js/modules/es.typed-array.index-of"), e525("core-js/modules/es.typed-array.iterator"), e525("core-js/modules/es.typed-array.join"), e525("core-js/modules/es.typed-array.last-index-of"), e525("core-js/modules/es.typed-array.map"), e525("core-js/modules/es.typed-array.reduce"), e525("core-js/modules/es.typed-array.reduce-right"), e525("core-js/modules/es.typed-array.reverse"), e525("core-js/modules/es.typed-array.set"), e525("core-js/modules/es.typed-array.slice"), e525("core-js/modules/es.typed-array.some"), e525("core-js/modules/es.typed-array.sort"), e525("core-js/modules/es.typed-array.subarray"), e525("core-js/modules/es.typed-array.to-locale-string"), e525("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r256, "__esModule", {
                    value: !0
                }), r256.default = void 0;
                var n179, L = (n179 = e525("../core/main")) && n179.__esModule ? n179 : {
                    default: n179
                };
                var o134 = Array, P = function(e) {
                    return e instanceof Array;
                };
                "undefined" != typeof Float32Array && (o134 = Float32Array, P = function(e) {
                    return e instanceof Array || e instanceof Float32Array;
                }), L.default.Matrix = function() {
                    for(var e = new Array(arguments.length), t = 0; t < e.length; ++t)e[t] = arguments[t];
                    return e.length && e[e.length - 1] instanceof L.default && (this.p5 = e[e.length - 1]), "mat3" === e[0] ? this.mat3 = Array.isArray(e[1]) ? e[1] : new o134([
                        1,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        1
                    ]) : this.mat4 = Array.isArray(e[0]) ? e[0] : new o134([
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        1
                    ]), this;
                }, L.default.Matrix.prototype.set = function(e) {
                    return e instanceof L.default.Matrix ? this.mat4 = e.mat4 : P(e) ? this.mat4 = e : 16 === arguments.length && (this.mat4[0] = e, this.mat4[1] = arguments[1], this.mat4[2] = arguments[2], this.mat4[3] = arguments[3], this.mat4[4] = arguments[4], this.mat4[5] = arguments[5], this.mat4[6] = arguments[6], this.mat4[7] = arguments[7], this.mat4[8] = arguments[8], this.mat4[9] = arguments[9], this.mat4[10] = arguments[10], this.mat4[11] = arguments[11], this.mat4[12] = arguments[12], this.mat4[13] = arguments[13], this.mat4[14] = arguments[14], this.mat4[15] = arguments[15]), this;
                }, L.default.Matrix.prototype.get = function() {
                    return new L.default.Matrix(this.mat4, this.p5);
                }, L.default.Matrix.prototype.copy = function() {
                    var e = new L.default.Matrix(this.p5);
                    return e.mat4[0] = this.mat4[0], e.mat4[1] = this.mat4[1], e.mat4[2] = this.mat4[2], e.mat4[3] = this.mat4[3], e.mat4[4] = this.mat4[4], e.mat4[5] = this.mat4[5], e.mat4[6] = this.mat4[6], e.mat4[7] = this.mat4[7], e.mat4[8] = this.mat4[8], e.mat4[9] = this.mat4[9], e.mat4[10] = this.mat4[10], e.mat4[11] = this.mat4[11], e.mat4[12] = this.mat4[12], e.mat4[13] = this.mat4[13], e.mat4[14] = this.mat4[14], e.mat4[15] = this.mat4[15], e;
                }, L.default.Matrix.identity = function(e) {
                    return new L.default.Matrix(e);
                }, L.default.Matrix.prototype.transpose = function(e) {
                    var t, r, n, o, i, a;
                    return e instanceof L.default.Matrix ? (t = e.mat4[1], r = e.mat4[2], n = e.mat4[3], o = e.mat4[6], i = e.mat4[7], a = e.mat4[11], this.mat4[0] = e.mat4[0], this.mat4[1] = e.mat4[4], this.mat4[2] = e.mat4[8], this.mat4[3] = e.mat4[12], this.mat4[4] = t, this.mat4[5] = e.mat4[5], this.mat4[6] = e.mat4[9], this.mat4[7] = e.mat4[13], this.mat4[8] = r, this.mat4[9] = o, this.mat4[10] = e.mat4[10], this.mat4[11] = e.mat4[14], this.mat4[12] = n, this.mat4[13] = i, this.mat4[14] = a, this.mat4[15] = e.mat4[15]) : P(e) && (t = e[1], r = e[2], n = e[3], o = e[6], i = e[7], a = e[11], this.mat4[0] = e[0], this.mat4[1] = e[4], this.mat4[2] = e[8], this.mat4[3] = e[12], this.mat4[4] = t, this.mat4[5] = e[5], this.mat4[6] = e[9], this.mat4[7] = e[13], this.mat4[8] = r, this.mat4[9] = o, this.mat4[10] = e[10], this.mat4[11] = e[14], this.mat4[12] = n, this.mat4[13] = i, this.mat4[14] = a, this.mat4[15] = e[15]), this;
                }, L.default.Matrix.prototype.invert = function(e) {
                    var t, r, n, o, i, a, s, l, u, c, d, f, h, p, y, m;
                    e instanceof L.default.Matrix ? (t = e.mat4[0], r = e.mat4[1], n = e.mat4[2], o = e.mat4[3], i = e.mat4[4], a = e.mat4[5], s = e.mat4[6], l = e.mat4[7], u = e.mat4[8], c = e.mat4[9], d = e.mat4[10], f = e.mat4[11], h = e.mat4[12], p = e.mat4[13], y = e.mat4[14], m = e.mat4[15]) : P(e) && (t = e[0], r = e[1], n = e[2], o = e[3], i = e[4], a = e[5], s = e[6], l = e[7], u = e[8], c = e[9], d = e[10], f = e[11], h = e[12], p = e[13], y = e[14], m = e[15]);
                    var g = t * a - r * i, v = t * s - n * i, b = t * l - o * i, _ = r * s - n * a, x = r * l - o * a, w = n * l - o * s, S = u * p - c * h, j = u * y - d * h, M = u * m - f * h, E = c * y - d * p, T = c * m - f * p, O = d * m - f * y, C = g * O - v * T + b * E + _ * M - x * j + w * S;
                    return C ? (C = 1 / C, this.mat4[0] = (a * O - s * T + l * E) * C, this.mat4[1] = (n * T - r * O - o * E) * C, this.mat4[2] = (p * w - y * x + m * _) * C, this.mat4[3] = (d * x - c * w - f * _) * C, this.mat4[4] = (s * M - i * O - l * j) * C, this.mat4[5] = (t * O - n * M + o * j) * C, this.mat4[6] = (y * b - h * w - m * v) * C, this.mat4[7] = (u * w - d * b + f * v) * C, this.mat4[8] = (i * T - a * M + l * S) * C, this.mat4[9] = (r * M - t * T - o * S) * C, this.mat4[10] = (h * x - p * b + m * g) * C, this.mat4[11] = (c * b - u * x - f * g) * C, this.mat4[12] = (a * j - i * E - s * S) * C, this.mat4[13] = (t * E - r * j + n * S) * C, this.mat4[14] = (p * v - h * _ - y * g) * C, this.mat4[15] = (u * _ - c * v + d * g) * C, this) : null;
                }, L.default.Matrix.prototype.invert3x3 = function() {
                    var e = this.mat3[0], t = this.mat3[1], r = this.mat3[2], n = this.mat3[3], o = this.mat3[4], i = this.mat3[5], a = this.mat3[6], s = this.mat3[7], l = this.mat3[8], u = l * o - i * s, c = -l * n + i * a, d = s * n - o * a, f = e * u + t * c + r * d;
                    return f ? (f = 1 / f, this.mat3[0] = u * f, this.mat3[1] = (-l * t + r * s) * f, this.mat3[2] = (i * t - r * o) * f, this.mat3[3] = c * f, this.mat3[4] = (l * e - r * a) * f, this.mat3[5] = (-i * e + r * n) * f, this.mat3[6] = d * f, this.mat3[7] = (-s * e + t * a) * f, this.mat3[8] = (o * e - t * n) * f, this) : null;
                }, L.default.Matrix.prototype.transpose3x3 = function(e) {
                    var t = e[1], r = e[2], n = e[5];
                    return this.mat3[1] = e[3], this.mat3[2] = e[6], this.mat3[3] = t, this.mat3[5] = e[7], this.mat3[6] = r, this.mat3[7] = n, this;
                }, L.default.Matrix.prototype.inverseTranspose = function(e) {
                    void 0 === this.mat3 ? console.error("sorry, this function only works with mat3") : (this.mat3[0] = e.mat4[0], this.mat3[1] = e.mat4[1], this.mat3[2] = e.mat4[2], this.mat3[3] = e.mat4[4], this.mat3[4] = e.mat4[5], this.mat3[5] = e.mat4[6], this.mat3[6] = e.mat4[8], this.mat3[7] = e.mat4[9], this.mat3[8] = e.mat4[10]);
                    var t = this.invert3x3();
                    if (t) t.transpose3x3(this.mat3);
                    else for(var r = 0; r < 9; r++)this.mat3[r] = 0;
                    return this;
                }, L.default.Matrix.prototype.determinant = function() {
                    var e = this.mat4[0] * this.mat4[5] - this.mat4[1] * this.mat4[4], t = this.mat4[0] * this.mat4[6] - this.mat4[2] * this.mat4[4], r = this.mat4[0] * this.mat4[7] - this.mat4[3] * this.mat4[4], n = this.mat4[1] * this.mat4[6] - this.mat4[2] * this.mat4[5], o = this.mat4[1] * this.mat4[7] - this.mat4[3] * this.mat4[5], i = this.mat4[2] * this.mat4[7] - this.mat4[3] * this.mat4[6], a = this.mat4[8] * this.mat4[13] - this.mat4[9] * this.mat4[12], s = this.mat4[8] * this.mat4[14] - this.mat4[10] * this.mat4[12], l = this.mat4[8] * this.mat4[15] - this.mat4[11] * this.mat4[12], u = this.mat4[9] * this.mat4[14] - this.mat4[10] * this.mat4[13], c = this.mat4[9] * this.mat4[15] - this.mat4[11] * this.mat4[13];
                    return e * (this.mat4[10] * this.mat4[15] - this.mat4[11] * this.mat4[14]) - t * c + r * u + n * l - o * s + i * a;
                }, L.default.Matrix.prototype.mult = function(e) {
                    var t;
                    if (e === this || e === this.mat4) t = this.copy().mat4;
                    else if (e instanceof L.default.Matrix) t = e.mat4;
                    else if (P(e)) t = e;
                    else {
                        if (16 !== arguments.length) return;
                        t = arguments;
                    }
                    var r = this.mat4[0], n = this.mat4[1], o = this.mat4[2], i = this.mat4[3];
                    return this.mat4[0] = r * t[0] + n * t[4] + o * t[8] + i * t[12], this.mat4[1] = r * t[1] + n * t[5] + o * t[9] + i * t[13], this.mat4[2] = r * t[2] + n * t[6] + o * t[10] + i * t[14], this.mat4[3] = r * t[3] + n * t[7] + o * t[11] + i * t[15], r = this.mat4[4], n = this.mat4[5], o = this.mat4[6], i = this.mat4[7], this.mat4[4] = r * t[0] + n * t[4] + o * t[8] + i * t[12], this.mat4[5] = r * t[1] + n * t[5] + o * t[9] + i * t[13], this.mat4[6] = r * t[2] + n * t[6] + o * t[10] + i * t[14], this.mat4[7] = r * t[3] + n * t[7] + o * t[11] + i * t[15], r = this.mat4[8], n = this.mat4[9], o = this.mat4[10], i = this.mat4[11], this.mat4[8] = r * t[0] + n * t[4] + o * t[8] + i * t[12], this.mat4[9] = r * t[1] + n * t[5] + o * t[9] + i * t[13], this.mat4[10] = r * t[2] + n * t[6] + o * t[10] + i * t[14], this.mat4[11] = r * t[3] + n * t[7] + o * t[11] + i * t[15], r = this.mat4[12], n = this.mat4[13], o = this.mat4[14], i = this.mat4[15], this.mat4[12] = r * t[0] + n * t[4] + o * t[8] + i * t[12], this.mat4[13] = r * t[1] + n * t[5] + o * t[9] + i * t[13], this.mat4[14] = r * t[2] + n * t[6] + o * t[10] + i * t[14], this.mat4[15] = r * t[3] + n * t[7] + o * t[11] + i * t[15], this;
                }, L.default.Matrix.prototype.apply = function(e) {
                    var t;
                    if (e === this || e === this.mat4) t = this.copy().mat4;
                    else if (e instanceof L.default.Matrix) t = e.mat4;
                    else if (P(e)) t = e;
                    else {
                        if (16 !== arguments.length) return;
                        t = arguments;
                    }
                    var r = this.mat4, n = r[0], o = r[4], i = r[8], a = r[12];
                    r[0] = t[0] * n + t[1] * o + t[2] * i + t[3] * a, r[4] = t[4] * n + t[5] * o + t[6] * i + t[7] * a, r[8] = t[8] * n + t[9] * o + t[10] * i + t[11] * a, r[12] = t[12] * n + t[13] * o + t[14] * i + t[15] * a;
                    var s = r[1], l = r[5], u = r[9], c = r[13];
                    r[1] = t[0] * s + t[1] * l + t[2] * u + t[3] * c, r[5] = t[4] * s + t[5] * l + t[6] * u + t[7] * c, r[9] = t[8] * s + t[9] * l + t[10] * u + t[11] * c, r[13] = t[12] * s + t[13] * l + t[14] * u + t[15] * c;
                    var d = r[2], f = r[6], h = r[10], p = r[14];
                    r[2] = t[0] * d + t[1] * f + t[2] * h + t[3] * p, r[6] = t[4] * d + t[5] * f + t[6] * h + t[7] * p, r[10] = t[8] * d + t[9] * f + t[10] * h + t[11] * p, r[14] = t[12] * d + t[13] * f + t[14] * h + t[15] * p;
                    var y = r[3], m = r[7], g = r[11], v = r[15];
                    return r[3] = t[0] * y + t[1] * m + t[2] * g + t[3] * v, r[7] = t[4] * y + t[5] * m + t[6] * g + t[7] * v, r[11] = t[8] * y + t[9] * m + t[10] * g + t[11] * v, r[15] = t[12] * y + t[13] * m + t[14] * g + t[15] * v, this;
                }, L.default.Matrix.prototype.scale = function(e, t, r) {
                    return e instanceof L.default.Vector ? (t = e.y, r = e.z, e = e.x) : e instanceof Array && (t = e[1], r = e[2], e = e[0]), this.mat4[0] *= e, this.mat4[1] *= e, this.mat4[2] *= e, this.mat4[3] *= e, this.mat4[4] *= t, this.mat4[5] *= t, this.mat4[6] *= t, this.mat4[7] *= t, this.mat4[8] *= r, this.mat4[9] *= r, this.mat4[10] *= r, this.mat4[11] *= r, this;
                }, L.default.Matrix.prototype.rotate = function(e, t, r, n) {
                    t instanceof L.default.Vector ? (r = t.y, n = t.z, t = t.x) : t instanceof Array && (r = t[1], n = t[2], t = t[0]);
                    var o = Math.sqrt(t * t + r * r + n * n);
                    t *= 1 / o, r *= 1 / o, n *= 1 / o;
                    var i = this.mat4[0], a = this.mat4[1], s = this.mat4[2], l = this.mat4[3], u = this.mat4[4], c = this.mat4[5], d = this.mat4[6], f = this.mat4[7], h = this.mat4[8], p = this.mat4[9], y = this.mat4[10], m = this.mat4[11], g = Math.sin(e), v = Math.cos(e), b = 1 - v, _ = t * t * b + v, x = r * t * b + n * g, w = n * t * b - r * g, S = t * r * b - n * g, j = r * r * b + v, M = n * r * b + t * g, E = t * n * b + r * g, T = r * n * b - t * g, O = n * n * b + v;
                    return this.mat4[0] = i * _ + u * x + h * w, this.mat4[1] = a * _ + c * x + p * w, this.mat4[2] = s * _ + d * x + y * w, this.mat4[3] = l * _ + f * x + m * w, this.mat4[4] = i * S + u * j + h * M, this.mat4[5] = a * S + c * j + p * M, this.mat4[6] = s * S + d * j + y * M, this.mat4[7] = l * S + f * j + m * M, this.mat4[8] = i * E + u * T + h * O, this.mat4[9] = a * E + c * T + p * O, this.mat4[10] = s * E + d * T + y * O, this.mat4[11] = l * E + f * T + m * O, this;
                }, L.default.Matrix.prototype.translate = function(e) {
                    var t = e[0], r = e[1], n = e[2] || 0;
                    this.mat4[12] += this.mat4[0] * t + this.mat4[4] * r + this.mat4[8] * n, this.mat4[13] += this.mat4[1] * t + this.mat4[5] * r + this.mat4[9] * n, this.mat4[14] += this.mat4[2] * t + this.mat4[6] * r + this.mat4[10] * n, this.mat4[15] += this.mat4[3] * t + this.mat4[7] * r + this.mat4[11] * n;
                }, L.default.Matrix.prototype.rotateX = function(e) {
                    this.rotate(e, 1, 0, 0);
                }, L.default.Matrix.prototype.rotateY = function(e) {
                    this.rotate(e, 0, 1, 0);
                }, L.default.Matrix.prototype.rotateZ = function(e) {
                    this.rotate(e, 0, 0, 1);
                }, L.default.Matrix.prototype.perspective = function(e, t, r, n) {
                    var o = 1 / Math.tan(e / 2), i = 1 / (r - n);
                    return this.mat4[0] = o / t, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = o, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = (n + r) * i, this.mat4[11] = -1, this.mat4[12] = 0, this.mat4[13] = 0, this.mat4[14] = 2 * n * r * i, this.mat4[15] = 0, this;
                }, L.default.Matrix.prototype.ortho = function(e, t, r, n, o, i) {
                    var a = 1 / (e - t), s = 1 / (r - n), l = 1 / (o - i);
                    return this.mat4[0] = -2 * a, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = -2 * s, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = 2 * l, this.mat4[11] = 0, this.mat4[12] = (e + t) * a, this.mat4[13] = (n + r) * s, this.mat4[14] = (i + o) * l, this.mat4[15] = 1, this;
                };
                var i84 = L.default.Matrix;
                r256.default = i84;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.float32-array": 200,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220
            }
        ],
        311: [
            function(e526, t324, r257) {
                "use strict";
                e526("core-js/modules/es.array.map"), Object.defineProperty(r257, "__esModule", {
                    value: !0
                }), r257.default = void 0;
                var n180, o135 = (n180 = e526("../core/main")) && n180.__esModule ? n180 : {
                    default: n180
                };
                o135.default.RenderBuffer = function(e, t, r, n, o, i) {
                    this.size = e, this.src = t, this.dst = r, this.attr = n, this._renderer = o, this.map = i;
                }, o135.default.RenderBuffer.prototype._prepareBuffer = function(e, t) {
                    var r, n = t.attributes, o = this._renderer.GL;
                    r = e.model ? e.model : e;
                    var i = n[this.attr];
                    if (i) {
                        var a = e[this.dst], s = r[this.src];
                        if (0 < s.length) {
                            var l = !a;
                            if (l && (e[this.dst] = a = o.createBuffer()), o.bindBuffer(o.ARRAY_BUFFER, a), l || !1 !== r.dirtyFlags[this.src]) {
                                var u = this.map, c = u ? u(s) : s;
                                this._renderer._bindBuffer(a, o.ARRAY_BUFFER, c), r.dirtyFlags[this.src] = !1;
                            }
                            t.enableAttrib(i, this.size);
                        }
                    }
                };
                var i85 = o135.default.RenderBuffer;
                r257.default = i85;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.map": 159
            }
        ],
        312: [
            function(e527, t325, r258) {
                "use strict";
                function a62(e528) {
                    return (a62 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e528);
                }
                e527("core-js/modules/es.symbol"), e527("core-js/modules/es.symbol.description"), e527("core-js/modules/es.symbol.iterator"), e527("core-js/modules/es.array.fill"), e527("core-js/modules/es.array.for-each"), e527("core-js/modules/es.array.iterator"), e527("core-js/modules/es.object.to-string"), e527("core-js/modules/es.string.iterator"), e527("core-js/modules/es.typed-array.float32-array"), e527("core-js/modules/es.typed-array.copy-within"), e527("core-js/modules/es.typed-array.every"), e527("core-js/modules/es.typed-array.fill"), e527("core-js/modules/es.typed-array.filter"), e527("core-js/modules/es.typed-array.find"), e527("core-js/modules/es.typed-array.find-index"), e527("core-js/modules/es.typed-array.for-each"), e527("core-js/modules/es.typed-array.includes"), e527("core-js/modules/es.typed-array.index-of"), e527("core-js/modules/es.typed-array.iterator"), e527("core-js/modules/es.typed-array.join"), e527("core-js/modules/es.typed-array.last-index-of"), e527("core-js/modules/es.typed-array.map"), e527("core-js/modules/es.typed-array.reduce"), e527("core-js/modules/es.typed-array.reduce-right"), e527("core-js/modules/es.typed-array.reverse"), e527("core-js/modules/es.typed-array.set"), e527("core-js/modules/es.typed-array.slice"), e527("core-js/modules/es.typed-array.some"), e527("core-js/modules/es.typed-array.sort"), e527("core-js/modules/es.typed-array.subarray"), e527("core-js/modules/es.typed-array.to-locale-string"), e527("core-js/modules/es.typed-array.to-string"), e527("core-js/modules/web.dom-collections.for-each"), e527("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r258, "__esModule", {
                    value: !0
                }), r258.default = void 0;
                var n181, s = (n181 = e527("../core/main")) && n181.__esModule ? n181 : {
                    default: n181
                }, l = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a62(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = u();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e527("../core/constants"));
                function u() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return u = function() {
                        return e;
                    }, e;
                }
                e527("./p5.RenderBuffer"), s.default.RendererGL.prototype.beginShape = function(e) {
                    return this.immediateMode.shapeMode = void 0 !== e ? e : l.TRIANGLE_FAN, this.immediateMode.geometry.reset(), this;
                }, s.default.RendererGL.prototype.vertex = function(e, t) {
                    var r, n, o;
                    r = n = o = 0, 3 === arguments.length ? r = arguments[2] : 4 === arguments.length ? (n = arguments[2], o = arguments[3]) : 5 === arguments.length && (r = arguments[2], n = arguments[3], o = arguments[4]);
                    var i = new s.default.Vector(e, t, r);
                    this.immediateMode.geometry.vertices.push(i);
                    var a = this.curFillColor || [
                        0.5,
                        0.5,
                        0.5,
                        1
                    ];
                    return this.immediateMode.geometry.vertexColors.push(a[0], a[1], a[2], a[3]), this.textureMode === l.IMAGE && (null !== this._tex ? 0 < this._tex.width && 0 < this._tex.height && (n /= this._tex.width, o /= this._tex.height) : null === this._tex && 4 <= arguments.length && console.warn("You must first call texture() before using vertex() with image based u and v coordinates")), this.immediateMode.geometry.uvs.push(n, o), this.immediateMode._bezierVertex[0] = e, this.immediateMode._bezierVertex[1] = t, this.immediateMode._bezierVertex[2] = r, this.immediateMode._quadraticVertex[0] = e, this.immediateMode._quadraticVertex[1] = t, this.immediateMode._quadraticVertex[2] = r, this;
                }, s.default.RendererGL.prototype.endShape = function(e, t, r, n, o, i) {
                    return this.immediateMode.shapeMode === l.POINTS ? this._drawPoints(this.immediateMode.geometry.vertices, this.immediateMode.buffers.point) : (this._processVertices.apply(this, arguments), this._doFill && 1 < this.immediateMode.geometry.vertices.length && this._drawImmediateFill(), this._doStroke && 1 < this.immediateMode.geometry.lineVertices.length && this._drawImmediateStroke(), this.isBezier = !1, this.isQuadratic = !1, this.isCurve = !1, this.immediateMode._bezierVertex.length = 0, this.immediateMode._quadraticVertex.length = 0, this.immediateMode._curveVertex.length = 0), this;
                }, s.default.RendererGL.prototype._processVertices = function(e) {
                    if (0 !== this.immediateMode.geometry.vertices.length) {
                        var t = this._doStroke && this.drawMode !== l.TEXTURE, r = e === l.CLOSE;
                        t && (this.immediateMode.geometry.edges = this._calculateEdges(this.immediateMode.shapeMode, this.immediateMode.geometry.vertices, r), this.immediateMode.geometry._edgesToVertices());
                        var n = this.immediateMode.shapeMode === l.TESS;
                        (this.isBezier || this.isQuadratic || this.isCurve || n) && this.immediateMode.shapeMode !== l.LINES && this._tesselateShape();
                    }
                }, s.default.RendererGL.prototype._calculateEdges = function(e, t, r) {
                    var n = [], o = 0;
                    switch(e){
                        case l.TRIANGLE_STRIP:
                            for(o = 0; o < t.length - 2; o++)n.push([
                                o,
                                o + 1
                            ]), n.push([
                                o,
                                o + 2
                            ]);
                            n.push([
                                o,
                                o + 1
                            ]);
                            break;
                        case l.TRIANGLES:
                            for(o = 0; o < t.length - 2; o += 3)n.push([
                                o,
                                o + 1
                            ]), n.push([
                                o + 1,
                                o + 2
                            ]), n.push([
                                o + 2,
                                o
                            ]);
                            break;
                        case l.LINES:
                            for(o = 0; o < t.length - 1; o += 2)n.push([
                                o,
                                o + 1
                            ]);
                            break;
                        default:
                            for(o = 0; o < t.length - 1; o++)n.push([
                                o,
                                o + 1
                            ]);
                    }
                    return r && n.push([
                        t.length - 1,
                        0
                    ]), n;
                }, s.default.RendererGL.prototype._tesselateShape = function() {
                    this.immediateMode.shapeMode = l.TRIANGLES;
                    var e = [
                        new Float32Array(this._vToNArray(this.immediateMode.geometry.vertices))
                    ], t = this._triangulate(e);
                    this.immediateMode.geometry.vertices = [];
                    for(var r = 0, n = t.length; r < n; r += 3)this.vertex(t[r], t[r + 1], t[r + 2]);
                }, s.default.RendererGL.prototype._drawImmediateFill = function() {
                    var e = this.GL, t = this._getImmediateFillShader();
                    this._calculateNormals(this.immediateMode.geometry), this._setFillUniforms(t);
                    var r = !0, n = !1, o = void 0;
                    try {
                        for(var i, a = this.immediateMode.buffers.fill[Symbol.iterator](); !(r = (i = a.next()).done); r = !0)i.value._prepareBuffer(this.immediateMode.geometry, t);
                    } catch (e529) {
                        n = !0, o = e529;
                    } finally{
                        try {
                            r || null == a.return || a.return();
                        } finally{
                            if (n) throw o;
                        }
                    }
                    this.immediateMode.shapeMode !== l.LINE_STRIP && this.immediateMode.shapeMode !== l.LINES || (this.immediateMode.shapeMode = l.TRIANGLE_FAN), this._applyColorBlend(this.curFillColor), e.drawArrays(this.immediateMode.shapeMode, 0, this.immediateMode.geometry.vertices.length), t.unbindShader();
                }, s.default.RendererGL.prototype._drawImmediateStroke = function() {
                    var e = this.GL, t = this._getImmediateStrokeShader();
                    this._setStrokeUniforms(t);
                    var r = !0, n = !1, o = void 0;
                    try {
                        for(var i, a = this.immediateMode.buffers.stroke[Symbol.iterator](); !(r = (i = a.next()).done); r = !0)i.value._prepareBuffer(this.immediateMode.geometry, t);
                    } catch (e530) {
                        n = !0, o = e530;
                    } finally{
                        try {
                            r || null == a.return || a.return();
                        } finally{
                            if (n) throw o;
                        }
                    }
                    this._applyColorBlend(this.curStrokeColor), e.drawArrays(e.TRIANGLES, 0, this.immediateMode.geometry.lineVertices.length), t.unbindShader();
                }, s.default.RendererGL.prototype._calculateNormals = function(e) {
                    e.vertices.forEach(function() {
                        e.vertexNormals.push(new s.default.Vector(0, 0, 1));
                    });
                };
                var o136 = s.default.RendererGL;
                r258.default = o136;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "./p5.RenderBuffer": 311,
                "core-js/modules/es.array.fill": 150,
                "core-js/modules/es.array.for-each": 152,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.float32-array": 200,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/web.dom-collections.for-each": 225,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        313: [
            function(e531, t326, r259) {
                "use strict";
                e531("core-js/modules/es.symbol"), e531("core-js/modules/es.symbol.description"), e531("core-js/modules/es.symbol.iterator"), e531("core-js/modules/es.array.fill"), e531("core-js/modules/es.array.iterator"), e531("core-js/modules/es.object.keys"), e531("core-js/modules/es.object.to-string"), e531("core-js/modules/es.string.iterator"), e531("core-js/modules/es.typed-array.float32-array"), e531("core-js/modules/es.typed-array.uint16-array"), e531("core-js/modules/es.typed-array.copy-within"), e531("core-js/modules/es.typed-array.every"), e531("core-js/modules/es.typed-array.fill"), e531("core-js/modules/es.typed-array.filter"), e531("core-js/modules/es.typed-array.find"), e531("core-js/modules/es.typed-array.find-index"), e531("core-js/modules/es.typed-array.for-each"), e531("core-js/modules/es.typed-array.includes"), e531("core-js/modules/es.typed-array.index-of"), e531("core-js/modules/es.typed-array.iterator"), e531("core-js/modules/es.typed-array.join"), e531("core-js/modules/es.typed-array.last-index-of"), e531("core-js/modules/es.typed-array.map"), e531("core-js/modules/es.typed-array.reduce"), e531("core-js/modules/es.typed-array.reduce-right"), e531("core-js/modules/es.typed-array.reverse"), e531("core-js/modules/es.typed-array.set"), e531("core-js/modules/es.typed-array.slice"), e531("core-js/modules/es.typed-array.some"), e531("core-js/modules/es.typed-array.sort"), e531("core-js/modules/es.typed-array.subarray"), e531("core-js/modules/es.typed-array.to-locale-string"), e531("core-js/modules/es.typed-array.to-string"), e531("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r259, "__esModule", {
                    value: !0
                }), r259.default = void 0;
                var n182, a63 = (n182 = e531("../core/main")) && n182.__esModule ? n182 : {
                    default: n182
                };
                e531("./p5.RendererGL"), e531("./p5.RenderBuffer");
                var o137 = 0;
                a63.default.RendererGL.prototype._initBufferDefaults = function(e) {
                    if (this._freeBuffers(e), 1000 < ++o137) {
                        var t = Object.keys(this.retainedMode.geometry)[0];
                        delete this.retainedMode.geometry[t], o137--;
                    }
                    return this.retainedMode.geometry[e] = {
                    };
                }, a63.default.RendererGL.prototype._freeBuffers = function(e532) {
                    var s = this.retainedMode.geometry[e532];
                    if (s) {
                        delete this.retainedMode.geometry[e532], o137--;
                        var l = this.GL;
                        s.indexBuffer && l.deleteBuffer(s.indexBuffer), t327(this.retainedMode.buffers.stroke), t327(this.retainedMode.buffers.fill);
                    }
                    function t327(e) {
                        var t = !0, r = !1, n = void 0;
                        try {
                            for(var o, i = e[Symbol.iterator](); !(t = (o = i.next()).done); t = !0){
                                var a = o.value;
                                s[a.dst] && (l.deleteBuffer(s[a.dst]), s[a.dst] = null);
                            }
                        } catch (e533) {
                            r = !0, n = e533;
                        } finally{
                            try {
                                t || null == i.return || i.return();
                            } finally{
                                if (r) throw n;
                            }
                        }
                    }
                }, a63.default.RendererGL.prototype.createBuffers = function(e, t) {
                    var r = this.GL, n = this._initBufferDefaults(e);
                    n.model = t;
                    var o = n.indexBuffer;
                    if (t.faces.length) {
                        o = o || (n.indexBuffer = r.createBuffer());
                        var i = a63.default.RendererGL.prototype._flatten(t.faces);
                        this._bindBuffer(o, r.ELEMENT_ARRAY_BUFFER, i, Uint16Array), n.vertexCount = 3 * t.faces.length;
                    } else o && (r.deleteBuffer(o), n.indexBuffer = null), n.vertexCount = t.vertices ? t.vertices.length : 0;
                    return n.lineVertexCount = t.lineVertices ? t.lineVertices.length : 0, n;
                }, a63.default.RendererGL.prototype.drawBuffers = function(e) {
                    var t = this.GL, r = this.retainedMode.geometry[e];
                    if (this._doStroke && 0 < r.lineVertexCount) {
                        var n = this._getRetainedStrokeShader();
                        this._setStrokeUniforms(n);
                        var o = !0, i = !1, a = void 0;
                        try {
                            for(var s, l = this.retainedMode.buffers.stroke[Symbol.iterator](); !(o = (s = l.next()).done); o = !0)s.value._prepareBuffer(r, n);
                        } catch (e534) {
                            i = !0, a = e534;
                        } finally{
                            try {
                                o || null == l.return || l.return();
                            } finally{
                                if (i) throw a;
                            }
                        }
                        this._applyColorBlend(this.curStrokeColor), this._drawArrays(t.TRIANGLES, e), n.unbindShader();
                    }
                    if (this._doFill) {
                        var u = this._getRetainedFillShader();
                        this._setFillUniforms(u);
                        var c = !0, d = !1, f = void 0;
                        try {
                            for(var h, p = this.retainedMode.buffers.fill[Symbol.iterator](); !(c = (h = p.next()).done); c = !0)h.value._prepareBuffer(r, u);
                        } catch (e535) {
                            d = !0, f = e535;
                        } finally{
                            try {
                                c || null == p.return || p.return();
                            } finally{
                                if (d) throw f;
                            }
                        }
                        r.indexBuffer && this._bindBuffer(r.indexBuffer, t.ELEMENT_ARRAY_BUFFER), this._applyColorBlend(this.curFillColor), this._drawElements(t.TRIANGLES, e), u.unbindShader();
                    }
                    return this;
                }, a63.default.RendererGL.prototype.drawBuffersScaled = function(e, t, r, n) {
                    var o = this.uMVMatrix.copy();
                    try {
                        this.uMVMatrix.scale(t, r, n), this.drawBuffers(e);
                    } finally{
                        this.uMVMatrix = o;
                    }
                }, a63.default.RendererGL.prototype._drawArrays = function(e, t) {
                    return this.GL.drawArrays(e, 0, this.retainedMode.geometry[t].lineVertexCount), this;
                }, a63.default.RendererGL.prototype._drawElements = function(e, t) {
                    var r = this.retainedMode.geometry[t], n = this.GL;
                    r.indexBuffer ? n.drawElements(n.TRIANGLES, r.vertexCount, n.UNSIGNED_SHORT, 0) : n.drawArrays(e || n.TRIANGLES, 0, r.vertexCount);
                }, a63.default.RendererGL.prototype._drawPoints = function(e, t) {
                    var r = this.GL, n = this._getImmediatePointShader();
                    this._setPointUniforms(n), this._bindBuffer(t, r.ARRAY_BUFFER, this._vToNArray(e), Float32Array, r.STATIC_DRAW), n.enableAttrib(n.attributes.aPosition, 3), r.drawArrays(r.Points, 0, e.length), n.unbindShader();
                };
                var i86 = a63.default.RendererGL;
                r259.default = i86;
            },
            {
                "../core/main": 260,
                "./p5.RenderBuffer": 311,
                "./p5.RendererGL": 314,
                "core-js/modules/es.array.fill": 150,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.keys": 173,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.float32-array": 200,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/es.typed-array.uint16-array": 221,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        314: [
            function(e536, t328, r260) {
                "use strict";
                function a64(e537) {
                    return (a64 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e537);
                }
                e536("core-js/modules/es.symbol"), e536("core-js/modules/es.symbol.description"), e536("core-js/modules/es.symbol.iterator"), e536("core-js/modules/es.array.concat"), e536("core-js/modules/es.array.fill"), e536("core-js/modules/es.array.filter"), e536("core-js/modules/es.array.from"), e536("core-js/modules/es.array.includes"), e536("core-js/modules/es.array.iterator"), e536("core-js/modules/es.array.slice"), e536("core-js/modules/es.object.assign"), e536("core-js/modules/es.object.to-string"), e536("core-js/modules/es.regexp.to-string"), e536("core-js/modules/es.string.includes"), e536("core-js/modules/es.string.iterator"), e536("core-js/modules/es.typed-array.float32-array"), e536("core-js/modules/es.typed-array.float64-array"), e536("core-js/modules/es.typed-array.int16-array"), e536("core-js/modules/es.typed-array.uint8-array"), e536("core-js/modules/es.typed-array.uint16-array"), e536("core-js/modules/es.typed-array.uint32-array"), e536("core-js/modules/es.typed-array.copy-within"), e536("core-js/modules/es.typed-array.every"), e536("core-js/modules/es.typed-array.fill"), e536("core-js/modules/es.typed-array.filter"), e536("core-js/modules/es.typed-array.find"), e536("core-js/modules/es.typed-array.find-index"), e536("core-js/modules/es.typed-array.for-each"), e536("core-js/modules/es.typed-array.includes"), e536("core-js/modules/es.typed-array.index-of"), e536("core-js/modules/es.typed-array.iterator"), e536("core-js/modules/es.typed-array.join"), e536("core-js/modules/es.typed-array.last-index-of"), e536("core-js/modules/es.typed-array.map"), e536("core-js/modules/es.typed-array.reduce"), e536("core-js/modules/es.typed-array.reduce-right"), e536("core-js/modules/es.typed-array.reverse"), e536("core-js/modules/es.typed-array.set"), e536("core-js/modules/es.typed-array.slice"), e536("core-js/modules/es.typed-array.some"), e536("core-js/modules/es.typed-array.sort"), e536("core-js/modules/es.typed-array.subarray"), e536("core-js/modules/es.typed-array.to-locale-string"), e536("core-js/modules/es.typed-array.to-string"), e536("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r260, "__esModule", {
                    value: !0
                }), r260.default = void 0;
                var u = o138(e536("../core/main")), i87 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a64(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s52();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e536("../core/constants")), n183 = o138(e536("libtess"));
                e536("./p5.Shader"), e536("./p5.Camera"), e536("../core/p5.Renderer"), e536("./p5.Matrix");
                e536("path");
                function s52() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s52 = function() {
                        return e;
                    }, e;
                }
                function o138(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }
                function l34(e538) {
                    return (function(e) {
                        if (Array.isArray(e)) {
                            for(var t = 0, r = new Array(e.length); t < e.length; t++)r[t] = e[t];
                            return r;
                        }
                    })(e538) || (function(e) {
                        if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
                    })(e538) || (function() {
                        throw new TypeError("Invalid attempt to spread non-iterable instance");
                    })();
                }
                var c = "precision highp float;\nprecision highp int;\n\nuniform mat4 uViewMatrix;\n\nuniform bool uUseLighting;\n\nuniform int uAmbientLightCount;\nuniform vec3 uAmbientColor[5];\n\nuniform int uDirectionalLightCount;\nuniform vec3 uLightingDirection[5];\nuniform vec3 uDirectionalDiffuseColors[5];\nuniform vec3 uDirectionalSpecularColors[5];\n\nuniform int uPointLightCount;\nuniform vec3 uPointLightLocation[5];\nuniform vec3 uPointLightDiffuseColors[5];\t\nuniform vec3 uPointLightSpecularColors[5];\n\nuniform int uSpotLightCount;\nuniform float uSpotLightAngle[5];\nuniform float uSpotLightConc[5];\nuniform vec3 uSpotLightDiffuseColors[5];\nuniform vec3 uSpotLightSpecularColors[5];\nuniform vec3 uSpotLightLocation[5];\nuniform vec3 uSpotLightDirection[5];\n\nuniform bool uSpecular;\nuniform float uShininess;\n\nuniform float uConstantAttenuation;\nuniform float uLinearAttenuation;\nuniform float uQuadraticAttenuation;\n\nconst float specularFactor = 2.0;\nconst float diffuseFactor = 0.73;\n\nstruct LightResult {\n  float specular;\n  float diffuse;\n};\n\nfloat _phongSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n\n  vec3 R = reflect(lightDirection, surfaceNormal);\n  return pow(max(0.0, dot(R, viewDirection)), shininess);\n}\n\nfloat _lambertDiffuse(vec3 lightDirection, vec3 surfaceNormal) {\n  return max(0.0, dot(-lightDirection, surfaceNormal));\n}\n\nLightResult _light(vec3 viewDirection, vec3 normal, vec3 lightVector) {\n\n  vec3 lightDir = normalize(lightVector);\n\n  //compute our diffuse & specular terms\n  LightResult lr;\n  if (uSpecular)\n    lr.specular = _phongSpecular(lightDir, viewDirection, normal, uShininess);\n  lr.diffuse = _lambertDiffuse(lightDir, normal);\n  return lr;\n}\n\nvoid totalLight(\n  vec3 modelPosition,\n  vec3 normal,\n  out vec3 totalDiffuse,\n  out vec3 totalSpecular\n) {\n\n  totalSpecular = vec3(0.0);\n\n  if (!uUseLighting) {\n    totalDiffuse = vec3(1.0);\n    return;\n  }\n\n  totalDiffuse = vec3(0.0);\n\n  vec3 viewDirection = normalize(-modelPosition);\n\n  for (int j = 0; j < 5; j++) {\n    if (j < uDirectionalLightCount) {\n      vec3 lightVector = (uViewMatrix * vec4(uLightingDirection[j], 0.0)).xyz;\n      vec3 lightColor = uDirectionalDiffuseColors[j];\n      vec3 specularColor = uDirectionalSpecularColors[j];\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if (j < uPointLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      //calculate attenuation\n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n      vec3 lightColor = lightFalloff * uPointLightDiffuseColors[j];\n      vec3 specularColor = lightFalloff * uPointLightSpecularColors[j];\n\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if(j < uSpotLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uSpotLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n\n      vec3 lightDirection = (uViewMatrix * vec4(uSpotLightDirection[j], 0.0)).xyz;\n      float spotDot = dot(normalize(lightVector), normalize(lightDirection));\n      float spotFalloff;\n      if(spotDot < uSpotLightAngle[j]) {\n        spotFalloff = 0.0;\n      }\n      else {\n        spotFalloff = pow(spotDot, uSpotLightConc[j]);\n      }\n      lightFalloff *= spotFalloff;\n\n      vec3 lightColor = uSpotLightDiffuseColors[j];\n      vec3 specularColor = uSpotLightSpecularColors[j];\n     \n      LightResult result = _light(viewDirection, normal, lightVector);\n      \n      totalDiffuse += result.diffuse * lightColor * lightFalloff;\n      totalSpecular += result.specular * lightColor * specularColor * lightFalloff;\n    }\n  }\n\n  totalDiffuse *= diffuseFactor;\n  totalSpecular *= specularFactor;\n}\n", d = {
                    immediateVert: "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\nuniform float uPointSize;\n\nvarying vec4 vColor;\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n  gl_PointSize = uPointSize;\n}\n",
                    vertexColorVert: "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}\n",
                    vertexColorFrag: "precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}",
                    normalVert: "attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying vec3 vVertexNormal;\nvarying highp vec2 vVertTexCoord;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\n  vVertTexCoord = aTexCoord;\n}\n",
                    normalFrag: "precision mediump float;\nvarying vec3 vVertexNormal;\nvoid main(void) {\n  gl_FragColor = vec4(vVertexNormal, 1.0);\n}",
                    basicFrag: "precision mediump float;\nuniform vec4 uMaterialColor;\nvoid main(void) {\n  gl_FragColor = uMaterialColor;\n}",
                    lightVert: c + "// include lighting.glgl\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * viewModelPosition;\n\n  vec3 vertexNormal = normalize(uNormalMatrix * aNormal);\n  vVertTexCoord = aTexCoord;\n\n  totalLight(viewModelPosition.xyz, vertexNormal, vDiffuseColor, vSpecularColor);\n\n  for (int i = 0; i < 8; i++) {\n    if (i < uAmbientLightCount) {\n      vDiffuseColor += uAmbientColor[i];\n    }\n  }\n}\n",
                    lightTextureFrag: "precision highp float;\n\nuniform vec4 uMaterialColor;\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\n\nvoid main(void) {\n  if(uEmissive && !isTexture) {\n    gl_FragColor = uMaterialColor;\n  }\n  else {\n    gl_FragColor = isTexture ? texture2D(uSampler, vVertTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\n    gl_FragColor.rgb = gl_FragColor.rgb * vDiffuseColor + vSpecularColor;\n  }\n}",
                    phongVert: "precision highp float;\nprecision highp int;\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform vec3 uAmbientColor[5];\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n\n  // Pass varyings to fragment shader\n  vViewPosition = viewModelPosition.xyz;\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n\n  vNormal = uNormalMatrix * aNormal;\n  vTexCoord = aTexCoord;\n\n  // TODO: this should be a uniform\n  vAmbientColor = vec3(0.0);\n  for (int i = 0; i < 5; i++) {\n    if (i < uAmbientLightCount) {\n      vAmbientColor += uAmbientColor[i];\n    }\n  }\n}\n",
                    phongFrag: c + "// include lighting.glsl\nprecision highp float;\nprecision highp int;\n\nuniform vec4 uMaterialColor;\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvoid main(void) {\n\n  vec3 diffuse;\n  vec3 specular;\n  totalLight(vViewPosition, normalize(vNormal), diffuse, specular);\n\n  if(uEmissive && !isTexture) {\n    gl_FragColor = uMaterialColor;\n  }\n  else {\n    gl_FragColor = isTexture ? texture2D(uSampler, vTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\n    gl_FragColor.rgb = gl_FragColor.rgb * (diffuse + vAmbientColor) + specular;\n  }\n}",
                    fontVert: "precision mediump float;\n\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform vec4 uGlyphRect;\nuniform float uGlyphOffset;\n\nvarying vec2 vTexCoord;\nvarying float w;\n\nvoid main() {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  // scale by the size of the glyph's rectangle\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\n\n  // move to the corner of the glyph\n  positionVec4.xy += uGlyphRect.xy;\n\n  // move to the letter's line offset\n  positionVec4.x += uGlyphOffset;\n  \n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vTexCoord = aTexCoord;\n  w = gl_Position.w;\n}\n",
                    fontFrag: "#extension GL_OES_standard_derivatives : enable\nprecision mediump float;\n\n#if 0\n  // simulate integer math using floats\n\t#define int float\n\t#define ivec2 vec2\n\t#define INT(x) float(x)\n\n\tint ifloor(float v) { return floor(v); }\n\tivec2 ifloor(vec2 v) { return floor(v); }\n\n#else\n  // use native integer math\n\tprecision highp int;\n\t#define INT(x) x\n\n\tint ifloor(float v) { return int(v); }\n\tint ifloor(int v) { return v; }\n\tivec2 ifloor(vec2 v) { return ivec2(v); }\n\n#endif\n\nuniform sampler2D uSamplerStrokes;\nuniform sampler2D uSamplerRowStrokes;\nuniform sampler2D uSamplerRows;\nuniform sampler2D uSamplerColStrokes;\nuniform sampler2D uSamplerCols;\n\nuniform ivec2 uStrokeImageSize;\nuniform ivec2 uCellsImageSize;\nuniform ivec2 uGridImageSize;\n\nuniform ivec2 uGridOffset;\nuniform ivec2 uGridSize;\nuniform vec4 uMaterialColor;\n\nvarying vec2 vTexCoord;\n\n// some helper functions\nint round(float v) { return ifloor(v + 0.5); }\nivec2 round(vec2 v) { return ifloor(v + 0.5); }\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\n\nint mul(float v1, int v2) {\n  return ifloor(v1 * float(v2));\n}\n\nivec2 mul(vec2 v1, ivec2 v2) {\n  return ifloor(v1 * vec2(v2) + 0.5);\n}\n\n// unpack a 16-bit integer from a float vec2\nint getInt16(vec2 v) {\n  ivec2 iv = round(v * 255.0);\n  return iv.x * INT(128) + iv.y;\n}\n\nvec2 pixelScale;\nvec2 coverage = vec2(0.0);\nvec2 weight = vec2(0.5);\nconst float minDistance = 1.0/8192.0;\nconst float hardness = 1.05; // amount of antialias\n\n// the maximum number of curves in a glyph\nconst int N = INT(250);\n\n// retrieves an indexed pixel from a sampler\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\n  int width = size.x;\n  int y = ifloor(pos / width);\n  int x = pos - y * width;  // pos % width\n\n  return texture2D(sampler, (vec2(x, y) + 0.5) / vec2(size));\n}\n\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\n\n  // get the coefficients of the quadratic in t\n  vec2 a = p0 - p1 * 2.0 + p2;\n  vec2 b = p0 - p1;\n  vec2 c = p0 - vTexCoord;\n\n  // found out which values of 't' it crosses the axes\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\n  vec2 t1 = ((b - surd) / a).yx;\n  vec2 t2 = ((b + surd) / a).yx;\n\n  // approximate straight lines to avoid rounding errors\n  if (abs(a.y) < 0.001)\n    t1.x = t2.x = c.y / (2.0 * b.y);\n\n  if (abs(a.x) < 0.001)\n    t1.y = t2.y = c.x / (2.0 * b.x);\n\n  // plug into quadratic formula to find the corrdinates of the crossings\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\n}\n\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  // determine on which side of the x-axis the points lie\n  bool y0 = p0.y > vTexCoord.y;\n  bool y1 = p1.y > vTexCoord.y;\n  bool y2 = p2.y > vTexCoord.y;\n\n  // could web be under the curve (after t1)?\n  if (y1 ? !y2 : y0) {\n    // add the coverage for t1\n    coverage.x += saturate(C1.x + 0.5);\n    // calculate the anti-aliasing for t1\n    weight.x = min(weight.x, abs(C1.x));\n  }\n\n  // are we outside the curve (after t2)?\n  if (y1 ? !y0 : y2) {\n    // subtract the coverage for t2\n    coverage.x -= saturate(C2.x + 0.5);\n    // calculate the anti-aliasing for t2\n    weight.x = min(weight.x, abs(C2.x));\n  }\n}\n\n// this is essentially the same as coverageX, but with the axes swapped\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  bool x0 = p0.x > vTexCoord.x;\n  bool x1 = p1.x > vTexCoord.x;\n  bool x2 = p2.x > vTexCoord.x;\n\n  if (x1 ? !x2 : x0) {\n    coverage.y -= saturate(C1.y + 0.5);\n    weight.y = min(weight.y, abs(C1.y));\n  }\n\n  if (x1 ? !x0 : x2) {\n    coverage.y += saturate(C2.y + 0.5);\n    weight.y = min(weight.y, abs(C2.y));\n  }\n}\n\nvoid main() {\n\n  // calculate the pixel scale based on screen-coordinates\n  pixelScale = hardness / fwidth(vTexCoord);\n\n  // which grid cell is this pixel in?\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\n\n  // intersect curves in this row\n  {\n    // the index into the row info bitmap\n    int rowIndex = gridCoord.y + uGridOffset.y;\n    // fetch the info texel\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\n    // unpack the rowInfo\n    int rowStrokeIndex = getInt16(rowInfo.xy);\n    int rowStrokeCount = getInt16(rowInfo.zw);\n\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\n      if (iRowStroke >= rowStrokeCount)\n        break;\n\n      // each stroke is made up of 3 points: the start and control point\n      // and the start of the next curve.\n      // fetch the indices of this pair of strokes:\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\n\n      // unpack the stroke index\n      int strokePos = getInt16(strokeIndices.xy);\n\n      // fetch the two strokes\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n\n      // calculate the coverage\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  // intersect curves in this column\n  {\n    int colIndex = gridCoord.x + uGridOffset.x;\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\n    int colStrokeIndex = getInt16(colInfo.xy);\n    int colStrokeCount = getInt16(colInfo.zw);\n    \n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\n      if (iColStroke >= colStrokeCount)\n        break;\n\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\n\n      int strokePos = getInt16(strokeIndices.xy);\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  weight = saturate(1.0 - weight * 2.0);\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\n  float antialias = abs(dot(coverage, weight) / distance);\n  float cover = min(abs(coverage.x), abs(coverage.y));\n  gl_FragColor = uMaterialColor;\n  gl_FragColor.a *= saturate(max(antialias, cover));\n}",
                    lineVert: "/*\n  Part of the Processing project - http://processing.org\n  Copyright (c) 2012-15 The Processing Foundation\n  Copyright (c) 2004-12 Ben Fry and Casey Reas\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation, version 2.1.\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#define PROCESSING_LINE_SHADER\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uStrokeWeight;\n\nuniform vec4 uViewport;\nuniform int uPerspective;\n\nattribute vec4 aPosition;\nattribute vec4 aDirection;\n  \nvoid main() {\n  // using a scale <1 moves the lines towards the camera\n  // in order to prevent popping effects due to half of\n  // the line disappearing behind the geometry faces.\n  vec3 scale = vec3(0.9995);\n\n  vec4 posp = uModelViewMatrix * aPosition;\n  vec4 posq = uModelViewMatrix * (aPosition + vec4(aDirection.xyz, 0));\n\n  // Moving vertices slightly toward the camera\n  // to avoid depth-fighting with the fill triangles.\n  // Discussed here:\n  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  \n  posp.xyz = posp.xyz * scale;\n  posq.xyz = posq.xyz * scale;\n\n  vec4 p = uProjectionMatrix * posp;\n  vec4 q = uProjectionMatrix * posq;\n\n  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])\n  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw\n\n  // prevent division by W by transforming the tangent formula (div by 0 causes\n  // the line to disappear, see https://github.com/processing/processing/issues/5183)\n  // t = screen_q - screen_p\n  //\n  // tangent is normalized and we don't care which aDirection it points to (+-)\n  // t = +- normalize( screen_q - screen_p )\n  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )\n  //\n  // extract common factor, <1,1> - <1,1> cancels out\n  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )\n  //\n  // convert to common divisor\n  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )\n  //\n  // remove the common scalar divisor/factor, not needed due to normalize and +-\n  // (keep uViewport - can't remove because it has different components for x and y\n  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)\n  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )\n\n  vec2 tangent = normalize((q.xy*p.w - p.xy*q.w) * uViewport.zw);\n\n  // flip tangent to normal (it's already normalized)\n  vec2 normal = vec2(-tangent.y, tangent.x);\n\n  float thickness = aDirection.w * uStrokeWeight;\n  vec2 offset = normal * thickness / 2.0;\n\n  vec2 curPerspScale;\n\n  if(uPerspective == 1) {\n    // Perspective ---\n    // convert from world to clip by multiplying with projection scaling factor\n    // to get the right thickness (see https://github.com/processing/processing/issues/5182)\n    // invert Y, projections in Processing invert Y\n    curPerspScale = (uProjectionMatrix * vec4(1, -1, 0, 0)).xy;\n  } else {\n    // No Perspective ---\n    // multiply by W (to cancel out division by W later in the pipeline) and\n    // convert from screen to clip (derived from clip to screen above)\n    curPerspScale = p.w / (0.5 * uViewport.zw);\n  }\n\n  gl_Position.xy = p.xy + offset.xy * curPerspScale;\n  gl_Position.zw = p.zw;\n}\n",
                    lineFrag: "precision mediump float;\nprecision mediump int;\n\nuniform vec4 uMaterialColor;\n\nvoid main() {\n  gl_FragColor = uMaterialColor;\n}",
                    pointVert: "attribute vec3 aPosition;\nuniform float uPointSize;\nvarying float vStrokeWeight;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nvoid main() {\n\tvec4 positionVec4 =  vec4(aPosition, 1.0);\n\tgl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n\tgl_PointSize = uPointSize;\n\tvStrokeWeight = uPointSize;\n}",
                    pointFrag: "precision mediump float;\nprecision mediump int;\nuniform vec4 uMaterialColor;\nvarying float vStrokeWeight;\n\nvoid main(){\n\tfloat mask = 0.0;\n\n\t// make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\n    // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\n\n\tmask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\n\n\t// if strokeWeight is 1 or less lets just draw a square\n\t// this prevents weird artifacting from carving circles when our points are really small\n\t// if strokeWeight is larger than 1, we just use it as is\n\n\tmask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\n\n\t// throw away the borders of the mask\n    // otherwise we get weird alpha blending issues\n\n\tif(mask > 0.98){\n      discard;\n  \t}\n\n  \tgl_FragColor = vec4(uMaterialColor.rgb * (1.0 - mask), uMaterialColor.a) ;\n}"
                };
                u.default.RendererGL = function(e, t, r, n) {
                    return u.default.Renderer.call(this, e, t, r), this._setAttributeDefaults(t), this._initContext(), this.isP3D = !0, this.GL = this.drawingContext, this._pInst._setProperty("drawingContext", this.drawingContext), this._isErasing = !1, this._enableLighting = !1, this.ambientLightColors = [], this.specularColors = [
                        1,
                        1,
                        1
                    ], this.directionalLightDirections = [], this.directionalLightDiffuseColors = [], this.directionalLightSpecularColors = [], this.pointLightPositions = [], this.pointLightDiffuseColors = [], this.pointLightSpecularColors = [], this.spotLightPositions = [], this.spotLightDirections = [], this.spotLightDiffuseColors = [], this.spotLightSpecularColors = [], this.spotLightAngle = [], this.spotLightConc = [], this.drawMode = i87.FILL, this.curFillColor = this._cachedFillStyle = [
                        1,
                        1,
                        1,
                        1
                    ], this.curStrokeColor = this._cachedStrokeStyle = [
                        0,
                        0,
                        0,
                        1
                    ], this.curBlendMode = i87.BLEND, this._cachedBlendMode = void 0, this.blendExt = this.GL.getExtension("EXT_blend_minmax"), this._isBlending = !1, this._useSpecularMaterial = !1, this._useEmissiveMaterial = !1, this._useNormalMaterial = !1, this._useShininess = 1, this._tint = [
                        255,
                        255,
                        255,
                        255
                    ], this.constantAttenuation = 1, this.linearAttenuation = 0, this.quadraticAttenuation = 0, this.uMVMatrix = new u.default.Matrix, this.uPMatrix = new u.default.Matrix, this.uNMatrix = new u.default.Matrix("mat3"), this._curCamera = new u.default.Camera(this), this._curCamera._computeCameraDefaultSettings(), this._curCamera._setDefaultCamera(), this._defaultLightShader = void 0, this._defaultImmediateModeShader = void 0, this._defaultNormalShader = void 0, this._defaultColorShader = void 0, this._defaultPointShader = void 0, this.userFillShader = void 0, this.userStrokeShader = void 0, this.userPointShader = void 0, this.retainedMode = {
                        geometry: {
                        },
                        buffers: {
                            stroke: [
                                new u.default.RenderBuffer(3, "lineVertices", "lineVertexBuffer", "aPosition", this, this._flatten),
                                new u.default.RenderBuffer(4, "lineNormals", "lineNormalBuffer", "aDirection", this, this._flatten)
                            ],
                            fill: [
                                new u.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray),
                                new u.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", this, this._vToNArray),
                                new u.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aMaterialColor", this),
                                new u.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", this),
                                new u.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)
                            ],
                            text: [
                                new u.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray),
                                new u.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)
                            ]
                        }
                    }, this.immediateMode = {
                        geometry: new u.default.Geometry,
                        shapeMode: i87.TRIANGLE_FAN,
                        _bezierVertex: [],
                        _quadraticVertex: [],
                        _curveVertex: [],
                        buffers: {
                            fill: [
                                new u.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray),
                                new u.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", this, this._vToNArray),
                                new u.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aVertexColor", this),
                                new u.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", this),
                                new u.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)
                            ],
                            stroke: [
                                new u.default.RenderBuffer(3, "lineVertices", "lineVertexBuffer", "aPosition", this, this._flatten),
                                new u.default.RenderBuffer(4, "lineNormals", "lineNormalBuffer", "aDirection", this, this._flatten)
                            ],
                            point: this.GL.createBuffer()
                        }
                    }, this.pointSize = 5, this.curStrokeWeight = 1, this.textures = [], this.textureMode = i87.IMAGE, this.textureWrapX = i87.CLAMP, this.textureWrapY = i87.CLAMP, this._tex = null, this._curveTightness = 6, this._lookUpTableBezier = [], this._lookUpTableQuadratic = [], this._lutBezierDetail = 0, this._lutQuadraticDetail = 0, this._tessy = this._initTessy(), this.fontInfos = {
                    }, this._curShader = void 0, this;
                }, u.default.RendererGL.prototype = Object.create(u.default.Renderer.prototype), u.default.RendererGL.prototype._setAttributeDefaults = function(e) {
                    var t = {
                        alpha: !0,
                        depth: !0,
                        stencil: !0,
                        antialias: navigator.userAgent.toLowerCase().includes("safari"),
                        premultipliedAlpha: !1,
                        preserveDrawingBuffer: !0,
                        perPixelLighting: !0
                    };
                    null === e._glAttributes ? e._glAttributes = t : e._glAttributes = Object.assign(t, e._glAttributes);
                }, u.default.RendererGL.prototype._initContext = function() {
                    try {
                        if (this.drawingContext = this.canvas.getContext("webgl", this._pInst._glAttributes) || this.canvas.getContext("experimental-webgl", this._pInst._glAttributes), null === this.drawingContext) throw new Error("Error creating webgl context");
                        var e = this.drawingContext;
                        e.enable(e.DEPTH_TEST), e.depthFunc(e.LEQUAL), e.viewport(0, 0, e.drawingBufferWidth, e.drawingBufferHeight), this._viewport = this.drawingContext.getParameter(this.drawingContext.VIEWPORT);
                    } catch (e) {
                        throw e;
                    }
                }, u.default.RendererGL.prototype._resetContext = function(e, t) {
                    var r = this.width, n = this.height, o = this.canvas.id, i = this._pInst instanceof u.default.Graphics;
                    if (i) {
                        var a = this._pInst;
                        a.canvas.parentNode.removeChild(a.canvas), a.canvas = document.createElement("canvas"), (a._pInst._userNode || document.body).appendChild(a.canvas), u.default.Element.call(a, a.canvas, a._pInst), a.width = r, a.height = n;
                    } else {
                        var s = this.canvas;
                        s && s.parentNode.removeChild(s), (s = document.createElement("canvas")).id = o, this._pInst._userNode ? this._pInst._userNode.appendChild(s) : document.body.appendChild(s), this._pInst.canvas = s;
                    }
                    var l = new u.default.RendererGL(this._pInst.canvas, this._pInst, !i);
                    this._pInst._setProperty("_renderer", l), l.resize(r, n), l._applyDefaults(), i || this._pInst._elements.push(l), "function" == typeof t && setTimeout(function() {
                        t.apply(window._renderer, e);
                    }, 0);
                }, u.default.prototype.setAttributes = function(e, t) {
                    if (void 0 !== this._glAttributes) {
                        var r = !0;
                        if (void 0 !== t ? (null === this._glAttributes && (this._glAttributes = {
                        }), this._glAttributes[e] !== t && (this._glAttributes[e] = t, r = !1)) : e instanceof Object && this._glAttributes !== e && (this._glAttributes = e, r = !1), this._renderer.isP3D && !r) {
                            if (!this._setupDone) {
                                for(var n in this._renderer.retainedMode.geometry)if (this._renderer.retainedMode.geometry.hasOwnProperty(n)) return void console.error("Sorry, Could not set the attributes, you need to call setAttributes() before calling the other drawing methods in setup()");
                            }
                            this.push(), this._renderer._resetContext(), this.pop(), this._renderer._curCamera && (this._renderer._curCamera._renderer = this._renderer);
                        }
                    } else console.log("You are trying to use setAttributes on a p5.Graphics object that does not use a WEBGL renderer.");
                }, u.default.RendererGL.prototype._update = function() {
                    this.uMVMatrix.set(this._curCamera.cameraMatrix.mat4[0], this._curCamera.cameraMatrix.mat4[1], this._curCamera.cameraMatrix.mat4[2], this._curCamera.cameraMatrix.mat4[3], this._curCamera.cameraMatrix.mat4[4], this._curCamera.cameraMatrix.mat4[5], this._curCamera.cameraMatrix.mat4[6], this._curCamera.cameraMatrix.mat4[7], this._curCamera.cameraMatrix.mat4[8], this._curCamera.cameraMatrix.mat4[9], this._curCamera.cameraMatrix.mat4[10], this._curCamera.cameraMatrix.mat4[11], this._curCamera.cameraMatrix.mat4[12], this._curCamera.cameraMatrix.mat4[13], this._curCamera.cameraMatrix.mat4[14], this._curCamera.cameraMatrix.mat4[15]), this.ambientLightColors.length = 0, this.specularColors = [
                        1,
                        1,
                        1
                    ], this.directionalLightDirections.length = 0, this.directionalLightDiffuseColors.length = 0, this.directionalLightSpecularColors.length = 0, this.pointLightPositions.length = 0, this.pointLightDiffuseColors.length = 0, this.pointLightSpecularColors.length = 0, this.spotLightPositions.length = 0, this.spotLightDirections.length = 0, this.spotLightDiffuseColors.length = 0, this.spotLightSpecularColors.length = 0, this.spotLightAngle.length = 0, this.spotLightConc.length = 0, this._enableLighting = !1, this._tint = [
                        255,
                        255,
                        255,
                        255
                    ], this.GL.clear(this.GL.DEPTH_BUFFER_BIT);
                }, u.default.RendererGL.prototype.background = function() {
                    var e, t = (e = this._pInst).color.apply(e, arguments), r = t.levels[0] / 255, n = t.levels[1] / 255, o = t.levels[2] / 255, i = t.levels[3] / 255;
                    this.GL.clearColor(r, n, o, i), this.GL.clear(this.GL.COLOR_BUFFER_BIT);
                }, u.default.RendererGL.prototype.fill = function(e, t, r, n) {
                    var o = u.default.prototype.color.apply(this._pInst, arguments);
                    this.curFillColor = o._array, this.drawMode = i87.FILL, this._useNormalMaterial = !1, this._tex = null;
                }, u.default.RendererGL.prototype.stroke = function(e, t, r, n) {
                    arguments[3] = 255;
                    var o = u.default.prototype.color.apply(this._pInst, arguments);
                    this.curStrokeColor = o._array;
                }, u.default.RendererGL.prototype.strokeCap = function(e) {
                    console.error("Sorry, strokeCap() is not yet implemented in WEBGL mode");
                }, u.default.RendererGL.prototype.strokeJoin = function(e) {
                    console.error("Sorry, strokeJoin() is not yet implemented in WEBGL mode");
                }, u.default.RendererGL.prototype.filter = function(e) {
                    console.error("filter() does not work in WEBGL mode");
                }, u.default.RendererGL.prototype.blendMode = function(e) {
                    e === i87.DARKEST || e === i87.LIGHTEST || e === i87.ADD || e === i87.BLEND || e === i87.SUBTRACT || e === i87.SCREEN || e === i87.EXCLUSION || e === i87.REPLACE || e === i87.MULTIPLY || e === i87.REMOVE ? this.curBlendMode = e : e !== i87.BURN && e !== i87.OVERLAY && e !== i87.HARD_LIGHT && e !== i87.SOFT_LIGHT && e !== i87.DODGE || console.warn("BURN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, and DODGE only work for blendMode in 2D mode.");
                }, u.default.RendererGL.prototype.erase = function(e, t) {
                    this._isErasing || (this._applyBlendMode(i87.REMOVE), this._isErasing = !0, this._cachedFillStyle = this.curFillColor.slice(), this.curFillColor = [
                        1,
                        1,
                        1,
                        e / 255
                    ], this._cachedStrokeStyle = this.curStrokeColor.slice(), this.curStrokeColor = [
                        1,
                        1,
                        1,
                        t / 255
                    ]);
                }, u.default.RendererGL.prototype.noErase = function() {
                    this._isErasing && (this._isErasing = !1, this.curFillColor = this._cachedFillStyle.slice(), this.curStrokeColor = this._cachedStrokeStyle.slice(), this.blendMode(this._cachedBlendMode));
                }, u.default.RendererGL.prototype.strokeWeight = function(e) {
                    this.curStrokeWeight !== e && (this.pointSize = e, this.curStrokeWeight = e);
                }, u.default.RendererGL.prototype._getPixel = function(e, t) {
                    var r;
                    return r = new Uint8Array(4), this.drawingContext.readPixels(e, t, 1, 1, this.drawingContext.RGBA, this.drawingContext.UNSIGNED_BYTE, r), [
                        r[0],
                        r[1],
                        r[2],
                        r[3]
                    ];
                }, u.default.RendererGL.prototype.loadPixels = function() {
                    var e = this._pixelsState;
                    if (!0 === this._pInst._glAttributes.preserveDrawingBuffer) {
                        var t = e.pixels, r = this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4;
                        t instanceof Uint8Array && t.length === r || (t = new Uint8Array(r), this._pixelsState._setProperty("pixels", t));
                        var n = this._pInst._pixelDensity;
                        this.GL.readPixels(0, 0, this.width * n, this.height * n, this.GL.RGBA, this.GL.UNSIGNED_BYTE, t);
                    } else console.log("loadPixels only works in WebGL when preserveDrawingBuffer is true.");
                }, u.default.RendererGL.prototype.geometryInHash = function(e) {
                    return void 0 !== this.retainedMode.geometry[e];
                }, u.default.RendererGL.prototype.resize = function(e, t) {
                    u.default.Renderer.prototype.resize.call(this, e, t), this.GL.viewport(0, 0, this.GL.drawingBufferWidth, this.GL.drawingBufferHeight), this._viewport = this.GL.getParameter(this.GL.VIEWPORT), this._curCamera._resize();
                    var r = this._pixelsState;
                    void 0 !== r.pixels && r._setProperty("pixels", new Uint8Array(this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4));
                }, u.default.RendererGL.prototype.clear = function() {
                    var e = (arguments.length <= 0 ? void 0 : arguments[0]) || 0, t = (arguments.length <= 1 ? void 0 : arguments[1]) || 0, r = (arguments.length <= 2 ? void 0 : arguments[2]) || 0, n = (arguments.length <= 3 ? void 0 : arguments[3]) || 0;
                    this.GL.clearColor(e, t, r, n), this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);
                }, u.default.RendererGL.prototype.applyMatrix = function(e, t, r, n, o, i) {
                    16 === arguments.length ? u.default.Matrix.prototype.apply.apply(this.uMVMatrix, arguments) : this.uMVMatrix.apply([
                        e,
                        t,
                        0,
                        0,
                        r,
                        n,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        o,
                        i,
                        0,
                        1
                    ]);
                }, u.default.RendererGL.prototype.translate = function(e, t, r) {
                    return e instanceof u.default.Vector && (r = e.z, t = e.y, e = e.x), this.uMVMatrix.translate([
                        e,
                        t,
                        r
                    ]), this;
                }, u.default.RendererGL.prototype.scale = function(e, t, r) {
                    return this.uMVMatrix.scale(e, t, r), this;
                }, u.default.RendererGL.prototype.rotate = function(e, t) {
                    return void 0 === t ? this.rotateZ(e) : (u.default.Matrix.prototype.rotate.apply(this.uMVMatrix, arguments), this);
                }, u.default.RendererGL.prototype.rotateX = function(e) {
                    return this.rotate(e, 1, 0, 0), this;
                }, u.default.RendererGL.prototype.rotateY = function(e) {
                    return this.rotate(e, 0, 1, 0), this;
                }, u.default.RendererGL.prototype.rotateZ = function(e) {
                    return this.rotate(e, 0, 0, 1), this;
                }, u.default.RendererGL.prototype.push = function() {
                    var e = u.default.Renderer.prototype.push.apply(this), t = e.properties;
                    return t.uMVMatrix = this.uMVMatrix.copy(), t.uPMatrix = this.uPMatrix.copy(), t._curCamera = this._curCamera, this._curCamera = this._curCamera.copy(), t.ambientLightColors = this.ambientLightColors.slice(), t.specularColors = this.specularColors.slice(), t.directionalLightDirections = this.directionalLightDirections.slice(), t.directionalLightDiffuseColors = this.directionalLightDiffuseColors.slice(), t.directionalLightSpecularColors = this.directionalLightSpecularColors.slice(), t.pointLightPositions = this.pointLightPositions.slice(), t.pointLightDiffuseColors = this.pointLightDiffuseColors.slice(), t.pointLightSpecularColors = this.pointLightSpecularColors.slice(), t.spotLightPositions = this.spotLightPositions.slice(), t.spotLightDirections = this.spotLightDirections.slice(), t.spotLightDiffuseColors = this.spotLightDiffuseColors.slice(), t.spotLightSpecularColors = this.spotLightSpecularColors.slice(), t.spotLightAngle = this.spotLightAngle.slice(), t.spotLightConc = this.spotLightConc.slice(), t.userFillShader = this.userFillShader, t.userStrokeShader = this.userStrokeShader, t.userPointShader = this.userPointShader, t.pointSize = this.pointSize, t.curStrokeWeight = this.curStrokeWeight, t.curStrokeColor = this.curStrokeColor, t.curFillColor = this.curFillColor, t._useSpecularMaterial = this._useSpecularMaterial, t._useEmissiveMaterial = this._useEmissiveMaterial, t._useShininess = this._useShininess, t.constantAttenuation = this.constantAttenuation, t.linearAttenuation = this.linearAttenuation, t.quadraticAttenuation = this.quadraticAttenuation, t._enableLighting = this._enableLighting, t._useNormalMaterial = this._useNormalMaterial, t._tex = this._tex, t.drawMode = this.drawMode, e;
                }, u.default.RendererGL.prototype.resetMatrix = function() {
                    return this.uMVMatrix = u.default.Matrix.identity(this._pInst), this;
                }, u.default.RendererGL.prototype._getImmediateStrokeShader = function() {
                    var e = this.userStrokeShader;
                    return e && e.isStrokeShader() ? e : this._getLineShader();
                }, u.default.RendererGL.prototype._getRetainedStrokeShader = u.default.RendererGL.prototype._getImmediateStrokeShader, u.default.RendererGL.prototype._getImmediateFillShader = function() {
                    var e = this.userFillShader;
                    if (this._useNormalMaterial && (!e || !e.isNormalShader())) return this._getNormalShader();
                    if (this._enableLighting) {
                        if (!e || !e.isLightShader()) return this._getLightShader();
                    } else if (this._tex) {
                        if (!e || !e.isTextureShader()) return this._getLightShader();
                    } else if (!e) return this._getImmediateModeShader();
                    return e;
                }, u.default.RendererGL.prototype._getRetainedFillShader = function() {
                    if (this._useNormalMaterial) return this._getNormalShader();
                    var e = this.userFillShader;
                    if (this._enableLighting) {
                        if (!e || !e.isLightShader()) return this._getLightShader();
                    } else if (this._tex) {
                        if (!e || !e.isTextureShader()) return this._getLightShader();
                    } else if (!e) return this._getColorShader();
                    return e;
                }, u.default.RendererGL.prototype._getImmediatePointShader = function() {
                    var e = this.userPointShader;
                    return e && e.isPointShader() ? e : this._getPointShader();
                }, u.default.RendererGL.prototype._getRetainedLineShader = u.default.RendererGL.prototype._getImmediateLineShader, u.default.RendererGL.prototype._getLightShader = function() {
                    return this._defaultLightShader || (this._pInst._glAttributes.perPixelLighting ? this._defaultLightShader = new u.default.Shader(this, d.phongVert, d.phongFrag) : this._defaultLightShader = new u.default.Shader(this, d.lightVert, d.lightTextureFrag)), this._defaultLightShader;
                }, u.default.RendererGL.prototype._getImmediateModeShader = function() {
                    return this._defaultImmediateModeShader || (this._defaultImmediateModeShader = new u.default.Shader(this, d.immediateVert, d.vertexColorFrag)), this._defaultImmediateModeShader;
                }, u.default.RendererGL.prototype._getNormalShader = function() {
                    return this._defaultNormalShader || (this._defaultNormalShader = new u.default.Shader(this, d.normalVert, d.normalFrag)), this._defaultNormalShader;
                }, u.default.RendererGL.prototype._getColorShader = function() {
                    return this._defaultColorShader || (this._defaultColorShader = new u.default.Shader(this, d.normalVert, d.basicFrag)), this._defaultColorShader;
                }, u.default.RendererGL.prototype._getPointShader = function() {
                    return this._defaultPointShader || (this._defaultPointShader = new u.default.Shader(this, d.pointVert, d.pointFrag)), this._defaultPointShader;
                }, u.default.RendererGL.prototype._getLineShader = function() {
                    return this._defaultLineShader || (this._defaultLineShader = new u.default.Shader(this, d.lineVert, d.lineFrag)), this._defaultLineShader;
                }, u.default.RendererGL.prototype._getFontShader = function() {
                    return this._defaultFontShader || (this.GL.getExtension("OES_standard_derivatives"), this._defaultFontShader = new u.default.Shader(this, d.fontVert, d.fontFrag)), this._defaultFontShader;
                }, u.default.RendererGL.prototype._getEmptyTexture = function() {
                    if (!this._emptyTexture) {
                        var e = new u.default.Image(1, 1);
                        e.set(0, 0, 255), this._emptyTexture = new u.default.Texture(this, e);
                    }
                    return this._emptyTexture;
                }, u.default.RendererGL.prototype.getTexture = function(e) {
                    var t = this.textures, r = !0, n = !1, o = void 0;
                    try {
                        for(var i, a = t[Symbol.iterator](); !(r = (i = a.next()).done); r = !0){
                            var s = i.value;
                            if (s.src === e) return s;
                        }
                    } catch (e539) {
                        n = !0, o = e539;
                    } finally{
                        try {
                            r || null == a.return || a.return();
                        } finally{
                            if (n) throw o;
                        }
                    }
                    var l = new u.default.Texture(this, e);
                    return t.push(l), l;
                }, u.default.RendererGL.prototype._setStrokeUniforms = function(e) {
                    e.bindShader(), e.setUniform("uMaterialColor", this.curStrokeColor), e.setUniform("uStrokeWeight", this.curStrokeWeight);
                }, u.default.RendererGL.prototype._setFillUniforms = function(e) {
                    e.bindShader(), e.setUniform("uMaterialColor", this.curFillColor), e.setUniform("isTexture", !!this._tex), this._tex && e.setUniform("uSampler", this._tex), e.setUniform("uTint", this._tint), e.setUniform("uSpecular", this._useSpecularMaterial), e.setUniform("uEmissive", this._useEmissiveMaterial), e.setUniform("uShininess", this._useShininess), e.setUniform("uUseLighting", this._enableLighting);
                    var t = this.pointLightDiffuseColors.length / 3;
                    e.setUniform("uPointLightCount", t), e.setUniform("uPointLightLocation", this.pointLightPositions), e.setUniform("uPointLightDiffuseColors", this.pointLightDiffuseColors), e.setUniform("uPointLightSpecularColors", this.pointLightSpecularColors);
                    var r = this.directionalLightDiffuseColors.length / 3;
                    e.setUniform("uDirectionalLightCount", r), e.setUniform("uLightingDirection", this.directionalLightDirections), e.setUniform("uDirectionalDiffuseColors", this.directionalLightDiffuseColors), e.setUniform("uDirectionalSpecularColors", this.directionalLightSpecularColors);
                    var n = this.ambientLightColors.length / 3;
                    e.setUniform("uAmbientLightCount", n), e.setUniform("uAmbientColor", this.ambientLightColors);
                    var o = this.spotLightDiffuseColors.length / 3;
                    e.setUniform("uSpotLightCount", o), e.setUniform("uSpotLightAngle", this.spotLightAngle), e.setUniform("uSpotLightConc", this.spotLightConc), e.setUniform("uSpotLightDiffuseColors", this.spotLightDiffuseColors), e.setUniform("uSpotLightSpecularColors", this.spotLightSpecularColors), e.setUniform("uSpotLightLocation", this.spotLightPositions), e.setUniform("uSpotLightDirection", this.spotLightDirections), e.setUniform("uConstantAttenuation", this.constantAttenuation), e.setUniform("uLinearAttenuation", this.linearAttenuation), e.setUniform("uQuadraticAttenuation", this.quadraticAttenuation), e.bindTextures();
                }, u.default.RendererGL.prototype._setPointUniforms = function(e) {
                    e.bindShader(), e.setUniform("uMaterialColor", this.curStrokeColor), e.setUniform("uPointSize", this.pointSize * this._pInst._pixelDensity);
                }, u.default.RendererGL.prototype._bindBuffer = function(e, t, r, n, o) {
                    if (t = t || this.GL.ARRAY_BUFFER, this.GL.bindBuffer(t, e), void 0 !== r) {
                        var i = new (n || Float32Array)(r);
                        this.GL.bufferData(t, i, o || this.GL.STATIC_DRAW);
                    }
                }, u.default.RendererGL.prototype._arraysEqual = function(e, t) {
                    var r = e.length;
                    if (r !== t.length) return !1;
                    for(var n = 0; n < r; n++)if (e[n] !== t[n]) return !1;
                    return !0;
                }, u.default.RendererGL.prototype._isTypedArray = function(e) {
                    return e instanceof Uint32Array;
                }, u.default.RendererGL.prototype._flatten = function(e) {
                    if (0 === e.length) return [];
                    if (20000 < e.length) {
                        var t, r = Object.prototype.toString, n = [], o = e.slice();
                        for(t = o.pop(); "[object Array]" === r.call(t) ? o.push.apply(o, l34(t)) : n.push(t), o.length && void 0 !== (t = o.pop()););
                        return n.reverse(), n;
                    }
                    var i;
                    return (i = []).concat.apply(i, l34(e));
                }, u.default.RendererGL.prototype._vToNArray = function(e) {
                    var t = [], r = !0, n = !1, o = void 0;
                    try {
                        for(var i, a = e[Symbol.iterator](); !(r = (i = a.next()).done); r = !0){
                            var s = i.value;
                            t.push(s.x, s.y, s.z);
                        }
                    } catch (e540) {
                        n = !0, o = e540;
                    } finally{
                        try {
                            r || null == a.return || a.return();
                        } finally{
                            if (n) throw o;
                        }
                    }
                    return t;
                }, u.default.prototype._assert3d = function(e) {
                    if (!this._renderer.isP3D) throw new Error("".concat(e, "() is only supported in WEBGL mode. If you'd like to use 3D graphics and WebGL, see  https://p5js.org/examples/form-3d-primitives.html for more information."));
                }, u.default.RendererGL.prototype._initTessy = function() {
                    var e541 = new n183.default.GluTesselator;
                    return e541.gluTessCallback(n183.default.gluEnum.GLU_TESS_VERTEX_DATA, function(e, t) {
                        t[t.length] = e[0], t[t.length] = e[1], t[t.length] = e[2];
                    }), e541.gluTessCallback(n183.default.gluEnum.GLU_TESS_BEGIN, function(e) {
                        e !== n183.default.primitiveType.GL_TRIANGLES && console.log("expected TRIANGLES but got type: ".concat(e));
                    }), e541.gluTessCallback(n183.default.gluEnum.GLU_TESS_ERROR, function(e) {
                        console.log("error callback"), console.log("error number: ".concat(e));
                    }), e541.gluTessCallback(n183.default.gluEnum.GLU_TESS_COMBINE, function(e, t, r) {
                        return [
                            e[0],
                            e[1],
                            e[2]
                        ];
                    }), e541.gluTessCallback(n183.default.gluEnum.GLU_TESS_EDGE_FLAG, function(e) {
                    }), e541;
                }, u.default.RendererGL.prototype._triangulate = function(e) {
                    this._tessy.gluTessNormal(0, 0, 1);
                    var t = [];
                    this._tessy.gluTessBeginPolygon(t);
                    for(var r = 0; r < e.length; r++){
                        this._tessy.gluTessBeginContour();
                        for(var n = e[r], o = 0; o < n.length; o += 3){
                            var i = [
                                n[o],
                                n[o + 1],
                                n[o + 2]
                            ];
                            this._tessy.gluTessVertex(i, i);
                        }
                        this._tessy.gluTessEndContour();
                    }
                    return this._tessy.gluTessEndPolygon(), t;
                }, u.default.RendererGL.prototype._bezierCoefficients = function(e) {
                    var t = e * e, r = 1 - e, n = r * r;
                    return [
                        n * r,
                        3 * n * e,
                        3 * r * t,
                        t * e
                    ];
                }, u.default.RendererGL.prototype._quadraticCoefficients = function(e) {
                    var t = 1 - e;
                    return [
                        t * t,
                        2 * t * e,
                        e * e
                    ];
                }, u.default.RendererGL.prototype._bezierToCatmull = function(e) {
                    return [
                        e[1],
                        e[1] + (e[2] - e[0]) / this._curveTightness,
                        e[2] - (e[3] - e[1]) / this._curveTightness,
                        e[2]
                    ];
                };
                var f = u.default.RendererGL;
                r260.default = f;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "../core/p5.Renderer": 263,
                "./p5.Camera": 308,
                "./p5.Matrix": 310,
                "./p5.Shader": 315,
                "core-js/modules/es.array.concat": 148,
                "core-js/modules/es.array.fill": 150,
                "core-js/modules/es.array.filter": 151,
                "core-js/modules/es.array.from": 153,
                "core-js/modules/es.array.includes": 154,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.object.assign": 170,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.to-string": 179,
                "core-js/modules/es.string.includes": 182,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.float32-array": 200,
                "core-js/modules/es.typed-array.float64-array": 201,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.int16-array": 205,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/es.typed-array.uint16-array": 221,
                "core-js/modules/es.typed-array.uint32-array": 222,
                "core-js/modules/es.typed-array.uint8-array": 223,
                "core-js/modules/web.dom-collections.iterator": 226,
                libtess: 234,
                path: 237
            }
        ],
        315: [
            function(e542, t329, r261) {
                "use strict";
                e542("core-js/modules/es.symbol"), e542("core-js/modules/es.symbol.description"), e542("core-js/modules/es.symbol.iterator"), e542("core-js/modules/es.array.index-of"), e542("core-js/modules/es.array.iterator"), e542("core-js/modules/es.array.slice"), e542("core-js/modules/es.function.name"), e542("core-js/modules/es.object.to-string"), e542("core-js/modules/es.string.iterator"), e542("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r261, "__esModule", {
                    value: !0
                }), r261.default = void 0;
                var n184, o139 = (n184 = e542("../core/main")) && n184.__esModule ? n184 : {
                    default: n184
                };
                o139.default.Shader = function(e, t, r) {
                    this._renderer = e, this._vertSrc = t, this._fragSrc = r, this._vertShader = -1, this._fragShader = -1, this._glProgram = 0, this._loadedAttributes = !1, this.attributes = {
                    }, this._loadedUniforms = !1, this.uniforms = {
                    }, this._bound = !1, this.samplers = [];
                }, o139.default.Shader.prototype.init = function() {
                    if (0 === this._glProgram) {
                        var e = this._renderer.GL;
                        if (this._vertShader = e.createShader(e.VERTEX_SHADER), e.shaderSource(this._vertShader, this._vertSrc), e.compileShader(this._vertShader), !e.getShaderParameter(this._vertShader, e.COMPILE_STATUS)) return console.error("Yikes! An error occurred compiling the vertex shader:".concat(e.getShaderInfoLog(this._vertShader))), null;
                        if (this._fragShader = e.createShader(e.FRAGMENT_SHADER), e.shaderSource(this._fragShader, this._fragSrc), e.compileShader(this._fragShader), !e.getShaderParameter(this._fragShader, e.COMPILE_STATUS)) return console.error("Darn! An error occurred compiling the fragment shader:".concat(e.getShaderInfoLog(this._fragShader))), null;
                        this._glProgram = e.createProgram(), e.attachShader(this._glProgram, this._vertShader), e.attachShader(this._glProgram, this._fragShader), e.linkProgram(this._glProgram), e.getProgramParameter(this._glProgram, e.LINK_STATUS) || console.error("Snap! Error linking shader program: ".concat(e.getProgramInfoLog(this._glProgram))), this._loadAttributes(), this._loadUniforms();
                    }
                    return this;
                }, o139.default.Shader.prototype._loadAttributes = function() {
                    if (!this._loadedAttributes) {
                        this.attributes = {
                        };
                        for(var e = this._renderer.GL, t = e.getProgramParameter(this._glProgram, e.ACTIVE_ATTRIBUTES), r = 0; r < t; ++r){
                            var n = e.getActiveAttrib(this._glProgram, r), o = n.name, i = e.getAttribLocation(this._glProgram, o), a = {
                            };
                            a.name = o, a.location = i, a.index = r, a.type = n.type, a.size = n.size, this.attributes[o] = a;
                        }
                        this._loadedAttributes = !0;
                    }
                }, o139.default.Shader.prototype._loadUniforms = function() {
                    if (!this._loadedUniforms) {
                        for(var e = this._renderer.GL, t = e.getProgramParameter(this._glProgram, e.ACTIVE_UNIFORMS), r = 0, n = 0; n < t; ++n){
                            var o = e.getActiveUniform(this._glProgram, n), i = {
                            };
                            i.location = e.getUniformLocation(this._glProgram, o.name), i.size = o.size;
                            var a = o.name;
                            1 < o.size && (a = a.substring(0, a.indexOf("[0]"))), i.name = a, i.type = o.type, i._cachedData = void 0, i.type === e.SAMPLER_2D && (i.samplerIndex = r, r++, this.samplers.push(i)), i.isArray = i.type === e.FLOAT_MAT3 || i.type === e.FLOAT_MAT4 || i.type === e.FLOAT_VEC2 || i.type === e.FLOAT_VEC3 || i.type === e.FLOAT_VEC4 || i.type === e.INT_VEC2 || i.type === e.INT_VEC3 || i.type === e.INT_VEC4, this.uniforms[a] = i;
                        }
                        this._loadedUniforms = !0;
                    }
                }, o139.default.Shader.prototype.compile = function() {
                }, o139.default.Shader.prototype.bindShader = function() {
                    this.init(), this._bound || (this.useProgram(), this._bound = !0, this._setMatrixUniforms(), this.setUniform("uViewport", this._renderer._viewport));
                }, o139.default.Shader.prototype.unbindShader = function() {
                    return this._bound && (this.unbindTextures(), this._bound = !1), this;
                }, o139.default.Shader.prototype.bindTextures = function() {
                    var e = this._renderer.GL, t = !0, r = !1, n = void 0;
                    try {
                        for(var o, i = this.samplers[Symbol.iterator](); !(t = (o = i.next()).done); t = !0){
                            var a = o.value, s = a.texture;
                            void 0 === s && (s = this._renderer._getEmptyTexture()), e.activeTexture(e.TEXTURE0 + a.samplerIndex), s.bindTexture(), s.update(), e.uniform1i(a.location, a.samplerIndex);
                        }
                    } catch (e543) {
                        r = !0, n = e543;
                    } finally{
                        try {
                            t || null == i.return || i.return();
                        } finally{
                            if (r) throw n;
                        }
                    }
                }, o139.default.Shader.prototype.updateTextures = function() {
                    var e = !0, t = !1, r = void 0;
                    try {
                        for(var n, o = this.samplers[Symbol.iterator](); !(e = (n = o.next()).done); e = !0){
                            var i = n.value.texture;
                            i && i.update();
                        }
                    } catch (e544) {
                        t = !0, r = e544;
                    } finally{
                        try {
                            e || null == o.return || o.return();
                        } finally{
                            if (t) throw r;
                        }
                    }
                }, o139.default.Shader.prototype.unbindTextures = function() {
                }, o139.default.Shader.prototype._setMatrixUniforms = function() {
                    this.setUniform("uProjectionMatrix", this._renderer.uPMatrix.mat4), this.isStrokeShader() && ("default" === this._renderer._curCamera.cameraType ? this.setUniform("uPerspective", 1) : this.setUniform("uPerspective", 0)), this.setUniform("uModelViewMatrix", this._renderer.uMVMatrix.mat4), this.setUniform("uViewMatrix", this._renderer._curCamera.cameraMatrix.mat4), this.uniforms.uNormalMatrix && (this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix), this.setUniform("uNormalMatrix", this._renderer.uNMatrix.mat3));
                }, o139.default.Shader.prototype.useProgram = function() {
                    var e = this._renderer.GL;
                    return this._renderer._curShader !== this && (e.useProgram(this._glProgram), this._renderer._curShader = this), this;
                }, o139.default.Shader.prototype.setUniform = function(e, t) {
                    var r = this.uniforms[e];
                    if (r) {
                        var n = this._renderer.GL;
                        if (r.isArray) {
                            if (r._cachedData && this._renderer._arraysEqual(r._cachedData, t)) return;
                            r._cachedData = t.slice(0);
                        } else {
                            if (r._cachedData && r._cachedData === t) return;
                            r._cachedData = t;
                        }
                        var o = r.location;
                        switch(this.useProgram(), r.type){
                            case n.BOOL:
                                !0 === t ? n.uniform1i(o, 1) : n.uniform1i(o, 0);
                                break;
                            case n.INT:
                                1 < r.size ? t.length && n.uniform1iv(o, t) : n.uniform1i(o, t);
                                break;
                            case n.FLOAT:
                                1 < r.size ? t.length && n.uniform1fv(o, t) : n.uniform1f(o, t);
                                break;
                            case n.FLOAT_MAT3:
                                n.uniformMatrix3fv(o, !1, t);
                                break;
                            case n.FLOAT_MAT4:
                                n.uniformMatrix4fv(o, !1, t);
                                break;
                            case n.FLOAT_VEC2:
                                1 < r.size ? t.length && n.uniform2fv(o, t) : n.uniform2f(o, t[0], t[1]);
                                break;
                            case n.FLOAT_VEC3:
                                1 < r.size ? t.length && n.uniform3fv(o, t) : n.uniform3f(o, t[0], t[1], t[2]);
                                break;
                            case n.FLOAT_VEC4:
                                1 < r.size ? t.length && n.uniform4fv(o, t) : n.uniform4f(o, t[0], t[1], t[2], t[3]);
                                break;
                            case n.INT_VEC2:
                                1 < r.size ? t.length && n.uniform2iv(o, t) : n.uniform2i(o, t[0], t[1]);
                                break;
                            case n.INT_VEC3:
                                1 < r.size ? t.length && n.uniform3iv(o, t) : n.uniform3i(o, t[0], t[1], t[2]);
                                break;
                            case n.INT_VEC4:
                                1 < r.size ? t.length && n.uniform4iv(o, t) : n.uniform4i(o, t[0], t[1], t[2], t[3]);
                                break;
                            case n.SAMPLER_2D:
                                n.activeTexture(n.TEXTURE0 + r.samplerIndex), r.texture = this._renderer.getTexture(t), n.uniform1i(r.location, r.samplerIndex);
                        }
                        return this;
                    }
                }, o139.default.Shader.prototype.isLightShader = function() {
                    return void 0 !== this.attributes.aNormal || void 0 !== this.uniforms.uUseLighting || void 0 !== this.uniforms.uAmbientLightCount || void 0 !== this.uniforms.uDirectionalLightCount || void 0 !== this.uniforms.uPointLightCount || void 0 !== this.uniforms.uAmbientColor || void 0 !== this.uniforms.uDirectionalDiffuseColors || void 0 !== this.uniforms.uDirectionalSpecularColors || void 0 !== this.uniforms.uPointLightLocation || void 0 !== this.uniforms.uPointLightDiffuseColors || void 0 !== this.uniforms.uPointLightSpecularColors || void 0 !== this.uniforms.uLightingDirection || void 0 !== this.uniforms.uSpecular;
                }, o139.default.Shader.prototype.isNormalShader = function() {
                    return void 0 !== this.attributes.aNormal;
                }, o139.default.Shader.prototype.isTextureShader = function() {
                    return 0 < this.samplerIndex;
                }, o139.default.Shader.prototype.isColorShader = function() {
                    return void 0 !== this.attributes.aVertexColor || void 0 !== this.uniforms.uMaterialColor;
                }, o139.default.Shader.prototype.isTexLightShader = function() {
                    return this.isLightShader() && this.isTextureShader();
                }, o139.default.Shader.prototype.isStrokeShader = function() {
                    return void 0 !== this.uniforms.uStrokeWeight;
                }, o139.default.Shader.prototype.enableAttrib = function(e, t, r, n, o, i) {
                    if (e) {
                        var a = e.location;
                        if (-1 !== a) {
                            var s = this._renderer.GL;
                            e.enabled || (s.enableVertexAttribArray(a), e.enabled = !0), this._renderer.GL.vertexAttribPointer(a, t, r || s.FLOAT, n || !1, o || 0, i || 0);
                        }
                    }
                    return this;
                };
                var i88 = o139.default.Shader;
                r261.default = i88;
            },
            {
                "../core/main": 260,
                "core-js/modules/es.array.index-of": 155,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.array.slice": 160,
                "core-js/modules/es.function.name": 163,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ],
        316: [
            function(e545, t330, r262) {
                "use strict";
                function a(e546) {
                    return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e546);
                }
                e545("core-js/modules/es.array.iterator"), e545("core-js/modules/es.object.to-string"), e545("core-js/modules/es.typed-array.uint8-array"), e545("core-js/modules/es.typed-array.copy-within"), e545("core-js/modules/es.typed-array.every"), e545("core-js/modules/es.typed-array.fill"), e545("core-js/modules/es.typed-array.filter"), e545("core-js/modules/es.typed-array.find"), e545("core-js/modules/es.typed-array.find-index"), e545("core-js/modules/es.typed-array.for-each"), e545("core-js/modules/es.typed-array.includes"), e545("core-js/modules/es.typed-array.index-of"), e545("core-js/modules/es.typed-array.iterator"), e545("core-js/modules/es.typed-array.join"), e545("core-js/modules/es.typed-array.last-index-of"), e545("core-js/modules/es.typed-array.map"), e545("core-js/modules/es.typed-array.reduce"), e545("core-js/modules/es.typed-array.reduce-right"), e545("core-js/modules/es.typed-array.reverse"), e545("core-js/modules/es.typed-array.set"), e545("core-js/modules/es.typed-array.slice"), e545("core-js/modules/es.typed-array.some"), e545("core-js/modules/es.typed-array.sort"), e545("core-js/modules/es.typed-array.subarray"), e545("core-js/modules/es.typed-array.to-locale-string"), e545("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r262, "__esModule", {
                    value: !0
                }), r262.default = void 0;
                var n185, o140 = (n185 = e545("../core/main")) && n185.__esModule ? n185 : {
                    default: n185
                }, s = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = l();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e545("../core/constants"));
                function l() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return l = function() {
                        return e;
                    }, e;
                }
                o140.default.Texture = function(e, t) {
                    this._renderer = e;
                    var r = this._renderer.GL;
                    this.src = t, this.glTex = void 0, this.glTarget = r.TEXTURE_2D, this.glFormat = r.RGBA, this.mipmaps = !1, this.glMinFilter = r.LINEAR, this.glMagFilter = r.LINEAR, this.glWrapS = r.CLAMP_TO_EDGE, this.glWrapT = r.CLAMP_TO_EDGE, this.isSrcMediaElement = void 0 !== o140.default.MediaElement && t instanceof o140.default.MediaElement, this._videoPrevUpdateTime = 0, this.isSrcHTMLElement = void 0 !== o140.default.Element && t instanceof o140.default.Element && !(t instanceof o140.default.Graphics), this.isSrcP5Image = t instanceof o140.default.Image, this.isSrcP5Graphics = t instanceof o140.default.Graphics, this.isImageData = "undefined" != typeof ImageData && t instanceof ImageData;
                    var n = this._getTextureDataFromSource();
                    return this.width = n.width, this.height = n.height, this.init(n), this;
                }, o140.default.Texture.prototype._getTextureDataFromSource = function() {
                    var e;
                    return this.isSrcP5Image ? e = this.src.canvas : this.isSrcMediaElement || this.isSrcP5Graphics || this.isSrcHTMLElement ? e = this.src.elt : this.isImageData && (e = this.src), e;
                }, o140.default.Texture.prototype.init = function(e) {
                    var t = this._renderer.GL;
                    if (this.glTex = t.createTexture(), this.glWrapS = this._renderer.textureWrapX, this.glWrapT = this._renderer.textureWrapY, this.setWrapMode(this.glWrapS, this.glWrapT), this.bindTexture(), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, this.glMagFilter), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, this.glMinFilter), 0 === this.width || 0 === this.height || this.isSrcMediaElement && !this.src.loadedmetadata) {
                        var r = new Uint8Array([
                            1,
                            1,
                            1,
                            1
                        ]);
                        t.texImage2D(this.glTarget, 0, t.RGBA, 1, 1, 0, this.glFormat, t.UNSIGNED_BYTE, r);
                    } else t.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, t.UNSIGNED_BYTE, e);
                }, o140.default.Texture.prototype.update = function() {
                    var e = this.src;
                    if (0 === e.width || 0 === e.height) return !1;
                    var t = this._getTextureDataFromSource(), r = !1, n = this._renderer.GL;
                    return t.width !== this.width || t.height !== this.height ? (r = !0, this.width = t.width, this.height = t.height, this.isSrcP5Image ? e.setModified(!1) : (this.isSrcMediaElement || this.isSrcHTMLElement) && e.setModified(!0)) : this.isSrcP5Image ? e.isModified() && (r = !0, e.setModified(!1)) : this.isSrcMediaElement ? e.isModified() ? (r = !0, e.setModified(!1)) : e.loadedmetadata && this._videoPrevUpdateTime !== e.time() && (this._videoPrevUpdateTime = e.time(), r = !0) : this.isImageData ? e._dirty && (r = (e._dirty = !1, true)) : r = !0, r && (this.bindTexture(), n.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, n.UNSIGNED_BYTE, t)), r;
                }, o140.default.Texture.prototype.bindTexture = function() {
                    return this._renderer.GL.bindTexture(this.glTarget, this.glTex), this;
                }, o140.default.Texture.prototype.unbindTexture = function() {
                    this._renderer.GL.bindTexture(this.glTarget, null);
                }, o140.default.Texture.prototype.setInterpolation = function(e, t) {
                    var r = this._renderer.GL;
                    e === s.NEAREST ? this.glMinFilter = r.NEAREST : this.glMinFilter = r.LINEAR, t === s.NEAREST ? this.glMagFilter = r.NEAREST : this.glMagFilter = r.LINEAR, this.bindTexture(), r.texParameteri(r.TEXTURE_2D, r.TEXTURE_MIN_FILTER, this.glMinFilter), r.texParameteri(r.TEXTURE_2D, r.TEXTURE_MAG_FILTER, this.glMagFilter), this.unbindTexture();
                }, o140.default.Texture.prototype.setWrapMode = function(e547, t) {
                    function r(e) {
                        return 0 == (e & e - 1);
                    }
                    var n = this._renderer.GL, o = r(this.width), i = r(this.height);
                    e547 === s.REPEAT ? o && i ? this.glWrapS = n.REPEAT : (console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapS = n.CLAMP_TO_EDGE) : e547 === s.MIRROR ? o && i ? this.glWrapS = n.MIRRORED_REPEAT : (console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapS = n.CLAMP_TO_EDGE) : this.glWrapS = n.CLAMP_TO_EDGE, t === s.REPEAT ? o && i ? this.glWrapT = n.REPEAT : (console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapT = n.CLAMP_TO_EDGE) : t === s.MIRROR ? o && i ? this.glWrapT = n.MIRRORED_REPEAT : (console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapT = n.CLAMP_TO_EDGE) : this.glWrapT = n.CLAMP_TO_EDGE, this.bindTexture(), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, this.glWrapS), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, this.glWrapT), this.unbindTexture();
                };
                var i89 = o140.default.Texture;
                r262.default = i89;
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.typed-array.copy-within": 194,
                "core-js/modules/es.typed-array.every": 195,
                "core-js/modules/es.typed-array.fill": 196,
                "core-js/modules/es.typed-array.filter": 197,
                "core-js/modules/es.typed-array.find": 199,
                "core-js/modules/es.typed-array.find-index": 198,
                "core-js/modules/es.typed-array.for-each": 202,
                "core-js/modules/es.typed-array.includes": 203,
                "core-js/modules/es.typed-array.index-of": 204,
                "core-js/modules/es.typed-array.iterator": 207,
                "core-js/modules/es.typed-array.join": 208,
                "core-js/modules/es.typed-array.last-index-of": 209,
                "core-js/modules/es.typed-array.map": 210,
                "core-js/modules/es.typed-array.reduce": 212,
                "core-js/modules/es.typed-array.reduce-right": 211,
                "core-js/modules/es.typed-array.reverse": 213,
                "core-js/modules/es.typed-array.set": 214,
                "core-js/modules/es.typed-array.slice": 215,
                "core-js/modules/es.typed-array.some": 216,
                "core-js/modules/es.typed-array.sort": 217,
                "core-js/modules/es.typed-array.subarray": 218,
                "core-js/modules/es.typed-array.to-locale-string": 219,
                "core-js/modules/es.typed-array.to-string": 220,
                "core-js/modules/es.typed-array.uint8-array": 223
            }
        ],
        317: [
            function(e548, t331, r263) {
                "use strict";
                function a65(e549) {
                    return (a65 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                        return typeof e;
                    } : function(e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                    })(e549);
                }
                e548("core-js/modules/es.symbol"), e548("core-js/modules/es.symbol.description"), e548("core-js/modules/es.symbol.iterator"), e548("core-js/modules/es.array.iterator"), e548("core-js/modules/es.object.to-string"), e548("core-js/modules/es.regexp.exec"), e548("core-js/modules/es.string.iterator"), e548("core-js/modules/es.string.split"), e548("core-js/modules/es.string.sub"), e548("core-js/modules/web.dom-collections.iterator");
                var n186, G = (n186 = e548("../core/main")) && n186.__esModule ? n186 : {
                    default: n186
                }, A2 = function(e) {
                    if (e && e.__esModule) return e;
                    if (null === e || "object" !== a65(e) && "function" != typeof e) return {
                        default: e
                    };
                    var t = s53();
                    if (t && t.has(e)) return t.get(e);
                    var r = {
                    }, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
                        var i = n ? Object.getOwnPropertyDescriptor(e, o) : null;
                        i && (i.get || i.set) ? Object.defineProperty(r, o, i) : r[o] = e[o];
                    }
                    r.default = e, t && t.set(e, r);
                    return r;
                }(e548("../core/constants"));
                function s53() {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap;
                    return s53 = function() {
                        return e;
                    }, e;
                }
                e548("./p5.Shader"), e548("./p5.RendererGL.Retained"), G.default.RendererGL.prototype._applyTextProperties = function() {
                }, G.default.RendererGL.prototype.textWidth = function(e) {
                    return this._isOpenType() ? this._textFont._textWidth(e, this._textSize) : 0;
                };
                function o141(e550, t332) {
                    this.width = e550, this.height = t332, this.infos = [], this.findImage = function(e) {
                        var t, r, n = this.width * this.height;
                        if (n < e) throw new Error("font is too complex to render in 3D");
                        for(var o = this.infos.length - 1; 0 <= o; --o){
                            var i = this.infos[o];
                            if (i.index + e < n) {
                                r = (t = i).imageData;
                                break;
                            }
                        }
                        if (!t) {
                            try {
                                r = new ImageData(this.width, this.height);
                            } catch (e) {
                                var a = document.getElementsByTagName("canvas")[0], s = !a;
                                a || ((a = document.createElement("canvas")).style.display = "none", document.body.appendChild(a));
                                var l = a.getContext("2d");
                                l && (r = l.createImageData(this.width, this.height)), s && document.body.removeChild(a);
                            }
                            t = {
                                index: 0,
                                imageData: r
                            }, this.infos.push(t);
                        }
                        var u = t.index;
                        return t.index += e, r._dirty = !0, {
                            imageData: r,
                            index: u
                        };
                    };
                }
                function V(e, t, r, n, o) {
                    var i = e.imageData.data, a = 4 * e.index++;
                    i[a++] = t, i[a++] = r, i[a++] = n, i[a++] = o;
                }
                function R2(e551) {
                    this.font = e551, this.strokeImageInfos = new o141(64, 64), this.colDimImageInfos = new o141(64, 64), this.rowDimImageInfos = new o141(64, 64), this.colCellImageInfos = new o141(64, 64), this.rowCellImageInfos = new o141(64, 64), this.glyphInfos = {
                    }, this.getGlyphInfo = function(e552) {
                        var t333 = this.glyphInfos[e552.index];
                        if (t333) return t333;
                        var r264, n187 = e552.getBoundingBox(), o142 = n187.x1, i90 = n187.y1, a66 = n187.x2 - o142, s54 = n187.y2 - i90, l35 = e552.path.commands;
                        if (0 == a66 || 0 == s54 || !l35.length) return this.glyphInfos[e552.index] = {
                        };
                        var u23, c17, d18, f16, h15 = [], p12 = [], y11 = [];
                        for(r264 = 8; 0 <= r264; --r264)y11.push([]);
                        for(r264 = 8; 0 <= r264; --r264)p12.push([]);
                        function m7(e553, t334, r265) {
                            var n188 = h15.length;
                            function o143(e, t, r) {
                                for(var n = e.length; 0 < n--;){
                                    var o = e[n];
                                    o < t && (t = o), r < o && (r = o);
                                }
                                return {
                                    min: t,
                                    max: r
                                };
                            }
                            h15.push(r265);
                            for(var i = o143(e553, 1, 0), a = Math.max(Math.floor(9 * i.min), 0), s = Math.min(Math.ceil(9 * i.max), 9), l = a; l < s; ++l)y11[l].push(n188);
                            for(var u = o143(t334, 1, 0), c = Math.max(Math.floor(9 * u.min), 0), d = Math.min(Math.ceil(9 * u.max), 9), f = c; f < d; ++f)p12[f].push(n188);
                        }
                        function g7(e) {
                            var t, r, n;
                            return (t = (n = 255) * e) < (r = 0) ? r : n < t ? n : t;
                        }
                        function w(e554, t335, r266, n189) {
                            this.p0 = e554, this.c0 = t335, this.c1 = r266, this.p1 = n189, this.toQuadratic = function() {
                                return {
                                    x: this.p0.x,
                                    y: this.p0.y,
                                    x1: this.p1.x,
                                    y1: this.p1.y,
                                    cx: (3 * (this.c0.x + this.c1.x) - (this.p0.x + this.p1.x)) / 4,
                                    cy: (3 * (this.c0.y + this.c1.y) - (this.p0.y + this.p1.y)) / 4
                                };
                            }, this.quadError = function() {
                                return G.default.Vector.sub(G.default.Vector.sub(this.p1, this.p0), G.default.Vector.mult(G.default.Vector.sub(this.c1, this.c0), 3)).mag() / 2;
                            }, this.split = function(e) {
                                var t = G.default.Vector.lerp(this.p0, this.c0, e), r = G.default.Vector.lerp(this.c0, this.c1, e), n = G.default.Vector.lerp(t, r, e);
                                this.c1 = G.default.Vector.lerp(this.c1, this.p1, e), this.c0 = G.default.Vector.lerp(r, this.c1, e);
                                var o = G.default.Vector.lerp(n, this.c0, e), i = new w(this.p0, t, n, o);
                                return this.p0 = o, i;
                            }, this.splitInflections = function() {
                                var e = G.default.Vector.sub(this.c0, this.p0), t = G.default.Vector.sub(G.default.Vector.sub(this.c1, this.c0), e), r = G.default.Vector.sub(G.default.Vector.sub(G.default.Vector.sub(this.p1, this.c1), e), G.default.Vector.mult(t, 2)), n = [], o = t.x * r.y - t.y * r.x;
                                if (0 !== o) {
                                    var i = e.x * r.y - e.y * r.x, a = e.x * t.y - e.y * t.x, s = i * i - 4 * o * a;
                                    if (0 <= s) {
                                        o < 0 && (o = -o, i = -i, a = -a);
                                        var l = Math.sqrt(s), u = (-i - l) / (2 * o), c = (-i + l) / (2 * o);
                                        0 < u && u < 1 && (n.push(this.split(u)), c = 1 - (1 - c) / (1 - u)), 0 < c && c < 1 && n.push(this.split(c));
                                    }
                                }
                                return n.push(this), n;
                            };
                        }
                        function v7(e, t, r, n, o, i, a, s) {
                            var l = new w(new G.default.Vector(e, t), new G.default.Vector(r, n), new G.default.Vector(o, i), new G.default.Vector(a, s)).splitInflections(), u = [], c = 30 / z, d = !0, f = !1, h = void 0;
                            try {
                                for(var p, y = l[Symbol.iterator](); !(d = (p = y.next()).done); d = !0){
                                    for(var m = p.value, g = [], v = void 0; !(0.125 <= (v = c / m.quadError()));){
                                        var b = Math.pow(v, 1 / 3), _ = m.split(b), x = m.split(1 - b / (1 - b));
                                        u.push(_), g.push(m), m = x;
                                    }
                                    v < 1 && u.push(m.split(0.5)), u.push(m), Array.prototype.push.apply(u, g.reverse());
                                }
                            } catch (e555) {
                                f = !0, h = e555;
                            } finally{
                                try {
                                    d || null == y.return || y.return();
                                } finally{
                                    if (f) throw h;
                                }
                            }
                            return u;
                        }
                        function b5(e, t, r, n) {
                            m7([
                                e,
                                r
                            ], [
                                t,
                                n
                            ], {
                                x: e,
                                y: t,
                                cx: (e + r) / 2,
                                cy: (t + n) / 2
                            });
                        }
                        function _5(e, t, r, n) {
                            return Math.abs(r - e) < 0.00001 && Math.abs(n - t) < 0.00001;
                        }
                        var x3 = !0, S = !1, j = void 0;
                        try {
                            for(var M, E = l35[Symbol.iterator](); !(x3 = (M = E.next()).done); x3 = !0){
                                var T = M.value, O = (T.x - o142) / a66, C = (T.y - i90) / s54;
                                if (!_5(u23, c17, O, C)) {
                                    switch(T.type){
                                        case "M":
                                            d18 = O, f16 = C;
                                            break;
                                        case "L":
                                            b5(u23, c17, O, C);
                                            break;
                                        case "Q":
                                            var L = (T.x1 - o142) / a66, P = (T.y1 - i90) / s54;
                                            m7([
                                                u23,
                                                O,
                                                L
                                            ], [
                                                c17,
                                                C,
                                                P
                                            ], {
                                                x: u23,
                                                y: c17,
                                                cx: L,
                                                cy: P
                                            });
                                            break;
                                        case "Z":
                                            _5(u23, c17, d18, f16) ? h15.push({
                                                x: u23,
                                                y: c17
                                            }) : (b5(u23, c17, d18, f16), h15.push({
                                                x: d18,
                                                y: f16
                                            }));
                                            break;
                                        case "C":
                                            for(var k = v7(u23, c17, (T.x1 - o142) / a66, (T.y1 - i90) / s54, (T.x2 - o142) / a66, (T.y2 - i90) / s54, O, C), A = 0; A < k.length; A++){
                                                var R = k[A].toQuadratic();
                                                m7([
                                                    R.x,
                                                    R.x1,
                                                    R.cx
                                                ], [
                                                    R.y,
                                                    R.y1,
                                                    R.cy
                                                ], R);
                                            }
                                            break;
                                        default:
                                            throw new Error("unknown command type: ".concat(T.type));
                                    }
                                    u23 = O, c17 = C;
                                }
                            }
                        } catch (e556) {
                            S = !0, j = e556;
                        } finally{
                            try {
                                x3 || null == E.return || E.return();
                            } finally{
                                if (S) throw j;
                            }
                        }
                        for(var D = h15.length, I = this.strokeImageInfos.findImage(D), U = I.index, N = 0; N < D; ++N){
                            var F = h15[N];
                            V(I, g7(F.x), g7(F.y), g7(F.cx), g7(F.cy));
                        }
                        function B(e, t, r) {
                            for(var n = e.length, o = t.findImage(n), i = o.index, a = 0, s = 0; s < n; ++s)a += e[s].length;
                            for(var l = r.findImage(a), u = 0; u < n; ++u){
                                var c = e[u], d = c.length, f = l.index;
                                V(o, f >> 7, 127 & f, d >> 7, 127 & d);
                                for(var h = 0; h < d; ++h){
                                    var p = c[h] + U;
                                    V(l, p >> 7, 127 & p, 0, 0);
                                }
                            }
                            return {
                                cellImageInfo: l,
                                dimOffset: i,
                                dimImageInfo: o
                            };
                        }
                        return (t333 = this.glyphInfos[e552.index] = {
                            glyph: e552,
                            uGlyphRect: [
                                n187.x1,
                                -n187.y1,
                                n187.x2,
                                -n187.y2
                            ],
                            strokeImageInfo: I,
                            strokes: h15,
                            colInfo: B(y11, this.colDimImageInfos, this.colCellImageInfos),
                            rowInfo: B(p12, this.rowDimImageInfos, this.rowCellImageInfos)
                        }).uGridOffset = [
                            t333.colInfo.dimOffset,
                            t333.rowInfo.dimOffset
                        ], t333;
                    };
                }
                var z = Math.sqrt(3);
                G.default.RendererGL.prototype._renderText = function(e557, t336, r, n, o) {
                    if (this._textFont && "string" != typeof this._textFont) {
                        if (!(o <= n) && this._doFill) {
                            if (!this._isOpenType()) return console.log("WEBGL: only Opentype (.otf) and Truetype (.ttf) fonts are supported"), e557;
                            e557.push();
                            var i = this._doStroke, a = this.drawMode;
                            this._doStroke = !1, this.drawMode = A2.TEXTURE;
                            var s = this._textFont.font, l = this._textFont._fontInfo;
                            l = l || (this._textFont._fontInfo = new R2(s));
                            var u = this._textFont._handleAlignment(this, t336, r, n), c = this._textSize / s.unitsPerEm;
                            this.translate(u.x, u.y, 0), this.scale(c, c, 1);
                            var d = this.GL, f = !this._defaultFontShader, h = this._getFontShader();
                            h.init(), h.bindShader(), f && (h.setUniform("uGridImageSize", [
                                64,
                                64
                            ]), h.setUniform("uCellsImageSize", [
                                64,
                                64
                            ]), h.setUniform("uStrokeImageSize", [
                                64,
                                64
                            ]), h.setUniform("uGridSize", [
                                9,
                                9
                            ])), this._applyColorBlend(this.curFillColor);
                            var p = this.retainedMode.geometry.glyph;
                            if (!p) {
                                var y = this._textGeom = new G.default.Geometry(1, 1, function() {
                                    for(var e = 0; e <= 1; e++)for(var t = 0; t <= 1; t++)this.vertices.push(new G.default.Vector(t, e, 0)), this.uvs.push(t, e);
                                });
                                y.computeFaces().computeNormals(), p = this.createBuffers("glyph", y);
                            }
                            var m = !0, g = !1, v = void 0;
                            try {
                                for(var b, _ = this.retainedMode.buffers.text[Symbol.iterator](); !(m = (b = _.next()).done); m = !0)b.value._prepareBuffer(p, h);
                            } catch (e) {
                                g = !0, v = e;
                            } finally{
                                try {
                                    m || null == _.return || _.return();
                                } finally{
                                    if (g) throw v;
                                }
                            }
                            this._bindBuffer(p.indexBuffer, d.ELEMENT_ARRAY_BUFFER), h.setUniform("uMaterialColor", this.curFillColor);
                            try {
                                var x = 0, w = null, S = s.stringToGlyphs(t336), j = !0, M = !1, E = void 0;
                                try {
                                    for(var T, O = S[Symbol.iterator](); !(j = (T = O.next()).done); j = !0){
                                        var C = T.value;
                                        w && (x += s.getKerningValue(w, C));
                                        var L = l.getGlyphInfo(C);
                                        if (L.uGlyphRect) {
                                            var P = L.rowInfo, k = L.colInfo;
                                            h.setUniform("uSamplerStrokes", L.strokeImageInfo.imageData), h.setUniform("uSamplerRowStrokes", P.cellImageInfo.imageData), h.setUniform("uSamplerRows", P.dimImageInfo.imageData), h.setUniform("uSamplerColStrokes", k.cellImageInfo.imageData), h.setUniform("uSamplerCols", k.dimImageInfo.imageData), h.setUniform("uGridOffset", L.uGridOffset), h.setUniform("uGlyphRect", L.uGlyphRect), h.setUniform("uGlyphOffset", x), h.bindTextures(), d.drawElements(d.TRIANGLES, 6, this.GL.UNSIGNED_SHORT, 0);
                                        }
                                        x += C.advanceWidth, w = C;
                                    }
                                } catch (e) {
                                    M = !0, E = e;
                                } finally{
                                    try {
                                        j || null == O.return || O.return();
                                    } finally{
                                        if (M) throw E;
                                    }
                                }
                            } finally{
                                h.unbindShader(), this._doStroke = i, this.drawMode = a, e557.pop();
                            }
                            return e557;
                        }
                    } else console.log("WEBGL: you must load and set a font before drawing text. See `loadFont` and `textFont` for more details.");
                };
            },
            {
                "../core/constants": 250,
                "../core/main": 260,
                "./p5.RendererGL.Retained": 313,
                "./p5.Shader": 315,
                "core-js/modules/es.array.iterator": 156,
                "core-js/modules/es.object.to-string": 174,
                "core-js/modules/es.regexp.exec": 178,
                "core-js/modules/es.string.iterator": 183,
                "core-js/modules/es.string.split": 188,
                "core-js/modules/es.string.sub": 189,
                "core-js/modules/es.symbol": 193,
                "core-js/modules/es.symbol.description": 191,
                "core-js/modules/es.symbol.iterator": 192,
                "core-js/modules/web.dom-collections.iterator": 226
            }
        ]
    }, {
    }, [
        245
    ])(245);
});

},{}],"1gVsV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createMainComponent", ()=>createMainComponent
);
/* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _pentagram = require("./pentagram");
var _layers = require("../layers");
var _baphomet = require("./baphomet");
var _constants = require("../common/constants");
var _choreograph = require("../choreograph");
var _room = require("../meshes/room");
var _settings = require("../settings");
const pentagrams = [
    _pentagram.createPentagram(),
    _pentagram.createPentagram(),
    _pentagram.createPentagram(),
    _pentagram.createPentagram(), 
];
const baphomet = _baphomet.createBaphometComponent();
const createMainComponent = (props)=>{
    return (state)=>{
        const watchTowerFrame = state.frame % _settings.watchTowerLength;
        const positionedPentagrams = [
            0,
            1,
            2,
            3
        ].map((watchTowerIndex)=>{
            const angle = -watchTowerIndex * _constants.HALF_PI;
            const position = new _three.Vector3().setFromCylindricalCoords(0.5, angle - _constants.HALF_PI, 0);
            const startFrame = watchTowerIndex * _settings.watchTowerLength;
            const endFrame = startFrame + _choreograph.pentagramLength;
            const pentagram = pentagrams[watchTowerIndex];
            const group = new _three.Group();
            group.position.set(...position.toArray());
            group.add(pentagram({
                angle,
                startFrame,
                endFrame
            }));
            if (watchTowerIndex > 1) _layers.setLayerRecursive(group, _layers.Layer.flamesBehind);
            else _layers.setLayerRecursive(group, _layers.Layer.flamesInfront);
            return group;
        });
        const mainGroup = new _three.Group();
        mainGroup.add(baphomet({
            ...props,
            watchTowerFrame,
            bodyAngle: state.bodyAngle,
            leftFootAngle: state.leftFootAngle,
            rightFootAngle: state.rightFootAngle
        }));
        positionedPentagrams.forEach((pp)=>mainGroup.add(pp)
        );
        mainGroup.add(_room.room());
        return mainGroup;
    };
};

},{"three":"64dkv","./pentagram":"pG1z5","../layers":"igEJN","./baphomet":"aC9FZ","../common/constants":"5al57","../choreograph":"c6zNm","../meshes/room":"5QpSC","../settings":"6v8AY","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aC9FZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBaphometComponent", ()=>createBaphometComponent
);
var _three = require("three");
var _materials = require("../materials");
var _body = require("./body");
var _foot = require("./foot");
const bodyComponent = _body.createBodyComponent();
const leftFoot = _foot.createFootComponent();
const rightFoot = _foot.createFootComponent();
const createBaphometComponent = ()=>{
    return ({ watchTowerFrame , bodyAngle , head , body , leftFootAngle , rightFootAngle  })=>new _three.Group().add(bodyComponent({
            bodyAngle,
            head,
            body,
            watchTowerFrame
        })).add(leftFoot({
            footAngle: leftFootAngle,
            left: true,
            skin: _materials.skin(_materials.Surface.leftFoot)
        })).add(rightFoot({
            footAngle: rightFootAngle,
            left: false,
            skin: _materials.skin(_materials.Surface.rightFoot)
        }))
    ;
};

},{"three":"64dkv","../materials":"htVaV","./body":"d7BYm","./foot":"idODZ","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"d7BYm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBodyComponent", ()=>createBodyComponent
);
/* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _choreograph = require("../choreograph");
var _materials = require("../materials");
var _arm = require("../meshes/arm");
const createBodyComponent = ()=>{
    return (props)=>{
        const group = new _three.Group();
        group.setRotationFromEuler(new _three.Euler(0, props.bodyAngle, 0));
        group.add(props.head).add(props.body).add(_arm.arm({
            sign: 1,
            pointAt: _choreograph.stillArm,
            skin: _materials.skin(_materials.Surface.leftArm)
        })).add(_arm.arm({
            sign: -1,
            pointAt: _choreograph.choreographArm(props.watchTowerFrame),
            skin: _materials.skin(_materials.Surface.rightArm)
        }));
        return group;
    };
};

},{"three":"64dkv","../choreograph":"c6zNm","../materials":"htVaV","../meshes/arm":"8RvXT","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8RvXT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arm", ()=>arm
);
var _three = require("three");
var _parametricEllipsoid = require("../common/parametricEllipsoid");
const girth = 0.25;
const length = 1.2;
class ArmProps {
}
const arm = (props)=>{
    const start = new _three.Vector3(props.sign * 0.8, -1.3, 0.4);
    const end = props.pointAt.clone().sub(start).normalize().multiplyScalar(length).add(start);
    return _parametricEllipsoid.createParametricEllipsoidMesh(start, end, girth, props.skin);
};

},{"three":"64dkv","../common/parametricEllipsoid":"9c0Np","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"9c0Np":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createParametricEllipsoidMesh", ()=>createParametricEllipsoidMesh
);
var _three = require("three");
var _maps = require("../common/maps");
var _parametricGeometry = require("three/examples/jsm/geometries/ParametricGeometry");
var _constants = require("../common/constants");
const parametricEllipsoid = ({ start , end , maxGirth , minZ  })=>{
    const vec = end.clone().sub(start);
    const crossx = new _three.Vector3(1, 0, 0).cross(vec);
    const crossy = new _three.Vector3(0, 1, 0).cross(vec);
    // If v is zero-length, we'll end up drawing everything at a single point, which is correct.
    // Otherwise the larger of these two cross products is guaranteed to be perpendicular.
    // The smaller one might be zero-length as a consequence of taking the cross product of two parallel vectors.
    const perp1 = crossx.lengthSq() > crossy.lengthSq() ? crossx.normalize() : crossy.normalize();
    // Now find one that is perpendicular to both the original vector and the first perpendicular
    const perp2 = perp1.clone().cross(vec).normalize();
    return (u, v, dest)=>{
        const u2 = _maps.segmentedMap(u, [
            0,
            0.5,
            1
        ], [
            1,
            0,
            1
        ]);
        const girth = maxGirth * Math.sqrt(1 - u2 * u2);
        const angle = _maps.linearMap(v, 0, 1, 0, _constants.TWO_PI);
        const component1 = perp1.clone().multiplyScalar(girth * Math.cos(angle));
        const component2 = perp2.clone().multiplyScalar(girth * Math.sin(angle));
        // eslint-disable-next-line functional/no-expression-statement
        dest.set(_maps.linearMap(u, 0, 1, start.x, end.x), _maps.linearMap(u, 0, 1, start.y, end.y), Math.max(_maps.linearMap(u, 0, 1, start.z, end.z), minZ ?? Number.MIN_SAFE_INTEGER)).add(component1).add(component2);
    };
};
const createParametricEllipsoidMesh = (start, end, maxGirth, material)=>new _three.Mesh(new _parametricGeometry.ParametricGeometry(parametricEllipsoid({
        start,
        end,
        maxGirth
    }), 20, 20), material)
;

},{"three":"64dkv","../common/maps":"iTGDB","three/examples/jsm/geometries/ParametricGeometry":"evwQO","../common/constants":"5al57","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"idODZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFootComponent", ()=>createFootComponent
);
/* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _foot = require("../meshes/foot");
const createFootComponent = ()=>{
    return (props)=>{
        const group = new _three.Group();
        group.setRotationFromEuler(new _three.Euler(0, props.footAngle, 0));
        group.add(_foot.createFoot(props.left, props.skin));
        return group;
    };
};

},{"three":"64dkv","../meshes/foot":"elKbR","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"elKbR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createFoot", ()=>createFoot
);
/* eslint-disable functional/no-expression-statement */ var _three = require("three");
var _parametricEllipsoid = require("../common/parametricEllipsoid");
var _floorLevel = require("../floorLevel");
const createFoot = (left, skin)=>{
    const radius = 0.5;
    const footRatio = 1.75;
    const footCenterX = left ? -0.85 : 0.85;
    const z = 0;
    return _parametricEllipsoid.createParametricEllipsoidMesh(new _three.Vector3(footCenterX, _floorLevel.floorLevel, z + footRatio * radius), new _three.Vector3(footCenterX, _floorLevel.floorLevel, z - footRatio * radius), radius, skin);
};

},{"three":"64dkv","../common/parametricEllipsoid":"9c0Np","../floorLevel":"5VN7M","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5VN7M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floorLevel", ()=>floorLevel
);
const floorLevel = -3.1;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"5QpSC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "room", ()=>room
);
var _three = require("three");
var _materials = require("../materials");
var _floorLevel = require("../floorLevel");
const createBox = (width, height, depth, material)=>{
    const group = new _three.Group().add(new _three.Mesh(new _three.BoxGeometry(width, height, depth), material));
    return group;
};
const floorThickness = 0.1;
const floor = createBox(5, floorThickness, 5, _materials.floorMaterial);
// eslint-disable-next-line functional/no-expression-statement
floor.position.set(0, _floorLevel.floorLevel - floorThickness - floorThickness, 0);
const altarHeight = 1.25;
const altar = createBox(0.7, altarHeight, 1.25, _materials.altarMaterial);
// eslint-disable-next-line functional/no-expression-statement
altar.position.set(-2.2, _floorLevel.floorLevel + 0.5 * altarHeight + floorThickness, 0);
const room = ()=>new _three.Group().add(floor).add(altar)
;

},{"three":"64dkv","../materials":"htVaV","../floorLevel":"5VN7M","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ck46f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EffectComposer", ()=>EffectComposer
);
parcelHelpers.export(exports, "Pass", ()=>Pass
);
parcelHelpers.export(exports, "FullScreenQuad", ()=>FullScreenQuad
);
var _three = require("three");
var _copyShaderJs = require("../shaders/CopyShader.js");
var _shaderPassJs = require("./ShaderPass.js");
var _maskPassJs = require("./MaskPass.js");
class EffectComposer {
    constructor(renderer, renderTarget){
        this.renderer = renderer;
        if (renderTarget === undefined) {
            const parameters = {
                minFilter: _three.LinearFilter,
                magFilter: _three.LinearFilter,
                format: _three.RGBAFormat
            };
            const size = renderer.getSize(new _three.Vector2());
            this._pixelRatio = renderer.getPixelRatio();
            this._width = size.width;
            this._height = size.height;
            renderTarget = new _three.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);
            renderTarget.texture.name = 'EffectComposer.rt1';
        } else {
            this._pixelRatio = 1;
            this._width = renderTarget.width;
            this._height = renderTarget.height;
        }
        this.renderTarget1 = renderTarget;
        this.renderTarget2 = renderTarget.clone();
        this.renderTarget2.texture.name = 'EffectComposer.rt2';
        this.writeBuffer = this.renderTarget1;
        this.readBuffer = this.renderTarget2;
        this.renderToScreen = true;
        this.passes = [];
        // dependencies
        if (_copyShaderJs.CopyShader === undefined) console.error('THREE.EffectComposer relies on CopyShader');
        if (_shaderPassJs.ShaderPass === undefined) console.error('THREE.EffectComposer relies on ShaderPass');
        this.copyPass = new _shaderPassJs.ShaderPass(_copyShaderJs.CopyShader);
        this.clock = new _three.Clock();
    }
    swapBuffers() {
        const tmp = this.readBuffer;
        this.readBuffer = this.writeBuffer;
        this.writeBuffer = tmp;
    }
    addPass(pass) {
        this.passes.push(pass);
        pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
    }
    insertPass(pass1, index) {
        this.passes.splice(index, 0, pass1);
        pass1.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
    }
    removePass(pass2) {
        const index = this.passes.indexOf(pass2);
        if (index !== -1) this.passes.splice(index, 1);
    }
    isLastEnabledPass(passIndex) {
        for(let i = passIndex + 1; i < this.passes.length; i++){
            if (this.passes[i].enabled) return false;
        }
        return true;
    }
    render(deltaTime) {
        // deltaTime value is in seconds
        if (deltaTime === undefined) deltaTime = this.clock.getDelta();
        const currentRenderTarget = this.renderer.getRenderTarget();
        let maskActive = false;
        for(let i = 0, il = this.passes.length; i < il; i++){
            const pass = this.passes[i];
            if (pass.enabled === false) continue;
            pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);
            pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);
            if (pass.needsSwap) {
                if (maskActive) {
                    const context = this.renderer.getContext();
                    const stencil = this.renderer.state.buffers.stencil;
                    //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );
                    stencil.setFunc(context.NOTEQUAL, 1, 4294967295);
                    this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);
                    //context.stencilFunc( context.EQUAL, 1, 0xffffffff );
                    stencil.setFunc(context.EQUAL, 1, 4294967295);
                }
                this.swapBuffers();
            }
            if (_maskPassJs.MaskPass !== undefined) {
                if (pass instanceof _maskPassJs.MaskPass) maskActive = true;
                else if (pass instanceof _maskPassJs.ClearMaskPass) maskActive = false;
            }
        }
        this.renderer.setRenderTarget(currentRenderTarget);
    }
    reset(renderTarget1) {
        if (renderTarget1 === undefined) {
            const size = this.renderer.getSize(new _three.Vector2());
            this._pixelRatio = this.renderer.getPixelRatio();
            this._width = size.width;
            this._height = size.height;
            renderTarget1 = this.renderTarget1.clone();
            renderTarget1.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
        }
        this.renderTarget1.dispose();
        this.renderTarget2.dispose();
        this.renderTarget1 = renderTarget1;
        this.renderTarget2 = renderTarget1.clone();
        this.writeBuffer = this.renderTarget1;
        this.readBuffer = this.renderTarget2;
    }
    setSize(width, height) {
        this._width = width;
        this._height = height;
        const effectiveWidth = this._width * this._pixelRatio;
        const effectiveHeight = this._height * this._pixelRatio;
        this.renderTarget1.setSize(effectiveWidth, effectiveHeight);
        this.renderTarget2.setSize(effectiveWidth, effectiveHeight);
        for(let i = 0; i < this.passes.length; i++)this.passes[i].setSize(effectiveWidth, effectiveHeight);
    }
    setPixelRatio(pixelRatio) {
        this._pixelRatio = pixelRatio;
        this.setSize(this._width, this._height);
    }
}
class Pass {
    constructor(){
        // if set to true, the pass is processed by the composer
        this.enabled = true;
        // if set to true, the pass indicates to swap read and write buffer after rendering
        this.needsSwap = true;
        // if set to true, the pass clears its buffer before rendering
        this.clear = false;
        // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.
        this.renderToScreen = false;
    }
    setSize() {
    }
    render() {
        console.error('THREE.Pass: .render() must be implemented in derived pass.');
    }
}
// Helper for passes that need to fill the viewport with a single quad.
const _camera = new _three.OrthographicCamera(-1, 1, 1, -1, 0, 1);
// https://github.com/mrdoob/three.js/pull/21358
const _geometry = new _three.BufferGeometry();
_geometry.setAttribute('position', new _three.Float32BufferAttribute([
    -1,
    3,
    0,
    -1,
    -1,
    0,
    3,
    -1,
    0
], 3));
_geometry.setAttribute('uv', new _three.Float32BufferAttribute([
    0,
    2,
    0,
    0,
    2,
    0
], 2));
class FullScreenQuad {
    constructor(material){
        this._mesh = new _three.Mesh(_geometry, material);
    }
    dispose() {
        this._mesh.geometry.dispose();
    }
    render(renderer1) {
        renderer1.render(this._mesh, _camera);
    }
    get material() {
        return this._mesh.material;
    }
    set material(value) {
        this._mesh.material = value;
    }
}

},{"three":"64dkv","../shaders/CopyShader.js":"aoBV9","./ShaderPass.js":"4bjki","./MaskPass.js":"kKPUM","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"aoBV9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CopyShader", ()=>CopyShader
);
/**
 * Full-screen textured quad shader
 */ var CopyShader = {
    uniforms: {
        'tDiffuse': {
            value: null
        },
        'opacity': {
            value: 1
        }
    },
    vertexShader: /* glsl */ `

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,
    fragmentShader: /* glsl */ `

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;

		}`
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4bjki":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ShaderPass", ()=>ShaderPass
);
var _three = require("three");
var _passJs = require("./Pass.js");
class ShaderPass extends _passJs.Pass {
    constructor(shader, textureID){
        super();
        this.textureID = textureID !== undefined ? textureID : 'tDiffuse';
        if (shader instanceof _three.ShaderMaterial) {
            this.uniforms = shader.uniforms;
            this.material = shader;
        } else if (shader) {
            this.uniforms = _three.UniformsUtils.clone(shader.uniforms);
            this.material = new _three.ShaderMaterial({
                defines: Object.assign({
                }, shader.defines),
                uniforms: this.uniforms,
                vertexShader: shader.vertexShader,
                fragmentShader: shader.fragmentShader
            });
        }
        this.fsQuad = new _passJs.FullScreenQuad(this.material);
    }
    render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {
        if (this.uniforms[this.textureID]) this.uniforms[this.textureID].value = readBuffer.texture;
        this.fsQuad.material = this.material;
        if (this.renderToScreen) {
            renderer.setRenderTarget(null);
            this.fsQuad.render(renderer);
        } else {
            renderer.setRenderTarget(writeBuffer);
            // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
            if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
            this.fsQuad.render(renderer);
        }
    }
}

},{"three":"64dkv","./Pass.js":"g6Fr5","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"g6Fr5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Pass", ()=>Pass
);
parcelHelpers.export(exports, "FullScreenQuad", ()=>FullScreenQuad
);
var _three = require("three");
class Pass {
    constructor(){
        // if set to true, the pass is processed by the composer
        this.enabled = true;
        // if set to true, the pass indicates to swap read and write buffer after rendering
        this.needsSwap = true;
        // if set to true, the pass clears its buffer before rendering
        this.clear = false;
        // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.
        this.renderToScreen = false;
    }
    setSize() {
    }
    render() {
        console.error('THREE.Pass: .render() must be implemented in derived pass.');
    }
}
// Helper for passes that need to fill the viewport with a single quad.
const _camera = new _three.OrthographicCamera(-1, 1, 1, -1, 0, 1);
// https://github.com/mrdoob/three.js/pull/21358
const _geometry = new _three.BufferGeometry();
_geometry.setAttribute('position', new _three.Float32BufferAttribute([
    -1,
    3,
    0,
    -1,
    -1,
    0,
    3,
    -1,
    0
], 3));
_geometry.setAttribute('uv', new _three.Float32BufferAttribute([
    0,
    2,
    0,
    0,
    2,
    0
], 2));
class FullScreenQuad {
    constructor(material){
        this._mesh = new _three.Mesh(_geometry, material);
    }
    dispose() {
        this._mesh.geometry.dispose();
    }
    render(renderer) {
        renderer.render(this._mesh, _camera);
    }
    get material() {
        return this._mesh.material;
    }
    set material(value) {
        this._mesh.material = value;
    }
}

},{"three":"64dkv","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"kKPUM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MaskPass", ()=>MaskPass
);
parcelHelpers.export(exports, "ClearMaskPass", ()=>ClearMaskPass
);
var _passJs = require("./Pass.js");
class MaskPass extends _passJs.Pass {
    constructor(scene, camera){
        super();
        this.scene = scene;
        this.camera = camera;
        this.clear = true;
        this.needsSwap = false;
        this.inverse = false;
    }
    render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {
        const context = renderer.getContext();
        const state = renderer.state;
        // don't update color or depth
        state.buffers.color.setMask(false);
        state.buffers.depth.setMask(false);
        // lock buffers
        state.buffers.color.setLocked(true);
        state.buffers.depth.setLocked(true);
        // set up stencil
        let writeValue, clearValue;
        if (this.inverse) {
            writeValue = 0;
            clearValue = 1;
        } else {
            writeValue = 1;
            clearValue = 0;
        }
        state.buffers.stencil.setTest(true);
        state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);
        state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 4294967295);
        state.buffers.stencil.setClear(clearValue);
        state.buffers.stencil.setLocked(true);
        // draw into the stencil buffer
        renderer.setRenderTarget(readBuffer);
        if (this.clear) renderer.clear();
        renderer.render(this.scene, this.camera);
        renderer.setRenderTarget(writeBuffer);
        if (this.clear) renderer.clear();
        renderer.render(this.scene, this.camera);
        // unlock color and depth buffer for subsequent rendering
        state.buffers.color.setLocked(false);
        state.buffers.depth.setLocked(false);
        // only render where stencil is set to 1
        state.buffers.stencil.setLocked(false);
        state.buffers.stencil.setFunc(context.EQUAL, 1, 4294967295); // draw if == 1
        state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);
        state.buffers.stencil.setLocked(true);
    }
}
class ClearMaskPass extends _passJs.Pass {
    constructor(){
        super();
        this.needsSwap = false;
    }
    render(renderer1 /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {
        renderer1.state.buffers.stencil.setLocked(false);
        renderer1.state.buffers.stencil.setTest(false);
    }
}

},{"./Pass.js":"g6Fr5","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"cmnLK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _three = require("three");
var _constants = require("./common/constants");
var _settings = require("./settings");
var _settingsDefault = parcelHelpers.interopDefault(_settings);
var _maps = require("./common/maps");
const getCameraPosition = (frame)=>{
    const baseHeight = _constants.HALF_PI;
    const baseAngle = _constants.PI + _constants.QUARTER_PI;
    const highHeight = _constants.EIGHTH_PI;
    const leftAngle = baseAngle - _constants.EIGHTH_PI;
    const rightAngle = baseAngle + _constants.EIGHTH_PI;
    const frameSegments = [
        0 * _settings.watchTowerLength,
        0.9 * _settings.watchTowerLength,
        1 * _settings.watchTowerLength,
        1.9 * _settings.watchTowerLength,
        2 * _settings.watchTowerLength,
        2.9 * _settings.watchTowerLength,
        3 * _settings.watchTowerLength,
        3.9 * _settings.watchTowerLength,
        4 * _settings.watchTowerLength, 
    ];
    const xSegments = [
        rightAngle,
        rightAngle,
        leftAngle,
        leftAngle,
        rightAngle,
        rightAngle,
        leftAngle,
        leftAngle,
        rightAngle, 
    ];
    const ySegments = [
        baseHeight,
        baseHeight,
        baseHeight,
        baseHeight,
        highHeight,
        highHeight,
        highHeight,
        highHeight,
        baseHeight, 
    ];
    return new _three.Vector3().setFromSphericalCoords(6, _maps.segmentedMap(frame % _settingsDefault.default.cycleLength, frameSegments, ySegments), _maps.segmentedMap(frame % _settingsDefault.default.cycleLength, frameSegments, xSegments));
};
exports.default = getCameraPosition;

},{"three":"64dkv","./common/constants":"5al57","./settings":"6v8AY","./common/maps":"iTGDB","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"4a7v8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RenderPass", ()=>RenderPass
);
var _three = require("three");
var _passJs = require("./Pass.js");
class RenderPass extends _passJs.Pass {
    constructor(scene, camera, overrideMaterial, clearColor, clearAlpha){
        super();
        this.scene = scene;
        this.camera = camera;
        this.overrideMaterial = overrideMaterial;
        this.clearColor = clearColor;
        this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;
        this.clear = true;
        this.clearDepth = false;
        this.needsSwap = false;
        this._oldClearColor = new _three.Color();
    }
    render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {
        const oldAutoClear = renderer.autoClear;
        renderer.autoClear = false;
        let oldClearAlpha, oldOverrideMaterial;
        if (this.overrideMaterial !== undefined) {
            oldOverrideMaterial = this.scene.overrideMaterial;
            this.scene.overrideMaterial = this.overrideMaterial;
        }
        if (this.clearColor) {
            renderer.getClearColor(this._oldClearColor);
            oldClearAlpha = renderer.getClearAlpha();
            renderer.setClearColor(this.clearColor, this.clearAlpha);
        }
        if (this.clearDepth) renderer.clearDepth();
        renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);
        // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600
        if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
        renderer.render(this.scene, this.camera);
        if (this.clearColor) renderer.setClearColor(this._oldClearColor, oldClearAlpha);
        if (this.overrideMaterial !== undefined) this.scene.overrideMaterial = oldOverrideMaterial;
        renderer.autoClear = oldAutoClear;
    }
}

},{"three":"64dkv","./Pass.js":"g6Fr5","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"gYhRn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basicVertexShaderGlsl = require("./basicVertexShader.glsl");
var _basicVertexShaderGlslDefault = parcelHelpers.interopDefault(_basicVertexShaderGlsl);
var _changeHueGlsl = require("./changeHue.glsl");
var _changeHueGlslDefault = parcelHelpers.interopDefault(_changeHueGlsl);
var _detectEdgesGlsl = require("./detectEdges.glsl");
var _detectEdgesGlslDefault = parcelHelpers.interopDefault(_detectEdgesGlsl);
exports.default = {
    basicVertexShader: _basicVertexShaderGlslDefault.default,
    changeHue: _changeHueGlslDefault.default,
    detectEdges: _detectEdgesGlslDefault.default
};

},{"./basicVertexShader.glsl":"8dKSn","./changeHue.glsl":"mcA1N","./detectEdges.glsl":"lfejK","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"8dKSn":[function(require,module,exports) {
module.exports = "#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n    gl_Position = vec4( position.xy, 1.0, 1.0 );\n}\n";

},{}],"mcA1N":[function(require,module,exports) {
module.exports = "#define GLSLIFY 1\nuniform sampler2D tDiffuse;\nuniform float hueAdjustment;\nvarying vec2 vUv;\n\n// https://stackoverflow.com/a/17897228/4004986\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main() {\n\tvec4 originalRGB = texture2D(tDiffuse, vUv);\n\tvec3 hsv = rgb2hsv(originalRGB.xyz);\n\tfloat hue = hsv.x + hueAdjustment;\n\tvec3 rgb = hsv2rgb(vec3(hue, hsv.yz));\n\tgl_FragColor = vec4(rgb, originalRGB.a);\n\n}\n";

},{}],"lfejK":[function(require,module,exports) {
module.exports = "#define GLSLIFY 1\n#define PI 3.1415926538\n#define tolerance 0.0001\n\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\n\nuniform float radius;\nuniform vec4 outlineColor;\nuniform float skipAlpha;\n\nvoid main() {\n\tvec4 color = texture2D(tDiffuse, vUv);\n\n\tfor (int n = 0; n <= 11; ++n) {\n\t\tfloat angle = 2.0 * PI * float(n) / 12.0;\n\t\tvec2 comparePt = vUv + vec2(radius * cos(angle), radius * sin(angle));\n\t\tvec4 compareColor = texture2D(tDiffuse, comparePt);\n\n\t\tif (color.a != skipAlpha && compareColor.a != skipAlpha && abs(color.a - compareColor.a) > tolerance) {\n\t\t\tgl_FragColor = outlineColor;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (color.a == 0.0) {\n\t\tgl_FragColor = color;\n\t\treturn;\n\t}\n\n\tgl_FragColor = vec4(color.rgb, 1.0);\n}\n";

},{}]},["2HtCd","7PGg5"], "7PGg5", "parcelRequire054e")

//# sourceMappingURL=index.bdea7d65.js.map
